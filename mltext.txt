 our parents:Alison and Michael JamesChiara Nappi and Edward WittenValerie and Patrick HastieVera and Sami TibshiraniJohn and Brenda Taylorand to our families:Michael, Daniel, and CatherineTessa, Theo, Otto, and AriSamantha, Timothy, and LyndaCharlie, Ryan, Julie, and CherylLee-Ann and IsobelPreface
Statistical learning refers to a set of tools for making sense of complex
datasets. In recent years, we have seen a staggering increase in the scale and
scope of data collection across virtually all areas of science and industry.
As a result, statistical learning has become a critical toolkit for anyone who
wishes to understand data — and as more and more of today’s jobs involve
data, this means that statistical learning is fast becoming a critical toolkit
foreveryone .
One of the first books on statistical learning — The Elements of Statisti-
cal Learning (ESL, by Hastie, Tibshirani, and Friedman) — was published
in 2001, with a second edition in 2009. ESL has become a popular text not
only in statistics but also in related fields. One of the reasons for ESL’s
popularity is its relatively accessible style. But ESL is best-suited for indi-
viduals with advanced training in the mathematical sciences.
An Introduction to Statistical Learning, With Applications in R (ISLR)
— first published in 2013, with a second edition in 2021 — arose from
the clear need for a broader and less technical treatment of the key topics
in statistical learning. In addition to a review of linear regression, ISLR
covers many of today’s most important statistical and machine learning
approaches, including resampling, sparse methods for classification and re-
gression, generalized additive models, tree-based methods, support vector
machines, deep learning, survival analysis, clustering, and multiple testing.
Since it was published in 2013, ISLR has become a mainstay of un-
dergraduate and graduate classrooms worldwide, as well as an important
reference book for data scientists. One of the keys to its success has been
that, beginning with Chapter 2, each chapter contains an Rlab illustrating
how to implement the statistical learning methods seen in that chapter,
providing the reader with valuable hands-on experience.
However, in recent years Pythonhas become an increasingly popular lan-
guage for data science, and there has been increasing demand for a Python-
viiviiibased alternative to ISLR. Hence, this book,An Introduction to StatisticalLearning, With Applications in Python(ISLP), covers the same materialsas ISLR but with labs implemented inPython— a feat accomplished by theaddition of a new co-author, Jonathan Taylor. Several of the labs make useof theISLP Pythonpackage, which we have written to facilitate carrying outthe statistical learning methods covered in each chapter inPython. Theselabs will be useful both forPythonnovices, as well as experienced users.The intention behind ISLP (and ISLR) is to concentrate more on theapplications of the methods and less on the mathematical details, so it isappropriate for advanced undergraduates or master’s students in statisticsor related quantitative fields, or for individuals in other disciplines whowish to use statistical learning tools to analyze their data. It can be usedas a textbook for a course spanning two semesters.We are grateful to these readers for providing valuable comments on thefirst edition of ISLR: Pallavi Basu, Alexandra Chouldechova, Patrick Dana-her, Will Fithian, Luella Fu, Sam Gross, Max Grazier G’Sell, CourtneyPaulson, Xinghao Qiao, Elisa Sheng, Noah Simon, Kean Ming Tan, Xin Agresti, Iain Carmichael, Yiqun Chen, Erin Craig, Daisy Ding, LucyGao, Ismael Lemhadri, Bryan Martin, Anna Neufeld, Geoff Tims, CarstenVoelkmann, Steve Yadlowsky, and James Zou. We are immensely gratefulto Balasubramanian “Naras” Narasimhan for his assistance on both ISLRand ISLP.It has been an honor and a privilege for us to see the considerable and out of the academic setting. We hope that this newPythoneditionwill continue to give today’s and tomorrow’s applied statisticians and datascientists the tools they need for success in a data-driven world.It’s tough to make predictions, especially about the future.-Yogi BerraPrefaceContents
Preface vii
1 Introduction 1
2 Statistical Learning 15
2.1 What Is Statistical Learning? . . . . . . . . . . . . . . . . . 15
2.1.1 Why Estimate f? . . . . . . . . . . . . . . . . . . . 17
2.1.2 How Do We Estimate f? . . . . . . . . . . . . . . . 20
2.1.3 The Trade-Off Between Prediction Accuracy
and Model Interpretability . . . . . . . . . . . . . . 23
2.1.4 Supervised Versus Unsupervised Learning . . . . . 25
2.1.5 Regression Versus Classification Problems . . . . . 27
2.2 Assessing Model Accuracy . . . . . . . . . . . . . . . . . . 27
2.2.1 Measuring the Quality of Fit . . . . . . . . . . . . 28
2.2.2 The Bias-Variance Trade-Off . . . . . . . . . . . . . 31
2.2.3 The Classification Setting . . . . . . . . . . . . . . 34
2.3 Lab: Introduction to Python . . . . . . . . . . . . . . . . . 40
2.3.1 Getting Started . . . . . . . . . . . . . . . . . . . . 40
2.3.2 Basic Commands . . . . . . . . . . . . . . . . . . . 40
2.3.3 Introduction to Numerical Python . . . . . . . . . 42
2.3.4 Graphics . . . . . . . . . . . . . . . . . . . . . . . . 48
2.3.5 Sequences and Slice Notation . . . . . . . . . . . . 51
2.3.6 Indexing Data . . . . . . . . . . . . . . . . . . . . . 51
2.3.7 Loading Data . . . . . . . . . . . . . . . . . . . . . 55
2.3.8 For Loops . . . . . . . . . . . . . . . . . . . . . . . 59
2.3.9 Additional Graphical and Numerical Summaries . . 61
2.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
3 Linear Regression 69
3.1 Simple Linear Regression . . . . . . . . . . . . . . . . . . . 70
3.1.1 Estimating the Coefficients . . . . . . . . . . . . . 71
3.1.2 Assessing the Accuracy of the Coefficient
Estimates . . . . . . . . . . . . . . . . . . . . . . . 72
3.1.3 Assessing the Accuracy of the Model . . . . . . . . 77
3.2 Multiple Linear Regression . . . . . . . . . . . . . . . . . . 80
3.2.1 Estimating the Regression Coefficients . . . . . . . 81
ixx Contents
3.2.2 Some Important Questions . . . . . . . . . . . . . . 83
3.3 Other Considerations in the Regression Model . . . . . . . 91
3.3.1 Qualitative Predictors . . . . . . . . . . . . . . . . 91
3.3.2 Extensions of the Linear Model . . . . . . . . . . . 94
3.3.3 Potential Problems . . . . . . . . . . . . . . . . . . 100
3.4 The Marketing Plan . . . . . . . . . . . . . . . . . . . . . . 109
3.5 Comparison of Linear Regression with K-Nearest
Neighbors . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
3.6 Lab: Linear Regression . . . . . . . . . . . . . . . . . . . . 116
3.6.1 Importing packages . . . . . . . . . . . . . . . . . . 116
3.6.2 Simple Linear Regression . . . . . . . . . . . . . . . 117
3.6.3 Multiple Linear Regression . . . . . . . . . . . . . . 122
3.6.4 Multivariate Goodness of Fit . . . . . . . . . . . . 123
3.6.5 Interaction Terms . . . . . . . . . . . . . . . . . . . 124
3.6.6 Non-linear Transformations of the Predictors . . . 125
3.6.7 Qualitative Predictors . . . . . . . . . . . . . . . . 126
3.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
4 Classification 135
4.1 An Overview of Classification . . . . . . . . . . . . . . . . . 135
4.2 Why Not Linear Regression? . . . . . . . . . . . . . . . . . 136
4.3 Logistic Regression . . . . . . . . . . . . . . . . . . . . . . 138
4.3.1 The Logistic Model . . . . . . . . . . . . . . . . . . 139
4.3.2 Estimating the Regression Coefficients . . . . . . . 140
4.3.3 Making Predictions . . . . . . . . . . . . . . . . . . 141
4.3.4 Multiple Logistic Regression . . . . . . . . . . . . . 142
4.3.5 Multinomial Logistic Regression . . . . . . . . . . . 144
4.4 Generative Models for Classification . . . . . . . . . . . . . 146
4.4.1 Linear Discriminant Analysis for p=1 . . . . . . . 147
4.4.2 Linear Discriminant Analysis for p>1 . . . . . . . 150
4.4.3 Quadratic Discriminant Analysis . . . . . . . . . . 156
4.4.4 Naive Bayes . . . . . . . . . . . . . . . . . . . . . . 158
4.5 A Comparison of Classification Methods . . . . . . . . . . 161
4.5.1 An Analytical Comparison . . . . . . . . . . . . . . 161
4.5.2 An Empirical Comparison . . . . . . . . . . . . . . 164
4.6 Generalized Linear Models . . . . . . . . . . . . . . . . . . 167
4.6.1 Linear Regression on the Bikeshare Data . . . . . . 167
4.6.2 Poisson Regression on the Bikeshare Data . . . . . 169
4.6.3 Generalized Linear Models in Greater Generality . 172
4.7 Lab: Logistic Regression, LDA, QDA, and KNN . . . . . . 173
4.7.1 The Stock Market Data . . . . . . . . . . . . . . . 173
4.7.2 Logistic Regression . . . . . . . . . . . . . . . . . . 174
4.7.3 Linear Discriminant Analysis . . . . . . . . . . . . 179
4.7.4 Quadratic Discriminant Analysis . . . . . . . . . . 181
4.7.5 Naive Bayes . . . . . . . . . . . . . . . . . . . . . . 182
4.7.6 K-Nearest Neighbors . . . . . . . . . . . . . . . . . 183
4.7.7 Linear and Poisson Regression on the Bikeshare Data188
4.8 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193Contents xi
5 Resampling Methods 201
5.1 Cross-Validation . . . . . . . . . . . . . . . . . . . . . . . . 202
5.1.1 The Validation Set Approach . . . . . . . . . . . . 202
5.1.2 Leave-One-Out Cross-Validation . . . . . . . . . . 204
5.1.3k-Fold Cross-Validation . . . . . . . . . . . . . . . 206
5.1.4 Bias-Variance Trade-Off for k-Fold
Cross-Validation . . . . . . . . . . . . . . . . . . . 208
5.1.5 Cross-Validation on Classification Problems . . . . 209
5.2 The Bootstrap . . . . . . . . . . . . . . . . . . . . . . . . . 212
5.3 Lab: Cross-Validation and the Bootstrap . . . . . . . . . . 215
5.3.1 The Validation Set Approach . . . . . . . . . . . . 216
5.3.2 Cross-Validation . . . . . . . . . . . . . . . . . . . 217
5.3.3 The Bootstrap . . . . . . . . . . . . . . . . . . . . 220
5.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
6 Linear Model Selection and Regularization 229
6.1 Subset Selection . . . . . . . . . . . . . . . . . . . . . . . . 231
6.1.1 Best Subset Selection . . . . . . . . . . . . . . . . . 231
6.1.2 Stepwise Selection . . . . . . . . . . . . . . . . . . 233
6.1.3 Choosing the Optimal Model . . . . . . . . . . . . 235
6.2 Shrinkage Methods . . . . . . . . . . . . . . . . . . . . . . 240
6.2.1 Ridge Regression . . . . . . . . . . . . . . . . . . . 240
6.2.2 The Lasso . . . . . . . . . . . . . . . . . . . . . . . 244
6.2.3 Selecting the Tuning Parameter . . . . . . . . . . . 252
6.3 Dimension Reduction Methods . . . . . . . . . . . . . . . . 253
6.3.1 Principal Components Regression . . . . . . . . . . 254
6.3.2 Partial Least Squares . . . . . . . . . . . . . . . . . 260
6.4 Considerations in High Dimensions . . . . . . . . . . . . . 262
6.4.1 High-Dimensional Data . . . . . . . . . . . . . . . . 262
6.4.2 What Goes Wrong in High Dimensions? . . . . . . 263
6.4.3 Regression in High Dimensions . . . . . . . . . . . 265
6.4.4 Interpreting Results in High Dimensions . . . . . . 266
6.5 Lab: Linear Models and Regularization Methods . . . . . . 267
6.5.1 Subset Selection Methods . . . . . . . . . . . . . . 268
6.5.2 Ridge Regression and the Lasso . . . . . . . . . . . 273
6.5.3 PCR and PLS Regression . . . . . . . . . . . . . . 280
6.6 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
7 Moving Beyond Linearity 289
7.1 Polynomial Regression . . . . . . . . . . . . . . . . . . . . . 290
7.2 Step Functions . . . . . . . . . . . . . . . . . . . . . . . . . 292
7.3 Basis Functions . . . . . . . . . . . . . . . . . . . . . . . . 293
7.4 Regression Splines . . . . . . . . . . . . . . . . . . . . . . . 294
7.4.1 Piecewise Polynomials . . . . . . . . . . . . . . . . 294
7.4.2 Constraints and Splines . . . . . . . . . . . . . . . 296
7.4.3 The Spline Basis Representation . . . . . . . . . . 296
7.4.4 Choosing the Number and Locations
of the Knots . . . . . . . . . . . . . . . . . . . . . . 297
7.4.5 Comparison to Polynomial Regression . . . . . . . 299xii Contents
7.5 Smoothing Splines . . . . . . . . . . . . . . . . . . . . . . . 300
7.5.1 An Overview of Smoothing Splines . . . . . . . . . 300
7.5.2 Choosing the Smoothing Parameter λ. . . . . . . 301
7.6 Local Regression . . . . . . . . . . . . . . . . . . . . . . . . 303
7.7 Generalized Additive Models . . . . . . . . . . . . . . . . . 305
7.7.1 GAMs for Regression Problems . . . . . . . . . . . 306
7.7.2 GAMs for Classification Problems . . . . . . . . . . 308
7.8 Lab: Non-Linear Modeling . . . . . . . . . . . . . . . . . . 309
7.8.1 Polynomial Regression and Step Functions . . . . . 310
7.8.2 Splines . . . . . . . . . . . . . . . . . . . . . . . . . 315
7.8.3 Smoothing Splines and GAMs . . . . . . . . . . . . 317
7.8.4 Local Regression . . . . . . . . . . . . . . . . . . . 324
7.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325
8 Tree-Based Methods 331
8.1 The Basics of Decision Trees . . . . . . . . . . . . . . . . . 331
8.1.1 Regression Trees . . . . . . . . . . . . . . . . . . . 331
8.1.2 Classification Trees . . . . . . . . . . . . . . . . . . 337
8.1.3 Trees Versus Linear Models . . . . . . . . . . . . . 341
8.1.4 Advantages and Disadvantages of Trees . . . . . . . 341
8.2 Bagging, Random Forests, Boosting, and Bayesian Additive
Regression Trees . . . . . . . . . . . . . . . . . . . . . . . . 343
8.2.1 Bagging . . . . . . . . . . . . . . . . . . . . . . . . 343
8.2.2 Random Forests . . . . . . . . . . . . . . . . . . . . 346
8.2.3 Boosting . . . . . . . . . . . . . . . . . . . . . . . . 347
8.2.4 Bayesian Additive Regression Trees . . . . . . . . . 350
8.2.5 Summary of Tree Ensemble Methods . . . . . . . . 353
8.3 Lab: Tree-Based Methods . . . . . . . . . . . . . . . . . . . 354
8.3.1 Fitting Classification Trees . . . . . . . . . . . . . . 355
8.3.2 Fitting Regression Trees . . . . . . . . . . . . . . . 358
8.3.3 Bagging and Random Forests . . . . . . . . . . . . 360
8.3.4 Boosting . . . . . . . . . . . . . . . . . . . . . . . . 361
8.3.5 Bayesian Additive Regression Trees . . . . . . . . . 362
8.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
9 Support Vector Machines 367
9.1 Maximal Margin Classifier . . . . . . . . . . . . . . . . . . 367
9.1.1 What Is a Hyperplane? . . . . . . . . . . . . . . . . 368
9.1.2 Classification Using a Separating Hyperplane . . . 368
9.1.3 The Maximal Margin Classifier . . . . . . . . . . . 370
9.1.4 Construction of the Maximal Margin Classifier . . 372
9.1.5 The Non-separable Case . . . . . . . . . . . . . . . 372
9.2 Support Vector Classifiers . . . . . . . . . . . . . . . . . . . 373
9.2.1 Overview of the Support Vector Classifier . . . . . 373
9.2.2 Details of the Support Vector Classifier . . . . . . . 374
9.3 Support Vector Machines . . . . . . . . . . . . . . . . . . . 377
9.3.1 Classification with Non-Linear Decision
Boundaries . . . . . . . . . . . . . . . . . . . . . . 378
9.3.2 The Support Vector Machine . . . . . . . . . . . . 379Contents xiii
9.3.3 An Application to the Heart Disease Data . . . . . 382
9.4 SVMs with More than Two Classes . . . . . . . . . . . . . 383
9.4.1 One-Versus-One Classification . . . . . . . . . . . . 384
9.4.2 One-Versus-All Classification . . . . . . . . . . . . 384
9.5 Relationship to Logistic Regression . . . . . . . . . . . . . 384
9.6 Lab: Support Vector Machines . . . . . . . . . . . . . . . . 387
9.6.1 Support Vector Classifier . . . . . . . . . . . . . . . 387
9.6.2 Support Vector Machine . . . . . . . . . . . . . . . 390
9.6.3 ROC Curves . . . . . . . . . . . . . . . . . . . . . . 392
9.6.4 SVM with Multiple Classes . . . . . . . . . . . . . 393
9.6.5 Application to Gene Expression Data . . . . . . . . 394
9.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
10 Deep Learning 399
10.1 Single Layer Neural Networks . . . . . . . . . . . . . . . . 400
10.2 Multilayer Neural Networks . . . . . . . . . . . . . . . . . . 402
10.3 Convolutional Neural Networks . . . . . . . . . . . . . . . . 406
10.3.1 Convolution Layers . . . . . . . . . . . . . . . . . . 407
10.3.2 Pooling Layers . . . . . . . . . . . . . . . . . . . . 410
10.3.3 Architecture of a Convolutional Neural Network . . 410
10.3.4 Data Augmentation . . . . . . . . . . . . . . . . . . 411
10.3.5 Results Using a Pretrained Classifier . . . . . . . . 412
10.4 Document Classification . . . . . . . . . . . . . . . . . . . . 413
10.5 Recurrent Neural Networks . . . . . . . . . . . . . . . . . . 416
10.5.1 Sequential Models for Document Classification . . 418
10.5.2 Time Series Forecasting . . . . . . . . . . . . . . . 420
10.5.3 Summary of RNNs . . . . . . . . . . . . . . . . . . 424
10.6 When to Use Deep Learning . . . . . . . . . . . . . . . . . 425
10.7 Fitting a Neural Network . . . . . . . . . . . . . . . . . . . 427
10.7.1 Backpropagation . . . . . . . . . . . . . . . . . . . 428
10.7.2 Regularization and Stochastic Gradient Descent . . 429
10.7.3 Dropout Learning . . . . . . . . . . . . . . . . . . . 431
10.7.4 Network Tuning . . . . . . . . . . . . . . . . . . . . 431
10.8 Interpolation and Double Descent . . . . . . . . . . . . . . 432
10.9 Lab: Deep Learning . . . . . . . . . . . . . . . . . . . . . . 435
10.9.1 Single Layer Network on Hitters Data . . . . . . . 437
10.9.2 Multilayer Network on the MNIST Digit Data . . . 444
10.9.3 Convolutional Neural Networks . . . . . . . . . . . 448
10.9.4 Using Pretrained CNN Models . . . . . . . . . . . 452
10.9.5 IMDB Document Classification . . . . . . . . . . . 454
10.9.6 Recurrent Neural Networks . . . . . . . . . . . . . 458
10.10 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465
11 Survival Analysis and Censored Data 469
11.1 Survival and Censoring Times . . . . . . . . . . . . . . . . 470
11.2 A Closer Look at Censoring . . . . . . . . . . . . . . . . . . 470
11.3 The Kaplan–Meier Survival Curve . . . . . . . . . . . . . . 472
11.4 The Log-Rank Test . . . . . . . . . . . . . . . . . . . . . . 474
11.5 Regression Models With a Survival Response . . . . . . . . 476xiv Contents
11.5.1 The Hazard Function . . . . . . . . . . . . . . . . . 476
11.5.2 Proportional Hazards . . . . . . . . . . . . . . . . . 478
11.5.3 Example: Brain Cancer Data . . . . . . . . . . . . 482
11.5.4 Example: Publication Data . . . . . . . . . . . . . 482
11.6 Shrinkage for the Cox Model . . . . . . . . . . . . . . . . . 484
11.7 Additional Topics . . . . . . . . . . . . . . . . . . . . . . . 486
11.7.1 Area Under the Curve for Survival Analysis . . . . 486
11.7.2 Choice of Time Scale . . . . . . . . . . . . . . . . . 487
11.7.3 Time-Dependent Covariates . . . . . . . . . . . . . 488
11.7.4 Checking the Proportional Hazards Assumption . . 488
11.7.5 Survival Trees . . . . . . . . . . . . . . . . . . . . . 488
11.8 Lab: Survival Analysis . . . . . . . . . . . . . . . . . . . . . 489
11.8.1 Brain Cancer Data . . . . . . . . . . . . . . . . . . 489
11.8.2 Publication Data . . . . . . . . . . . . . . . . . . . 493
11.8.3 Call Center Data . . . . . . . . . . . . . . . . . . . 494
11.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498
12 Unsupervised Learning 503
12.1 The Challenge of Unsupervised Learning . . . . . . . . . . 503
12.2 Principal Components Analysis . . . . . . . . . . . . . . . . 504
12.2.1 What Are Principal Components? . . . . . . . . . . 505
12.2.2 Another Interpretation of Principal Components . 508
12.2.3 The Proportion of Variance Explained . . . . . . . 510
12.2.4 More on PCA . . . . . . . . . . . . . . . . . . . . . 512
12.2.5 Other Uses for Principal Components . . . . . . . . 515
12.3 Missing Values and Matrix Completion . . . . . . . . . . . 515
12.4 Clustering Methods . . . . . . . . . . . . . . . . . . . . . . 520
12.4.1K-Means Clustering . . . . . . . . . . . . . . . . . 521
12.4.2 Hierarchical Clustering . . . . . . . . . . . . . . . . 525
12.4.3 Practical Issues in Clustering . . . . . . . . . . . . 532
12.5 Lab: Unsupervised Learning . . . . . . . . . . . . . . . . . 535
12.5.1 Principal Components Analysis . . . . . . . . . . . 535
12.5.2 Matrix Completion . . . . . . . . . . . . . . . . . . 539
12.5.3 Clustering . . . . . . . . . . . . . . . . . . . . . . . 542
12.5.4 NCI60 Data Example . . . . . . . . . . . . . . . . . 546
12.6 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552
13 Multiple Testing 557
13.1 A Quick Review of Hypothesis Testing . . . . . . . . . . . 558
13.1.1 Testing a Hypothesis . . . . . . . . . . . . . . . . . 558
13.1.2 Type I and Type II Errors . . . . . . . . . . . . . . 562
13.2 The Challenge of Multiple Testing . . . . . . . . . . . . . . 563
13.3 The Family-Wise Error Rate . . . . . . . . . . . . . . . . . 565
13.3.1 What is the Family-Wise Error Rate? . . . . . . . 565
13.3.2 Approaches to Control the Family-Wise Error Rate 567
13.3.3 Trade-Off Between the FWER and Power . . . . . 572
13.4 The False Discovery Rate . . . . . . . . . . . . . . . . . . . 573
13.4.1 Intuition for the False Discovery Rate . . . . . . . 573
13.4.2 The Benjamini–Hochberg Procedure . . . . . . . . 575Contents xv
13.5 A Re-Sampling Approach to p-Values and False Discovery
Rates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 577
13.5.1 A Re-Sampling Approach to the p-Value . . . . . . 578
13.5.2 A Re-Sampling Approach to the False Discovery Rate579
13.5.3 When Are Re-Sampling Approaches Useful? . . . . 581
13.6 Lab: Multiple Testing . . . . . . . . . . . . . . . . . . . . . 583
13.6.1 Review of Hypothesis Tests . . . . . . . . . . . . . 583
13.6.2 Family-Wise Error Rate . . . . . . . . . . . . . . . 585
13.6.3 False Discovery Rate . . . . . . . . . . . . . . . . . 588
13.6.4 A Re-Sampling Approach . . . . . . . . . . . . . . 590
13.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 593
Index 5971
Introduction
An Overview of Statistical Learning
Statistical learning referstoavastsetoftoolsfor understanding data .These
tools can be classified as supervised orunsupervised . Broadly speaking,
supervised statistical learning involves building a statistical model for pre-
dicting, or estimating, an outputbased on one or more inputs. Problems policy. With unsupervised statistical learning, there are inputs but
no supervising output; nevertheless we can learn relationships and struc-
ture from such data. To provide an illustration of some applications of
statistical learning, we briefly discuss three real-world data sets that are
considered in this book.
Wage Data
In this application (which we refer to as the Wagedata set throughout this
book), we examine a number of factors that relate to wages for a group of
men from the Atlantic region of the United States. In particular, we wish
to understand the association between an employee’s ageandeducation , as
well as the calendar year, on his wage. Consider, for example, the left-hand
panel of Figure 1.1, which displays wageversusagefor each of the individu-
als in the data set. There is evidence that wageincreases with agebut then
decreases again after approximately age 60. The blue line, which provides
an estimate of the average wagefor a given age, makes this trend clearer.
Given an employee’s age, we can use this curve to predicthiswage. However,
it is also clear from Figure 1.1that there is a significant amount of vari-
ability associated with this average value, and so agealone is unlikely to
provide an accurate prediction of a particular man’s wage.
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_1  12 1. Introduction
20 40 60 8050 100 200 300AgeWage2003 2006 200950 100 200 300YearWage1234550 100 200 300Education LevelWage
FIGURE 1.1. Wagedata, which contains income survey information for men
from the central Atlantic region of the United States. Left:wageas a function of
age. On average, wageincreases with ageuntil about 60years of age, at which
point it begins to decline. Center:wageas a function of year. There is a slow
but steady increase of approximately $10,000in the average wagebetween 2003
and2009.Right:Boxplots displaying wageas a function of education , with1
indicating the lowest level (no high school diploma) and 5the highest level (an
advanced graduate degree). On average, wageincreases with the level of education.
We also have information regarding each employee’s education level and
theyearin which the wagewas earned. The center and right-hand panels
of Figure 1.1, which display wageas a function of both yearandeducation ,
indicate that both of these factors are associated with wage. Wages increase
by approximately $10,000, in a roughly linear (or straight-line) fashion,
between 2003 and2009 , though this rise is very slight relative to the vari-
ability in the data. Wages are also typically greater for individuals with
higher education levels: men with the lowest education level (1) tend to
have substantially lower wages than those with the highest education level
(5). Clearly, the most accurate prediction of a given man’s wagewill be
obtained by combining his age, hiseducation , and the year. In Chapter 3,
we discuss linear regression, which can be used to predict wagefrom this
data set. Ideally, we should predict wagein a way that accounts for the
non-linear relationship between wageandage. In Chapter 7, we discuss a
class of approaches for addressing this problem.
Stock Market Data
TheWagedatainvolvespredictinga continuous orquantitative outputvalue.
This is often referred to as a regression problem. However, in certain categorical
orqualitative output. For example, in Chapter 4we examine a stock market
data set that contains the daily movements in the Standard & Poor’s 500
(S&P) stock index over a 5-year period between 2001 and2005 . We refer
to this as the Smarketdata. The goal is to predict whether the index will
increase ordecrease on a given day, using the past 5 days’ percentage
changes in the index. Here the statistical learning problem does not involve
predicting a numerical value. Instead it involves predicting whether a given1. Introduction 3
Down Up−4 −2 0 2 4 6Yesterday
Today’s DirectionPercentage change in S&PDown Up−4 −2 0 2 4 6Two Days Previous
Today’s DirectionPercentage change in S&PDown Up−4 −2 0 2 4 6Three Days Previous
Today’s DirectionPercentage change in S&P
FIGURE 1.2. Left:Boxplots of the previous day’s percentage change in the S&P
index for the days for which the market increased or decreased, obtained from the
Smarket data.Center and Right: Same as left panel, but the percentage changes
for 2 and 3 days previous are shown.
day’s stock market performance will fall into the Upbucket or the Down
bucket. This is known as a classification problem. A model that could
accurately predict the direction in which the market will move would be
very useful!
The left-hand panel of Figure 1.2displays two boxplots of the previous
day’s percentage changes in the stock index: one for the 648days for which
the market increased on the subsequent day, and one for the 602days for
which the market decreased. The two plots look almost identical, suggest-
ing that there is no simple strategy for using yesterday’s movement in the
S&P to predict today’s returns. The remaining panels, which display box-
plots for the percentage changes 2 and 3 days previous to today, similarly
indicate little association between past and present returns. Of course, this
lack of pattern is to be expected: in the presence of strong correlations be-
tween successive days’ returns, one could adopt a simple trading strategy
to generate profits from the market. Nevertheless, in Chapter 4, we are hints of some weak trends in the data that suggest that, at least
for this 5-year period, it is possible to correctly predict the direction of
movement in the market approximately 60% of the time (Figure 1.3).
Gene Expression Data
The previous two applications illustrate data sets with both input and
output variables. However, another important class of problems involves
situations in which we only observe input variables, with no corresponding
output. For example, in a marketing setting, we might have which types of customers are similar to each other by grouping
individuals according to their observed characteristics. This is known as a4 1. Introduction
DownUp0.46 0.48 0.50 0.52Today’s DirectionPredicted ProbabilityFIGURE 1.3. We fit a quadratic discriminant analysis model to the subset
of theSmarket data corresponding to the 2001–2004 time period, and predicted
the probability of a stock market decrease using the 2005 data. On average, the
predicted probability of decrease is higher for the days in which the market does
decrease. Based on these results, we are able to correctly predict the direction of
movement in the market 60% of the time.
clustering problem. Unlike in the previous examples, here we are not trying
to predict an output variable.
We devote Chapter 12to a discussion of statistical learning methods
for problems in which no natural output variable is available. We consider
theNCI60data set, which consists of 6,830gene expression measurements
for each of 64cancer cell lines. Instead of predicting a particular output
variable, we are interested in determining whether there are groups, or
clusters, among the cell lines based on their gene expression measurements.
This is a difficult question to address, in part because there are thousands
of gene expression measurements per cell line, making it hard to visualize
the data.
The left-hand panel of Figure 1.4addresses this problem by represent-
ing each of the 64cell lines using just two numbers, Z1andZ2. These
are the first two principal components of the data, which summarize the
6,830expression measurements for each cell line down to two numbers or
dimensions . While it is likely that this dimension reduction has resulted in
some loss of information, it is now possible to visually examine the data
for evidence of clustering. Deciding on the number of clusters is often a
difficult problem. But the left-hand panel of Figure 1.4suggests at least
four groups of cell lines, which we have represented using separate colors.
In this particular data set, it turns out that the cell lines correspond
to14different types of cancer. (However, this information was not used
to create the left-hand panel of Figure 1.4.) The right-hand panel of Fig-
ure1.4is identical to the left-hand panel, except that the 14 cancer types
are shown using distinct colored symbols. There is clear evidence that cell
lines with the same cancer type tend to be located near each other in this
two-dimensional representation. In addition, even though the cancer bear some resemblance to some of the actual cancer types observed
in the right-hand panel. This provides some independent verification of the
accuracy of our clustering analysis.1. Introduction 5
−40 −20 0 20 40 60−60 −40 −20 0 20−40 −20 0 20 40 60−60 −40 −20 0 20Z1Z1
Z2Z2
FIGURE 1.4.Left:Representation of theNCI60gene expression data set ina two-dimensional space,Z1andZ2. Each point corresponds to one of the64cell lines. There appear to be four groups of cell lines, which we have representedusing different colors.Right:Same as left panel except that we have representedeach of the14different types of cancer using a different colored symbol. Cell linescorresponding to the same cancer type tend to be nearby in the two-dimensionalspace.A Brief History of Statistical LearningThoughthetermstatistical the field were developed long ago. At the beginning of the nine-teenth century, the method ofleast squareswas developed, implementingthe earliest form of what is now known aslinear regression. The approachwas first successfully applied to problems in astronomy. Linear regressionis used for predicting quantitative values, such as an individual’s salary.In order to predict qualitative values, such as whether a patient survivesor dies, or whether the stock market increases or decreases,linear discrim-inant analysiswas proposed in 1936. In the 1940s, various authors putforth an alternative approach,logistic regression. In the early 1970s, thetermgeneralized linear modelwas developed to describe an entire class ofstatistical learning methods that include both linear and logistic regressionas special cases.By the end of the 1970s, many more techniques for learning from datawere available. However, they were almost exclusivelylinearmethods be-cause fittingnon-linearrelationships was computationally difficult at thetime. By the 1980s, computing technology had finally improved sufficientlythat non-linear methods were no longer computationally prohibitive. Inthe mid 1980s,classification and regression treeswere developed, followedshortly bygeneralized additive models.Neural networksgained popularityin the 1980s, andsupport vector machinesarose in the 1990s.Since that time, statistical learning has emerged as a new subfield recent years, progress in statistical learning has been marked by the popular and freely availablePythonsystem. This has the potential tocontinue the transformation of the field from a set of techniques used and6 1. Introductiondeveloped by statisticians and computer scientists to an essential toolkitfor a much broader community.This BookThe Elements of Statistical Learning(ESL) by Hastie, Tibshirani, andFriedman was first published in 2001. Since that time, it has become animportant reference on the fundamentals of statistical machine learning.Its success derives from its comprehensive and detailed treatment of manyimportant topics in statistical learning, as well as the fact that (relative tomany upper-level statistics textbooks) it is accessible to a wide audience.However, the greatest factor behind the success of ESL has been its topicalnature. At the time of its publication, interest in the field of statisticallearning was starting to explode. ESL provided one of the first accessibleand comprehensive introductions to the topic.Since ESL was first published, the field of statistical learning has con-tinued to flourish. The field’s expansion has taken two forms. The mostobvious growth has involved the development of new and improved statis-tical learning approaches aimed at answering a range of scientific questionsacross a number of fields. However, the field of statistical learning hasalso expanded its audience. In the 1990s, increases in computational powergenerated a surge of interest in the field from non-statisticians who wereeager to use cutting-edge statistical tools to analyze their data. Unfortu-nately, the highly technical nature of these approaches meant that the usercommunity remained primarily restricted to experts in statistics, computerscience, and related fields with the training (and time) to understand andimplement them.In recent years, new and improved software packages have significantlyeased the implementation burden for many statistical learning methods.At the same time, there has been growing recognition across a number offields, from business to health care to genetics to the social sciences andbeyond, that statistical learning is a powerful tool with important to a mainstream discipline, with an enormous potential audience.This trend will surely continue with the increasing availability of enormousquantities of data and the software to analyze it.The purpose ofAn Introduction to Statistical Learning(ISL) is to facili-tate the transition of statistical learning from an academic to a mainstreamfield. ISL is not intended to replace ESL, which is a far more comprehen-sive text both in terms of the number of approaches considered and thedepth to which they are explored. We consider ESL to be an importantcompanion for professionals (with graduate degrees in statistics, machinelearning, or related fields) who need to understand the technical detailsbehind statistical learning approaches. However, the community of users ofstatistical learning techniques has expanded to include individuals with awider range of interests and backgrounds. Therefore, there is a place for aless technical and more accessible version of ESL.1. Introduction 7In teaching these topics over the years, we have discovered that they areof interest to master’s and PhD students in fields as disparate as businessadministration, biology, and computer science, as well as to quantitatively-oriented upper-division undergraduates. It is important for this diversegroup to be able to understand the models, intuitions, and strengths andweaknesses of the various approaches. But for this audience, many of thetechnical details behind statistical learning methods, such as optimiza-tion algorithms and theoretical properties, are not of primary interest.We believe that these students do not need a deep understanding of order to contribute to their chosen fields through the use of statisticallearning tools.ISL is based on the following four premises.1.Many statistical learning methods are relevant and useful in a widerange of academic and non-academic disciplines, beyond just the sta-tistical procedures should, and will, become as widely available and usedas is currently the case for classical methods such as linear regres-sion. As a result, rather than attempting to consider every possibleapproach (an impossible task), we have concentrated on presentingthe methods that we believe are most widely applicable.2.Statistical learning should not be viewed as a series of black boxes.Nosingle approach will perform well in all possible applications. With-out understanding all of the cogs inside the box, or the interactionbetween those cogs, it is impossible to select the best box. Hence, wehave attempted to carefully describe the model, intuition, assump-tions, and trade-offs behind each of the methods that we consider.3.While it is important to know what job is performed by each cog, it isnot necessary to have the skills to construct the machine inside thebox!Thus, we have minimized discussion of technical details relatedto fitting procedures and theoretical properties. We assume that thereader is comfortable with basic mathematical concepts, but we donot assume a graduate degree in the mathematical sciences. For in-stance, we have almost completely avoided the use of matrix algebra,and it is possible to understand the entire book without a detailedknowledge of matrices and vectors.4.We presume that the reader is interested in applying statistical learn-ing methods to real-world problems.In order to facilitate this, as wellas to motivate the techniques discussed, we have devoted a sectionwithin each chapter to computer labs. In each lab, we walk the When we have taught this material in our courses, we have al-located roughly one-third of classroom time to working through thelabs, and we have found them to be extremely useful. Many of theless computationally-oriented students who were initially intimidatedby the labs got the hang of things over the course of the quarter orsemester. This book originally appeared (2013, second edition 2021)8 1. Introduction
with computer labs written in the Rlanguage. Since then, there has
been increasing demand for Pythonimplementations of the impor-
tant techniques in statistical learning. Consequently, this version has
labs inPython. There are a rapidly growing number of Pythonpack-
ages available, and by examination of the imports at the beginning of
each lab, readers will see that we have carefully selected and used the
most appropriate. We have also supplied some additional code and
functionality in our package ISLP. However, the labs in ISL are self-
contained, and can be skipped if the reader wishes to use a different
software package or does not wish to apply the methods discussed to
real-world problems.
Who Should Read This Book?
This book is intended for anyone who is interested in using modern statis-
tical methods for modeling and prediction from data. This group includes
scientists, engineers, data analysts, data scientists, and quants, but also less
technical individuals with degrees in non-quantitative fields such as the so-
cial sciences or business. We expect that the reader will have had at least
one elementary course in statistics. Background in linear regression is also
useful, though not required, since we review the key concepts behind linear
regression in Chapter 3. The mathematical level of this book is modest,
and a detailed knowledge of matrix operations is not required. This book
provides an introduction to Python. Previous exposure to a programming
language, such as MATLABorR, is useful but not required.
The first edition of this textbook has been used to teach master’s and
PhD students in business, economics, computer science, biology, earth sci-
ences, psychology, and many other areas of the physical and social sciences.
It has also been used to teach advanced undergraduates who have already
taken a course on linear regression. In the context of a more mathemat-
ically rigorous course in which ESL serves as the primary textbook, ISL
could be used as a supplementary text for teaching computational aspects
of the various approaches.
Notation and Simple Matrix Algebra
Choosing notation for a textbook is always a difficult task. For the most
part we adopt the same notational conventions as ESL.
We will use nto represent the number of distinct data points, or observa-
tions, in our sample. We will let pdenote the number of variables that are
available for use in making predictions. For example, the Wagedata set con-
sists of 11 variables for 3,000people, so we have n=3,000observations and
p= 11 variables (such as year,age,race, and more). Note that throughout
this book, we indicate variable names using colored font: Variable Name .
In some examples, pmight be quite large, such as on the order of thou-
sands or even millions; this situation arises quite often, for example, in the
analysis of modern biological data or web-based advertising data.1. Introduction 9In general, we will letxijrepresent the value of thejth variable for theith observation, wherei=1,2,...,nandj=1,2,...,p. Throughout thisbook,iwill be used to index the samples or observations (from1ton) andjwill be used to index the variables (from1top). We letXdenote ann×pmatrix whose(i, j)th element isxij. That is,X=x11x12... x1px21x22... x2p............xn1xn2... xnp.For readers who are unfamiliar with matrices, it is useful to visualizeXasa spreadsheet of numbers withnrows andpcolumns.At times we will be interested in the rows ofX, which we write asx1,x2,...,xn. Herexiis a vector of lengthp, containing thepvariablemeasurements for theith observation. That is,xi=xi1xi2...xip.(1.1)(Vectors are by default represented as columns.) For example, for theWagedata,xiis a vector of length 11, consisting ofyear,age,race, and othervalues for theith individual. At other times we will instead be interestedin the columns ofX, which we write asx1,x2,...,xp. Each is a vector oflengthn. That is,xj=x1jx2j...xnj.For example, for theWagedata,x1contains then=3,000values foryear.Using this notation, the matrixXcan be written xn1x12x22... xn2.........x1px2p... xnp,10 1. useyito denote the ith observation of the variable on which we
wish to make predictions, such as wage. Hence, we write the set of all n
observations in vector form as
y=
y1
y2
...
yn
.
Then our observed data consists of {(x1,y1),(x2,y2),...,(xn,yn)}, where
eachxiis a vector of length p. (Ifp=1, thenxiis simply a scalar.)
In this text, a vector of length nwill always be denoted in lower case
bold; e.g.
a=
a1
a2
...
an
.
However, vectors that are not of length n(such as feature vectors of length
p, as in (1.1)) will be denoted in lower case normal font , e.g.a. Scalars will
also be denoted in lower case normal font , e.g.a. In the rare cases in which
these two uses for lower case normal font lead to ambiguity, we will clarify
which use is intended. Matrices will be denoted using bold capitals , such
asA. Random variables will be denoted using capital normal font , e.g.A,
regardless of their indicate that an object is a scalar, we will use the notation a∈R.T o
indicate that it is a vector of length k, we will use a∈Rk(ora∈Rnif
it is of length n). We will indicate that an object is an r×smatrix using
A∈Rr×s.
We have avoided using matrix algebra whenever possible. However, in
a few instances it becomes too cumbersome to avoid it entirely. In these
rare instances it is important to understand the concept of multiplying
two matrices. Suppose that A∈Rr×dandB∈Rd×s. Then the product
ofAandBis denoted AB. The(i, j)th element of ABis computed by
multiplying each element of the ith row of Aby the corresponding element
of thejth column of B. That is, (AB)ij=/summationtextd
k=1aikbkj. As an ×71 ×6+2 ×8
3×5+4 ×73 ×6+4 ×8/parenrightbigg
=/parenleftbigg19 22
43 50/parenrightbigg
.
Note that this operation produces an r×smatrix. It is only possible to
compute ABif the number of columns of Ais the same as the number of
rows ofB.1. Introduction 11
Organization of This Book
Chapter 2introduces the basic terminology and concepts behind statisti-
cal learning. This chapter also presents the K-nearest neighbor classifier, a
very simple method that works surprisingly well on many problems. Chap-
ters3and4cover classical linear methods for regression and classification.
In particular, Chapter 3reviewslinear regression , the fundamental start-
ing point for all regression methods. In Chapter 4we discuss two of the
most important classical classification methods, logistic regression andlin-
ear discriminant analysis .
A central problem in all statistical learning situations involves choosing
the best method for a given application. Hence, in Chapter 5we intro-
ducecross-validation and thebootstrap , which can be used to estimate the
accuracy of a number of different methods in order to choose the best one.
Much of the recent research in statistical learning has concentrated on
non-linear methods. However, linear methods often have advantages over
their non-linear competitors in terms of interpretability and sometimes also
accuracy. Hence, in Chapter 6we consider a host of linear methods, both
classical and more modern, which offer potential improvements over stan-
dard linear regression. These include stepwise selection ,ridge regression ,
principal components regression , and the lasso.
The remaining chapters move into the world of non-linear statistical
learning. We first introduce in Chapter 7a number of non-linear meth-
ods that work well for problems with a single input variable. We then
show how these methods can be used to fit non-linear additive models for
which there is more than one input. In Chapter 8, we investigate tree-based
methods, including bagging,boosting, andrandom forests .Support vector
machines , a set of approaches for performing both linear and non-linear
classification, are discussed in Chapter 9. We cover deep learning , an ap-
proach for non-linear regression and classification that has received a lot
of attention in recent years, in Chapter 10. Chapter 11explores survival
analysis, a regression approach that is specialized to the setting in which
the output variable is censored, i.e. not fully observed.
In Chapter 12, we consider the unsupervised setting in which we have
input variables but no output variable. In particular, we present princi-
pal components analysis ,K-means clustering , andhierarchical clustering .
Finally, in Chapter 13we cover the very important topic of multiple hy-
pothesis testing.
At the end of each chapter, we present one or more Pythonlab sections
in which we systematically work through applications of the various meth-
ods discussed in that chapter. These labs demonstrate the strengths and
weaknesses of the various approaches, and also provide a useful reference
for the syntax required to implement the various methods. The reader may
choose to work through the labs at their own pace, or the labs may be the
focus of group sessions as part of a classroom environment. Within each
Pythonlab, we present the results that we obtained when we performed the
lab at the time of writing this book. However, new versions of Pythonare
continuously released, and over time, the packages called in the labs will
be updated. Therefore, in the future, it is possible that the results shown in12 1. Introduction
Name Description
Auto Gas mileage, horsepower, and other information for cars.
Bikeshare Hourly usage of a bike sharing program in Washington, DC.
Boston Housing values and other information about Boston census tracts.
BrainCancer Survival times for patients diagnosed with brain cancer.
Caravan Information about individuals offered caravan insurance.
Carseats Information about car seat sales in 400 stores.
College Demographic characteristics, tuition, and more for USA colleges.
Credit Information about credit card debt for 400 customers.
Default Customer default records for a credit card company.
Fund Returns of 2,000 hedge fund managers over 50 months.
Hitters Records and salaries for baseball players.
Khan Gene expression measurements for four cancer types.
NCI60 Gene expression measurements for 64 cancer cell lines.
NYSE Returns, volatility, and volume for the New York Stock Exchange.
OJ Sales information for Citrus Hill and Minute Maid orange juice.
Portfolio Past values of financial assets, for use in portfolio allocation.
Publication Time to publication for 244 clinical trials.
Smarket Daily percentage returns for S&P 500 over a 5-year period.
USArrests Crime statistics per 100,000 residents in 50 states of USA.
Wage Income survey data for men in central Atlantic region of USA.
Weekly 1,089 weekly stock market returns for 21 years.
TABLE 1.1. A list of data sets needed to perform the labs and exercises in this
textbook. All data sets are available in the ISLPpackage, with the exception of
USArrests , which is part of the base Rdistribution, but accessible from Python.
the lab sections may no longer correspond precisely to the results obtained
by the reader who performs the labs. As necessary, we will post updates to
the labs on the book website.
We use the
symbol to denote sections or exercises that contain more
challenging concepts. These can be easily skipped by readers who do not
wish to delve as deeply into the material, or who lack the mathematical
background.
Data Sets Used in Labs and Exercises
In this textbook, we illustrate statistical learning methods using applica-
tions from marketing, finance, biology, and other areas. The ISLPpackage
contains a number of data sets that are required in order to perform the
labs and exercises associated with this book. One other data set is part of
the base Rdistribution (the USArrests data), and we show how to access it
fromPythonin Section 12.5.1. Table1.1contains a summary of the data
sets required to perform the labs and exercises. A couple of these data sets
are also available as text files on the book website, for use in Chapter 2.1. Introduction 13
Book Website
The website for this book is located at
www.statlearning.com
It contains a number of resources, including the Pythonpackage associated
with this book, and some additional data sets.
Acknowledgements
A few of the plots in this book were taken from ESL: Figures 6.7,8.3,
and12.14. All other plots were produced for the Rversion of ISL, except
for Figure 13.10which differs because of the Pythonsoftware supporting
the plot.2
Statistical Learning
2.1 What Is Statistical Suppose that we are statistical consultants hired by a client to
investigate the association between advertising and sales of a particular
product. The Advertising data set consists of the salesof that product
in200different markets, along with advertising budgets for the product in
each of those markets for three different media: TV,radio, andnewspaper .
The data are displayed in Figure 2.1. It is not possible for our client to
directly increase sales of the product. On the other hand, they can control
the advertising expenditure in each of the three media. Therefore, if we
determine that there is an association between advertising and sales, then
we can instruct our client to adjust advertising budgets, thereby indirectly
increasing sales. In other words, our goal is to develop an accurate model
that can be used to predict sales on the basis of the three media budgets.
In this setting, the advertising budgets are input variables whilesalesinput
variableis anoutput variable . The input variables are typically denoted using the
output
variablesymbolX, with a subscript to distinguish them. So X1might be the TV
budget,X2theradiobudget, and X3thenewspaper budget. The inputs
go by different names, such as predictors ,independent variables sometimes just variables . The output variable—in this case, sales—is
variableoften called the response ordependent variable , and is typically denoted
response
dependent
variableusing the symbol Y. Throughout this book, we will use all of these terms
interchangeably.
More generally, suppose that we observe a quantitative response Yandp
different predictors, X1,X2,...,X p. We assume that there is some
relationship between YandX=(X1,X2,...,X p), which can be written
in the very general form
Y=f(X)+/epsilon1. (2.1)
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_2  1516 2. Statistical Learning
0 50 100 200 3005 10 15 20 25TVSales
0 10 20 30 40 505 10 15 20 25RadioSales
0 20 40 60 80 1005 10 15 20 25NewspaperSales
FIGURE 2.1. TheAdvertising data set. The plot displays sales, in thousands
of units, as a function of TV,radio, andnewspaper budgets, in thousands of
dollars, for 200different markets. In each plot we show the simple least squares
fit ofsalesto that variable, as described in Chapter 3. In other words, each blue
line represents a simple model that can be used to predict salesusingTV,radio,
andnewspaper , X1,...,X p,and/epsilon1isarandom
error term , which is independent of Xand has mean zero. In this formula-error termtion,frepresents the systematic information that Xprovides about of of EducationIncome
FIGURE 2.2. TheIncomedata set. Left:The red dots are the observed values
ofincome(in thousands of dollars) and years of education for30individuals.
Right:The blue curve represents the true underlying relationship between income
andyears of education , which is generally unknown (but is known in this case
because the data were simulated). The black lines represent the error associated
with each observation. Note that some errors are positive (if an observation lies
above the blue curve) and some are negative (if an observation lies below the
curve). Overall, these errors have approximately mean zero.
As another example, consider the left-hand panel of Figure 2.2, a plot of
incomeversusyears of education for30individuals in the Incomedata set.
The plot suggests that one might be able to predict incomeusingyears of
education . However, the function fthat connects the input variable to the2.1 What Is Statistical Learning? 17
output variable is in general unknown. In this situation one must estimate
fbased on the observed points. Since Incomeis a simulated data set, fis
known and is shown by the blue curve in the right-hand panel of Figure 2.2.
The vertical lines represent the error terms /epsilon1. We note that some of the
30 observations lie above the blue curve and some lie below it; overall, the
errors have approximately mean zero.
In general, the function fmay involve more than one input variable.
In Figure 2.3we plot incomeas a function of years of education and
seniority . Herefis a two-dimensional surface that must be estimated
based on the observed data.
In essence, statistical learning refers to a set of approaches for estimating
f. In this chapter we outline some of the key theoretical concepts that arise
in estimating f, as well as tools for evaluating the estimates obtained.
2.1.1 Why Estimate f?
There are two main reasons that we may wish to estimate f:prediction
andinference . We discuss each in turn.
Prediction
In many situations, a set of inputs Xare readily available, but the output
Ycannot be easily obtained. In this setting, since the error term averages
to zero, we can predict Yusing
ˆY=ˆf(X), (2.2)
whereˆfrepresents our estimate for f, andˆYrepresents the resulting pre-
diction for Y. In this setting, ˆfis often treated as a black box , in the sense
that one is not typically concerned with the exact form of ˆf, provided that
it yields accurate predictions for Y.
As an example, suppose that X1,...,X pare characteristics of a patient’s
blood sample that can be easily measured in a lab, and Yis a variable
encoding the patient’s risk for a severe adverse reaction to a particular
drug. It is natural to seek to predict YusingX, since we can then avoid
giving the drug in question to patients who are at high risk of an adverse
reaction—that is, patients for whom the estimate of Yis high.
The accuracy of ˆYas a prediction for Ydepends on two quantities,
which we will call the reducible error and theirreducible error . In not be a perfect estimate for f, and this inaccuracy will introduce
some error. This error is reducible because we can potentially improve the
accuracyof f. However, even if it were possible to form a perfect estimate for
f, so that our estimated response took the form ˆY=f(X), our prediction
would still have some error in it! This is because Yis also a function of
/epsilon1, which, by definition, cannot be predicted using X. Therefore, variability
associated with /epsilon1also affects the accuracy of our predictions. This is known
as theirreducible error, because no matter how well we estimate f,w e
cannot reduce the error introduced by /epsilon1.
Why is the irreducible error larger than zero? The quantity /epsilon1may con-
tain unmeasured variables that are useful in predicting Y: since we don’t18 2. Statistical Learning
Years of EducationSeniorityIncome
FIGURE 2.3.The plot displaysincomeas a function ofyears of educationandseniorityin theIncomedata set. The blue surface represents the trueunderlying relationship betweenincomeandyears of educationandseniority,which is known since the data are simulated. The red dots indicate the observedvalues of these quantities for30individuals.measure them,fcannot use them for its prediction. The quantity/epsilon1mayalso contain unmeasurable variation. For example, the risk of an adversereaction might vary for a given patient on a given day, depending onmanufacturing variation in the drug itself or the patient’s general feelingof well-being on that day.Consider a given estimateˆfand a set of predictorsX, which yields thepredictionˆY=ˆf(X). Assume for a moment that bothˆfandXare fixed,so that the only variability comes from/epsilon1. Then, it is easy to show thatE(Y−ˆY)2= the average, orexpected value, of the squaredexpectedvaluedifference between the predicted and actual value ofY, andVar(/epsilon1)repre-sents thevarianceassociated with the error term/epsilon1.varianceThe focus of this book is on techniques for estimatingfwith the aim ofminimizing the reducible error. It is important to keep in mind that theirreducible error will always provide an upper bound on the accuracy ofour prediction forY. This bound is almost always unknown in practice.InferenceWe are often interested in understanding the association betweenYandX1,...,Xp. In this situation we wish to estimatef, but our goal is notnecessarily to make predictions forY. Nowˆfcannot be treated as a blackbox, because we need to know its exact form. In this setting, one may beinterested in answering the following questions:2.1 What Is Statistical Learning? 19
•Which predictors are associated with the response? It is often the case
that only a small fraction of the available predictors are substantially
associated with Y. Identifying the few important predictors among a
large set of possible variables can be extremely useful, depending on
the application.
•What is the relationship between the response and each predictor?
Some predictors may have a positive relationship with Y, in the sense
that larger values of the predictor are associated with larger values of
Y. Other predictors may have the opposite relationship. Depending
on the complexity of f, the relationship between the response and a
given predictor may also depend on the values of the other predictors.
•Can the relationship between Yand each predictor be adequately sum-
marized using a linear equation, or is the relationship more compli-
cated?Historically, most methods for estimating fhave taken a But often the true relationship is more complicated, in which
case a linear model may not provide an accurate representation of
the relationship between the input and output the inference setting, or a combination of the two.
For instance, consider a company that is interested in conducting a
direct-marketing campaign. The goal is to identify individuals who are
likely to respond positively to a mailing, based on observations of demo-
graphic variables measured on each individual. In this case, the demo-
graphic variables serve as predictors, and response to the marketing cam-
paign (either positive or negative) serves as the outcome. The company is
not interested in obtaining a deep understanding of the relationships be-
tween each individual predictor and the response; instead, the company
simply wants to accurately predict the response using the predictors. This
is an example of modeling for prediction.
In contrast, consider the Advertising data illustrated in Figure 2.1. One
may be interested in answering questions such as:
–Which media are associated with sales?
–Which media generate the biggest boost in sales? or
–How large of an increase in sales is associated with a given increase
in TV advertising?
This situation falls into the inference paradigm. Another example involves
modeling the brand of a product that a customer might purchase based on
variables such as price, store location, discount levels, competition price,
and so forth. In this situation one might really be most interested in the
association between each variable and the probability of purchase. For in-
stance,to what extent is the product’s price associated with sales? This is
an example of modeling for inference.
Finally, some modeling could be conducted both for prediction and in-
ference. For example, in a real estate setting, one may seek to relate values20 2. Statistical Learning
of homes to inputs such as crime rate, zoning, distance from a river, air
quality, schools, income level of community, size of houses, and so forth. In
this case one might be interested in the association between each individ-
ual input variable and housing price—for instance, how much extra will a
house be worth if it has a view of the river? This is an inference problem.
Alternatively, one may simply be interested in predicting the value of a
home given its characteristics: is this house under- or over-valued? This is
a prediction problem.
Depending on whether our ultimate goal is prediction, inference, or a
combination of the two, different methods for estimating fmay be ap-
propriate. For example, linear models allow for relatively simple and in-linear modelterpretable inference, but may not yield as accurate predictions as some
other approaches. In contrast, some of the highly non-linear approaches
that we discuss in the later chapters of this book can potentially provide
quite accurate predictions for Y, but this comes at the expense of a less
interpretable model for which inference is more challenging.
2.1.2 How Do We Estimate f?
Throughout this book, we explore many linear and non-linear approaches
for estimating f. However, these methods generally share certain charac-
teristics. We provide an overview of these shared characteristics in this
section. We will always assume that we have observed a set of ndifferent
data points. For example in Figure 2.2we observed n= 30 data points.
These observations are called the training data because we will use thesetraining
dataobservations to train, or teach, our method how to estimate f. Letxij
represent the value of the jth predictor, or input, for observation i, where
i=1,2,...,n andj=1,2,...,p . Correspondingly, let yirepresent the
response variable for the ith observation. Then our training data consist ip)T.
Our goal is to apply a statistical learning method to the training data
in order to estimate the unknown function f. In other words, we want to
find a function ˆfsuch that Y≈ˆf(X)for any observation (X,Y). Broadly
speaking, most statistical learning methods for this task can be character-
ized as either parametric ornon-parametric . We now briefly discuss theseparametric
non-
parametrictwo types of approaches.
Parametric Methods
Parametric methods involve a two-step model-based approach.
1. First, we make an assumption about the functional form, or shape,
off. For example, one very simple assumption is that fis linear in
X:
f(X)=β0+β1X1+β2X2+···+βpXp. (2.4)
This is a linear model , which will be discussed extensively in Chap-
ter3. Once we have assumed that fis linear, the problem of estimat-
ingfis greatly simplified. Instead of having to estimate an entirely
arbitrary p-dimensional function f(X), one only needs to estimate
thep+1coefficients β0,β1,...,βp.2.1 What Is Statistical Learning? 21
Years of EducationSeniorityIncome
FIGURE 2.4. A linear model fit by least squares to the Incomedata from
Figure2.3. The observations are shown in red, and the yellow plane indicates the
least squares fit to the data.
2. After a model has been selected, we need a procedure that uses the
training data to fitortrainthe model. In the case of the linear modelfit
train(2.4), we need to estimate the parameters β0,β1,...,βp. That is, we
want to find values of these parameters such that
Y≈β0+β1X1+β2X2+···+βpXp.
The most common approach to fitting the model ( 2.4) is referred to
as(ordinary) least squares , which we discuss in Chapter 3. However,least squaresleast squares is one of many possible ways to fit the linear model. In
Chapter 6, we discuss other approaches for estimating the parameters
in (2.4).
The model-based approach just described is referred to as parametric ;
it reduces the problem of estimating fdown to one of estimating a set of
parameters. Assuming a parametric form for fsimplifies the problem of
estimating fbecause it is generally much easier to estimate a set of pa-
rameters, such as β0,β1,...,βpin the linear model ( 2.4), than it is to fit
an entirely arbitrary function f. The potential disadvantage of a paramet-
ric approach is that the model we choose will usually not match the true
unknown form of f. If the chosen model is too far from the true f, then
our estimate will be poor. We can try to address this problem by choos-
ingflexiblemodels that can fit many different possible functional formsflexibleforf. But in general, fitting a more flexible model requires estimating a
greater number of parameters. These more complex models can lead to a
phenomenon known as overfitting the data, which essentially means theyoverfittingfollow the errors, or noise, too closely. These issues are discussed through-noiseout this book.
Figure2.4shows an example of the parametric approach applied to the
Incomedata from Figure 2.3. We have fit a linear model of the form
income ≈β0+β1×education +β2×seniority .22 2. Statistical Learning
Years of EducationSeniorityIncome
FIGURE 2.5. A smooth thin-plate spline fit to the Incomedata from Figure 2.3
is shown in yellow; the observations are displayed in red. Splines are discussed in
Chapter 7.
Since we have assumed a linear relationship between the response and the
two predictors, the entire fitting problem reduces to estimating β0,β1, and
β2, which we do using least squares linear regression. Comparing Figure 2.3
to Figure 2.4, we can see that the linear fit given in Figure 2.4is not quite
right: the true fhas some curvature that is not captured in the linear fit.
However, the linear fit still appears to do a reasonable job of capturing the
positive relationship between years of education andincome, as well as the
slightly less positive relationship between seniority andincome. It may be
that with such a small number of observations, this is the best we can do.
Non-Parametric Methods
Non-parametric methods do not make explicit assumptions about the func-
tional form of f. Instead they seek an estimate of fthat gets as close to the
data points as possible without being too rough or wiggly. Such approaches
can have a major advantage over parametric approaches: by avoiding the
assumption of a particular functional form for f, they have the potential
to accurately fit a wider range of possible shapes for f. Any parametric
approach brings with it the possibility that the functional form used to
estimate fis very different from the true f, in which case the resulting
model will not fit the data well. In contrast, non-parametric approaches
completely avoid this danger, since essentially no assumption about the
form offis made. But non-parametric approaches do suffer from a major
disadvantage: since they do not reduce the problem of estimating fto a
small number of parameters, a very large number of observations (far more
than is typically needed for a parametric approach) is required in order to
obtain an accurate estimate for f.
An example of a non-parametric approach to fitting the Incomedata is
shown in Figure 2.5.Athin-plate spline is used to estimate f. This ap-thin-plate
splineproach does not impose any pre-specified model on f. It instead attempts2.1 What Is Statistical Learning? 23
Years of EducationSeniorityIncome
FIGURE 2.6. A rough thin-plate spline fit to the Incomedata from Figure 2.3.
This fit makes zero errors on the training data.
to produce an estimate for fthat is as close as possible to the observed
data, subject to the fit—that is, the yellow surface in Figure 2.5—being
smooth. In this case, the non-parametric fit has produced a remarkably ac-
curateestimateofthetrue fshowninFigure 2.3.Inordertofitathin-plate
spline, the data analyst must select a level of smoothness. Figure 2.6shows
the same thin-plate spline fit using a lower level of smoothness, allowing
for a rougher fit. The resulting estimate fits the observed data perfectly!
However, the spline fit shown in Figure 2.6is far more variable than the
true function f, from Figure 2.3. This is an example of overfitting the
data, which we discussed previously. It is an undesirable situation because
the fit obtained will not yield accurate estimates of the response on new
observations that were not part of the original training data set. We dis-
cuss methods for choosing the correctamount of smoothness in Chapter 5.
Splines are discussed in Chapter 7.
As we have seen, there are advantages and disadvantages to parametric
and non-parametric methods for statistical learning. We explore both types
of methods throughout this book.
2.1.3 The Trade-Off Between Prediction Accuracy and Model
Interpretability
Of the many methods that we examine in this book, some are less flexible,
or more restrictive, in the sense that they can produce just a relatively
small range of shapes to estimate f. For example, linear regression is a
relatively inflexible approach, because it can only generate linear functions
such as the lines shown in Figure 2.1or the plane shown in Figure 2.4.
Other methods, such as the thin plate splines shown in Figures 2.5and2.6,
are considerably more flexible because they can generate a much wider
range of possible shapes to estimate f.24 2. Statistical SelectionLassoLeast SquaresGeneralized Additive ModelsTreesBagging, BoostingSupport Vector MachinesDeep LearningFIGURE 2.7. A representation of the tradeoff between flexibility and inter-
pretability, using different statistical learning methods. In general, as the flexibility
of a method increases, its interpretability decreases.
One might reasonably ask the following question: why would we ever
choose to use a more restrictive method instead of a very flexible approach?
There are several reasons that we might prefer a more restrictive model.
If we are mainly interested in inference, then restrictive models are much
more interpretable. For instance, when inference is the goal, the linear
model may be a good choice since it will be quite easy to understand
the relationship between YandX1,X2,...,X p. In contrast, very flexible
approaches, such as the splines discussed in Chapter 7and displayed in
Figures2.5and2.6, and the boosting methods discussed in Chapter 8, can
lead to such complicated estimates of fthat it is difficult to understand
how any individual predictor is associated with the response.
Figure2.7provides an illustration of the trade-off between flexibility and
interpretability for some of the methods that we cover in this book. Least
squares linear regression, discussed in Chapter 3, is relatively inflexible but
is quite interpretable. The lasso, discussed in Chapter 6, relies upon thelassolinear model ( 2.4) but uses an alternative fitting procedure for estimating
the coefficients β0,β1,...,βp. The new procedure is more restrictive in es-
timating the coefficients, and sets a number of them to exactly zero. Hence
in this sense the lasso is a less flexible approach than linear regression.
It is also more interpretable than linear regression, because in the final
model the response variable will only be related to a small subset of the
predictors—namely, those with nonzero coefficient estimates. Generalized
additive models (GAMs), discussed in Chapter 7, instead extend the lin-generalized
additive
modelear model ( 2.4) to allow for certain non-linear relationships. Consequently,
GAMs are more flexible than linear regression. They are also somewhat
less interpretable than linear regression, because the relationship between
each predictor and the response is now modeled using a curve. Finally,
fully non-linear methods such as bagging,boosting,support vector machinesbagging
boostingwith non-linear kernels, and neural networks (deep learning), discussed in
support
vector
machineChapters 8,9, and10, are highly flexible approaches that are harder to
interpret.2.1 What Is Statistical Learning? 25
We have established that when inference is the goal, there are clear ad-
vantages to using simple and relatively inflexible statistical learning meth-
ods. In some settings, however, we are only interested in prediction, and
the interpretability of the predictive model is simply not of interest. For
instance, if we seek to develop an algorithm to predict the price of a
stock, our sole requirement for the algorithm is that it predict accurately—
interpretability is not a concern. In this setting, we might expect that it
will be best to use the most flexible model available. Surprisingly, this is
not always the case! We will often obtain more accurate predictions using
a less flexible method. This phenomenon, which may seem counterintu-
itive at first glance, has to do with the potential for overfitting in highly
flexible methods. We saw an example of overfitting in Figure 2.6. We will
discuss this very important concept further in Section 2.2and throughout
this book.
2.1.4 Supervised Versus Unsupervised Learning
Most statistical learning problems fall into one of two categories: supervisedsupervisedorunsupervised . The examples that we have discussed so far in this chap-unsupervisedter all fall into the supervised learning domain. For each observation of the
predictor measurement(s) xi,i=1,...,n there is an associated response
measurement yi. We wish to fit a model that relates the response to the
predictors, with the aim of accurately predicting the response for future
observations (prediction) or better understanding the relationship between
the response and the predictors (inference). Many classical statistical learn-
ing methods such as linear regression and logistic regression (Chapter 4), aslogistic
regressionwell as more modern approaches such as GAM, boosting, and support vec-
tor machines, operate in the supervised learning domain. The vast majority
of this book is devoted to this setting.
By contrast, unsupervised learning describes the somewhat more chal-
lenging situation in which for every observation i=1,...,n , we observe
a vector of measurements xibut no associated response yi. It is not pos-
sible to fit a linear regression model, since there is no response variable
to predict. In this setting, we are in some sense working blind; the sit-
uation is referred to as unsupervised because we lack a response vari-
able that can supervise our analysis. What sort of statistical analysis between the observations. One statistical learning tool that we may use
in this setting is cluster analysis , or clustering. The goal of cluster analysiscluster
analysisis to ascertain, on the basis of x1,...,x n, whether the observations fall into
relatively distinct groups. For example, in a market segmentation study we
might observe multiple characteristics (variables) for potential customers,
such as zip code, family income, and shopping habits. We might believe
that the customers fall into different groups, such as big spenders versus
low spenders. If the information about each customer’s spending patterns
were available, then a supervised analysis would be possible. However, this
information is not available—that is, we do not know whether each poten-
tial customer is a big spender or not. In this setting, we can try to cluster
the customers on the basis of the variables measured, in order to identify26 2. Statistical Learning
0 2 4 6 8 10 122 4 6 8 10 1202462468X1X1
X2X2
FIGURE 2.8. A clustering data set involving three groups. Each group is
shown using a different colored symbol. Left:The three groups are well-separated.
In this setting, a clustering approach should successfully identify the three groups.
Right:There is some overlap among the groups. Now the clustering task is more
challenging.
distinct groups of potential customers. Identifying such groups can be of
interest because it might be that the groups differ with respect to some
property of interest, such as spending habits.
Figure2.8provides a simple illustration of the clustering problem. We
have plotted 150 observations with measurements on two variables, X1
andX2. Each observation corresponds to one of three distinct groups. For
illustrative purposes, we have plotted the members of each group using
different colors and symbols. However, in practice the group memberships
are unknown, and the goal is to determine the group to which each obser-
vation belongs. In the left-hand panel of Figure 2.8, this is a relatively easy
task because the groups are well-separated. By contrast, the right-hand
panel illustrates a more challenging setting in which there is some overlap
between the groups. A clustering method could not be expected to assign
all of the overlapping points to their correct group (blue, green, or orange).
In the examples shown in Figure 2.8, there are only two variables, and
so one can simply visually inspect the scatterplots of the observations in
order to identify clusters. However, in practice, we often encounter data
sets that contain many more than two variables. In this case, we cannot
easily plot the observations. For instance, if there are pvariables in our
data set, then p(p−1)/2distinct scatterplots can be made, and visual
inspection is simply not a viable way to identify clusters. For this reason,
automated clustering methods are important. We discuss clustering and
other unsupervised learning approaches in Chapter 12.
Many problems fall naturally into the supervised or unsupervised learn-
ing paradigms. However, sometimes the question of whether an analysis
should be considered supervised or unsupervised is less clear-cut. For in-
stance, suppose that we have a set of nobservations. For mof the observa-
tions, where m<n , we have both predictor measurements and a response2.2 Assessing Model Accuracy 27
measurement. For the remaining n−mobservations, we have predictor
measurements but no response measurement. Such a scenario can arise if
the predictors can be measured relatively cheaply but the corresponding
responses are much more expensive to collect. We refer to this setting as
asemi-supervised learning problem. In this setting, we wish to use a sta-semi-
supervised
learningtistical learning method that can incorporate the mobservations for which
response measurements are available as well as the n−mobservations for
which they are not. Although this is an interesting topic, it is beyond the
scope of this book.
2.1.5 Regression Versus Classification Problems
Variables can be characterized as either quantitative orqualitative (alsoquantitative
qualitativeknown as categorical ). Quantitative variables take on numerical values. Ex-
categoricalamples include a person’s age, height, or income, the value of a house, and
the price of a stock. In contrast, qualitative variables take on values in
one ofKdifferent classes, or categories. Examples of qualitative variablesclassinclude a person’s marital status (married or not), the brand of product
purchased (brand A, B, or C), whether a person defaults on a debt (yes
or no), or a cancer diagnosis (Acute Myelogenous Leukemia, Acute Lym-
phoblastic Leukemia, or No Leukemia). We tend to refer to problems with
a quantitative response as regression problems, while those involving aregressionqualitative response are often referred to as classification problems. How-classificationever, the distinction is not always that crisp. Least squares linear regression
(Chapter 4) is typically used with a qualitative (two-class, or binary) since it estimates class probabilities, it can be thought of as a regres-
sion method as well. Some statistical methods, such as K-nearest neighbors
(Chapters 2and4) and boosting (Chapter 8), can be used in the case of
either quantitative or qualitative responses.
We tend to select statistical learning methods on the basis of whether
the response is quantitative or qualitative; i.e. we might use linear regres-
sion when quantitative and logistic regression when qualitative. However,
whether the predictors are qualitative or quantitative is generally consid-
ered less important. Most of the statistical learning methods discussed in
this book can be applied regardless of the predictor variable type, provided
that any qualitative predictors are properly codedbefore the analysis is
performed. This is discussed in Chapter 3.
2.2 Assessing Model Accuracy
One of the key aims of this book is to introduce the reader to a wide range
of statistical learning methods that extend far beyond the standard linear
regression approach. Why is it necessary to introduce so many bestmethod? There
is no free lunch in statistics: no one method dominates all others over all
possible data sets. On a particular data set, one specific method may work28 2. Statistical Learning
best, but some other method may work better on a similar but different
data set. Hence it is an important task to decide for any given set of data
which method produces the best results. Selecting the best approach can
be one of the most challenging parts of performing statistical learning in
practice.
In this section, we discuss some of the most important concepts that
arise in selecting a statistical learning procedure for a specific data set. As
the book progresses, we will explain how the concepts presented here can
be applied in practice.
2.2.1 Measuring the Quality of Fit
In order to evaluate the performance of a statistical learning method on
a given data set, we need some way to measure how well its predictions
actually match the observed data. That is, we need to quantify the extent
to which the predicted response value for a given observation is close to
the true response value for that observation. In the regression setting, the
most commonly-used measure is the mean squared error (MSE), given bymean
squared
errorMSE =1
nn/summationdisplay
i=1(yi−ˆf(xi))2, (2.5)
whereˆf(xi)is the prediction that ˆfgives for the ith observation. The MSE
will be small if the predicted responses are very close to the true responses,
and will be large if for some of the observations, the predicted and true
responses differ substantially.
The MSE in ( 2.5) is computed using the training data that was used to
fit the model, and so should more accurately be referred to as the training
MSE. But in general, we do not really care how well the method workstraining
MSEon the training data. Rather, we are interested in the accuracy of the pre-
dictions that we obtain when we apply our method to previously unseen
test data. Why is this what we care about? Suppose that we are interestedtest datain developing an algorithm to predict a stock’s price based on previous
stock returns. We can train the method using stock returns from the price. We instead care about how well it will predict tomorrow’s price
or next month’s price. On a similar note, suppose that we have clinical
measurements (e.g. weight, blood pressure, height, age, family history has diabetes. We can use these patients to train a statistical learn-
ing method to predict risk of diabetes based on clinical measurements. In
practice, we want this method to accurately predict diabetes risk for future
patients based on their clinical measurements. We are not very interested
in whether or not the method accurately predicts diabetes risk for patients
used to train the model, since we already know which of those patients
have diabetes.
To state it more mathematically, suppose that we fit our statistical learn-
ing method on our training observations ˆf.Wecanthencompute ˆf(x1),ˆf(x2),..., ˆf(xn).2.2 Assessing Model Accuracy 29
0 20 40 60 80 1002 4 6 8 10 12XY
2 5 10 200.0 0.5 1.0 1.5 2.0 2.5FlexibilityMean Squared Error
FIGURE 2.9. Left:Data simulated from f, shown in black. Three estimates of
fare shown: the linear regression line (orange curve), and two smoothing spline
fits (blue and green curves). Right:Training MSE (grey curve), test MSE (red
curve), and minimum possible test MSE over all methods (dashed line). Squares
represent the training and test MSEs for the three fits shown in the left-hand
panel.
If these are approximately equal to y1,y2,...,y n, then the training MSE
given by ( 2.5) is small. However, we are really not interested in whether
ˆf(xi)≈yi; instead, we want to know whether ˆf(x0)is approximately equal
toy0, where(x0,y0)is apreviously unseen test observation not used to train
the statistical learning method . We want to choose the method that gives
thelowest test MSE MSEif we had a large number of test observations, we could compute
Ave(y0−ˆf(x0))2, (2.6)
the average squared prediction error for these test observations (x0,y0).
We’d like to select the model for which this quantity is as small as possible.
How can we go about trying to select a method that minimizes the test
MSE? In some settings, we may have a test data set available—that is,
we may have access to a set of observations that were not used to train
the statistical learning method. We can then simply evaluate ( 2.6) on the
test observations, and select the learning method for which the test MSE is
smallest. But what if no test observations are available? In that case, training MSE ( 2.5). This seems like it might be a sensible approach,
since the training MSE and the test MSE appear to be closely related.
Unfortunately, there is a fundamental problem with this strategy: there
is no guarantee that the method with the lowest training MSE will also
have the lowest test MSE. Roughly speaking, the problem is that many
statistical methods specifically estimate coefficients so as to minimize the
training set MSE. For these methods, the training set MSE can be quite
small, but the test MSE is often much larger.
Figure2.9illustrates this phenomenon on a simple example. In the left-
hand panel of Figure 2.9, we have generated observations from ( 2.1) with30 2. Statistical Learning
thetruefgivenbythe blackcurve.The orange, blue andgreen curvesillus-
trate three possible estimates for fobtained using methods with increasing
levels of flexibility. The orange line is the linear regression fit, which is rela-
tively inflexible. The blue and green curves were produced using smoothing
splines, discussed in Chapter 7, with different levels of smoothness. It issmoothing
splineclear that as the level of flexibility increases, the curves fit the observed
data more closely. The green curve is the most flexible and matches the
data very well; however, we observe that it fits the true f(shown in black)
poorly because it is too wiggly. By adjusting the level of flexibility of the
smoothing spline fit, we can produce many different fits to this data.
We now move on to the right-hand panel of Figure 2.9. The grey curve
displays the average training MSE as a function of flexibility, or more
formally the degrees of freedom , for a number of smoothing splines. Thedegrees of
freedomdegrees of freedom is a quantity that summarizes the flexibility of a curve;
it is discussed more fully in Chapter 7. The orange, blue and green squares
indicate the MSEs associated with the corresponding curves in the left-
hand panel. A more restricted and hence smoother curve has fewer degrees
of freedom than a wiggly curve—note that in Figure 2.9, linear regression
is at the most restrictive end, with two degrees of freedom. The training
MSE declines monotonically as flexibility increases. In this example the
truefis non-linear, and so the orange linear fit is not flexible enough to
estimate fwell. The green curve has the lowest training MSE of all three
methods, since it corresponds to the most flexible of the three curves fit in
the left-hand panel.
In this example, we know the true function f, and so we can also com-
pute the test MSE over a very large test set, as a function of flexibility. (Of
course, in general fis unknown, so this will not be possible.) The test MSE
is displayed using the red curve in the right-hand panel of Figure 2.9. As
with the training MSE, the test MSE initially declines as the level of flex-
ibility increases. However, at some point the test MSE levels off and then
starts to increase again. Consequently, the orange and green curves both
have high test MSE. The blue curve minimizes the test MSE, which should
not be surprising given that visually it appears to estimate fthe best in the
left-hand panel of Figure 2.9. The horizontal dashed line indicates Var (/epsilon1),
the irreducible error in ( 2.3), which corresponds to the lowest achievable
test MSE among all possible methods. Hence, the smoothing spline repre-
sented by the blue curve is close to optimal.
In the right-hand panel of Figure 2.9, as the flexibility of the statistical
learning method increases, we observe a monotone decrease in the training
MSE and a U-shape in the test MSE. This is a fundamental property of
statistical learning that holds regardless of the particular data set at hand
and regardless of the statistical method being used. As model flexibility
increases, the training MSE will decrease, but the test MSE may not. When
a given method yields a small training MSE but a large test MSE, we are
saidtobe overfitting is working too hard to find patterns in the training data, and
may be picking up some patterns that are just caused by random chance
rather than by true properties of the unknown function f. When we overfit
the training data, the test MSE will be very large because the supposed2.2 Assessing Model Accuracy 31
0 20 40 60 80 1002 4 6 8 10 12XY
2 5 10 200.0 0.5 1.0 1.5 2.0 2.5FlexibilityMean Squared Error
FIGURE 2.10. Details are as in Figure 2.9, using a different true fthat is
much closer to linear. In this setting, linear regression provides a very good fit to
the data.
patterns that the method found in the training data simply don’t exist
in the test data. Note that regardless of whether or not overfitting has
occurred, we almost always expect the training MSE to be smaller than
the test MSE because most statistical learning methods either directly or
indirectly seek to minimize the training MSE. Overfitting refers specifically
to the case in which a less flexible model would have yielded a smaller
test MSE.
Figure2.10provides another example in which the true fis approxi-
mately linear. Again we observe that the training MSE decreases mono-
tonically as the model flexibility increases, and that there is a U-shape in
the test MSE. However, because the truth is close to linear, the test MSE
only decreases slightly before increasing again, so that the orange least
squares fit is substantially better than the highly flexible green curve. Fi-
nally, Figure 2.11displays an example in which fis highly non-linear. The
training and test MSE curves still exhibit the same general patterns, but
now there is a rapid decrease in both curves before the test MSE starts to
increase slowly.
In practice, one can usually compute the training MSE with relative
ease, but estimating the test MSE is considerably more difficult because
usuallynotestdata areavailable.Asthe previousthreeexamples illustrate,
the flexibility level corresponding to the model with the minimal test MSE
can vary considerably among data sets. Throughout this book, we discuss One important method is cross-validation (Chapter 5), which is across-
validation method for estimating the test MSE using the training data.
2.2.2 The Bias-Variance Trade-Off
The U-shape observed in the test MSE curves (Figures 2.9–2.11) turns out
to be the result of two competing properties of statistical learning methods.32 2. Statistical Learning
0 20 40 60 80 100−10 0 10 20XY
2 5 10 200 5 10 15 20FlexibilityMean Squared Error
FIGURE 2.11. Details are as in Figure 2.9, using a different fthat is far from
linear. In this setting, linear regression provides a very poor fit to the data.
Though the mathematical proof is beyond the scope of this book, it is
possible to show that the expected test MSE, for a given value x0, can
always be decomposed into the sum of three fundamental quantities: the
variance ofˆf(x0), the squared biasofˆf(x0)and the variance of the errorvariance
biasterms/epsilon1. That + [ Bias(ˆf(x0))]2+Var(/epsilon1). (2.7)
Here the notation the expected test MSE atx0,expected
test MSE and refers to the average test MSE that we would obtain if we repeatedly
estimated x0.The
overall expected test MSE can be computed by averaging E/parenleftBig
y0−ˆf(x0)/parenrightBig2
over all possible values of x0in the test set.
Equation 2.7tells us that in order to minimize the expected test error,
we need to select a statistical learning method that simultaneously achieves
low variance andlow bias. Note that variance is inherently a nonnegative
quantity, and squared bias is also nonnegative. Hence, we see that the
expected test MSE can never lie below Var (/epsilon1), the irreducible error from
(2.3).
What do we mean by the variance andbiasof a statistical learning
method? Variance refers to the amount by which ˆfwould change if we
estimated it using a different training data set. Since the training data
are used to fit the statistical learning method, different training data sets
will result in a different ˆf. But ideally the estimate for fshould not vary
too much between training sets. However, if a method has high variance
then small changes in the training data can result in large changes in ˆf. and orange curves in Figure 2.9. The flexible green curve is following
the observations very closely. It has high variance because changing any
one of these data points may cause the estimate ˆfto change considerably.2.2 Assessing Model Accuracy 33
2 5 10 200.0 0.5 1.0 1.5 2.0 2.5Flexibility2 5 10 200.0 0.5 1.0 1.5 2.0 2.5Flexibility2 5 10 2005 10 15 20
FlexibilityMSEBiasVar
FIGURE 2.12. Squared bias (blue curve), variance (orange curve), Var (/epsilon1)
(dashed line), and test MSE (red curve) for the three data sets in Figures 2.9–2.11.
The vertical dotted line indicates the flexibility level corresponding to the smallest
test MSE.
In contrast, the orange least squares line is relatively inflexible and has low
variance, because moving any single observation will likely cause only a
small shift in the position of the line.
On the other hand, biasrefers to the error that is introduced by model. For example, linear regression assumes that there is a linear
relationship between YandX1,X2,...,X p. It is unlikely that any real-life
problem truly has such a simple linear relationship, and so performing lin-
ear regression will undoubtedly result in some bias in the estimate of f. In
Figure2.11, the true fis substantially non-linear, so no matter how many
training observations we are given, it will not be possible to produce an
accurate estimate using linear regression. In other words, linear regression
results in high bias in this example. However, in Figure 2.10the true f
is very close to linear, and so given enough data, it should be possible for
linear regression to produce an accurate estimate. Generally, more flexible
methods result in less bias.
As a general rule, as we use more flexible methods, the variance will
increase and the bias will decrease. The relative rate of change of these
two quantities determines whether the test MSE increases or decreases. As
we increase the flexibility of a class of methods, the bias tends to initially
decrease faster than the variance increases. Consequently, the expected
test MSE declines. However, at some point increasing flexibility has little
impact on the bias but starts to significantly increase the variance. When
this happens the test MSE increases. Note that we observed this pattern
of decreasing test MSE followed by increasing test MSE in the right-hand
panels of Figures 2.9–2.11.
The three plots in Figure 2.12illustrate Equation 2.7for the examples in
Figures2.9–2.11. In each case the blue solid curve represents the squared
bias, for different levels of flexibility, while the orange curve corresponds to
the variance. The horizontal dashed line represents Var (/epsilon1), the irreducible
error. Finally, the red curve, corresponding to the test set MSE, is the sum34 2. Statistical Learning
of these three quantities. In all three cases, the variance increases and the
bias decreases as the method’s flexibility increases. However, the flexibility
level corresponding to the optimal test MSE differs considerably among the
three data sets, because the squared bias and variance change at different
rates in each of the data sets. In the left-hand panel of Figure 2.12, the
bias initially decreases rapidly, resulting in an initial sharp decrease in the
expected test MSE. On the other hand, in the center panel of Figure 2.12
the truefis close to linear, so there is only a small decrease in bias as flex-
ibility increases, and the test MSE only declines slightly before increasing
rapidly as the variance increases. Finally, in the right-hand panel of Fig-
ure2.12, as flexibility increases, there is a dramatic decline in bias because
the true fis very non-linear. There is also very little increase in variance
as flexibility increases. Consequently, the test MSE declines substantially
before experiencing a small increase as model flexibility increases.
The relationship between bias, variance, and test set MSE given in Equa-
tion2.7and displayed in Figure 2.12is referred to as the bias-variance
trade-off. Good test set performance of a statistical learning method re-bias-variance
trade-offquires low variance as well as low squared bias. This is referred to as a
trade-off because it is easy to obtain a method with extremely low bias but
high variance (for instance, by drawing a curve that passes through every
single training observation) or a method with very low variance but high
bias (by fitting a horizontal line to the data). The challenge lies in finding
a method for which both the variance and the squared bias are low. This
trade-off is one of the most important recurring themes in this book.
In a real-life situation in which fis unobserved, it is generally not pos-
sible to explicitly compute the test MSE, bias, or variance for a statistical
learning method. Nevertheless, one should always keep the bias-variance
trade-off in mind. In this book we explore methods that are extremely
flexible and hence can essentially eliminate bias. However, this does not
guarantee that they will outperform a much simpler method such as linear
regression. To take an extreme example, suppose that the true fis linear.
In this situation linear regression will have no bias, making it very hard
for a more flexible method to compete. In contrast, if the true fis highly
non-linear and we have an ample number of training observations, then
we may do better using a highly flexible approach, as in Figure 2.11. In
Chapter 5we discuss cross-validation, which is a way to estimate the test
MSE using the training data.
2.2.3 The Classification Setting
Thus far, our discussion of model accuracy has been focused on the regres-
sion setting. But many of the concepts that we have encountered, such
as the bias-variance trade-off, transfer over to the classification setting
with only some modifications due to the fact that yiis no longer quan-
titative. Suppose that we seek to estimate fon the basis of training obser-
vations{(x1,y1),...,(xn,yn)}, where now y1,...,y nare qualitative. The
most common approach for quantifying the accuracy of our estimate ˆfis
thetraining error rate rate2.2 Assessing Model Accuracy 35
our estimate ˆfto the training (2.8)
Hereˆyiis the predicted class label for the ith observation using ˆf. And
I(yi/negationslash=ˆyi)is anindicator variable that equals 1ifyi/negationslash=ˆyiand zero if then the ith observation was classified correctly by our
classification method; otherwise it was misclassified. Hence Equation 2.8
computes the fraction of incorrect classifications.
Equation 2.8is referred to as the training error rate because it is com-training
errorputed based on the data that was used to train our classifier. As in the
regression setting, we are most interested in the error rates that result from
applying our classifier to test observations that were not used in training.
Thetest error rate associated with a set of test observations of the formtest error(x0,y0)is given by
Ave(I(y0/negationslash=ˆy0)), (2.9)
whereˆy0is the predicted class label that results from applying the classifier
to the test observation with predictor x0.Agoodclassifier is one for which
the test error ( 2.9) is smallest.
The Bayes Classifier
It is possible to show (though the proof is outside of the scope of this
book) that the test error rate given in ( 2.9) is minimized, on average, by a
very simple classifier that assigns each observation to the most likely class,
given its predictor values . In other words, we should simply assign a test
observation with predictor vector x0to the class jfor which
Pr(Y=j|X=x0) (2.10)
is largest. Note that ( 2.10) is aconditional probability : it is the probabilityconditional
probabilitythatY=j, given the observed predictor vector x0. This very simple clas-
sifier is called the Bayes classifier . In a two-class problem where there areBayes
classifieronly two possible response values, say class 1orclass 2, the Bayes classifier
corresponds to predicting class one if Pr(Y=1|X=x0)>0.5, and class
two otherwise.
Figure2.13provides an example using a simulated data set in a two-
dimensional space consisting of predictors X1andX2. The orange and
blue circles correspond to training observations that belong to two different
classes. For each value of X1andX2, there is a different probability of the
response being orange or blue. Since this is simulated data, we know how
the data were generated and we can calculate the conditional probabilities
for each value of X1andX2. The orange shaded region reflects the set of
points for which Pr(Y=orange|X)is greater than 50 % , while the blue
shaded region indicates the set of points for which the probability is below
50 % . The purple dashed line represents the points where the probability
is exactly 50 % . This is called the Bayes decision boundary . The BayesBayes
decision
boundaryclassifier’s prediction is determined by the Bayes decision boundary; an
observation that falls on the orange side of the boundary will be assigned36 2. Statistical 2.13. A simulated data set consisting of 100observations in each of
two groups, indicated in blue and in orange. The purple dashed line represents
the Bayes decision boundary. The orange background grid indicates the region
in which a test observation will be assigned to the orange class, and the blue
background grid indicates the region in which a test observation will be assigned
to the blue class.
to the orange class, and similarly an observation on the blue side of the
boundary will be assigned to the blue class.
The Bayes classifier produces the lowest possible test error rate, called
theBayes error rate . Since the Bayes classifier will always choose the classBayes error
ratefor which ( 2.10) is largest, the error rate will be 1−max jPr(Y=j|X=x0)
atX=x0. In general, the overall Bayes error rate is given (2.11)
where the expectation averages the probability over all possible values of
X. For our simulated data, the Bayes error rate is 0.133. It is greater than
zero, because the classes overlap in the true population, which implies that
max jPr(Y=j|X=x0)<1for some values of x0. The Bayes error rate is
analogous to the irreducible error, discussed earlier.
K-Nearest Neighbors
In theory we would always like to predict qualitative responses using the
Bayes classifier. But for real data, we do not know the conditional distri-
bution of YgivenX, and so computing the Bayes classifier is impossi-
ble. Therefore, the Bayes classifier serves as an unattainable gold standard
against which to compare other methods. Many approaches attempt to
estimate the conditional distribution of YgivenX, and then classify a
given observation to the class with highest estimated probability. One such
method is the K-nearest neighbors (KNN) classifier. Given a positive in-K-nearest
neighbors2.2 Assessing Model Accuracy 37
tegerKand a test observation x0, the KNN classifier first identifies the
Kpoints in the training data that are closest to x0, represented by N0.
It then estimates the conditional probability for class jas the fraction of
points in N0whose response values equal (2.12)
Finally, KNN classifies the test observation x0to the class with the largest
probability from ( 2.12).
Figure2.14provides an illustrative example of the KNN approach. In
the left-hand panel, we have plotted a small training data set consisting of
six blue and six orange observations. Our goal is to make a prediction for
the point labeled by the black cross. Suppose that we choose K=3. Then
KNN will first identify the three observations that are closest to the cross.
This neighborhood is shown as a circle. It consists of two blue points and
one orange point, resulting in estimated probabilities of 2/3for the blue
class and 1/3for the orange class. Hence KNN will predict that the black
cross belongs to the blue class. In the right-hand panel of Figure 2.14we
have applied the KNN approach with K=3at all of the possible values for
X1andX2, and have drawn in the corresponding KNN decision boundary.
Despite the fact that it is a very simple approach, KNN can often pro-
duce classifiers that are surprisingly close to the optimal Bayes classifier.
Figure2.15displays the KNN decision boundary, using K= 10 , when ap-
plied to the larger simulated data set from Figure 2.13. Notice that even
though the true distribution is not known by the KNN classifier, the KNN
decision boundary is very close to that of the Bayes classifier. The test error
rate using KNN is 0.1363 , which is close to the Bayes error rate of 0.1304 .
The choice of Khas a drastic effect on the KNN classifier obtained.
Figure2.16displays two KNN fits to the simulated data from Figure 2.13,
usingK=1andK= 100 . WhenK=1, the decision boundary is overly
flexible and finds patterns in the data that don’t correspond to the Bayes
decision boundary. This corresponds to a classifier that has low bias but
very high variance. As Kgrows, the method becomes less flexible and
produces a decision boundary that is close to linear. This corresponds to
a low-variance but high-bias classifier. On this simulated data set, neither
K=1 norK= 100 give good predictions: they have test error rates of
0.1695 and0.1925 , respectively.
Just as in the regression setting, there is not a strong relationship be-
tween the training error rate and the test error rate. With K=1, the
KNN training error rate is 0, but the test error rate may be quite high. In
general, as we use more flexible classification methods, the training error
rate will decline but the test error rate may not. In Figure 2.17, we have
plotted the KNN test and training errors as a function of 1/K. As1/Kin-
creases, the method becomes more flexible. As in the regression setting, test error exhibits a characteristic U-shape, declining at first (with a
minimum at approximately K= 10 ) before increasing again when the
method becomes excessively flexible and overfits.38 2. Statistical Learning
oo
ooooooo
ooooo
ooooooo
oooFIGURE 2.14. The KNN approach, using K=3, is illustrated in a simple
situation with six blue observations and six orange observations. Left:a test
observation at which a predicted class label is desired is shown as a black cross.
The three closest points to the test observation are identified, and it is predicted
that the test observation belongs to the most commonly-occurring class, in this
case blue. Right:The KNN decision boundary for this example is shown in black.
The blue grid indicates the region in which a test observation will be assigned to
the blue class, and the orange grid indicates the region in which it will be assigned
to the orange K=10
FIGURE 2.15. The black curve indicates the KNN decision boundary on the
data from Figure 2.13, usingK= 10 . The Bayes decision boundary is shown as
a purple dashed line. The KNN and Bayes decision boundaries are very similar.
In both the regression and classification settings, choosing the bias-variance tradeoff, and the resulting U-shape in the test error, can
make this a difficult task. In Chapter 5, we return to this topic and discuss2.2 Assessing Model Accuracy K=1KNN: K=100
FIGURE 2.16. A comparison of the KNN decision boundaries (solid black
curves) obtained using K=1andK= 100 on the data from Figure 2.13. With
K=1, the decision boundary is overly flexible, while with K= 100 it is not
sufficiently flexible. The Bayes decision boundary is shown as a purple dashed
line.
0.01 0.020.05 0.10 0.200.50 1.000.000.050.100.150.20
1/KError Rate
Training ErrorsTest ErrorsFIGURE 2.17. The KNN training error rate (blue, 200 observations) and test
error rate (orange, 5,000 observations) on the data from Figure 2.13, as the level
of flexibility (assessed using 1/Kon the log scale) increases, or equivalently as
the number of neighbors Kdecreases. The black dashed line indicates the Bayes
error rate. The jumpiness of the curves is due to the small size of the training
data set.
various methods for estimating test error rates and thereby choosing the
optimal level of flexibility for a given statistical learning method.40 2. Statistical Learning
2.3 Lab: Introduction to Python
2.3.1 Getting Started
To run the labs in this book, you will need two things:
1. An installation of Python3, which is the specific version of Pythonused
in the labs.
2. Access to Jupyter, a very popular Pythoninterface that runs code
through a file called a notebook.notebook
You can download and install Python3by following the instructions avail-
able atanaconda.com .
There are a number of ways to get access to Jupyter. Here are just a few:
1. Using Google’s Colaboratory service:colab.research.google.com/ .
2. Using JupyterHub , available at jupyter.org/hub .
3. Using your own jupyter installation. Installation instructions are
available at jupyter.org/install .
Please see the Pythonresources page on the book website statlearning.com
for up-to-date information about getting PythonandJupyterworking on
your computer.
You will need to install the ISLPpackage, which provides access to the
datasets and custom-built functions that we provide. Inside a macOS or
Linux terminal type pip install ISLP ; this also installs most other pack-
ages needed in the labs. The Pythonresources page has a link to the ISLP
documentation website.
To run this lab, download the file Ch2-statlearn-lab.ipynb from the
Pythonresources page. Now run the following code at the command line:
jupyter lab Ch2-statlearn-lab.ipynb .
If you’re using Windows, you can use the start menu to access anaconda ,
and follow the links. For example, to install ISLPand run this lab, you can
run the same code above in an anaconda shell.
2.3.2 Basic Commands
In this lab, we will introduce some simple Pythoncommands. For more
resources about Pythonin general, readers may want to consult the tutorial
atdocs.python.org/3/tutorial/ .
Like most programming languages, Pythonusesfunctions to perform op-functionerations. To run a function called fun, we type fun(input1,input2) , where
the inputs (or arguments )input1andinput2tellPythonhow to run the
function. A function can have any number of inputs. For example, theargumentprint()function outputs a text representation of all of its arguments toprint()the console.
In[1]: print('fit a model with' ,1 1 ,'variables' )2.3 Lab: Introduction to Python 41
fit a model with 11 variables
The following command will provide information about the print()func-
tion.
In[2]: print?
Adding two integers in Pythonis pretty intuitive.
In[3]: 3+5
Out[3]: 8
InPython, textual data is handled using strings. For instance, "hello"andstring'hello'are strings. We can concatenate them using the addition +symbol.
In[4]: "hello" +""+"world"
Out[4]: 'hello world'
A string is actually a type of sequence: this is a generic term for an orderedsequence
list. The three most important types of sequences are lists, tuples, and
strings. We introduce lists now.
The following command instructs Pythonto join together the numbers 3,
4, and 5, and to save them as a listnamedx. When we type x, it gives uslistback the list.
In[5]: x=[ 3 ,4 ,5 ]
x
Out[5]: [3, 4, 5]
Note that we used the brackets []to construct this list.
We will often want to add two sets of numbers together. It is reasonable
to try the following code, though it will not produce the desired results.
In[6]: y=[ 4 ,9 ,7 ]
x+y
Out[6]: [3, 4, 5, 4, 9, 7]
The result may appear slightly counterintuitive: why did Pythonnot add
the entries of the lists element-by-element? In Python, lists hold arbitrary
objects, and are added using concatenation . In fact, concatenation is theconcatenat-
ion behavior that we saw earlier when we entered "hello" + " " + "world" .
This example reflects the fact that Pythonis a general-purpose program-
ming language. Much of Python’s data-specific functionality comes from
otherpackages,notably numpypackage.See more information about numpy.42 2. Statistical Learning
2.3.3 Introduction to Numerical Python
As mentioned earlier, this book makes use of functionality that is contained
in thenumpylibrary, orpackage. A package is a collection of modules Pythondistribution.Thename numpy
is an abbreviation for numerical Python .
To access numpy, we must first importit.import
In[7]: import numpy as np
In the previous line, we named the numpymodule np; an abbreviation formoduleeasier np.array() functiontodefine i.e. vectors.
In[8]: x=n p . a r r a y ( [ 3 ,4 ,5 ] )
y=n p . a r r a y ( [ 4 ,9 ,7 ] )
Note that if you forgot to run the import numpy as np command earlier,
then you will encounter an error in calling the np.array() function in
the previous line. The syntax np.array() indicates that the function be-
ing called is part of the numpypackage, which we have abbreviated as np.
Sincexandyhave been defined using np.array() , we get a sensible result
when we add them together. Compare this to our results in the previous
section, when we tried to add two lists without using numpy.
In[9]: x+y
Out[9]: array([ 7, 13, 12])
Innumpy, matrices are typically represented as two-dimensional arrays,
and vectors as one-dimensional arrays.1We can create a two-dimensional
array as follows.
In[10]: x=n p . a r r a y ( [ [ 1 ,2 ] ,[ 3 ,4 ] ] )
x
Out[10]: array([[1, 2],
[3, 4]])
The object xhas several attributes , or associated objects. To access anattributeattribute of x, we type x.attribute , where we replace attribute with the
name of the attribute. For instance, we can access the ndimattribute of xndimas follows.
In[11]: x.ndim
Out[11]: 2
The output indicates that xis a two-dimensional array. Similarly, x.dtype
is thedata type attribute of the object x. This indicates that xis compriseddata typeof 64-bit integers:
1While it is also possible to create matrices using np.matrix() , we will use
np.array() throughout the labs in this book.2.3 Lab: Introduction to Python 43In[12]:x.dtypeOut[12]:dtype('int64')Why isxcomprised of integers? This is because we createdxby passingin exclusively integers to thenp.array()function. If we had passed in anydecimals, then we would have obtained an array offloating point numbersfloatingpoint(i.e. real-valued numbers).In[13]:np.array([[1, 2], [3.0, causePythonto display documentation associated withthe functionfun, if it exists. We can try this fornp.array().In[14]:np.array?This documentation indicates that we could create a floating point arrayby passing adtypeargument intonp.array().dtypeIn[15]:np.array([[1, 2], [3, 4]], float).dtypeOut[15]:dtype('float64')The arrayxis two-dimensional. We can find out the number of rows andcolumns by looking at 2)Amethodis a function that is associated with an object. For instance,methodgiven an arrayx, the expressionx.sum()sums all of its elements, using thesum()method for arrays. The callx.sum()automatically providesxas the.sum()first argument to itssum()method.In[17]:x=n p . a r r a y ( [ 1 ,2 ,3 ,4 ] )x.sum()Out[17]:10We could also sum the elements ofxby passing inxas an argument to thenp.sum()function.np.sum()In[18]:x=n p . a r r a y ( [ 1 ,2 ,3 ,4 ] )np.sum(x)Out[18]:10As another example, thereshape()method returns a new array with the.reshape()same elements asx, but a different shape. We do this by passing in atupletuple44 2. Statistical Learning
in our call to reshape() , in this case (2, 3). This tuple specifies that we
would like to create a two-dimensional array with 2rows and 3columns.2
In what follows, the \ncharacter creates a new line.
In[19]: x=n p . a r r a y ( [ 1 ,2 ,3 ,4 ,5 ,6 ] )
print('beginning x:\n' ,x )
x_reshape = x.reshape((2, 3))
print('reshaped x:\n' ,x _ r e s h a p e )
beginning x:
[1 2 3 4 5 6]
reshaped x:
[[1 2 3]
[4 5 6]]
The previous output reveals that numpyarrays are specified as a sequence
ofrows. This is called row-major ordering , as opposed to column-major
ordering.
Python(and hence numpy) uses 0-based indexing. This means that to
access the top left element of x_reshape , we type in x_reshape[0,0] .
In[20]: x_reshape[0, 0]
Out[20]: 1
Similarly, x_reshape[1,2] yields the element in the second row and the
third column of x_reshape .
In[21]: x_reshape[1, 2]
Out[21]: 6
Similarly, x[2]yields the third entry of x.
Now, let’s modify the top left element of x_reshape . To our surprise, we
discover that the first element of xhas been modified as well!
In[22]: print('x before we modify x_reshape:\n' ,x )
print('x_reshape before we modify x_reshape:\n' ,x _ r e s h a p e )
x_reshape[0, 0] = 5
print('x_reshape after we modify its top left element:\n' ,
x_reshape)
print('x after we modify top left element of x_reshape:\n' ,x )
Out[22]: xb e f o r ew em o d i f yx _ r e s h a p e :
[1 2 3 4 5 6]
x_reshape before we modify x_reshape:
[[1 2 3]
[4 5 6]]
x_reshape after we modify its top left element:
[[5 2 3]
2Like lists, tuples represent a sequence of objects. Why do we need more than one way
to create a sequence? There are a few differences between tuples and lists, but perhaps
the most important is that elements of a tuple cannot be modified, whereas elements of
a list can be.2.3 Lab: Introduction to Python 45[4 5 6]]xa f t e rw em o d i f yt o pl e f te l e m e n to fx _ r e s h a p e :[5 2 3 4 5 6]Modifyingx_reshapealso modifiedxbecause the two objects occupy thesame space in a tuple? It turns out that we cannot — and trying to do so introducesanexception, or error.exceptionIn[23]:my_tuple = (3, 4, 5)my_tuple[0] = 2TypeError:'tuple'object does not support item array’sshapeattribute contains its dimension; this is always a tuple.Thendimattribute yields the number of dimensions, andTprovides itstranspose.In[24]:x_reshape.shape, x_reshape.ndim, x_reshape.TOut[24]:((2, 3),2,array([[5, 4],[2, 5],[3, 6]]))Notice that the three individual outputs(2,3),2, andarray([[5, 4],[2,5], [3,6]])are themselves output as a tuple.We will often want to apply functions to arrays. For instance, we cancompute the square root of the entries using 1.41, 1.73, 2., 2.24, 2.45])We can also square the elements:In[26]:x**2Out[26]:array([25, 4, 9, 16, 25, 36])We can compute the square roots using the same notation, raising to thepower of1/2instead of 2.In[27]:x**0.5Out[27]:array([2.24, 1.41, 1.73, 2., 2.24, 2.45])Throughout this book, we will often want to generate random data. The first line of the help page readsnormal(loc=0.0,scale=1.0, size=None). Thissignatureline tells us that the function’s ar-signature46 2. Statistical Learning
guments are loc,scale, andsize. These are keyword arguments, whichkeywordmeans that when they are passed into the function, they can be referred
to by name (in any order).3By default, this function will generate random
normal variable(s) with mean ( loc)0and standard deviation ( scale)1; fur-
thermore, a single random variable will be generated unless the argument
tosizeis changed.
We now generate 50 independent random variables from a N(0,1)dis-
tribution.
In[28]: x=n p . r a n d o m . n o r m a l ( s i z e = 5 0 )
x
Out[28]: array([-1.19, 0.41, 0.9 , -0.44, -0.9 , -0.38, 0.13, 1.87,
-0.35, 1.16, 0.79, -0.97, -1.21, 0.06, -1.62, -0.6 ,
-0.77, -2.12, 0.38, -1.22, -0.06, -1.97, -1.74, -0.56,
1.7 , -0.95, 0.56, 0.35, 0.87, 0.88, -1.66, -0.32,
-0.3 , -1.36, 0.92, -0.31, 1.28, -1.94, 1.07, 0.07,
0.79, -0.46, 2.19, -0.27, -0.64, 0.85, 0.13, 0.46,
-0.09, 0.7 ])
We create an array yby adding an independent N(50,1)random variable
to each element of x.
In[29]: y=x+n p . r a n d o m . n o r m a l ( l o c = 5 0 ,s c a l e = 1 ,s i z e = 5 0 )
Thenp.corrcoef() functioncomputesthecorrelationmatrixbetween xandnp.corrcoef()y. The off-diagonal elements give the correlation between xandy.
In[30]: np.corrcoef(x, y)
Out[30]: array([[1. , 0.69],
[0.69, 1. ]])
If you’re following along in your own Jupyternotebook, then you probably
noticed that you got a different set of results when you ran the past few
commands. In particular, each time we call np.random.normal() , we will get
a different answer, as shown in the following example.
In[31]: print(np.random.normal(scale=5, size=2))
print(np.random.normal(scale=5, size=2))
Out[31]: [4.28 2.59]
[4.62 -2.54]
In order to ensure that our code provides exactly the same results each
time it is run, we can set a random seed using the np.random.default_rng()random seed
np.random.
default_rng()function. This function takes an arbitrary, user-specified integer argument.
If we set a random seed before generating random data, then re-running
our code will yield the same results. The object rnghas essentially all the
3Python also uses positional arguments. Positional arguments do not need to use a
keyword. To see an example, type in np.sum? . We see that ais a positional argument,
i.e. this function assumes that the first unnamed argument that it receives is the array
to be summed. By contrast, axisanddtypeare keyword arguments: the position in
which these arguments are entered into np.sum() does not matter.2.3 Lab: Introduction to Python data we userng.normal().In[32]:rng = size=2))rng2 = size=2))Out[32]:[4.09 -1.07 ][4.09 -1.07 ]Throughout the labs in this book, we usenp.random.default_rng()when-ever we perform calculations involving random quantities withinnumpy. Inprinciple, this should enable the reader to exactly reproduce the statedresults. However, as new versions ofnumpybecome available, it is possiblethat some small discrepancies may occur between the output in the labsand the output fromnumpy.Thenp.mean(),np.var(), andnp.std()functions can be used to computenp.mean()np.var()np.std()the mean, variance, and standard deviation of arrays. These functions arealso available as methods on the arrays.In[33]:rng = np.random.default_rng(3)y=r n g . s t a n d a r d _ n o r m a l ( 1 0 )np.mean(y), y.mean()Out[33]:(-0.11, -0.11)In[34]:np.var(y), y.var(), np.mean((y - y.mean())**2)Out[34]:(2.72, 2.72, 2.72)Notice that by defaultnp.var()divides by the sample sizenrather thann−1; see theddofargument innp.var?.In[35]:np.sqrt(np.var(y)), np.std(y)Out[35]:(1.65, 1.65)Thenp.mean(),np.var(), andnp.std()functions can also be applied to therows and columns of a matrix. To see this, we construct a10×3matrix ofN(0,1)random variables, and consider computing its row sums.In[36]:X=r n g . s t a n d a r d _ n o r m a l ( ( 1 0 ,3 ) )XOut[36]:array([[ 0.23, -0.35, -0.28],[-0.67, -1.06, -0.39],[0 . 4 8 ,- 0 . 2 4 , 0 . 9 6 ] ,[-0.2 , 0.02, 1.55],[0 . 5 5 ,- 0 . 5 1 ,- 0 . 1 8 ] ,[0 . 5 4 , 1 . 9 4 ,- 0 . 2 7 ] ,[-0.24, 1. , -0.89],[-0.29, 0.88, 0.58],[0 . 0 9 , 0 . 6 7 ,- 2 . 8 3 ] ,[1 . 0 2 ,- 0 . 9 6 ,- 1 . 6 7 ] ] )48 2. Statistical Learning
Since arrays are row-major ordered, the first axis, i.e. axis=0, refers to its
rows. We pass this argument into the mean()method for the object X..mean()
In[37]: X.mean(axis=0)
Out[37]: array([0.15, 0.14, -0.34])
The following yields the same result.
In[38]: X.mean(0)
Out[38]: array([0.15, 0.14, -0.34])
2.3.4 Graphics
InPython, common practice is to use the library matplotlib for graphics.matplotlibHowever, since Pythonwas not written with data analysis in mind, the no-
tion of plotting is not intrinsic to the language. We will use the subplots()
function from matplotlib.pyplot to create a figure and the axes onto which
we plot our data. For many more examples of how to make plots in Python,
readers are encouraged to visit matplotlib.org/stable/gallery/ .
Inmatplotlib , a plot consists of a figureand one or more axes. You canfigure
axesthink of the figure as the blank canvas upon which one or more plots will
be displayed: it is the entire plotting window. The axescontain important
information about each plot, such as its x- andy-axis labels, title, and
more. (Note that in matplotlib , the word axesis not the plural of axis:a
plot’saxescontains much more information than just the x-axis and the
y-axis.)
We begin by importing the subplots() function from matplotlib .W esubplots()use this function throughout when creating figures. The function returns
a tuple of length two: a figure object as well as the relevant axes object.
We will typically pass figsizeas a keyword argument. Having created our
axes, we attempt our first plot using its plot()method. To learn more.plot()about it, type ax.plot? .
In[39]: from matplotlib.pyplot import subplots
fig, ax = subplots(figsize=(8, 8))
x=r n g . s t a n d a r d _ n o r m a l ( 1 0 0 )
y=r n g . s t a n d a r d _ n o r m a l ( 1 0 0 )
ax.plot(x, y);
We pause here to note that we have unpacked the tuple of length two re-
turned by subplots() into the two distinct variables figandax. Unpacking
is typically preferred to the following equivalent but slightly more verbose
code:
In[40]: output = subplots(figsize=(8, 8))
fig = output[0]
ax = output[1]
We see that our earlier cell produced a line plot, which is the default.
To create a scatterplot, we provide an additional argument to ax.plot() ,
indicating that circles should be displayed.2.3 Lab: Introduction to Python 49In[41]:fig, ax = subplots(figsize=(8, 8))ax.plot(x, lines as well as different linestyles.As an alternative, we could use theax.scatter()function to create a.scatter()scatterplot.In[42]:fig, ax = subplots(figsize=(8, 8))ax.scatter(x, y, marker='o');Notice that in the code blocks above, we have ended the last line with asemicolon. This preventsax.plot(x, y)from printing text to the notebook.However, it does not prevent a plot from being produced. If we omit thetrailing semi-colon, then we obtain the following output:In[43]:fig, ax = subplots(figsize=(8, 8))ax.scatter(x, y, at 0x7fb3d9c8f310>Figure(432x288)In what follows, we will use trailing semicolons whenever the text thatwould be output is not germane to the discussion at hand.To label our plot, we make use of theset_xlabel(),set_ylabel(), ofax..set_title()In[44]:fig, ax = subplots(figsize=(8, 8))ax.scatter(x, y, marker='o')ax.set_xlabel("this is the x-axis")ax.set_ylabel("this is the y-axis")ax.set_title("Plot of X vs Y");Having access to the figure objectfigitself means that we can go in andchange some aspects and then redisplay it. Here, we change the size from(8, 8)to(12, 3).fig.set_size_inches(12,3)figOccasionally we will want to create several plots within a figure. Thiscan be achieved by passing additional arguments tosubplots(). Below, wecreate a2×3grid of plots in a figure of size determined by thefigsizeargument. In such situations, there is often a relationship between theaxes in the plots. For example, all plots may have a commonx-axis. Thesubplots()function can automatically handle this situation when passedthe keyword argumentsharex=True. Theaxesobject below is an arraypointing to different plots in the figure.In[45]:fig, axes = subplots(nrows=2,ncols=3,figsize=(15, 5))We now produce a scatter plot with'o'in the second column of the firstrow and a scatter plot with'+'in the third column of the second row.50 2. Statistical LearningIn[46]:axes[0,1].plot(x, y,'o')axes[1,2].scatter(x, y, marker='+')figTypesubplots?to learn more aboutsubplots().To save the output offig, we call itssavefig()method. The argument.savefig()dpiis the dots per inch, used to determine how large the figure will be inpixels.In[47]:fig.savefig("Figure.png",d p i = 4 0 0 )fig.savefig("Figure.pdf",d p i = 2 0 0 ) ;We can continue to modifyfigusing step-by-step updates; for now create some more sophisticated plots. plotto a topographical map. It takes three arguments:• A vector ofxvalues (the first dimension),• A vector ofyvalues (the second dimension), and• A matrix whose elements correspond to thezvalue (the third dimen-sion) for each pair of(x,y)coordinates.To createxandy, we’ll use the commandnp.linspace(a, b, n), whichnp.linspace()returns a vector ofnnumbers starting ataand ending atb.In[49]:fig, ax = subplots(figsize=(8, 8))x=n p . l i n s p a c e ( - n p . p i ,n p . p i ,5 0 )y=xf=n p . m u l t i p l y . o u t e r ( n p . c o s ( y ) ,1/( 1+x * * 2 ) )ax.contour(x, y, f);We can increase the resolution by adding more levels to the image.In[50]:fig, ax = subplots(figsize=(8, 8))ax.contour(x, y, f, levels=45);To fine-tune the output of theax.contour()function, take a look at thehelp file by typing?plt.contour.Theax.imshow()method is similar toax.contour(), except that it pro-.imshow()duces a color-coded plot whose colors depend on thezvalue. This is knownas aheatmap, and is sometimes used to plot temperature in weather fore-heatmapcasts.In[51]:fig, ax = subplots(figsize=(8, 8))ax.imshow(f);2.3 Lab: Introduction to Python 512.3.5 Sequences and Slice NotationAs seen above, the functionnp.linspace()can be used to create a sequenceof numbers.In[52]:seq1 = np.linspace(0, 10, 11)seq1Out[52]:array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10.])The functionnp.arange()returns a sequence of numbers spaced out bynp.arange()step. Ifstepis not specified, then a default value of1is used. Let’s createa sequence that starts at0and ends at10.In[53]:seq2 = np.arange(0, 10)seq2Out[53]:array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])Why isn’t10output above? This has to do withslicenotation inPython.sliceSlice notation is used to index sequences such as lists, tuples and arrays.Suppose we want to retrieve the fourth through sixth (inclusive) entries ofa string. We obtain a slice of the string using the indexing notation[3:6].In[54]:"hello world"[3:6]Out[54]:'lo 'In the code block above, the notation3:6is shorthand forslice(3,6)whenused inside[].In[55]:"hello world"[slice(3,6)]Out[55]:'lo 'You might have expectedslice(3,6)to output the fourth through seventhcharacters in the text string (recalling thatPythonbegins its indexing atzero), but instead it output the fourth through sixth. This also explainswhy the earliernp.arange(0, 10)command output only the integers from0to9. See the documentationslice?for useful options in creating slices.2.3.6 Indexing DataTo begin, we create a two-dimensionalnumpyarray.In[56]:A=n p . a r r a y ( n p . a r a n g e ( 1 6 ) ) . r e s h a p e ( ( 4 ,4 ) )AOut[56]:array([[ 0, 1, 2, 3],[4 , 5 , 6 , 7 ] ,[8 , 9 ,1 0 ,1 1 ] ,[12, 13, 14, 15]])TypingA[1,2]retrieves the element corresponding to the second row andthird column. (As usual,Pythonindexes from0.)52 2. Statistical LearningIn[57]:A[1,2]Out[57]:6The first number after the open-bracket symbol[refers to the row, andthe second number refers to the column.Indexing Rows, Columns, and SubmatricesTo select multiple rows at a time, we can pass in a list specifying ourselection. For instance,[1,3]will retrieve the second and fourth rows:In[58]:A[[1,3]]Out[58]:array([[ 4, 5, 6, 7],[12, 13, 14, 15]])To select the first and third columns, we pass in[0,2]as the second ar-gument in the square brackets. In this case we need to supply the firstargument:which selects all rows.In[59]:A[:,[0,2]]Out[59]:array([[ 0, 2],[4 , 6 ] ,[8 ,1 0 ] ,[12, 14]])Now, suppose that we want to select the submatrix made up of the secondand fourth rows as well as the first and third columns. This is where index-ing gets slightly tricky. It is natural to try to use lists to retrieve the rowsand columns:In[60]:A[[1,3],[0,2]]Out[60]:array([ 4, 14])Oops — what happened? We got a one-dimensional array of length twoidentical 4, 14])Similarly, the following code fails to extract the submatrix comprised ofthe second and fourth rows and the first, third, and fourth columns:In[62]:A[[1,3],[0,2,3]]IndexError: shape mismatch: indexing arrays could not be broadcasttogether with shapes (2,) (3,)2.3 Lab: Introduction to Python 53We can see what has gone wrong here. When supplied with two indexinglists, thenumpyinterpretation is that these provide pairs ofi, jindices fora series of entries. That is why the pair of lists must have the same length.However, that was not our intent, since we are looking for a submatrix.One easy way to do this is as follows. We first create a submatrix bysubsetting the rows ofA, and then on the fly we make a further submatrixby subsetting its 4, 6],[12, 14]])There are more efficient ways of achieving the same result.Theconvenience by creating an intermediatemeshobject.meshIn[64]:idx = np.ix_([1,3],[0,2,3])A[idx]Out[64]:array([[ 4, 6, 7],[12, 14, 15]])Alternatively, we can subset matrices efficiently using slices. The slice1:4:2captures the second and fourth items of a sequence, while the slice0:3:2captures the first and third items (the third element in a slice se-quence is the step size).In[65]:A[1:4:2,0:3:2]Out[65]:array([[ 4, 6],[12, Its because they are differentPythontypes, and are treated differentlybynumpy. Slices can be used to extract objects from arbitrary sequences,such as strings, lists, and tuples, while the use of lists for indexing is morelimited.Boolean IndexingInnumpy,aBooleanis a type that equals eitherTrueorFalse(also rep-Booleanresented as1and0, respectively). The next line creates a vector of0’s,represented as Booleans, of length equal to the first dimension ofA.In[66]:keep_rows = np.zeros(A.shape[0], bool)keep_rowsOut[66]:array([False, False, False, False])We now set two of the elements toTrue.In[67]:keep_rows[[1,3]] = Truekeep_rows54 2. Statistical LearningOut[67]:array([False, True, False, True])Note that the elements ofkeep_rows, when viewed as integers, are the sameasthe equal-ity. When applied to two arrays, the==operation is applied elementwise.In[68]:np.all(keep_rows == np.array([0,1,0,1]))Out[68]:True(Here, the functionnp.all()has checked whether all entries of an arraynp.all()areTrue. A similar function,np.any(), can be used to check whether anynp.any()entries of an array areTrue.)However, even thoughnp.array([0,1,0,1])andkeep_rowsare equal ac-cording to==, they index different sets of rows! The former retrieves thefirst, second, first, and second rows 1, 2, 3],[4, 5, 6, 7],[0, 1, 2, 3],[4, 5, 6, 7]])By contrast,keep_rowsretrieves only the second and fourth rows ofA—i.e. the rows for which the Boolean 4, 5, 6, 7],[12, 13, 14, 15]])This example shows that Booleans and integers are treated differently bynumpy.We again make use of thenp.ix_()function to create a mesh containingthe second and fourth rows, and the first, third, and fourth columns. Thistime, we apply the function to Booleans, rather than lists.In[71]:keep_cols = np.zeros(A.shape[1], bool)keep_cols[[0, 2, 3]] = Trueidx_bool = np.ix_(keep_rows, keep_cols)A[idx_bool]Out[71]:array([[ 4, 6, 7],[12, 14, 15]])We can also mix a list with an array of Booleans in the arguments tonp.ix_():In[72]:idx_mixed = np.ix_([1,3], keep_cols)A[idx_mixed]Out[72]:array([[ 4, 6, 7],[12, 14, 15]])For more details on indexing innumpy, readers are referred to thenumpytutorial mentioned earlier.2.3 Lab: Introduction to Python 552.3.7 Loading DataData sets often contain different types of data, and may have names as-sociated with the rows or columns. For these reasons, they typically arebest accommodated using adata frame. We can think of a data frame asdata framea sequence of arrays of identical length; these are the columns. Entries inthe different arrays can be combined to form a row. Thepandaslibrary canbe used to create and work with data frame objects.Reading in a Data SetThe first step of most analyses involves importing a data set intoPython.Before attempting to load a data set, we must make sure thatPythonknowswhere to find the file containing it. If the file is in the same location as thisnotebook file, then we are all set. Otherwise, the commandos.chdir()canos.chdir()be used tochange directory. (You will need to callimport osbefore callingos.chdir().)We will begin by reading inAuto.csv, available on the book website. Thisis a comma-separated file, and can be read in usingpd.read_csv():pd.read_csv()In[73]:import pandas as pdAuto = pd.read_csv('Auto.csv')AutoThe book website also has a whitespace-delimited version of this data,calledAuto.data. This can be read in as follows:In[74]:Auto = pd.read_csv('Auto.data',d e l i m _ w h i t e s p a c e = T r u e )BothAuto.csvandAuto.dataare simply text files. Before loading data intoPython, it is a good idea to view it using a text editor or other software,such as Microsoft Excel.We now take a look at the column ofAutocorresponding to the 3 0 . 011 6 5 . 021 5 0 . 031 5 0 . 041 4 0 . 0...392 86.00393 52.00394 84.00395 79.00396 82.00Name: horsepower, Length: 397, dtype: objectWe see that thedtypeof this column isobject. It turns out that all valuesof thehorsepowercolumn were interpreted as strings when reading in thedata. We can find out why by looking at the unique values.In[76]:np.unique(Auto['horsepower'])56 2. Statistical LearningTo save space, we have omitted the output of the previous code block. Wesee the culprit is the value?, which is being used to encode missing values.To fix the problem, we must providepd.read_csv()with an argumentcalledna_values. Now, each instance of?in the file is replaced with thevaluenp.nan, which meansnot a number:In[77]:Auto = tells us that the data has 397 observations, orrows, and nine variables, or columns.In[78]:Auto.shapeOut[78]:(397, 9)There are various ways to deal with missing data. In this case, sinceonly five of the rows contain missing observations, we choose to use theAuto.dropna()method to simply remove these rows..dropna()In[79]:Auto_new = Auto.dropna()Auto_new.shapeOut[79]:(392, 9)Basics of Selecting Rows and ColumnsWe can useAuto.columnsto check the variable names.In[80]:Auto = Auto_new#o v e r w r i t et h ep r e v i o u sv a l u the rows and columns of a data frame is similar, but not iden-tical, to accessing the rows and columns of an array. Recall that the firstargument to the[]method is always applied to the rows of the array. Sim-ilarly, passing in a slice to the[]method creates a data frame whoserowsare determined by the slice:In[81]:Auto[:3]Out[81]:mpg cylinders displacement horsepower weight ...01 8 . 08307.0 130.0 3504.0 ...11 5 . 08350.0 165.0 3693.0 ...21 8 . 08318.0 150.0 3436.0 ...Similarly, an array of Booleans can be used to subset the rows:2.3 Lab: Introduction to Python 57In[82]:idx_80 = Auto['year']>8 0Auto[idx_80]However, if we pass in a list of strings to the[]method, then we obtain adata frame containing the corresponding set horsepower01 8 . 0 1 3 0 . 011 5 . 0 1 6 5 . 021 8 . 0 1 5 0 . 0316.0 150.041 7 . 0 1 4 0 . 0... ... ...392 27.0 86.0393 44.0 52.0394 32.0 84.0395 28.0 79.0396 31.0 82.0392 rows x 2 columnsSince we did not specify anindexcolumn when we loaded our data frame,the rows are labeled using integers 0 to 396.In[84]:Auto.indexOut[84]:Int64Index([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,...387, 388, 389, 390, 391, 392, 393, 394, 395, 396],dtype='int64',l e n g t h = 3 9 2 )We can use theset_index()method to re-name the rows using the = Auto.set_index('name')Auto_reOut[85]:mpg cylinders displacement ...namechevrolet chevelle malibu 18.08307.0 ...buick skylark 32 15.08350.0 ...plymouth satellite 18.08318.0 ...amc rebel sst 16.08304.0 see that the column'name'is no longer there.Now that the index has been set toname, we can access rows of the dataframe bynameusing theloc[]method ofAuto:.loc[]58 2. Statistical LearningIn[87]:rows = ['amc rebel sst','ford torino']Auto_re.loc[rows]Out[87]:mpg cylinders displacement horsepower ...nameamc rebel sst 16.08304.0 150.0 ...ford torino 17.08302.0 140.0 ...As an alternative to using the index name, we could retrieve the 4th and5th rows ofAutousing can also use it to retrieve the 1st, 3rd and and 4th columns ofAuto_re:In[89]:Auto_re.iloc[:,[0,2,3]]We can extract the 4th and 5th rows, as well as the 1st, 3rd and 4thcolumns, using a single call displacement horsepowernameamc rebel sst 16.0304.0 150.0ford torino 17.0302.0 140.0Index entries need not be unique: there are several cars in the data framenamedford galaxie 500.In[91]:Auto_re.loc['ford galaxie 500',['mpg','origin']]Out[91]:mpg originnameford galaxie 500 15.01ford galaxie 500 14.01ford galaxie 500 14.01More on Selecting Rows and ColumnsSuppose now that we want to create a data frame consisting of theweightandoriginof the subset of cars withyeargreater than 80 — i.e. thosebuilt after 1980. To do this, we first create a Boolean array that indexesthe rows. Theloc[]method allows for Boolean entries as well as strings:In[92]:idx_80 = Auto_re['year']>8 0Auto_re.loc[idx_80, ['weight','origin']]To do this more concisely, we can use an anonymous function called alambda:lambdaIn[93]:Auto_re.loc[lambda df: df['year']>8 0 ,['weight','origin']]Thelambdacall creates a function that takes a single argument, heredf,and returnsdf['year']>80. Since it is created inside theloc[]method for2.3 Lab: Introduction to Python 59the dataframeAuto_re, that dataframe will be the argument supplied. Asanother example of using alambda, suppose that we want all cars built after1980 that achieve greater than 30 miles per gallon:In[94]:Auto_re.loc[lambda df: (df['year']>8 0 )&( d f ['mpg']>3 0 ) ,['weight','origin']]The symbol&computes an element-wiseandoperation. As another ex-ample, suppose that we want to retrieve allFordandDatsuncars withdisplacementless than 300. We check whether eachnameentry containseither the stringfordordatsunusing thestr.contains()method of the.str.contains()indexattribute of of the dataframe:In[95]:Auto_re.loc[lambda df: (df['displacement']<3 0 0 )&( d f . i n d e x . s t r . c o n t a i n s ('ford')|d f . i n d e x . s t r . c o n t a i n s ('datsun')),['weight','origin']]Here, the symbol|computes an element-wiseoroperation.In summary, a powerful set of operations is available to index the rowsand columns of data frames. For integer based queries, use theiloc[]method. For string and Boolean selections, use theloc[]method. Forfunctional queries that filter rows, use theloc[]method with a function(typically alambda) in the rows argument.2.3.8 For LoopsAforloop is a standard tool in many languages that repeatedly evaluatesforsome chunk of code while varying different values inside the code. Forexample, suppose we loop over elements of a list and compute their sum.In[96]:total = 0for value in [3,2,19]:total += valueprint('Total is: {0}'.format(total))Total is: 24The indented code beneath the line with theforstatement is run for eachvalue in the sequence specified in theforstatement. The loop ends eitherwhen the cell ends or when code is indented at the same level as the originalforstatement. We see that the final line above which prints the total isexecuted only once after the for loop has terminated. Loops can be nestedby additional indentation.In[97]:total = 0for value in [2,3,19]:for weight in [3, 2, 1]:total += value * weightprint('Total is: {0}'.format(total))Total is: 14460 2. Statistical LearningAbove, we summed over each combination ofvalueandweight. We alsotook advantage of theincrementnotation inPython: the expressiona += bincrementis equivalent toa=a+b. Besides being a convenient notation, this cansave time in computationally heavy tasks in which the intermediate valueofa+bneed not be explicitly created.Perhaps a more common task would be to sum over(value, weight)pairs. For instance, to compute the average value of a random variablethat takes on possible values 2, 3 or 19 with probability 0.2, 0.3, 0.5 respec-tively we would compute the weighted sum. Tasks such as this can often beaccomplished using thezip()function that loops over a sequence of tuples.zip()In[98]:total = 0for value, weight in zip([2,3,19],[0.2,0.3,0.5]):total += weight * valueprint('Weighted average is: {0}'.format(total))Weighted average is: 10.8String FormattingIn the code chunk above we also printed a string displaying the total.However, the objecttotalis an integer and not a string. Inserting thevalue of something into a string is a common task, made simple using someof the powerful string formatting tools inPython. Many data cleaning tasksinvolve manipulating and programmatically producing strings.For example we may want to loop over the columns of a data frameand print the percent missing in each column. Let’s create a data frameDwith columns in which 20% of the entries are missing i.e. set tonp.nan.np.nanWe’ll create the values inDfrom a normal distribution with mean 0 andvariance 1 usingrng.standard_normal()and then overwrite some randomentries usingrng.choice().In[99]:rng = np.random.default_rng(1)A=r n g . s t a n d a r d _ n o r m a l ( ( 1 2 7 ,5 ) )M=r n g . c h o i c e ( [ 0 ,n p . n a n ] ,p = [ 0 . 8 , 0 . 2 ] ,s i z e = A . s h a p e )A+ =MD=p d . D a t a F r a m e ( A ,c o l u m n s = bar pickle snack popcorn00 . 3 4 5 5 8 40 . 8 2 1 6 1 8 0 . 3 3 0 4 3 7 - 1 . 3 0 3 1 5 7 N a N1N a N - 0 . 5 3 6 9 5 3 0 . 5 8 1 1 1 8 0 . 3 6 4 5 7 2 0 . 2 9 4 1 3 22N a N 0 . 5 4 6 7 1 3 N a N - 0 . 1 6 2 9 1 0 - 0 . 4 8 2 1 1 9In[100]:for col in D.columns:template ='Column "{0}" has {1:.2%} missing Lab: Introduction to Python 61
Column "food" has 16.54% missing values
Column "bar"has 25.98% missing values
Column "pickle" has 29.13% missing values
Column "snack" has 21.26% missing values
Column "popcorn" has 22.83% missing values
We see that the template.format() method expects two arguments {0}and
{1:.2%}, and the latter includes some formatting information. In particular,
it specifies that the second argument should be expressed as a percent with
two decimal digits.
Thereference docs.python.org/3/library/string.html includesmanyhelp-
ful and more complex examples.
2.3.9 Additional Graphical and Numerical Summaries
We can use the ax.plot() orax.scatter() functions to display the quan-
titative variables. However, simply typing the variable names will produce
an error message, because Pythondoes not know to look in the Autodata
set for those variables.
In[101]: fig, ax = subplots(figsize=(8, 8))
ax.plot(horsepower, mpg, 'o');
NameError: name 'horsepower' is not defined
We can address this by accessing the columns directly:
In[102]: fig, ax = subplots(figsize=(8, 8))
ax.plot(Auto[ 'horsepower' ], Auto[ 'mpg'],'o');
Alternatively, we can use the plot()method with the call Auto.plot() . Us-.plot()ing this method, the variables can be accessed by name. The plot methods
of a data frame return a familiar object: an axes. We can use it to update
the plot as we did previously:
In[103]: ax = Auto.plot.scatter( 'horsepower' ,'mpg');
ax.set_title( 'Horsepower vs. MPG' )
If we want to save the figure that contains a given axes, we can find the
relevant figure by accessing the figureattribute:
In[104]: fig = ax.figure
fig.savefig( 'horsepower_mpg.png' this case the corresponding plot()method will return the modified axes
we passed in as an argument. Note that when we request a one-dimensional
grid of plots, the object axesis similarly one-dimensional. We place our
scatter plot in the middle plot of a row of three plots within a figure.
In[105]: fig, axes = subplots(ncols=3, figsize=(15, 5))
Auto.plot.scatter( 'horsepower' ,'mpg',a x = a x e s [ 1 ] ) ;
Note also that the columns of a data frame can be accessed as attributes:
try typing in Auto.horsepower .62 2. Statistical that it is being treated as a quantitative variable. However, sincethere is only a small number of possible values for this variable, we maywish to treat it as qualitative. Below, we replace thecylinderscolumn witha categorical version ofAuto.cylinders. The functionpd.Series()owes itspd.Series()name to the fact thatpandasis often used in time series applications.In[106]:Auto.cylinders = pd.Series(Auto.cylinders, dtype='category')Auto.cylinders.dtypeNow thatcylindersis qualitative, we can display it using theboxplot().boxplot()method.In[107]:fig, ax = subplots(figsize=(8, 8))Auto.boxplot('mpg',b y ='cylinders',a x = a x ) ;Thehist()method can be used to plot ahistogram..hist()In[108]:fig, ax = subplots(figsize=(8, 8))Auto.hist('mpg',a x = a x ) ;The color of the bars and the number of bins can be changed:In[109]:fig, ax = subplots(figsize=(8, 8))Auto.hist('mpg',c o l o r ='red',b i n s = 1 2 ,a x = a x ) ;SeeAuto.hist?for more plotting options.We can use thepd.plotting.scatter_matrix()function to create ascat-pd.plotting.scatter_matrix()terplot matrixto visualize all of the pairwise relationships between thecolumns in a data can also produce scatterplots for a subset of the produces a numerical summary of each column in.describe()a data can also produce a summary of just a single exitJupyter, selectFile / Close and Halt.2.4 Exercises 632.4 ExercisesConceptual1. the performance of a flexible statistical learning method to bebetter or worse than an inflexible method. Justify your answer.(a) The sample sizenis extremely large, and the number of predic-torspis small.(b) The number of predictorspis extremely large, and the numberof observationsnis small.(c) The relationship between the predictors and response is highlynon-linear.(d) The variance of the error terms, i.e.σ2=Var(/epsilon1), is extremelyhigh.2. Explain whether each scenario is a classification or regression prob-lem, and indicate whether we are most interested in inference or pre-diction. Finally, providenandp.(a) We collect a set of data on the top 500 firms in the US. For eachfirm we record profit, number of employees, industry and theCEO salary. We are interested in understanding which factorsaffect CEO salary.(b) We are considering launching a new product and wish to knowwhether it will be asuccessor afailure. We collect data on 20similar products that were previously launched. For each prod-uct we have recorded whether it was a success or failure, pricecharged for the product, marketing budget, competition price,and ten other variables.(c) We are interested in predicting the % change in the USD/Euroexchange rate in relation to the weekly changes in the worldstock markets. Hence we collect weekly data for all of 2012. Foreach week we record the % change in the USD/Euro, the %change in the US market, the % change in the British market,and the % change in the German market.3. We now revisit the bias-variance decomposition.(a) Provide a sketch of typical (squared) bias, variance, training er-ror, test error, and Bayes (or irreducible) error curves, on a sin-gle plot, as we go from less flexible statistical learning methodstowards more flexible approaches. Thex-axis should representthe amount of flexibility in the method, and they-axis shouldrepresent the values for each curve. There should be five curves.Make sure to label each one.(b) Explain why each of the five curves has the shape displayed inpart (a).64 2. Statistical Learning4. You will now think of some real-life applications for statistical learn-ing.(a) Describe three real-life applications in whichclassificationmightbe useful. Describe the response, as well as the predictors. Is thegoal of each application inference or prediction? Explain youranswer.(b) Describe three real-life applications in whichregressionmightbe useful. Describe the response, as well as the predictors. Is thegoal of each application inference or prediction? Explain youranswer.(c) Describe three real-life applications in whichcluster analysismight be useful.5. What are the advantages and disadvantages of a very flexible (versusa less flexible) approach for regression or classification? Under whatcircumstances might a more flexible approach be preferred to a lessflexible approach? When might a less flexible approach be preferred?6. Describe the differences between a parametric and a non-parametricstatistical learning approach. What are the advantages of a para-metric approach to regression or classification (as opposed to a non-parametric approach)? What are its disadvantages?7. The table below provides a training data set containing six observa-tions, three predictors, and one qualitative response we wish to use this data set to make a prediction forYwhenX1=X2=X3=0usingK-nearest neighbors.(a) Compute the Euclidean distance between each observation andthe test point,X1=X2=X3=0.(b) What is our prediction withK=1? Why?(c) What is our prediction withK=3? Why?(d) If the Bayes decision boundary in this problem is highly non-linear, then would we expect thebestvalue forKto be large orsmall? Why?2.4 Exercises 65Applied8. This exercise relates to theCollegedata set, which can be found inthe fileCollege.csvon the book website. It contains a number ofvariables for 777 different universities and colleges in the US. Thevariables are•Private: Public/private indicator•Apps: Number of applications received•Accept: Number of applicants accepted•Enroll: Number of new students enrolled•Top10perc: New students from top 10% of high school class•Top25perc: New students from top 25% of high school class•F.Undergrad: Number of full-time undergraduates•P.Undergrad: Number of part-time undergraduates•Outstate: Out-of-state tuition•Room.Board: Room and board costs•Books: Estimated book costs•Personal: Estimated personal spending•PhD: Percent of faculty with Ph.D.s•Terminal: Percent of faculty with terminal degree•S.F.Ratio: Student/faculty ratio•perc.alumni: Percent of alumni who donate•Expend: Instructional expenditure per student•Grad.Rate: Graduation rateBefore reading the data intoPython, it can be viewed in Excel or atext editor.(a) loaded datacollege. Make sure that you have the directoryset to the correct location for the data.(b) Look at the data used in the notebook by creating and runninga new cell with just the codecollegein it. You should noticethat the first column is just the name of each university in acolumn named something likeUnnamed: 0. We don’t really wantpandasto treat this as data. However, it may be handy to havethese names for later. Try the following commands and similarlylook at the resulting data frames:college2 = pd.read_csv('College.csv',i n d e x _ c o l = 0 )college3 = college.rename({'Unnamed: 0':'College'},axis=1)college3 = college3.set_index('College')66 2. Statistical LearningThis has used the first column in the file as anindexfor thedata frame. This means thatpandashas given each row a namecorresponding to the appropriate university. Now you should seethat the first data column isPrivate. Note that the names ofthe colleges appear on the left of the table. We also introduceda new python object above: adictionary, which is specified bydictionary(key, value)pairs. Keep your modified version of the data withthe following:college = college3(c) Use thedescribe()method of to produce a numerical summaryof the variables in the data set.(d) Use thepd.plotting.scatter_matrix()function to produce Apps, Enroll].Recall that you can reference a listCof columns of a data frameAusingA[C].(e) Use theboxplot()method ofcollegeto produce side-by-sideboxplots ofOutstateversusPrivate.(f) Create a new qualitative variable, calledElite,b ybinningtheTop10percvariable into two groups based on whether or not theproportion of students coming from the top 10% of their highschool classes exceeds 50%.college['Elite']=p d . c u t ( c o l l e g e thevalue_counts()method ofcollege['Elite']to see to produce side-by-side boxplots ofOutstateversusElite.(g) Use theplot.hist()method ofcollegeto produce some his-tograms with differing numbers of bins for a few of the quanti-tative variables. The commandplt.subplots(2, 2)may be use-ful: it will divide the plot window into four regions so that fourplots can be made simultaneously. By changing the argumentsyou can divide the screen up in other combinations.(h) Continue exploring the data, and provide a brief summary ofwhat you discover.9. This exercise involves theAutodata set studied in the lab. Make surethat the missing values have been removed from the data.(a) Which of the predictors are quantitative, and which are quali-tative?(b) What is therangeof each quantitative predictor? You can an-swer this using themin()andmax()methods innumpy..min().max()(c) What is the mean and standard deviation of each quantitativepredictor?2.4 Exercises 67(d) Now remove the 10th through 85th observations. What is therange, mean, and standard deviation of each predictor in thesubset of the data that remains?(e) Using the full data set, investigate the predictors the relationships among the predictors. Commenton your findings.(f) Suppose that we wish to predict gas mileage (mpg) on the basisof the other variables. Do your plots suggest that any of theother variables might be useful in predictingmpg? Justify youranswer.10. This exercise involves theBostonhousing data set.(a) To begin, load in theBostondata set, which is part of theISLPlibrary.(b) How many rows are in this data set? How many columns? Whatdo the rows and columns represent?(c) Make some pairwise scatterplots of the predictors (columns) inthis data set. Describe your findings.(d) Are any of the predictors associated with per capita crime rate?If so, explain the relationship.(e) Do any of the suburbs of Boston appear to have particularlyhigh crime rates? Tax rates? Pupil-teacher ratios? Comment onthe range of each predictor.(f) How many of the suburbs in this data set bound the Charlesriver?(g) What is the median pupil-teacher ratio among the towns in thisdata set?(h) Which suburb of Boston has lowest median value of owner-occupied homes? What are the values of the other predictorsfor that suburb, and how do those values compare to the overallranges for those predictors? Comment on your findings.(i) In this data set, how many of the suburbs average more thanseven rooms per dwelling? More than eight rooms per dwelling?Comment on the suburbs that average more than eight roomsper dwelling.3
Linear Regression
This chapter is about linear regression , a very simple approach for super-
vised learning. In particular, linear regression is a useful tool for predicting
a quantitative response. It has been around for a long time and is the topic
of innumerable textbooks. Though it may seem somewhat dull compared to
some of the more modern statistical learning approaches described in later
chapters of this book, linear regression is still a useful and widely used sta-
tistical learning method. Moreover, it serves as a good jumping-off point for
newer approaches: as we will see in later chapters, many fancy statistical
learning approaches can be seen as generalizations or extensions of linear
regression. Consequently, the importance of having a good understanding
of linear regression before studying more complex learning methods cannot
be overstated. In this chapter, we review some of the key ideas underlying
the linear regression model, as well as the least squares approach that is
most commonly used to fit this model.
Recall the Advertising data from Chapter 2. Figure 2.1displays sales
(in thousands of units) for a particular product as a function of advertis-
ing budgets (in thousands of dollars) for TV,radio, andnewspaper media.
Suppose that in our role as statistical consultants we are asked to suggest,
on the basis of this data, a marketing plan for next year that will result in
high product sales. What information would be useful in order to provide
such a recommendation? Here are a few important questions that we might
seek to address:
1.Is there a relationship between advertising budget and sales?
Our first goal should be to determine whether the data provide evi-
dence of an association between advertising expenditure and sales. If
the evidence is weak, then one might argue that no money should be
spent on advertising!
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_3  6970 3. Linear Regression
2.How strong is the relationship between advertising budget and sales?
Assuming that there is a relationship between advertising and sales,
we would like to know the strength of this relationship. Does knowl-
edge of the advertising budget provide a lot of information about
product sales?
3.Which media are associated with sales?
Are all three media—TV, radio, and newspaper—associated with
sales, or are just one or two of the media associated? To answer this
question, we must find a way to separate out the individual contribu-
tion of each medium to sales when we have spent money on all three
media.
4.How large is the association between each medium and sales?
For every dollar spent on advertising in a particular medium, by
what amount will sales increase? How accurately can we predict this
amount of increase?
5.How accurately can we predict future the relationship expenditure in the various media and sales, then linear regression
is an appropriate tool. If not, then it may still be possible to trans-
form the predictor or the response so that linear regression can be
used.
7.Is there synergy among the advertising media?
Perhapsspending $50,000ontelevisionadvertisingand $100 ,000
to either television or radio individually. In marketing, this is known
as asynergyeffect, while in statistics it is called an interaction effect.synergy
interactionIt turns out that linear regression can be used to answer each of these
questions. We will first discuss all of these questions in a general context,
and then return to them in this specific context in Section 3.4.
3.1 Simple Linear Regression
Simple linear regression lives up to its name: it is a very straightforwardsimple linear
regressionapproach for predicting a quantitative response Yon the basis of a sin-
gle predictor variable X. It assumes that there is approximately a linear
relationship between XandY. Mathematically, we can write this linear
relationship as
Y≈β0+β1X. (3.1)
You might read “ ≈” as“is approximately modeled as” . We will sometimes
describe ( 3.1) by saying that we are regressing YonX(orYontoX).3.1 Simple Linear Regression 71
For example, Xmay represent TVadvertising and Ymay represent sales.
Then we can regress salesontoTVby fitting the model
sales ≈β0+β1×TV.
In Equation 3.1,β0andβ1are two unknown constants that represent
theintercept andslopeterms in the linear model. Together, β0andβ1areintercept
slopeknown as the model coefficients orparameters . Once we have used our
coefficient
parametertraining data to produce estimates ˆβ0andˆβ1for the model coefficients, we
can predict future sales on the basis of a particular value of TV advertising
by computing
ˆy=ˆβ0+ˆβ1x, (3.2)
whereˆyindicates a prediction of Yon the basis of X=x. Here we use a
hatsymbol, ˆ, to denote the estimated value for an unknown parameter
or coefficient, or to denote the predicted value of the response.
3.1.1 Estimating the Coefficients
In practice, β0andβ1are unknown. So before we can use ( 3.1) to make
predictions, we must use data to estimate the coefficients. Let
(x1,y1),(x2,y2),..., (xn,yn)
represent nobservation pairs, each of which consists of a measurement of
Xand a measurement of Y. In the Advertising example, this data set con-
sists of the TV advertising budget and product sales in n= 200 different
markets. (Recall that the data are displayed in Figure 2.1.) Our goal is to
obtain coefficient estimates ˆβ0andˆβ1such that the linear model ( 3.1) fits
the available data well—that is, so that yi≈ˆβ0+ˆβ1xifori=1,...,n . In
other words, we want to find an intercept ˆβ0and a slope ˆβ1such that the
resulting line is as close as possible to the n= 200 data points. There are
a number of ways of measuring closeness . However, by far the most com-
mon approach involves minimizing the least squares criterion, and we takeleast squaresthat approach in this chapter. Alternative approaches will be considered in
Chapter 6.
Letˆyi=ˆβ0+ˆβ1xibe the prediction for Ybased on the ith value of X.
Thenei=yi−ˆyirepresents the ithresidual—this is the difference betweenresidualtheith observed response value and the ith response value that is predicted
by our linear model. We define the residual sum of squares (RSS) asresidual sum
of squaresRSS = e2
1+e2
2+···+e2
n,
or equivalently as
RSS = ( least squares approach chooses ˆβ0andˆβ1to minimize the RSS. Using
some calculus, one can show that the minimizers 3. Linear Regression
0 50 100 150 200 250 3005 10 15 20 25TVSales
FIGURE 3.1. For theAdvertising data, the least squares fit for the regression
ofsalesontoTVis shown. The fit is found by minimizing the residual sum of
squares. Each grey line segment represents a residual. In this case a linear fit
captures the essence of the relationship, although it overestimates the trend in the
left of the the sample means. In other
words, (3.4) defines the least squares coefficient estimates for simple linear
regression.
Figure3.1displays the simple linear regression fit to the Advertising
data, where ˆβ0=7.03andˆβ1=0.0475 . In other words, according to
this approximation, an additional $1,000spent on TV advertising is asso-
ciated with selling approximately 47.5additional units of the product. In
Figure3.2, we have computed RSS for a number of values of β0andβ1,
using the advertising data with salesas the response and TVas the predic-
tor. In each plot, the red dot represents the pair of least squares estimates
(ˆβ0,ˆβ1)given by ( 3.4). These values clearly minimize the RSS.
3.1.2 Assessing the Accuracy of the Coefficient Estimates
Recall from ( 2.1) that we assume that the truerelationship between Xand
Ytakes the form Y=f(X)+/epsilon1for some unknown function f, where/epsilon1
is a mean-zero random error term. If fis to be approximated by a linear
function, then we can write this relationship as
Y=β0+β1X+/epsilon1. YwhenX=0,
andβ1is the slope—the average increase in Yassociated with a one-unit
increase in X. The error term is a catch-all for what we miss with this
simple model: the true relationship is probably not linear, there may be
other variables that cause variation in Y, and there may be measurement
error. We typically assume that the error term is independent of X.3.1 Simple Linear Regression 73
FIGURE 3.2. Contour and three-dimensional plots of the RSS on the
Advertising data, using salesas the response and TVas the predictor. The
red dots correspond to the least squares estimates ˆβ0andˆβ1, given by ( 3.4).
The model given by ( 3.5) defines the population regression line , whichpopulation
regression
lineis the best linear approximation to the true relationship between Xand
Y.1The least squares regression coefficient estimates ( 3.4) characterize the
least squares line (3.2). The left-hand panel of Figure 3.3displays theseleast squares
linetwo lines in a simple simulated example. We created 100randomXs, and
generated 100corresponding Ys from the model
Y=2+3 X+/epsilon1, (3.6)
where/epsilon1was generated from a normal distribution with mean zero. The
red line in the left-hand panel of Figure 3.3displays the truerelationship,
f(X)=2 + 3 X, while the blue line is the least squares estimate based
on the observed data. The true relationship is generally not known for
real data, but the least squares line can always be computed using the
coefficient estimates given in ( 3.4). In other words, in real applications,
we have access to a set of observations from which we can compute the
least squares line; however, the population regression line is unobserved.
In the right-hand panel of Figure 3.3we have generated ten different data
sets from the model given by ( 3.6) and plotted the corresponding ten least
squares lines. Notice that different data sets generated from the same true
model result in slightly different least squares lines, but the unobserved
population regression line does not change.
At first glance, the difference between the population regression line and
the least squares line may seem subtle and confusing. We only have one
data set, and so what does it mean that two different lines describe the
relationship between the predictor and the response? Fundamentally, the
concept of these two lines is a natural extension of the standard population. For example, suppose that we are interested in knowing
1The assumption of linearity is often a useful working model. However, despite what
many textbooks might tell us, we seldom believe that the true relationship is linear.β0β1 2.11  2.15  2.2  2.3  2.5  2.5 
 3  3 
567890.03 0.04 0.05 0.06RSSβ1β074 3. Linear Regression
−2 −1 0 1 2−10 −5 0 5 10XY
−2 −1 0 1 2−10 −5 0 5 10XY
FIGURE 3.3. A simulated data set. Left:The red line represents the true
relationship, f(X)=2+3 X, which is known as the population regression line.
The blue line is the least squares line; it is the least squares estimate for f(X)
based on the observed data, shown in black. Right:The population regression line
is again shown in red, and the least squares line in dark blue. In light blue, ten
least squares lines are shown, each computed on the basis of a separate random
set of observations. Each least squares line is different, but on average, the least
squares lines are quite close to the population regression line.
the population mean µof some random variable Y. Unfortunately, µis
unknown, but we do have access to nobservations from Y,y1,...,y n,
which we can use to estimate µ. A reasonable estimate is ˆµ=¯y, where
¯y=1
n/summationtextn
i=1yiis the sample mean. The sample mean and the population
mean are different, but in general the sample mean will provide a good
estimate of the population mean. In the same way, the unknown coefficients
β0andβ1in linear regression define the population regression line. We seek
to estimate these unknown coefficients using ˆβ0andˆβ1given in ( 3.4). These
coefficient estimates define the least squares line.
The analogy between linear regression and estimation of the mean of a
random variable is an apt one based on the concept of bias. If we use thebiassample mean ˆµto estimate µ, this estimate is unbiased, in the sense thatunbiasedon average, we expect ˆµto equalµ. What exactly does this mean? It means
that on the basis of one particular set of observations y1,...,y n,ˆµmight
overestimate µ, and on the basis of another set of observations, ˆµmight
underestimate µ. But if we could average a huge number of estimates of
µobtained from a huge number of sets of observations, then this systematically
over- or under-estimate the true parameter. The property of unbiasedness
holds for the least squares coefficient estimates given by ( 3.4) as well: if
we estimate β0andβ1on the basis of a particular data set, then our
estimates won’t be exactly equal to β0andβ1. But if we could average
the estimates obtained over a huge number of data sets, then the average
of these estimates would be spot on! In fact, we can see from the right-
hand panel of Figure 3.3that the average of many least squares lines, each3.1 Simple Linear Regression 75
estimated from a separate data set, is pretty close to the true population
regression line.
We continue the analogy with the estimation of the population mean
µof a random variable Y. A natural question is as follows: how accurate
is the sample mean ˆµas an estimate of µ? We have established that the
average of ˆµ’s over many data sets will be very close to µ, but that a
single estimate ˆµmay be a substantial underestimate or overestimate of µ.
How far off will that single estimate of ˆµbe? In general, we answer this
question by computing the standard error ofˆµ, written as SE(ˆµ). We havestandard
errorthe well-known formula
Var(ˆµ) = SE(ˆ µ)2=σ2
n, (3.7)
whereσis the standard deviation of each of the realizations yiofY.2
Roughly speaking, the standard error tells us the average amount that this
estimate ˆµdiffers from the actual value of µ. Equation 3.7also tells us how
this deviation shrinks with n—the more observations we have, the smaller
the standard error of ˆµ. In a similar vein, we can wonder how close ˆβ0
andˆβ1are to the true values β0andβ1. To compute the standard errors
associated with ˆβ0andˆβ1, we use the following For these formulas to be strictly valid, we need to
assumethattheerrors σ2and
are uncorrelated. This is clearly not true in Figure 3.1, but the formula still
turns out to be a good approximation. Notice in the formula that SE(ˆβ1)is
smaller when the xiare more spread out; intuitively we have more leverage
to estimate a slope when this is the case. We also see that SE(ˆβ0)would be
the same as SE(ˆµ)if¯xwere zero (in which case ˆβ0would be equal to ¯y). known as the residual standard error , and is given by the formularesidual
standard
errorRSE =/radicalbig
RSS/(n−2). Strictly speaking, when σ2is estimated from the
data we should write /hatwiderSE(ˆβ1)to indicate that an estimate has been made,
but for simplicity of notation we will drop this extra “hat”.
Standard errors can be used to compute confidence intervals . A 95%confidence
intervalconfidence interval is defined as a range of values such that with 95%
probability, the range will contain the true unknown value of the param-
eter. The range is defined in terms of lower and upper limits computed
from the sample of data. A 95% confidence interval has the following prop-
erty: if we take repeated samples and construct the confidence interval for
each sample, 95% of the intervals will contain the true unknown value of
the parameter. For linear regression, the 95% confidence interval for β1
approximately takes the form
ˆβ1±2·SE(ˆβ1). (3.9)
2This formula holds provided that the nobservations are uncorrelated.76 3. Linear Regression
That is, there is approximately a 95% chance that the contain the true value of β1.3Similarly, a confidence interval for β0
approximately takes the form
ˆβ0±2·SE(ˆβ0). (3.11)
In the case of the advertising data, the 95% confidence interval for β0
is[6.130,7.935] and the 95% confidence interval for average, fall somewhere between 6,130and7,935units. Furthermore,
for each $1,000increase in television advertising, there will be an average
increase in sales of between 42and53units.
Standard errors can also be used to perform hypothesis tests on thehypothesis
testcoefficients. The most common hypothesis test involves testing the null
hypothesis ofnull
hypothesisH0:There is no relationship between XandY (3.12)
versus the alternative hypothesisalternative
hypothesisHa:There is some relationship between XandY. (3.13)
Mathematically, this corresponds to ifβ1=0 then the model ( 3.5) reduces to Y=β0+/epsilon1, andXis
not associated with Y. To test the null hypothesis, we need to determine
whether ˆβ1, our estimate for β1, is sufficiently far from zero that we can
be confident that β1is non-zero. How far is far enough? This of course
depends on the accuracy of ˆβ1—that is, it depends on SE(ˆβ1). IfSE(ˆβ1)is
small, then even relatively small values of ˆβ1may provide strong evidence
thatβ1/negationslash=0, and hence that there is a relationship between XandY. In
contrast, if SE(ˆβ1)is large, then ˆβ1must be large in absolute value in order
for us to reject the null hypothesis. In practice, we compute a t-statistic ,t-statisticgiven by
t=ˆβ1−0
SE(ˆβ1), (3.14)
3Approximately for several reasons. Equation 3.10relies on the assumption that the
errors are Gaussian. Also, the factor of 2in front of the SE(ˆβ1)term will vary slightly
depending on the number of observations nin the linear regression. To be precise, rather
than the number 2, ( 3.10) should contain the 97.5% quantile of a t-distribution with
n−2degrees of freedom. Details of how to compute the 95% confidence interval precisely
inRwill be provided later in this chapter.3.1 Simple Linear Regression 77
Coefficient Std. error t-statistic p-value
Intercept 7.0325 0.4578 15.36 <0.0001
TV 0.0475 0.0027 17.67 <0.0001
TABLE 3.1. For theAdvertising data, coefficients of the least squares model
for the regression of number of units sold on TV advertising budget. An increase
of$1,000in the TV advertising budget is associated with an increase in sales by
around 50 units. (Recall that the salesvariable is in thousands of units, and the
TVvariable is in thousands of ˆβ1isawayfrom 0.If
there really is no relationship between XandY, then we expect that ( 3.14)
will have a t-distribution with n−2degrees of freedom. The t-distribution
has a bell shape and for values of ngreater than approximately 30it is
quite similar to the standard normal distribution. Consequently, it is a
simple matter to compute the probability of observing any number equal
to|t|or larger in absolute value, assuming β1=0. We call this probability
thep-value. Roughly speaking, we interpret the p-value as follows: a smallp-valuep-value indicates that it is unlikely to observe such a substantial association
between the predictor and the response due to chance, in the absence of
any real association between the predictor and the response. Hence, if we
see a small p-value, then we can infer that there is an association between
the predictor and the response. We reject the null hypothesis —that is, we
declare a relationship to exist between XandY—if the p-value is small
enough. Typical p-value cutoffs for rejecting the null hypothesis are 5% or
1%, although this topic will be explored in much greater detail in Chap-
ter13. Whenn= 30, these correspond to t-statistics ( 3.14) of around 2
and 2.75, respectively.
Table3.1provides details of the least squares model for the regression of
number of units sold on TV advertising budget for the Advertising data.
Notice that the coefficients for ˆβ0andˆβ1are very large relative to their
standard errors, so the t-statistics are also large; the probabilities of seeing
such values if H0is true are virtually zero. Hence we can conclude Assessing the Accuracy of the Model
Once we have rejected the null hypothesis ( 3.12) in favor of the alternative
hypothesis ( 3.13), it is natural to want to quantify the extent to which the
model fits the data . The quality of a linear regression fit is typically assessed
using two related quantities: the residual standard error (RSE) and the R2
R2
statistic.
4In Table 3.1, a small p-value for the intercept indicates that we can reject the null
hypothesis that β0=0, and a small p-value for TVindicates that we can reject the null
hypothesis that β1=0. Rejecting the latter null hypothesis allows us to conclude that
there is a relationship between TVandsales. Rejecting the former allows us to conclude
that in the absence of TVexpenditure, salesare non-zero.78 3. Linear Regression
Quantity Value
Residual standard error 3.26
R20.612
F-statistic 312.1
TABLE 3.2. For the Advertising data, more information about the least
squares model for the regression of number of units sold on TV advertising budget.
Table3.2displays the RSE, the R2statistic, and the F-statistic (to be
described in Section 3.2.2) for the linear regression of number of units sold
on TV advertising budget.
Residual Standard Error
Recall from the model ( 3.5) that associated with each observation is an
error term /epsilon1. Due to the presence of these error terms, even if we knew the
true regression line (i.e. even if β0andβ1were known), we would not be
able to perfectly predict YfromX. The RSE is an estimate of the standard
deviationof deviate from the true regression line. It is computed using the formula
RSE =/radicalbigg
1
n−2RSS (3.15)
Note that RSS was defined in Section 3.1.1, and is given by the formula
RSS =n/summationdisplay
i=1(yi−ˆyi)2. (3.16)
In the case of the advertising data, we see from the linear regression
output in Table 3.2that the RSE is 3.26. In other words, actual sales in
each market deviate from the true regression line by approximately 3,260
units, on average. Another way to think about this is that even if the
model were correct and the true values of the unknown coefficients β0
andβ1were known exactly, any prediction of sales on the basis of TV
advertising would still be off by about 3,260units on average. Of course,
whether or not 3,260units is an acceptable prediction error depends on the
problem context. In the advertising data set, the mean value of salesover
all markets is approximately 14,000units, and so the percentage error is
3,260/14,000 = 23 %.
The RSE is considered a measure of the lack of fit of the model ( 3.5) to
the data. If the predictions obtained using the model are very close to the
true outcome values—that is, if ˆyi≈yifori=1,...,n —then (3.15) will
be small, and we can conclude that the model fits the data very well. On
the other hand, if ˆyiis very far from yifor one or more observations, then
the RSE may be quite large, indicating that the model doesn’t fit the data
well.
R2Statistic
The RSE provides an absolute measure of lack of fit of the model ( 3.5)
to the data. But since it is measured in the units of Y, it is not always3.1 Simple Linear Regression 79
clear what constitutes a good RSE. The R2statistic provides an alternative
measure of fit. It takes the form of a proportion —the proportion of variance
explained—and so it always takes on a value between 0and1, and is
independent of the scale of Y.
To calculate R2, we use the formula
R2=TSS −RSS
TSS=1−RSS
TSS(3.17)
whereTSS =/summationtext(yi−¯y)2is thetotal sum of squares , and RSS is definedtotal sum of
squaresin (3.16). TSS measures the total variance in the response Y, and can be
thought of as the amount of variability inherent in the response before is left unexplained after performing the regression. Hence, TSS −RSS
measures the amount of variability in the response that is explained (or
removed) by performing the regression, and R2measures the proportion of
variability in Ythat can be explained using X. AnR2statistic that is close
to1indicates that a large proportion of the variability in the response is
explained by the regression. A number near 0indicates that the regression
does not explain much of the variability in the response; this might occur
because the linear model is wrong, or the error variance σ2is high, or both.
In Table 3.2, theR2was0.61, and so just under two-thirds of the variability
insalesis explained by a linear regression on TV.
TheR2statistic ( 3.17) has an interpretational advantage over the RSE
(3.15), since unlike the RSE, it always lies between 0 and 1. However, it can
still be challenging to determine what is a goodR2value, and in general,
this will depend on the application. For instance, in certain problems in
physics, we may know that the data truly comes from a linear model with
a small residual error. In this case, we would expect to see an R2value that
isextremelycloseto 1,andasubstantiallysmaller R2valuemightindicatea
serious problem with the experiment in which the data were generated. On
the other hand, in typical applications in biology, psychology, marketing,
and other domains, the linear model ( 3.5) is at best an extremely rough
approximation to the data, and residual errors due to other unmeasured
factors are often very large. In this setting, we would expect only a very
small proportion of the variance in the response to be explained by the
predictor, and an R2value well below 0.1might be more realistic!
TheR2statistic is a measure of the linear relationship between Xand
Y. Recall that correlation , defined (3.18)
is also a measure of the linear relationship between XandY.5This sug-
gests that we might be able to use r=Cor(X,Y)instead of R2in order to
assess the fit of the linear model. In fact, it can be shown that in the simple
5We note that in fact, the right-hand side of ( 3.18) is the sample correlation; thus,
it would be more correct to write /hatwiderCor(X,Y); however, we omit the “hat” for ease of
notation.80 3. Linear Regression
Simple regression of salesonradio
Coefficient Std. error t-statistic p-value
Intercept 9.312 0.563 16.54 <0.0001
radio 0.203 0.020 9.92 <0.0001
Simple regression of salesonnewspaper
Coefficient Std. error t-statistic p-value
Intercept 12.351 0.621 19.88 <0.0001
newspaper 0.055 0.017 3.30 0.00115
TABLE 3.3. More simple linear regression models for the Advertising data.
Coefficients of the simple linear regression model for number of units sold on Top:
radio advertising budget and Bottom: newspaper advertising budget. A $ 1,000in-
crease in spending on radio advertising is associated with an average increase in
sales by around 203 units, while the same increase in spending on newspaper ad-
vertising is associated with an average increase in sales by around 55 units. (Note
that the salesvariable is in thousands of units, and the radioandnewspaper
variables are in thousands of dollars.)
linear regression setting, R2=r2. In other words, the squared correlation
and the R2statistic are identical. However, in the next section we will
discuss the multiple linear regression problem, in which we use several pre-
dictors simultaneously to predict the response. The concept of correlation
between the predictors and the response does not extend automatically to
this setting, since correlation quantifies the association between a single
pair of variables rather than between a larger number of variables. We will
see that R2fills this role.
3.2 Multiple Linear of a single predictor variable. However, in practice we often have more
thanonepredictor.Forexample,inthe Advertising data,wehaveexamined
the relationship between sales and TV advertising. We also have data for
the amount of money spent advertising on the radio and in newspapers,
and we may want to know whether either of these two media is associated
with sales. How can we extend our analysis of the advertising data in order
to accommodate these two additional predictors?
One option is to run three separate simple linear regressions, each of
which uses a different advertising medium as a predictor. For instance,
we can fit a simple linear regression to predict sales on the basis of the
amount spent on radio advertisements. Results are shown in Table 3.3(top
table). We find that a $ 1,000increase in spending on radio advertising is
associated with an increase in sales of around 203 units. Table 3.3(bottom
table) contains the least squares coefficients for a simple linear regression of
sales onto newspaper advertising budget. A $1,000increase in newspaper
advertising budget is associated with an increase in sales of approximately
55 units.3.2 Multiple Linear Regression a single prediction of sales given the three advertising media budgets,
since each of the budgets is associated with a separate regression equation.
Second, each of the three regression equations ignores the other two media
in forming estimates for the regression coefficients. We will see shortly that
if the media budgets are correlated with each other in the 200 markets
in our data set, then this can lead to very misleading estimates of the
association between each media budget and sales.
Instead of fitting a separate simple linear regression model for each pre-
dictor, a better approach is to extend the simple linear regression model
(3.5) so that it can directly accommodate multiple predictors. We can do
this by giving each predictor a separate slope coefficient in a single model.
In general, suppose that we have pdistinct predictors. Then the multiple
linear regression model takes the form
Y=β0+β1X1+β2X2+···+βpXp+/epsilon1, (3.19)
whereXjrepresents the jth predictor and βjquantifies the association
between that variable and the response. We interpret βjas theaverage
effect on Yof a one unit increase in Xj,holding all other predictors fixed .
In the advertising example, ( 3.19) becomes
sales=β0+β1×TV+β2×radio+β3×newspaper +/epsilon1. (3.20)
3.2.1 Estimating the Regression Coefficients
As was the case in the simple linear regression setting, the regression coef-
ficientsβ0,β1,...,βpin (3.19) are unknown, and must be estimated. Given
estimates ˆβ0,ˆβ1,..., ˆβp, we can make predictions using the formula
ˆy=ˆβ0+ˆβ1x1+ˆβ2x2+···+ˆβpxp. saw in the context of simple linear regression. We choose β0,β1,...,βp
to minimize the sum of squared residuals
RSS ˆβ0,ˆβ1,..., ˆβpthatminimize( 3.22)arethemultipleleastsquares
regression coefficient estimates. Unlike the simple linear regression esti-
mates given in ( 3.4), the multiple regression coefficient estimates have
somewhat complicated forms that are most easily represented using ma-
trix algebra. For this reason, we do not provide them here. Any statistical
software package can be used to compute these coefficient estimates, and
later in this chapter we will show how this can be done in R. Figure 3.482 3. Linear Regression
X1X2Y
FIGURE 3.4. In a three-dimensional setting, with two predictors and one
response, the least squares regression line becomes a plane. The plane is chosen
to minimize the sum of the squared vertical distances between each observation
(shown in red) and the plane.
illustrates an example of the least squares fit to a toy data set with p=2
predictors.
Table3.4displays the multiple regression coefficient estimates when TV,
radio, and newspaper advertising budgets are used to predict product sales
usingthe Advertising $1,000on
radio advertising is associated with approximately 189 units of additional
sales. Comparing these coefficient estimates to those displayed in Tables 3.1
and3.3, we notice that the multiple regression coefficient estimates for
TVandradioare pretty similar to the simple linear regression coefficient
estimates. However, while the newspaper regression coefficient estimate in
Table3.3was significantly non-zero, the coefficient estimate for newspaper
in the multiple regression model is close to zero, and the corresponding p-
value is no longer significant, with a value around 0.86. This illustrates that
the simple and multiple regression coefficients can be quite different. This
difference stems from the fact that in the simple regression case, the slope
term represents the average increase in product sales associated with a
$1,000increase in newspaper advertising, ignoring other predictors such as
TVandradio. By contrast, in the multiple regression setting, the coefficient
fornewspaper represents the average increase in product sales associated
with increasing newspaper spending by $1,000while holding TVandradio
fixed.
Does it make sense for the multiple regression to suggest no relationship
between salesandnewspaper while the simple linear regression implies the3.2 Multiple Linear Regression 83
Coefficient Std. error t-statistic p-value
Intercept 2.939 0.3119 9.42 <0.0001
TV 0.046 0.0014 32.81 <0.0001
radio 0.189 0.0086 21.89 <0.0001
newspaper −0.001 0.0059 −0.18 0.8599
TABLE 3.4. For theAdvertising data, least squares coefficient estimates of the
multiple linear regression of number of units sold on TV, radio, and newspaper
advertising budgets.
TV radio newspaper sales
TV 1.0000 0.0548 0.0567 0.7822
radio 1.0000 0.3541 0.5762
newspaper 1.0000 0.2283
sales 1.0000
TABLE 3.5. Correlation matrix for TV,radio,newspaper , andsalesfor the
Advertising data.
opposite? In fact it does. Consider the correlation matrix for the three
predictor variables and response variable, displayed in Table 3.5. Notice
that the correlation between radioandnewspaper is0.35. This indicates
that markets with high newspaper advertising tend to also have high ra-
dio advertising. Now suppose that the multiple regression is correct and
newspaper advertising is not associated with sales, but radio advertising
is associated with sales. Then in markets where we spend more on radio
our sales will tend to be higher, and as our correlation matrix shows, we
also tend to spend more on newspaper advertising in those same mar-
kets. Hence, in a simple linear regression which only examines salesversus
newspaper , we will observe that higher values of newspaper tend to be as-
sociated with higher values of sales, even though newspaper advertising is
not directly associated with sales. So newspaper advertising is a surrogate
forradioadvertising; newspaper gets “credit” for the association between
radioonsales.
This slightly counterintuitive result is very common in many real life
situations. Consider an absurd example to illustrate the point. Running
a regression of shark attacks versus ice cream sales for data collected at
a given beach community over a period of time would show a positive
relationship, similar to that seen between salesandnewspaper . Of course
no one has (yet) suggested that ice creams should be banned at beaches
to reduce shark attacks. In reality, higher temperatures cause more people
to visit the beach, which in turn results in more ice cream sales and more
shark attacks. A multiple regression of shark attacks onto ice cream sales
and temperature reveals that, as intuition implies, ice cream sales is no
longer a significant predictor after adjusting for temperature.
3.2.2 Some Important Questions
When we perform multiple linear regression, we usually are interested in
answering a few important questions.84 3. Linear Regression
1.Is at least one of the predictors X1,X2,...,X puseful in predicting
the response?
2.Do all the predictors help to explain Y, or is only a subset of the
predictors useful?
3.How well does the model fit the data?
4.Given a set of predictor values, what response value should we predict,
and how accurate is our prediction?
We now address each of these questions in turn.
One: Is There a Relationship Between the Response and Predictors?
Recall that in the simple linear regression setting, in order to determine
whether there is a relationship between the response and the predictor we
can simply check whether β1=0. In the multiple regression setting with p
predictors, we need to ask whether all of the regression coefficients are zero,
i.e. whether β1=β2=···=βp=0. As in the simple linear regression
setting, we use a hypothesis test to answer this question. We test the null
hypothesis,
H0:β1=β2=···=βp=0
versus the alternative
Ha:at least one βjis non-zero.
This hypothesis test is performed by computing the F-statistic ,F-statistic
F=(TSS −RSS) /p
RSS/(n−p−1), (3.23)
where, as with simple linear regression, TSS =/summationtext(yi−¯y)2andRSS =/summationtext(yi−ˆyi)2. If the linear model assumptions are correct, one can show that
E{RSS/(n−p−1)}=σ2
and that, provided H0is true,
E{(TSS −RSS) /p}=σ2.
Hence, when there is no relationship between the response and predictors,
one would expect the F-statistic to take on a value close to 1. On the other
hand, if Hais true, then E{(TSS −RSS) /p}>σ2, so we expect Fto be
greater than 1.
TheF-statistic for the multiple linear regression model obtained by re-
gressing salesontoradio,TV, andnewspaper is shown in Table 3.6. In this
example the F-statistic is 570. Since this is far larger than 1, it provides
compelling evidence against the null hypothesis H0. In other words, the
largeF-statistic suggests that at least one of the advertising media must
be related to sales. However, what if the F-statistic had been closer to
1? How large does the F-statistic need to be before we can reject H0and3.2 Multiple Linear Regression 85
Quantity Value
Residual standard error 1.69
R20.897
F-statistic 570
TABLE 3.6. More information about the least squares model for the regression
of number of units sold on TV, newspaper, and radio advertising budgets in the
Advertising data. Other information about this model was displayed in Table 3.4.
conclude that there is a relationship? It turns out that the answer depends
on the values of nandp. Whennis large, an F-statistic that is just a
little larger than 1might still provide evidence against H0. In contrast,
a larger F-statistic is needed to reject H0ifnis small. When H0is true
and the errors /epsilon1ihave a normal distribution, the F-statistic follows an
F-distribution.6For any given value of nandp, any statistical software
package can be used to compute the p-value associated with the F-statistic
using this distribution. Based on this p-value, we can determine whether
or not to reject H0. For the advertising data, the p-value associated with
theF-statistic in Table 3.6is essentially zero, so we have extremely strong
evidence that at least one of the media is associated with increased sales.
In (3.23) we are testing H0that all the coefficients are zero. Sometimes
we want to test that a particular subset of qof the coefficients are zero.
This corresponds to a null hypothesis
H0:βp−q+1=βp−q+2=···=βp=0,
where for convenience we have put the variables chosen for omission at the
end of the list. In this case we fit a second model that uses all the variables
exceptthose last q. Suppose that the residual sum of squares for that model
isRSS 0. Then the appropriate F-statistic is
F=(RSS 0−RSS) /q
RSS/(n−p−1). (3.24)
Notice that in Table 3.4, for each individual predictor a t-statistic and
ap-value were reported. These provide information about whether each
individual predictor is related to the response, after adjusting for the other
predictors. It turns out that each of these is exactly equivalent7to theF-
test that omits that single variable from the model, leaving all the others
in—i.e.q=1 in (3.24). So it reports the partial effect of adding that variable
to the model. For instance, as we discussed earlier, these p-values indicate
thatTVandradioare related to sales, but that there is no evidence that
newspaper is associated with sales, whenTVandradioare held fixed.
Given these individual p-values for each variable, why do we need to look
at the overall F-statistic? After all, it seems likely that if any one of the
p-values for the individual variables is very small, then at least one of the
predictors is related to the response . However, this logic is flawed, especially
when the number of predictors pis large.
6Even if the errors are not normally-distributed, the F-statistic approximately follows
anF-distribution provided that the sample size nis large.
7The square of each t-statistic is the corresponding F-statistic.86 3. Linear Regression
For instance, consider an example in which p= 100 andH0:β1=β2=
···=βp=0is true, so no variable is truly associated with the response. In
this situation, about 5% of the p-values associated with each variable (of
the type shown in Table 3.4) will be below 0.05by chance. In other words,
we expect to see approximately five smallp-values even in the absence of
any true association between the predictors and the response.8In fact, it
is likely that we will observe at least one p-value below 0.05by chance!
Hence, if we use the individual t-statistics and associated p-values in order
to decide whether or not there is any association between the variables and
the response, there is a very high chance that we will incorrectly conclude
that there is a relationship. However, the F-statistic does not suffer from
this problem because it adjusts for the number of predictors. Hence, if H0
is true, there is only a 5% chance that the F-statistic will result in a p-
value below 0.05, regardless of the number of predictors or the number of
observations.
The approach of using an F-statistic to test for any association between
the predictors and the response works when pis relatively small, and cer-
tainly small compared to n. However, sometimes we have a very large num-
ber of variables. If p>n then there are more coefficients βjto estimate
than observations from which to estimate them. In this case we cannot
even fit the multiple linear regression model using least squares, so the F-
statistic cannot be used, and neither can most of the other concepts that
we have seen so far in this chapter. When pis large, some of the approaches
discussed in the next section, such as forward selection , can be used. This
high-dimensional setting is discussed in greater detail in Chapter 6.high-
dimensional
Two: Deciding on Important Variables
As discussed in the previous section, the first step in a multiple regression
analysis is to compute the F-statistic and to examine the associated p-
value. If we conclude on the basis of that p-value that at least one of the
predictors is related to the response, then it is natural to wonder whichare
the guilty ones! We could look at the individual p-values as in Table 3.4,
but as discussed (and as further explored in Chapter 13), ifpis large we
are likely to make some false discoveries.
It is possible that all of the predictors are associated with the response,
but it is more often the case that the response is only associated with
a subset of the predictors. The task of determining which predictors are
associated with the response, in order to fit a single model involving only
those predictors, is referred to as variable selection . The variable selectionvariable
selectionproblem is studied extensively in Chapter 6, and so here we will provide
only a brief outline of some classical approaches.
Ideally, we would like to perform variable selection by trying out a lot of
different models, each containing a different subset of the predictors. For
instance, if p=2, then we can consider four models: (1) a model contain-
ing no variables, (2) a model containing X1only, (3) a model containing
8This is related to the important concept of multiple testing , which is the focus of
Chapter 13.3.2 Multiple Linear Regression 87
X2only, and (4) a model containing both X1andX2. We can then se-
lect thebestmodel out of all of the models that we have considered. How
do we determine which model is best? Various statistics can be used to
judge the quality of a model. These include Mallow’s Cp,Akaike informa-Mallow’s Cption criterion (AIC),Bayesian information criterion (BIC), and These are discussed in more detail in Chapter 6. We can also deter-
adjusted R2mine which model is best by plotting various model outputs, such as the
residuals, in order to search for patterns.
Unfortunately, there are a total of 2pmodels that contain subsets of p
variables. This means that even for moderate p, trying out every p=2,then
there are 22=4models to consider. But if p= 30 , then we must pisvery
small, we cannot consider all 2pmodels, and instead we need an automated
and efficient approach to choose a smaller set of models to consider. There
are three classical approaches for this task:
•Forward selection . We begin with the null model —a model that con-forward
selection
null modeltains an intercept but no predictors. We then fit psimple linear re-
gressions and add to the null model the variable that results in the
lowest RSS. We then add to that model the variable that results
in the lowest RSS for the new two-variable model. This approach is
continued until some stopping rule is satisfied.
•Backward selection . We start with all variables in the model, andbackward
selectionremove the variable with the largest p-value—that is, the variable
that is the least statistically significant. The new (p−1)-variable
model is fit, and the variable with the largest p-value is removed. This
procedure continues until a stopping rule is reached. For instance, we
may stop when all remaining variables have a p-value below some
threshold.
•Mixed selection . This is a combination of forward and backward se-mixed
selectionlection. We start with no variables in the model, and as with forward
selection, we add the variable that provides the best fit. We con-
tinue to add variables one-by-one. Of course, as we noted with the
Advertising example, the p-values for variables can become larger as
new predictors are added to the model. Hence, if at any point the
p-value for one of the variables in the model rises above a certain
threshold, then we remove that variable from the model. We con-
tinue to perform these forward and backward steps until all variables
in the model have a sufficiently low p-value, and all variables outside
the model would have a large p-value if added to the model.
Backward selection cannot be used if p>n , while forward selection can
always be used. Forward selection is a greedy approach, and might include
variables early that later become redundant. Mixed selection can remedy
this.88 3. Linear Regression
Three: Model Fit
Two of the most common numerical measures of model fit are the RSE and
R2, the fraction of variance explained. These quantities are computed and
interpreted in the same fashion as for simple linear regression.
Recall that in simple regression, R2is the square of the correlation of the
response and the variable. In multiple linear regression, it turns out that it
equals Cor (Y,ˆY)2, the square of the correlation between the response and
the fitted linear model; in fact one property of the fitted linear model is
that it maximizes this correlation among all possible linear models.
AnR2value close to 1indicates that the model explains a large por-
tion of the variance in the response variable. As an example, we saw in
Table3.6that for the Advertising data, the model that uses all three ad-
vertising media to predict saleshas anR2of0.8972 . On the other hand,
the model that uses only TVandradioto predict saleshas anR2value
of0.89719 . In other words, there is a smallincrease in R2if we include
newspaper advertising in the model that already contains TV and radio
advertising, even though we saw earlier that the p-value for newspaper ad-
vertising in Table 3.4is not significant. It turns out that R2will always
increase when more variables are added to the model, even if those vari-
ables are only weakly associated with the response. This is due to the fact
that adding another variable always results in a decrease in the residual
sum of squares on the training data (though not necessarily the testing
data). Thus, the R2statistic, which is also computed on the training data,
must increase. The fact that adding newspaper advertising to the model
containing only TV and radio advertising leads to just a tiny increase in
R2provides additional evidence that newspaper can be dropped from the
model. Essentially, newspaper provides no real improvement in the model
fit to the training samples, and its inclusion will likely lead to poor results
on independent test samples due to overfitting.
By contrast, the model containing only TVas a predictor had an R2of
0.61(Table3.2). Adding radioto the model leads to a substantial improve-
ment inR2. This implies that a model that uses TV and radio expenditures
to predict sales is substantially better than one that uses only TV advertis-
ing. We could further quantify this improvement by looking at the p-value
for the radiocoefficient in a model that contains only TVandradioas
predictors.
The model that contains only TVandradioas predictors has an RSE
of 1.681, and the model that also contains newspaper as a predictor has
an RSE of 1.686 (Table 3.6). In contrast, the model that contains only TV
has an RSE of 3.26(Table3.2). This corroborates our previous conclusion
that a model that uses TV and radio expenditures to predict sales is much
more accurate (on the training data) than one that only uses TV spending.
Furthermore, given that TV and radio expenditures are used as predictors,
there is no point in also using newspaper spending as a predictor in the
model. The observant reader may wonder how RSE can increase when
newspaper is added to the model given that RSS must decrease. In general
RSE is defined as
RSE =/radicalbigg1
n−p−1RSS, (3.25)3.2 Multiple Linear Regression 89Sales
RadioTVFIGURE 3.5. For theAdvertising data, a linear regression fit to salesusing
TVandradioas predictors. From the pattern of the residuals, we can see that
there is a pronounced non-linear relationship in the data. The positive residuals
(those visible above the surface), tend to lie along the 45-degree line, where TV
and Radio budgets are split evenly. The negative residuals (most not visible), tend
to lie away from this line, where budgets are more lopsided.
which simplifies to ( 3.15) for a simple linear regression. Thus, models with
more variables can have higher RSE if the decrease in RSS is small relative
to the increase in p.
In addition to looking at the RSE and R2statistics just discussed, it
can be useful to plot the data. Graphical summaries can reveal problems
with a model that are not visible from numerical statistics. For example,
Figure3.5displays a three-dimensional plot of TVandradioversussales.
We see that some observations lie above and some observations lie below
the least squares regression plane. In particular, the linear model seems to
overestimate salesfor instances in which most of the advertising money
was spent exclusively on either TVorradio. It underestimates salesfor
instances where the budget was split between the two media. This pro-
nounced non-linear pattern suggests a synergyorinteraction effect betweeninteractionthe advertising media, whereby combining the media together results in a
bigger boost to sales than using any single medium. In Section 3.3.2,w e
will discuss extending the linear model to accommodate such synergistic
effects through the use of interaction terms.
Four: Predictions
Once we have fit the multiple regression model, it is straightforward to
apply (3.21) in order to predict the response Yon the basis of a set of
values for the predictors X1,X2,...,X p. However, there are three sorts of
uncertainty associated with this prediction.
1. Thecoefficientestimates ˆβ0,ˆβ1,..., ˆβpareestimatesfor β0,β1,...,βp.
That is, the least squares plane
ˆY=ˆβ0+ˆβ1X1+···+ˆβpXp90 3. Linear Regression
is only an estimate for the true population regression plane
f(X)=β0+β1X1+···+βpXp.
The inaccuracy in the coefficient estimates is related to the reducible
errorfrom Chapter 2. We can compute a confidence interval in order
to determine how close ˆYwill be to f(X).
2. Of course, in practice assuming a linear model for f(X)is almost
always an approximation of reality, so there is an additional source of
potentially reducible error which we call model bias . So when we use a
linear model, we are in fact estimating the best linear approximation
to the true surface. However, here we will ignore this discrepancy,
and operate as if the linear model were correct.
3. Even if we knew f(X)—that is, even if we knew the true values
forβ0,β1,...,βp—the response value cannot be predicted perfectly
because of the random error /epsilon1in the model ( 3.20). In Chapter 2,w e
referred to this as the irreducible error . How much will Yvary from
ˆY? We use prediction intervals to answer this question. Prediction
intervals are always wider than confidence intervals, because they
incorporate both the error in the estimate for f(X)(the reducible
error) and the uncertainty as to how much an individual point will
differ from the population regression plane (the irreducible error).
We use a confidence interval to quantify the uncertainty surroundingconfidence
intervaltheaverage salesover a large number of cities. For example, given that
$100 ,000isspenton TVadvertisingand $20,000isspenton radioadvertising
in each city, the 95% confidence interval is [10,985,11,528]. We interpret
this to mean that 95% of intervals of this form will contain the true value of
f(X).9On the other hand, a prediction interval can be used to quantify theprediction
intervaluncertainty surrounding salesfor aparticular city. Given that $100 ,000is
spenton TVadvertisingand $20,000isspenton radioadvertisinginthatcity
the 95% prediction interval is [7,930,14,580]. We interpret this to mean
that 95% of intervals of this form will contain the true value of Yfor this
city.Notethatbothintervalsarecenteredat 11,256,butthattheprediction
interval is substantially wider than the confidence interval, reflecting the
increased uncertainty about salesfor a given city in comparison to the
average salesover many locations.
9In other words, if we collect a large number of data sets like the Advertising data
set, and we construct a confidence interval for the average saleson the basis of each
data set (given $100 ,000inTVand$20,000inradioadvertising), then 95% of these
confidence intervals will contain the true value of average sales.3.3 Other Considerations in the Regression Model 91
3.3 Other Considerations in the Regression Model
3.3.1 Qualitative Predictors
In our discussion so far, we have assumed that all variables in our linear
regression model are quantitative . But in practice, this is not necessarily
the case; often some predictors are qualitative .
For example, the Creditdata set displayed in Figure 3.6records variables
for a number of credit card holders. The response is balance(average credit
card debt for each individual) and there are several quantitative predictors:
age,cards(number of credit cards), education (years of education), income
(in thousands of dollars), limit(credit limit), and rating(credit rating).
Each panel of Figure 3.6is a scatterplot for a pair of variables whose iden-
tities are given by the corresponding row and column labels. For example,
the scatterplot directly to the right of the word “Balance” depicts balance
versusage, while the plot directly to the right of “Age” corresponds to
ageversuscards. In addition to these quantitative variables, we also have
four qualitative variables: own(house ownership), student(student status),
status(marital status), and region(East, West or South).
Predictors with Only Two Levels
Suppose that we wish to investigate differences in credit card balance be-
tween those who own a house and those who don’t, ignoring the other vari-
ables for the moment. If a qualitative predictor (also known as a factor)factoronly has two levels, or possible values, then incorporating it into a regres-levelsion model is very simple. We simply create an indicator or dummy variabledummy
variablethat takes on two possible numerical values.10For example, based on the
ownvariable, we can create a new variable that takes the form
xi=/braceleftBigg
1 ifith person owns a house
0 ifith person does not own a house ,(3.26)
and use this variable as a predictor in the regression equation. This results
in the person owns a house
β0+/epsilon1i ifith person does not .(3.27)
Nowβ0can be interpreted as the average credit card balance among those
who do not own, β0+β1as the average credit card balance among those
who do own their house, and β1as the average difference in credit card
balance between owners and non-owners.
Table3.7displays the coefficient estimates and other information asso-
ciated with the model ( 3.27). The average credit card debt for non-owners
is estimated to be $509 .80, whereas owners are estimated to carry $19.73
in additional debt for a total of $509 .80 + $19 .73 = $529 .53. However, we
10In the machine learning community, the creation of dummy variables to handle
qualitative predictors is known as “one-hot encoding”.92 3. Linear RegressionBalance20 40 60 80 1005 10 15 202000 8000 14000
0 500 150020 40 60 80 100AgeCards
24685 10 15 20EducationIncome
50 100 1502000 8000 14000Limit
0 500 1500246850 100 150200 600 1000
200 600 1000RatingFIGURE 3.6. TheCreditdata set contains information about balance,age,
cards,education ,income,limit, andratingfor a number of potential cus-
tomers.
notice that the p-value for the dummy variable is very high. This indicates
that there is no statistical evidence of a difference in average credit card
balance based on house ownership.
The decision to code owners as 1 and non-owners as 0 in ( 3.27) is ar-
bitrary, and has no effect on the regression fit, but does alter the inter-
pretation of the coefficients. If we had coded non-owners as 1and own-
ers as0, then the estimates for β0andβ1would have been 529.53and
−19.73, respectively, leading once again to a prediction of credit card debt
of$529 .53−$19.73 = $509 .80for non-owners and a prediction of $529 .53
for owners. Alternatively, instead of a 0/1coding scheme, we could create
a dummy variable
xi=/braceleftBigg
1 ifith person owns a house
−1 ifith person does not own a house
and use this variable in the regression equation. This results in the person owns a house
β0−β1+/epsilon1iifith person does not own a house.3.3 Other Considerations in the Regression Model 93
Coefficient Std. error t-statistic p-value
Intercept 509.80 33.13 15.389 <0.0001
own[Yes] 19.73 46.05 0.429 0.6690
TABLE 3.7. Least squares coefficient estimates associated with the regression
ofbalance ontoownin theCreditdata set. The linear model is given in ( 3.27).
That is, ownership is encoded as a dummy variable, as in ( 3.26).
Nowβ0can be interpreted as the overall average credit card balance (ig-
noring the house ownership effect), and β1is the amount by which house
owners and non-owners have credit card balances that are above and below
the average, respectively.11In this example, the estimate for β0is$519.665,
halfway between the non-owner and owner averages of $509.80and$529.53.
The estimate for β1is$9.865, which is half of $19.73, the average difference
between owners and non-owners. It is important to note that the final pre-
dictions for the credit balances of owners and non-owners will be identical
regardless of the coding scheme used. The only difference is in the way that
the coefficients are interpreted.
Qualitative Predictors with More than Two Levels
When a qualitative predictor has more than two levels, a single wecan create
additional dummy variables. For example, for the regionvariable we create
two dummy variables. The first could be
xi1=/braceleftBigg
1ifith person is from the South
0ifith person is not from the South ,(3.28)
and the second could be
xi2=/braceleftBigg
1ifith person is from the West
0ifith person is not from the West .(3.29)
Then both of these variables can be used in the regression equation, in
order to obtain the person is from the South
β0+β2+/epsilon1iifith person is from the West
β0+/epsilon1iifith person is from the East people from the South versus the East, and β2can be interpreted
as the difference in the average balance between those from the West versus
the East. There will always be one fewer dummy variable than the number
of levels. The level with no dummy variable—East in this example—is
known as the baseline.baseline
11Technically β0is half the sum of the average debt for house owners and the average
debt for non-house owners. Hence, β0is exactly equal to the overall average only if the
two groups have an equal number of members.94 3. Linear Regression
Coefficient Std. error t-statistic p-value
Intercept 531.00 46.32 11.464 <0.0001
region[South] −12.50 56.68 −0.221 0.8260
region[West] −18.69 65.02 −0.287 0.7740
TABLE 3.8. Least squares coefficient estimates associated with the regression of
balance ontoregionin theCreditdata set. The linear model is given in ( 3.30).
That is, region is encoded via two dummy variables ( 3.28) and (3.29).
From Table 3.8, we see that the estimated balancefor the baseline, East,
is$531.00. It is estimated that those in the South will have $18.69less
debt than those in the East, and that those in the West will have $12.50
less debt than those in the East. However, the p-values associated with the
coefficient estimates for the two dummy variables are very large, suggesting
no statistical evidence of a real difference in average credit card balance
between South and East or between West and East.12Once again, the
level selected as the baseline category is arbitrary, and the final predictions
for each group will be the same regardless of this choice. However, the
coefficients and their p-values do depend on the choice of dummy F-test
to testH0:β1=β2=0; this does not depend on the coding. This F-test
has ap-value of 0.96, indicating that we cannot reject the null hypothesis
that there is no relationship between balanceandregion.
Using this dummy variable approach presents no difficulties when in-
corporating both quantitative and qualitative predictors. For example, to
regressbalanceon both a quantitative variable such as incomeand a qual-
itative variable such as student, we must simply create a dummy variable
forstudentand then fit a multiple regression model using incomeand the
dummy variable as predictors for credit card balance.
There are many different ways of coding qualitative variables besides
the dummy variable approach taken here. All of these approaches lead to
equivalent model fits, but the coefficients are different and have contrasts .Thistopiccontrastis beyond the scope of the book.
3.3.2 Extensions of the Linear Model
The standard linear regression model ( 3.19) provides interpretable results
and works quite well on many real-world problems. However, it makes sev-
eral highly restrictive assumptions that are often violated in practice. Two
of the most important assumptions state that the relationship between the
predictors and response are additiveandlinear. The additivity assumptionadditive
linearmeans that the association between a predictor Xjand the response Ydoes
not depend on the values of the other predictors. The linearity assumption
states that the change in the response Yassociated with a one-unit change
inXjis constant, regardless of the value of Xj. In later chapters of this
book, we examine a number of sophisticated methods that relax these two
12There could still in theory be a difference between South and West, although the
data here does not suggest any difference.3.3 Other Considerations in the Regression Model 95
assumptions. Here, we briefly examine some common classical approaches
for extending the linear model.
Removing the Additive Assumption
In our previous analysis of the Advertising data, we concluded that both TV
andradioseem to be associated with sales. The linear models that formed
the basis for this conclusion assumed that the effect on salesof increasing
one advertising medium is independent of the amount spent on the other
media.Forexample,thelinearmodel( with a one-unit increase in TVis always β1, regardless
of the amount spent on radio.
However, this simple model may be incorrect. Suppose that spending
money on radio advertising actually increases the effectiveness of TV ad-
vertising, so that the slope term for TVshould increase as radioincreases.
In this situation, given a fixed budget of $100 ,000, spending half on radio
and half on TVmay increase salesmore than allocating the entire amount
to either TVor toradio. In marketing, this is known as a synergyeffect,
and in statistics it is referred to as an interaction effect. Figure 3.5sug-
gests that such an effect may be present in the advertising data. Notice
that when levels of either TVorradioare low, then the true salesare lower
than predicted by the linear model. But when advertising is split between
the two media, then the model tends to underestimate sales.
Consider the standard linear regression model with two to this model, a one-unit increase in X1is associated with an
average increase in Yofβ1units. Notice that the presence of X2does
not alter this statement—that is, regardless of the value of X2, a one-
unit increase in X1is associated with a β1-unit increase in Y. One way of
extending this model is to include a third predictor, called an interaction
term, which is constructed by computing the product of X1andX2. This
results in the model
Y=β0+β1X1+β2X2+β3X1X2+/epsilon1. (3.31)
How does inclusion of this interaction term relax the additive assumption?
Notice that ( 3.31) can be rewritten as
Y=β0+(β1+β3X2)X1+β2X2+/epsilon1 Since˜β1is now a function of X2, the association
between X1andYis no longer constant: a change in the value of X2will
change the association between X1andY. A similar argument shows that
a change in the value of X1changes the association between X2andY.
For example, suppose that we are interested in studying the productiv-
ity of a factory. We wish to predict the number of unitsproduced on the
basis of the number of production linesand the total number of workers.
It seems likely that the effect of increasing the number of production lines96 3. Linear Regression
Coefficient Std. error t-statistic p-value
Intercept 6.7502 0.248 27.23 <0.0001
TV 0.0191 0.002 12.70 <0.0001
radio 0.0289 0.009 3.24 0.0014
TV×radio 0.0011 0.000 20.73 <0.0001
TABLE 3.9. For theAdvertising data, least squares coefficient estimates asso-
ciated with the regression of salesontoTVandradio, with an interaction term,
as in (3.33).
will depend on the number of workers, since if no workers are available
to operate the lines, then increasing the number of lines will not increase
production. This suggests that it would be appropriate to include an inter-
action term between linesandworkersin a linear model to predict units.
Suppose that when we fit the model, we + (3.4+1.4×workers)×lines+0.22×workers.
In other words, adding an additional line will increase the number of units
produced by 3.4+1.4×workers. Hence the more workers we have, the
stronger will be the effect of lines.
We now return to the Advertising example. A linear model that uses
radio,TV, and an interaction between the two to predict salestakes can interpret β3as the increase in the effectiveness of TV advertising
associated with a one-unit increase in radio advertising (or vice-versa). The
coefficients that result from fitting the model ( 3.33) are given in Table 3.9.
Theresults in Table 3.9stronglysuggest that the modelthat includes the
interaction term is superior to the model that contains only main effects .main effectThep-value for the interaction term, TV×radio, is extremely low, indicating
that there is strong evidence for Ha:β3/negationslash=0. In other words, it is clear that
the true relationship is not additive. The R2for the model ( 3.33) is 96.8%,
compared to only 89.7% for the model that predicts salesusingTVand
radiowithout an interaction term. This means that (96.8−89.7)/(100−
89.7) = 69% of the variability in salesthat remains after fitting the ad-
ditive model has been explained by the interaction term. The coefficient
estimatesinTable 3.9suggestthatanincreaseinTVadvertisingof $1,000is
associated with increased sales of (ˆβ1+ˆβ3×radio)×1,000 = 19+1 .1×radio
units. And an increase in radio advertising of $1,000will be associated with
an increase in sales of (ˆβ2+ˆβ3×TV)×1,000 = 29 + 1 .1×TVunits.
In this example, the p-values associated with TV,radio, and the interac-
tion term all are statistically significant (Table 3.9), and so it is obvious
that all three variables should be included in the model. However, it is
sometimes the case that an interaction term has a very small p-value, but
the associated main effects (in this case, TVandradio) do not. The hier-
archical principle states that if we include an interaction in a model, wehierarchical
principle3.3 Other Considerations in the Regression Model 97
should also include the main effects, even if the p-values associated with
their coefficients are not significant. In other words, if the interaction be-
tweenX1andX2seems important, then we should include both X1and
X2in the model even if their coefficient estimates have large p-values. The
rationale for this principle is that if X1×X2is related to the response,
then whether or not the coefficients of X1orX2are exactly zero is of lit-
tle interest. Also X1×X2is typically correlated with X1andX2, and so
leaving them out tends to alter the meaning of the interaction.
In the previous example, we considered an interaction between TVand
radio, both of which are quantitative variables. However, the concept of
interactions applies just as well to qualitative variables, or to a combination
of quantitative and qualitative variables. In fact, an interaction between
a qualitative variable and a quantitative variable has a particularly nice
interpretation.Considerthe CreditdatasetfromSection 3.3.1,andsuppose
thatwewishtopredict balanceusingthe income(quantitative)and student
(qualitative) variables. In the absence of an interaction term, the model
takes the form
balance i≈β0+β1×income i+/braceleftBigg
β2 ifith person is a student
0 ifith person is not a student
=β1×income i+/braceleftBigg
β0+β2 ifith person is a student
β0 ifith person is not a student .
(3.34)
Notice that this amounts to fitting two parallel lines to the data, one for
students and one for non-students. The lines for students and non-students
have different intercepts, β0+β2versusβ0, but the same slope, β1. This
is illustrated in the left-hand panel of Figure 3.7. The fact that the lines
are parallel means that the average effect on balanceof a one-unit increase
inincomedoes not depend on whether or not the individual is a student.
This represents a potentially serious limitation of the model, since in fact a
change in incomemay have a very different effect on the credit card balance
of a student versus a non-student.
This limitation can be addressed by adding an interaction variable, cre-
ated by multiplying incomewith the dummy variable for student. Our
model now becomes
balance i≈β0+β1×income i+/braceleftBigg
β2+β3×income iif student
0 if not student
=/braceleftBigg
(β0+β2)+( β1+β3)×income iif student
β0+β1×income i if not student .
(3.35)
Once again, we have two different regression lines for the students and
the non-students. But now those regression lines have different β1+β3versusβ1.Thisallowsfor
the possibility that changes in income may affect the credit card balances
of students and non-students differently. The right-hand panel of Figure 3.798 3. Linear Regression
0 50 100 150200 600 1000 1400IncomeBalance0 50 100 150200 600 1000 1400IncomeBalancestudentnon−student
FIGURE 3.7. For theCreditdata, the least squares lines are shown for pre-
diction of balance fromincomefor students and non-students. Left:The model
(3.34) was fit. There is no interaction between incomeandstudent.Right:The
model (3.35) was fit. There is an interaction term between incomeandstudent.
shows the estimated relationships between incomeandbalancefor students
and non-students in the model ( 3.35). We note that the slope for students
is lower than the slope for non-students. This suggests that increases in
income are associated with smaller increases in credit card balance among
students as compared to non-students.
Non-linear Relationships
As discussed previously, the linear regression model ( 3.19) assumes a linear
relationship between the response and predictors. But in some cases, the
true relationship between the response and the predictors may be accommodate non-linear relationships, using polynomial regression . Inpolynomial
regressionlater chapters, we will present more complex approaches for performing
non-linear fits in more general settings.
Consider Figure 3.8, in which the mpg(gas mileage in miles per gallon)
versushorsepower is shown for a number of cars in the Autodata set. The
orange line represents the linear regression fit. There is a pronounced rela-
tionship between mpgandhorsepower , but it seems clear that this relation-
ship is in fact non-linear: the data suggest a curved relationship. A simple
approach for incorporating non-linear associations in a linear model is to
include transformed versions of the predictors. For example, the points in
Figure3.8seem to have a quadratic shape, suggesting that a model of thequadraticform
mpg=β0+β1×horsepower +β2×horsepower2+/epsilon1 (3.36)
may provide a better fit. Equation 3.36involves predicting mpgusing a
non-linear function of horsepower .But it is still a linear model! That is,
(3.36) is simply a multiple linear regression model with X1=horsepower
andX2=horsepower2. So we can use standard linear regression software to
estimate β0,β1, andβ2in order to produce a non-linear fit. The blue curve
in Figure 3.8shows the resulting quadratic fit to the data. The quadratic3.3 Other Considerations in the Regression Model 99
5010015020010 20 30 40 50HorsepowerMiles per gallonLinearDegree 2Degree 5
FIGURE 3.8. TheAutodata set. For a number of cars, mpgandhorsepower are
shown. The linear regression fit is shown in orange. The linear regression fit for a
model that includes horsepower2is shown as a blue curve. The linear regression
fit for a model that includes all polynomials of horsepower up to fifth-degree is
shown in green.
Coefficient Std. error t-statistic p-value
Intercept 56.9001 1.8004 31.6 <0.0001
horsepower −0.4662 0.0311 −15.0<0.0001
horsepower20.0012 0.0001 10.1 <0.0001
TABLE 3.10. the regression of mpgontohorsepower andhorsepower2.
fit appears to be substantially better than the fit obtained when just the
linear term is included. The R2of the quadratic fit is 0.688, compared to
0.606for the linear fit, and the p-value in Table 3.10for the quadratic term
is highly significant.
If including horsepower2led to such a big improvement in the model, why
notinclude horsepower3,horsepower4,oreven horsepower5?Thegreencurve
in Figure 3.8displays the fit that results from including all polynomials up
to fifth degree in the model ( 3.36). The resulting fit seems unnecessarily
wiggly—that is, it is unclear that including the additional terms really has
led to a better fit to the data.
The approach that we have just described for extending the linear model
to accommodate non-linear relationships is known as polynomial regres-
sion, since we have included polynomial functions of the predictors in the
regression model. We further explore this approach and other non-linear
extensions of the linear model in Chapter 7.100 3. Linear Regression3.3.3 Potential ProblemsWhen we fit a linear regression model to a particular data set, many prob-lems may occur. Most common among these are the following:1.Non-linearity of the response-predictor relationships.2.Correlation of error terms.3.Non-constant variance of error terms.4.Outliers.5.High-leverage points.6.Collinearity.In practice, identifying and overcoming these problems is as much anart as a science. Many pages in countless books have been written on thistopic. Since the linear regression model is not our primary focus here, wewill provide only a brief summary of some key points.1. Non-linearity of the Data
5 10 15 20 25 30−15 −10 −5 0 5 10 15 20Fitted valuesResidualsResidual Plot for Linear Fit323330334
15 20 25 30 35−15 −10 −5 0 5 10 15Fitted valuesResidualsResidual Plot for Quadratic Fit334323
155FIGURE 3.9.Plots of residuals versus predicted (or fitted) values for theAutodata set. In each plot, the red line is a smooth fit to the residuals, intended to makeit easier to identify a trend.Left:A linear regression ofmpgonhorsepower.Astrong pattern in the residuals indicates non-linearity in the data.Right:A linearregression ofmpgonhorsepowerandhorsepower2. There is little pattern in theresiduals.The linear regression model assumes that there is a straight-line rela-tionship between the predictors and the response. If the true relationshipis far from linear, then virtually all of the conclusions that we draw fromthe fit are suspect. In addition, the prediction accuracy of the model canbe significantly reduced.Residual plotsare a useful graphical tool for identifying non-linearity.residual plotGiven a simple linear regression model, we can plot the residuals,ei=3.3 Other Considerations in the Regression Model 101
yi−ˆyi, versus the predictor xi. In the case of a multiple regression model,
since there are multiple predictors, we instead plot the residuals versus
the predicted (or fitted) values ˆyi. Ideally, the residual plot will show nofitteddiscernible pattern. The presence of a pattern may indicate a problem with
some aspect of the linear model.
The left panel of Figure 3.9displays a residual plot from the linear re-
gression of mpgontohorsepower on theAutodata set that was illustrated to make it easier to identify any trends. The residuals exhibit a clear
U-shape, which provides a strong indication of non-linearity in the data.
In contrast, the right-hand panel of Figure 3.9displays the residual plot
that results from the model ( 3.36), which contains a quadratic term. There
appears to be little pattern in the residuals, suggesting that the quadratic
term improves the fit to the data.
If the residual plot indicates that there are non-linear associations in the
data, then a simple approach is to use non-linear transformations of the
predictors, such as logX,√
X, andX2, in the regression model. In the
later chapters of this book, we will discuss other more advanced non-linear
approaches for addressing this issue.
2. Correlation of Error Terms
An important assumption of the linear regression model is that the are uncorrelated. What does this mean? For instance,
if the errors are uncorrelated, then the fact that /epsilon1iis positive provides
little or no information about the sign of /epsilon1i+1. The standard errors that
are computed for the estimated regression coefficients or the fitted values
are based on the assumption of uncorrelated error terms. If in fact there is
correlation among the error terms, then the estimated standard errors will
tend to underestimate the true standard errors. As a result, confidence and
prediction intervals will be narrower than they should be. For example,
a 95% confidence interval may in reality have a much lower probability
than0.95of containing the true value of the parameter. In addition, p-
values associated with the model will be lower than they should be; this
could cause us to erroneously conclude that a parameter is statistically
significant. In short, if the error terms are correlated, we may have an
unwarranted sense of confidence in our model.
As an extreme example, suppose we accidentally doubled our data, lead-
ing to observations and error terms identical in pairs. If we ignored this, our
standard error calculations would be as if we had a sample of size 2n, when
in fact we have only nsamples. Our estimated parameters would be the
same for the 2nsamples as for the nsamples, but the confidence intervals
would be narrower by a factor of√
2!
Why might correlations among the error terms occur? Such correlations
frequently occur in the context of time series data, which consists of ob-time seriesservations for which measurements are obtained at discrete points in time.
In many cases, observations that are obtained at adjacent time points will
have positively correlated errors. In order to determine if this is the case for
a given data set, we can plot the residuals from our model as a function of
time. If the errors are uncorrelated, then there should be no discernible pat-102 3. Linear Regression
020406080100−3 −1 0 1 2 3ρ=0.0Residual
020406080100−4 −2 0 1 2ρ=0.5Residual
020406080100−1.5 −0.5 0.5 1.5ρ=0.9ResidualObservationFIGURE 3.10. Plots of residuals from simulated time series data sets generated
with differing levels of correlation ρbetween error terms for adjacent time points.
tern. On the other hand, if the error terms are positively correlated, then
we may see tracking in the residuals—that is, adjacent residuals may havetrackingsimilar values. Figure 3.10provides an illustration. In the top panel, we see
the residuals from a linear regression fit to data generated with uncorre-
lated errors. There is no evidence of a time-related trend in the residuals.
In contrast, the residuals in the bottom panel are from a data set in which
adjacent errors had a correlation of 0.9. Now there is a clear pattern in the
residuals—adjacent residuals tend to take on similar values. Finally, the
center panel illustrates a more moderate case in which the residuals had a
correlation of 0.5. There is still evidence of tracking, but the pattern is less
clear.
Many methods have been developed to properly take account of corre-
lations in the error terms in time series data. Correlation among the error
terms can also occur outside of time series data. For instance, consider a
study in which individuals’ heights are predicted from their weights. The
assumption of uncorrelated errors could be violated if some of the indi-
viduals in the study are members of the same family, eat the same diet,
or have been exposed to the same environmental factors. In general, the
assumption of uncorrelated errors is extremely important for linear regres-
sion as well as for other statistical methods, and good experimental design
is crucial in order to mitigate the risk of such correlations.3.3 Other Considerations in the Regression Model 103
10 15 20 25 30−10 −5 0 5 10 15Fitted valuesResidualsResponse Y998975845
2.4 2.6 2.8 3.0 3.2 3.4−0.8 −0.6 −0.4 −0.2 0.0 0.2 0.4Fitted valuesResidualsResponse log(Y)
437671605FIGURE 3.11. Residual plots. In each plot, the red line is a smooth fit to the
residuals, intended to make it easier to identify a trend. The blue lines track the
outer quantiles of the residuals, and emphasize patterns. Left:The funnel shape
indicates heteroscedasticity. Right:The response has been log transformed, and
there is now no evidence of heteroscedasticity.
3. Non-constant Variance of Error Terms
Another important assumption of the linear regression model is that the
error terms have a constant variance, Var (/epsilon1i)=σ2. The standard errors,
confidence intervals, and hypothesis tests associated with the linear model
rely upon this For instance, the variances of the error terms may increase
with the value of the response. One can identify non-constant variances in
the errors, or heteroscedasticity , from the presence of a funnel shape 3.11,
in which the magnitude of the residuals tends to increase with the fitted
values. When faced with this problem, one possible solution is to trans-
form the response Yusing a concave function such as logYor√
Y. Such
a transformation results in a greater amount of shrinkage of the larger re-
sponses, leading to a reduction in heteroscedasticity. The right-hand panel
of Figure 3.11displays the residual plot after transforming the response
usinglogY. The residuals now appear to have constant variance, though
there is some evidence of a slight non-linear relationship in the data.
Sometimes we have a good idea of the variance of each response. For
example, the ith response could be an average of niraw observations. If
each of these raw observations is uncorrelated with variance σ2, then their
average has variance σ2
i=σ2/ni. In this case a simple remedy is to fit our
model by weighted least squares , with weights proportional to the inverseweighted
least squaresvariances—i.e. wi=niin this case. Most linear regression software allows
for observation weights.
4. Outliers
Anoutlieris a point for which yiis far from the value predicted by theoutlier104 3. Linear Regression
−2 −1 0 1 2−4 −2 0 2 4 620
−2 0 2 4 6−1 0 1 2 3 4Fitted ValuesResiduals20
−2 0 2 4 60246Fitted ValuesStudentized Residuals20
XYFIGURE 3.12. Left:The least squares regression line is shown in red, and the
regression line after removing the outlier is shown in blue. Center:The residual
plot clearly identifies the outlier. Right:The outlier has a studentized residual of
6; typically we expect values between an observation during data collection.
The red point (observation 20) in the left-hand panel of Figure 3.12
illustrates a typical outlier. The red solid line is the least squares regression
fit, while the blue dashed line is the least squares fit after removal of it leads to almost no change in the slope, and a miniscule reduction
in the intercept. It is typical for an outlier that does not have an unusual
predictor value to have little effect on the least squares fit. However, even
if an outlier does not have much effect on the least squares fit, it can cause
other problems. For instance, in this example, the RSE is 1.09when the
outlier is included in the regression, but it is only 0.77when the outlier
is removed. Since the RSE is used to compute all confidence intervals and
p-values, such a dramatic increase caused by a single data point can have
implications for the interpretation of the fit. Similarly, inclusion of the
outlier causes the R2to decline from 0.892to0.805.
Residual plots can be used to identify outliers. In this example, the out-
lier is clearly visible in the residual plot illustrated in the center panel of
Figure3.12. But in practice, it can be difficult to decide how large a resid-
ual needs to be before we consider the point to be an outlier. To address
this problem, instead of plotting the residuals, we can plot the studentized
residuals , computed by dividing each residual eiby its estimated standardstudentized
residualerror. Observations whose studentized residuals are greater than 3 in abso-
lute value are possible outliers. In the right-hand panel of Figure 3.12, the
outlier’s studentized residual exceeds 6, while all other observations have
studentized residuals between −2and2.
If we believe that an outlier has occurred due to an error in data collec-
tion or recording, then one solution is to simply remove the observation.
However, care should be taken, since an outlier may instead indicate a
deficiency with the model, such as a missing predictor.
5. High Leverage Points
We just saw that outliers are observations for which the response yiis
unusual given the predictor xi. In contrast, observations with high leveragehigh
leveragehave an unusual value for xi. For example, observation 41in the left-hand3.3 Other Considerations in the Regression Model 105
−2 −1 0 1 2 3 40 5 102041
−2 −1 0 1 2−2 −1 0 1 20.00 0.05 0.10 0.15 0.20 0.25−1 0 1 2 3 4 5LeverageStudentized Residuals2041
XY
X1X2FIGURE 3.13. Left:Observation 41 is a high leverage point, while 20 is not.
The red line is the fit to all the data, and the blue line is the fit with observation
41 removed. Center:The red observation is not unusual in terms of its X1value
or itsX2value, but still falls outside the bulk of the data, and hence has high
leverage. Right:Observation 41has a high leverage and a high residual.
panel of Figure 3.13has high leverage, in that the predictor value for this
observation is large relative to the other observations. (Note that the data
displayed in Figure 3.13are the same as the data displayed in Figure 3.12,
but with the addition of a single high leverage observation.) The red solid
line is the least squares fit to the data, while the blue dashed line is the
fit produced when observation 41is removed. Comparing the left-hand
panels of Figures 3.12and3.13, we observe that removing the high leverage
observation has a much more substantial impact on the least squares line
than removing the outlier. In fact, high leverage observations tend to have
a sizable impact on the estimated regression line. It is cause for concern if
the least squares line is heavily affected by just a couple of observations,
because any problems with these points may invalidate the entire fit. For
this reason, it is important to identify high leverage observations.
In a simple linear regression, high leverage observations are fairly easy to
identify, since we can simply look for observations for which the predictor
value is outside of the normal range of the observations. But in a multiple
linear regression with many predictors, it is possible to have an observation
that is well within the range of each individual predictor’s values, but that
is unusual in terms of the full set of predictors. An example is shown in
the center panel of Figure 3.13, for a data set with two predictors, X1and
X2. Most of the observations’ predictor values fall within the blue dashed
ellipse, but the red observation is well outside of this range. But neither its
value for X1nor its value for X2is unusual. So if we examine just X1or
justX2, we will fail to notice this high leverage point. This problem is more
pronounced in multiple regression settings with more than two predictors,
because then there is no simple way to plot all dimensions of the data
simultaneously.
In order to quantify an observation’s leverage, we compute the leverage
statistic. A large value of this statistic indicates an observation with highleverage
statisticleverage. For a simple linear (3.37)106 3. Linear Regression
2000 4000 6000 8000 1200030 40 50 60 70 80LimitAge
2000 4000 6000 8000 12000200 400 600 800LimitRating
FIGURE 3.14. Scatterplots of the observations from the Creditdata set. Left:
A plot of ageversuslimit. These two variables are not collinear. Right:A plot
ofratingversuslimit. There is high collinearity.
Itisclearfromthisequationthat hiincreaseswiththedistanceof xifrom¯x.
There is a simple extension of hito the case of multiple predictors, though
we do not provide the formula here. The leverage statistic hiis always
between 1/nand1, and the average leverage for all the observations is
always equal to (p+ 1)/n. So if a given observation has a leverage statistic
that greatly exceeds (p+1)/n, then we may suspect that the corresponding
point has high leverage.
The right-hand panel of Figure 3.13provides a plot of the studentized
residuals versus hifor the data in the left-hand panel of Figure 3.13. Ob-
servation 41stands out as having a very high leverage statistic as well as a
high studentized residual. In other words, it is an outlier as well as a high
leverage observation. This is a particularly dangerous combination! This
plot also reveals the reason that observation 20 had relatively little effect
on the least squares fit in Figure 3.12: it has low leverage.
6. Collinearity
Collinearity refers to the situation in which two or more predictor variablescollinearityare closely related to one another. The concept of collinearity is illustrated
in Figure 3.14using the Creditdata set. In the left-hand panel of Fig-
ure3.14, the two predictors limitandageappear to have no obvious rela-
tionship. In contrast, in the right-hand panel of Figure 3.14, the predictors
limitandratingare very highly correlated with each other, and we say
that they are collinear. The presence of collinearity can pose problems in
the regression context, since it can be difficult to separate out the indi-
vidual effects of collinear variables on the response. In other words, since
limitandratingtend to increase or decrease together, it can be difficult The left-hand panel of Figure 3.15is a contour plot of the RSS ( 3.22)
associated with different possible coefficient estimates for the regression
ofbalanceonlimitandage. Each ellipse represents a set of coefficients3.3 Other Considerations in the Regression Model 107
 21.25  21.5  21.8 
0.16 0.17 0.18 0.19−5 −4 −3 −2 −1 0 21.5  21.8 
−0.1 0.0 0.1 0.2012345βLimitβLimitβAge
βRating
FIGURE 3.15. Contour plots for the RSS values as a function of the parameters
βfor various regressions involving the Creditdata set. In each plot, the black
dots represent the coefficient values corresponding to the minimum RSS. Left:
A contour plot of RSS for the regression of balance ontoageandlimit. The
minimum value is well defined. Right:A contour plot of RSS for the regression
ofbalance ontoratingandlimit. Because of the collinearity, there are many
pairs(βLimit,βRating )with a similar value for RSS.
that correspond to the same RSS, with ellipses nearest to the center tak-
ing on the lowest values of RSS. The black dots and associated dashed
lines represent the coefficient estimates that result in the smallest possible
RSS—in other words, these are the least squares estimates. The axes for
limitandagehave been scaled so that the plot includes possible coeffi-
cient estimates that are up to four standard errors on either side of the
least squares estimates. Thus the plot includes all plausible values for the
coefficients. For example, we see that the true limitcoefficient is almost
certainly somewhere between 0.15and0.20.
In contrast, the right-hand panel of Figure 3.15displays contour plots
of the RSS associated with possible coefficient estimates for the regression
ofbalanceontolimitandrating, which we know to be highly collinear.
Now the contours run along a narrow valley; there is a broad range of
values for the coefficient estimates that result in equal values for RSS.
Hence a small change in the data could cause the pair of coefficient values
that yield the smallest RSS—that is, the least squares estimates—to move
anywhere along this valley. This results in a great deal of uncertainty in limitcoefficientnowruns
from roughly −0.2to0.2; this is an eight-fold increase over the plausible
range of the limitcoefficient in the regression with age. Interestingly, even
though the limitandratingcoefficients now have much more individual
uncertainty, they will almost certainly lie somewhere in this contour valley.
For example, we would not expect the true value of the limitandrating
coefficients to be −0.1and1respectively, even though such a value is
plausible for each coefficient individually.
Since collinearity reduces the accuracy of the estimates of the regression
coefficients, it causes the standard error for ˆβjto grow. Recall that the
t-statistic for each predictor is calculated by dividing ˆβjby its standard108 3. Linear Regression
Coefficient Std. error t-statistic p-value
Intercept −173.411 43.828 −3.957<0.0001
Model 1 age −2.292 0.672 −3.407 0.0007
limit 0.173 0.005 34.496 <0.0001
Intercept −377.537 45.254 −8.343<0.0001
Model 2 rating 2.202 0.952 2.312 0.0213
limit 0.025 0.064 0.384 0.7012
TABLE 3.11. The results for two multiple regression models involving the Credit
data set are shown. Model 1 is a regression of balance onageandlimit, and
Model 2 a regression of balance onratingandlimit. The standard error of
ˆβlimitincreases 12-fold in the second regression, due to collinearity.
error. Consequently, collinearity results in a decline in the t-statistic. As a
result, in the presence of collinearity, we may fail to reject H0:βj=0. This
means that the powerof the hypothesis test—the probability of correctlypower
detecting a non-zero coefficient—is reduced by collinearity.
Table3.11compares the coefficient estimates obtained from two separate
multiple regression models. The first is a regression of balanceonageand
limit, and the second is a regression of balanceonratingandlimit. In the
first regression, both ageandlimitare highly significant with very small p-
values. In the second, the collinearity between limitandratinghas caused
the standard error for the limitcoefficient estimate to increase by a factor
of12and thep-value to increase to 0.701. In other words, the importance
of thelimitvariable has been masked due to the presence of collinearity.
To avoid such a situation, it is desirable to identify and address potential
collinearity problems while fitting the model.
A simple way to detect collinearity is to look at the correlation matrix
of the predictors. An element of this matrix that is large in absolute value
indicates a pair of highly correlated variables, and therefore a collinearity
problem in the data. Unfortunately, not all collinearity problems can be
detected by inspection of the correlation matrix: it is possible for collinear-
ity to exist between three or more variables even if no pair of variables
has a particularly high correlation. We call this situation multicollinearity .multi-
collinearityInstead of inspecting the correlation matrix, a better way to assess multi-
collinearity is to compute the variance inflation factor (VIF). The VIF isvariance
inflation
factorthe ratio of the variance of ˆβjwhen fitting the full model divided by the
variance of ˆβjif fit on its own. The smallest possible value for VIF is 1,
which indicates the complete absence of collinearity. Typically in practice
there is a small amount of collinearity among the predictors. As a rule of
thumb, a VIF value that exceeds 5or10indicates a problematic amount of
collinearity. The VIF for each variable can be computed using the theR2from a regression of Xjonto all of the other
predictors. If R2
Xj|X−jis close to one, then collinearity is present, and so
the VIF will be large.3.4 The Marketing Plan 109
In theCreditdata, a regression of balanceonage,rating, andlimit
indicates that the predictors have VIF values of 1.01, 160.67, and 160.59.
As we suspected, there is considerable collinearity in the data!
When faced with the problem of collinearity, there are two simple solu-
tions. The first is to drop one of the problematic variables from the regres-
sion. This can usually be done without much compromise to the regression
fit, since the presence of collinearity implies that the information that this
variable provides about the response is redundant in the presence of the
other variables. For instance, if we regress balance ontoageandlimit,
without the ratingpredictor, then the resulting VIF values are close to
the minimum possible value of 1, and the R2drops from 0.754to0.75.
So dropping ratingfrom the set of predictors has effectively solved the
collinearity problem without compromising the fit. The second solution is
to combine the collinear variables together into a single predictor. For in-
stance, we might take the average of standardized versions of limitand
ratingin order to create a new variable that measures credit worthiness .
3.4 The Marketing Plan
We now briefly return to the seven questions about the Advertising data
that we set out to answer at the beginning of this chapter.
1.Is there a relationship between sales and advertising budget?
This question can be answered by fitting a multiple regression model
ofsalesontoTV,radio, andnewspaper , as in (3.20), and testing the
hypothesis H0:βTV=βradio=βnewspaper =0. In Section 3.2.2,
we showed that the F-statistic can be used to determine whether
or not we should reject this null hypothesis. In this case the p-value
corresponding to the F-statistic in Table 3.6is very low, indicating
clear evidence of a relationship between advertising and sales.
2.How strong is the relationship?
We discussed two measures of model accuracy in Section 3.1.3. First,
the RSE estimates the standard deviation of the response from the
population regression line. For the Advertising data, the RSE is 1.69
units while the mean value for the response is 14.022, indicating a
percentage error of roughly 12%. Second, the R2statistic records
the percentage of variability in the response that is explained by
the predictors. The predictors explain almost 90% of the variance in
sales. The RSE and R2statistics are displayed in Table 3.6.
3.Which media are associated with sales?
To answer this question, we can examine the p-values associated with
each predictor’s t-statistic (Section 3.1.2). In the multiple linear re-
gression displayed in Table 3.4, thep-values for TVandradioare low,
but thep-value for newspaper is not. This suggests that only TVand
radioare related to sales. In Chapter 6we explore this question in
greater detail.110 3. Linear Regression
4.How large is the association between each medium and sales?
We saw in Section 3.1.2that the standard error of ˆβjcan be used to
construct confidence intervals for βj. For the Advertising data, we
can use the results in Table 3.4to compute the 95% confidence inter-
vals for the coefficients in a multiple regression model using all three
media budgets as predictors. The confidence intervals are as follows:
(0.043,0.049) forTV,(0.172,0.206) forradio, and(−0.013,0.011) for
newspaper . The confidence intervals for TVandradioare narrow and
far from zero, providing evidence that these media are related to
sales. But the interval for newspaper includes zero, indicating that
the variable is not statistically significant given the values of TVand
radio.
We saw in Section 3.3.3that collinearity can result in very wide stan-
dard errors. Could collinearity be the reason that the confidence in-
terval associated with newspaper is so wide? The VIF scores are 1.005,
1.145, and1.145forTV,radio, andnewspaper , suggesting no evidence
of collinearity.
In order to assess the association of each medium individually on
sales, we can perform three separate simple linear regressions. Re-
sults are shown in Tables 3.1and3.3. There is evidence of an ex-
tremely strong association between TVandsalesand between radio
andsales. There is evidence of a mild association between newspaper
andsales, when the values of TVandradioare ignored.
5.How accurately can we predict future sales?
The response can be predicted using ( 3.21). The accuracy associ-
ated with this estimate depends on whether we wish to predict an
individual response, Y=f(X)+/epsilon1, or the average response, f(X)
(Section 3.2.2). If the former, we use a prediction interval, and if
the latter, we use a confidence interval. Prediction intervals will al-
ways be wider than confidence intervals because they account for the
uncertainty associated with /epsilon1, the irreducible error.
6.Is the relationship linear?
In Section 3.3.3, we saw that residual plots can be used in order to
identify non-linearity. If the relationships are linear, then the residual
plots should display no pattern. In the case of the Advertising data,
we observe a non-linear effect in Figure 3.5, though this effect could
also be observed in a residual plot. In Section 3.3.2, we discussed the
inclusion of transformations of the predictors in the linear regression
model in order to accommodate non-linear relationships.
7.Is there synergy among the advertising media?
The standard linear regression model assumes an additive relation-
ship between the predictors and the response. An additive model
is easy to interpret because the association between each predictor
and the response is unrelated to the values of the other predictors.
However, the additive assumption may be unrealistic for certain data
sets. In Section 3.3.2, we showed how to include an interaction term111
in the regression model in order to accommodate non-additive rela-
tionships. A small p-value associated with the interaction term indi-
cates the presence of such relationships. Figure 3.5suggested that the
Advertising data may not be additive. Including an interaction term
in the model results in a substantial increase in R2, from around 90%
to almost 97%.
3.5 Comparison of Linear Regression
withK-Nearest Neighbors
As discussed in Chapter 2, linear regression is an example of a parametric
approach because it assumes a linear functional form for f(X). Parametric
methods have several advantages. They are often easy to fit, because one
need estimate only a small number of coefficients. In the case of linear re-
gression, the coefficients have simple interpretations, and tests of statistical
significance can be easily performed. But parametric methods do have a
disadvantage: by construction, they make strong assumptions about the
form off(X). If the specified functional form is far from the truth, and
prediction accuracy is our goal, then the parametric method will perform
poorly. For instance, if we assume a linear relationship between XandY
but the true relationship is far from linear, then the resulting model will
provide a poor fit to the data, and any conclusions drawn from it will be
suspect.
In contrast, non-parametric methods do not explicitly assume a para-
metric form for f(X), and thereby provide an alternative and more flexi-
ble approach for performing regression. We discuss various non-parametric
methods in this book. Here we consider one of the simplest and best-known
non-parametricmethods, K-nearest neighbors regression KNN regression method is closely related to the KNN classifier dis-
cussed in Chapter 2. Given a value for Kand a prediction point x0, KNN
regression first identifies the Ktraining observations that are closest to
x0, represented by N0. It then estimates f(x0)using the average of all the
training responses in N0. In other p=2predictors.The
fit withK=1is shown in the left-hand panel, while the right-hand panel
corresponds to K=9. We see that when K=1, the KNN fit perfectly
interpolates the training observations, and consequently takes the form
of a step function. When K=9, the KNN fit still is a step function, but
averaging over nine observations results in much smaller regions of constant
prediction, and consequently a smoother fit. In general, the optimal value
forKwill depend on the bias-variance tradeoff , which we introduced in
Chapter 2. A small value for Kprovides the most flexible fit, which will
have low bias but high variance. This variance is due to the fact that the
prediction in a given region is entirely dependent on just one 3. Linear Regression
yyx1x1x2x2yyy
FIGURE 3.16. Plots of ˆf(X)using KNN regression on a two-dimensional
data set with 64observations (orange dots). Left:K=1results in a rough step
function fit. Right:K=9produces a much smoother fit.
In contrast, larger values of Kprovide a smoother and less variable fit; the
prediction in a region is an average of several points, and so changing one
observation has a smaller effect. However, the smoothing may cause bias by
masking some of the structure in f(X). In Chapter 5, we introduce several
approaches for estimating test error rates. These methods can be used to
identify the optimal value of Kin KNN outperform a non-parametric approach such as KNN regression?
The answer is simple: the parametric approach will outperform the non-
parametric approach if the parametric form that has been selected is close
to the true form of f. Figure3.17provides an example with data generated
from a one-dimensional linear regression model. The black solid lines rep-
resentf(X), while the blue curves correspond to the KNN fits using K=1
andK=9. In this case, the K=1predictions are far too variable, while
the smoother K=9 fit is much closer to f(X). However, since the true
relationship is linear, it is hard for a non-parametric approach to compete
with linear regression: a non-parametric approach incurs a cost in variance
that is not offset by a reduction in bias. The blue dashed line in the left-
hand panel of Figure 3.18represents the linear regression fit to the same
data. It is almost perfect. The right-hand panel of Figure 3.18reveals that
linear regression outperforms KNN for this data. The green solid line, plot-
ted as a function of 1/K, represents the test set mean squared error (MSE)
for KNN. The KNN errors are well above the black dashed line, which is
the test MSE for linear regression. When the value of Kis large, then KNN
performs only a little worse than least squares regression in terms of MSE.
It performs far worse when Kis small.
In practice, the true relationship between XandYis rarely exactly lin-
ear. Figure 3.19examines the relative performances of least squares regres-
sion and KNN under increasing levels of non-linearity in the relationship
between XandY. In the top row, the true relationship is nearly linear.
In this case we see that the test MSE for linear regression is still −0.5 0.0 0.5 1.01234−1.0 −0.5 0.0 0.5 1.01234yyxxFIGURE 3.17. Plots of ˆf(X)using KNN regression on a one-dimensional data
set with 50observations. The true relationship is given by the black solid line.
Left:The blue curve corresponds to K=1and interpolates (i.e. passes directly
through) the training data. Right:The blue curve corresponds to K=9, and
represents a smoother fit.
−1.0 −0.5 0.0 0.5 1.012340.20.5 1.00.00 0.05 0.10 0.15Mean Squared Erroryx1/KFIGURE 3.18. The same data set shown in Figure 3.17is investigated further.
Left:The blue dashed line is the least squares fit to the data. Since f(X)is in
fact linear (displayed as the black line), the least squares regression line provides
a very good estimate of f(X).Right:The dashed horizontal line represents the
least squares test set MSE, while the green solid line corresponds to the MSE
for KNN as a function of 1/K(on the log scale). Linear regression achieves a
lower test MSE than does KNN regression, since f(X)is in fact linear. For KNN
regression, the best results occur with a very large value of K, corresponding to a
small value of 1/K.114 3. Linear Regression
−1.0 −0.5 0.0 0.5 1.00.5 1.0 1.5 2.0 2.5 3.0 3.50.20.51.00.00 0.02 0.04 0.06 0.08Mean Squared Error
−1.0 −0.5 0.0 0.5 1.01.0 1.5 2.0 2.5 3.0 3.50.20.51.00.00 0.05 0.10 0.15Mean Squared Erroryy
xx
1/K1/K
FIGURE 3.19. Top Left: In a setting with a slightly non-linear relationship
between XandY(solid black line), the KNN fits with K=1(blue) and K=9
(red) are displayed. Top Right: For the slightly non-linear data, the test set MSE
for least squares regression (horizontal black) and KNN with various values of
1/K(green) are displayed. Bottom Left and Bottom Right: As in the top panel,
but with a strongly non-linear relationship between XandY.
to that of KNN for low values of K. However, for K≥4, KNN out-
performs linear regression. The second row illustrates a more substantial
deviation from linearity. In this situation, KNN substantially outperforms
linear regression for all values of K. Note that as the extent of non-linearity
increases, there is little change in the test set MSE for the non-parametric
KNN method, but there is a large increase in the test set MSE of linear
regression.
Figures3.18and3.19display situations in which KNN performs slightly
worse than linear regression when the relationship is linear, but much bet-
ter than linear regression for nonlinear situations. In a real life situation
in which the true relationship is unknown, one might suspect that KNN
should be favored over linear regression because it will at worst be slightly
inferior to linear regression if the true relationship is linear, and may give
substantially better results if the true relationship is non-linear. But in re-
ality, even when the true relationship is highly non-linear, KNN may still
provide inferior results to linear regression. In particular, both Figures 3.183.5 Comparison of Linear Regression with K-Nearest Neighbors 115
0.2 0.5 1.00.0 0.2 0.4 0.6 0.8 1.0p=1
0.2 0.5 1.00.0 0.2 0.4 0.6 0.8 1.0p=2
0.2 0.5 1.00.0 0.2 0.4 0.6 0.8 1.0p=3
0.2 0.5 1.00.0 0.2 0.4 0.6 0.8 1.0p=4
0.2 0.5 1.00.0 0.2 0.4 0.6 0.8 1.0p=10
0.2 0.5 1.00.0 0.2 0.4 0.6 0.8 1.0p=20Mean Squared Error1/KFIGURE 3.20. Test MSE for linear regression (black dashed lines) and KNN
(green curves) as the number of variables pincreases. The true function is non-
linear in the first variable, as in the lower panel in Figure 3.19, and does not
depend on the additional variables. The performance of linear regression deteri-
orates slowly in the presence of these additional noise variables, whereas KNN’s
performance degrades much more quickly as pincreases.
and3.19illustrate settings with p=1predictor. But in higher dimensions,
KNN often performs worse than linear regression.
Figure3.20considers the same strongly non-linear situation as in the
second row of Figure 3.19, except that we have added additional noise
predictors that are not associated with the response. When p=1orp=2,
KNN outperforms linear regression. But for p=3 the results are mixed,
and forp≥4linear regression is superior to KNN. In fact, the increase in
dimension has only caused a small deterioration in the linear regression test
set MSE, but it has caused more than a ten-fold increase in the MSE for KNN, and results from the fact that in higher dimensions
there is effectively a reduction in sample size. In this data set there are
50training observations; when p=1, this provides enough information to
accurately estimate f(X). However, spreading 50observations over p= 20
dimensions results in a phenomenon in which a given observation has no
nearby neighbors —this is the so-called curse of dimensionality . That is,curse of di-
mensionalitytheKobservations that are nearest to a given test observation x0may be
very far away from x0inp-dimensional space when pis large, leading to a
very poor prediction of f(x0)and hence a poor KNN fit. As a general rule,
parametric methods will tend to outperform non-parametric approaches
when there is a small number of observations per predictor.
Even when the dimension is small, we might prefer linear regression to
KNN from an interpretability standpoint. If the test MSE of KNN is only
slightly lower than that of linear regression, we might be willing to forego
a little bit of prediction accuracy for the sake of a simple model that can
be described in terms of just a few coefficients, and for which p-values are
available.116 3. Linear Regression3.6 Lab: Linear Regression3.6.1 Importing packagesWe import our standard libraries at this top level.In[1]:import numpy as npimport pandas as pdfrom matplotlib.pyplot import subplotsNew will import them here to emphasize these are the new code objects inthis lab. Keeping imports near the top of a notebook makes the code morereadable, since scanning the first few lines tells us what libraries are used.In[2]:import statsmodels.api as smWe will provide relevant details about the functions below as they areneeded.Besides importing whole modules, it is also possible to import only afew items from a given module. This will help keep thenamespaceclean.namespaceWe will use a few specific objects from thestatsmodelspackage which westatsmodelsimport here.In[3]:from statsmodels.stats.outliers_influence \import variance_inflation_factor as VIFfrom statsmodels.stats.anova import anova_lmAs one of the import statements above is quite a long line, we inserted aline break\to ease readability.We will also use some functions written for the labs in this book in theISLPpackage.In[4]:from ISLP import load_datafrom ISLP.models import (ModelSpec as MS,summarize,poly)Inspecting Objects and NamespacesThe functiondir()provides a list of objects in a Lab: Linear Regression 117'poly','quit','sm','summarize']This shows you everything thatPythoncan find at the top level. Thereare certain objects like__builtins__that contain references to built-infunctions likeprint().Every python object has its own notion of namespace, also accessiblewithdir(). This will include both the attributes of the object as well asany methods associated with it. For instance, we see'sum'in the listingfor an array.In[6]:A=n p . a r r a y ( [ 3 , 5 , 1 1 ] indicates that the objectA.sumexists. In this case it is a method thatcan be used to compute the sum of the arrayAas can be seen by typingA.sum?.In[7]:A.sum()Out[7]:193.6.2 Simple Linear RegressionIn this section we will construct model matrices (also called design matri-ces) using theModelSpec()transform fromISLP.models.We will use theBostonhousing data set, which is contained in theISLPpackage. TheBostondataset recordsmedv(median house value) for506neighborhoods around Boston. We will build a regression model to pre-dictmedvusing13predictors such asrmvar(average number of rooms perhouse),age(proportion of owner-occupied units built prior to 1940), andlstat(percent of households with low socioeconomic status). We will usestatsmodelsfor this task, aPythonpackage that implements several com-monly used regression = 3. Linear RegressionTypeBoston?to find out more about these data.We start by using thesm.OLS()function to fit a simple linear regressionsm.OLS()model. Our response will bemedvandlstatwill be the single predictor.For this model, we can create the model matrix by hand.In[9]:X=p d . D a t a F r a m e ( {'intercept':n p . o n e s ( B o s t o n . s h a p e [ 0 ] ) ,'lstat':B o s t o n ['lstat']})X[:4]Out[9]:intercept lstat01 . 0 4 . 9 811 . 0 9 . 1 421 . 0 4 . 0 331 . 0 2 . 9 4We extract the response, and fit the model.In[10]:y=B o s t o n ['medv']model = sm.OLS(y, X)results = model.fit()Note thatsm.OLS()does not fit the model; it specifies the model, and thenmodel.fit()does the actual fitting.OurISLPfunctionsummarize()produces a simple table of the parame-summarize()ter estimates, their standard errors, t-statistics and p-values. The functiontakes a single argument, such as the objectresultsreturned here by thefitmethod, and returns such a summary.In[11]:summarize(results)Out[11]:coef std err t P>|t|intercept 34.5538 0.563 61.415 0.0lstat -0.9500 0.039 -24.528 0.0Before we describe other methods for working with fitted models, weoutline a more useful and general framework for constructing a model ma-trixX.Using Transformations: Fit and TransformOur model above has a single predictor, and constructingXwas straight-forward. In practice we often fit models with more than one predictor,typically selected from an array or data frame. We may wish to introducetransformations to the variables before fitting the model, specify interac-tions between variables, and expand some particular variables into sets ofvariables (e.g. polynomials). Thesklearnpackage has a particular notionsklearnfor this type of task: atransform. A transform is an object that is createdwith some parameters as arguments. The object has two main provide a general approach for specifying models and constructingthe model matrix through the transformModelSpec()in the preamble) creates a transform object,and then a pair of methodstransform()andfit()are used to construct acorresponding model matrix.3.6 Lab: Linear Regression 119We first describe this process for our simple regression model using asingle predictorlstatin theBostondata frame, but will use it repeatedlyin more complex tasks in this and other labs in this book. In our case thetransform is created by the expressiondesign = MS(['lstat']).Thefit()method takes the original array and may do some initial com-putations on it, as specified in the transform object. For example, it maycompute means and standard deviations for centering and scaling. Thetransform()method applies the fitted transformation to the array of data,and produces the model matrix.In[12]:design = MS(['lstat'])design = design.fit(Boston)X=d e s i g n . t r a n s f o r m ( B o s t o n )X[:4]Out[12]:intercept lstat01 . 0 4 . 9 811 . 0 9 . 1 421 . 0 4 . 0 331 . 0 2 . 9 4In this simple case, thefit()method does very little; it simply checks thatthe variable'lstat'specified indesignexists inBoston. Thentransform()constructs the model matrix with two columns: aninterceptand the = MS(['lstat'])X=d e s i g n . f i t _ t r a n s f o r m ( B o s t o n )X[:4]Out[13]:intercept lstat01 . 0 4 . 9 811 . 0 9 . 1 421 . 0 4 . 0 331 . 0 2 . 9 4Note that, as in the previous code chunk when the two steps were doneseparately, thedesignobject is changed as a result of thefit()operation.The power of this pipeline will become clearer when we fit more complexmodels that involve interactions and that can be used for inference. We already presented a functionsummarize()for showing the essentials of the fit. For a full and somewhatexhaustive summary of the fit, we can use thesummary()method (outputnot shown).In[14]:results.summary()The fitted coefficients can also be retrieved as theparamsattribute ofresults.In[15]:results.params120 3. Linear RegressionOut[15]:intercept 34.553841lstat -0.950049dtype: float64Theget_prediction()method can be used to obtain predictions, and.get_prediction()produce confidence intervals and prediction intervals for the prediction ofmedvfor given values oflstat.We first create a new data frame, in this case containing only the vari-ablelstat, with the values for this variable at which we wish to makepredictions. We then use thetransform()method ofdesignto create thecorresponding model matrix.In[16]:new_df = pd.DataFrame({'lstat':[5, 10, 15]})newX = design.transform(new_df)newXOut[16]:intercept lstat01 . 0511 . 0 1 021 . 0 1 5Next we compute the predictions atnewX, and view them by = 25.05334734, 20.30310057])We can produce confidence intervals for the predicted 30.59977628],[24.47413202, 25.63256267],[19.73158815, 20.87461299]])Prediction intervals are computing by alpha=0.05)Out[19]:array([[17.56567478, 42.04151344],[12.82762635, 37.27906833],[8 . 0 7 7 7 4 2 1,3 2 . 5 2 8 4 5 9 0 5 ] ] )For instance, the 95% confidence interval associated with anlstatvalue of10 is (24.47, 25.63), and the 95% prediction interval is (12.82, 37.28). Asexpected, the confidence and prediction intervals are centered around thesame point (a predicted value of 25.05 formedvwhenlstatequals 10), butthe latter are substantially wider.Next we will and.plot.scatter()wish to add the regression line to the resulting plot.3.6 Lab: Linear Regression 121
Defining Functions
While there is a function within the ISLPpackage that adds a line to an
existing plot, we take this opportunity to define our first function to do so.def
In[20]: def abline(ax, b, m):
"Add a line with slope m and intercept b to ax"
xlim = ax.get_xlim()
ylim = [m * xlim[0] + b, m * xlim[1] + b]
ax.plot(xlim, ylim)
A few things are illustrated above. First we see the syntax for defining a
function: def funcname(...) . The function has arguments ax, b, m where
axis an axis object for an exisiting plot, bis the intercept and mis the slope
of the desired line. Other plotting options can be passed on to ax.plotby
including additional optional arguments as follows:
In[21]: def abline(ax, b, m, *args, **kwargs):
"Add a line with slope m and intercept b to ax"
xlim = ax.get_xlim()
ylim = [m * xlim[0] + b, m * xlim[1] + b]
ax.plot(xlim, ylim, *args, **kwargs)
The addition of *argsallows any number of non-named arguments to
abline, while *kwargs allows any number of named arguments (such as
linewidth=3 ) toabline. In our function, we pass these arguments verbatim
toax.plotabove. Readers interested in learning more about functions are
referred to the section on defining functions in docs.python.org/tutorial .
Let’s use our new function to add this regression line to a plot of medv
vs.lstat.
In[22]: ax = Boston.plot.scatter( 'lstat' ax.plot() isax.plot(xlim, ylim, 'r--', linewidth=3) .
We have used the argument 'r--'to produce a red dashed line, and added
an argument to make it of width 3. There is some evidence for non-linearity
in the relationship between lstatandmedv. We will explore this issue later
in this lab.
As mentioned above, there is an existing function to add a line to a plot
—ax.axline() — but knowing how to write such functions empowers us
to create more expressive displays.
Next we examine some diagnostic plots, several of which were discussed
in Section 3.3.3. We can find the fitted values and residuals of the fit as
attributes of the resultsobject. Various influence measures describing the
regression model are computed with the get_influence() method. As we.get_
influence() will not use the figcomponent returned as the first value from subplots() ,
we simply capture the second returned value in axbelow.
In[23]: ax = subplots(figsize=(8,8))[1]122 3. Linear Regressionax.scatter(results.fittedvalues, results.resid)ax.set_xlabel('Fitted value')ax.set_ylabel('Residual')ax.axhline(0, c='k',l s ='--');We add a horizontal line at 0 for reference using theax.axhline()method,.axhline()indicating it should be black (c='k') and have a dashed linestyle (ls='--').On the basis of the residual plot (not shown), there is some evidenceof non-linearity. Leverage statistics can be computed for any number ofpredictors using thehat_matrix_diagattribute of the value returned by theget_influence()method.In[24]:infl = results.get_influence()ax = identifies the index of the largest element of annp.argmax()array, optionally computed over an axis of the array. In this case, we maxi-mized over the entire array to determine which observation has the largestleverage statistic.3.6.3 Multiple Linear RegressionIn order to fit a multiple linear regression model using least squares, response. The arguments toModelSpec()can be quite general, but inthis case a list of column names suffice. We consider a fit here with the twovariableslstatandage.In[25]:X=M S ( ['lstat','age']).fit_transform(Boston)model1 = sm.OLS(y, X)results1 = model1.fit()summarize(results1)Out[25]:coef std err t P>|t|intercept 33.2228 0.731 45.458 0.000lstat -1.0321 0.048 -21.416 0.000age 0.0345 0.012 2.826 0.005Notice how we have compacted the first line into a succinct expressiondescribing the construction have to type all of these in order to perform a regression using all of thepredictors. Instead, we can use the following short-hand:.columns.drop()In[26]:terms = Boston.columns.drop('medv')terms3.6 Lab: Linear Regression 123
Out[26]: Index([ 'crim','zn','indus' ,'lstat' ],
dtype='object' )
We can now fit the model with all the variables in termsusing the same
model matrix builder.
In[27]: X=M S ( t e r m s ) . f i t _ t r a n s f o r m ( B o s t o n )
model = sm.OLS(y, X)
results = model.fit()
summarize(results)
Out[27]: coef std err t P>|t|
intercept 41.6173 4.936 8.431 0.000
crim -0.1214 0.033 -3.678 0.000
zn 0.0470 0.014 3.384 0.001
indus 0.0135 0.062 0.217 0.829
chas 2.8400 0.870 3.264 0.001
nox -18.7580 3.851 -4.870 0.000
rm 3.6581 0.420 8.705 0.000
age 0.0036 0.013 0.271 0.787
dis -1.4908 0.202 -7.394 0.000
rad 0.2894 0.067 4.325 0.000
tax -0.0127 0.004 -3.337 0.001
ptratio -0.9375 0.132 -7.091 0.000
lstat -0.5520 0.051 -10.897 For example, in the above regression output, agehas a high p-value.
So we may wish to run a regression excluding this predictor. The following
syntax results in a regression using all predictors except age(output not
shown).
In[28]: minus_age = Boston.columns.drop([ 'medv','age'])
Xma = MS(minus_age).fit_transform(Boston)
model1 = sm.OLS(y, Xma)
summarize(model1.fit())
3.6.4 Multivariate Goodness of Fit
Wecanaccesstheindividualcomponentsof resultsbyname( dir(results)
shows us what is available). Hence results.rsquared gives us the R2, and
np.sqrt(results.scale) gives us the RSE.
Variance inflation factors (section 3.3.3) are sometimes useful to assess
the effect of collinearity in the model matrix of a regression model. We will
compute the VIFs in our multiple regression fit, and use the opportunity
to introduce the idea of list comprehension .list compre-
hension
List Comprehension
Often we encounter a sequence of objects which we would like to transform
for some other task. Below, we compute the VIF for each feature in our X
matrix and produce a data frame whose index agrees with the columns of
X. The notion of list comprehension can often make such a task easier.124 3. Linear RegressionList comprehensions are simple and powerful ways to form lists ofPythonobjects. The language also supports dictionary andgeneratorcomprehen-sion, though these are beyond our scope here. Let’s look at an example.We compute the VIF for each of the variables in the model matrixX, usingthe = [VIF(X, i)for i in range(1, X.shape[1])]vif = 1.767zn 2.298indus 3.987chas 1.071nox 4.369rm 1.913age 3.088dis 3.954rad 7.445tax 9.002ptratio 1.797lstat 2.871The functionVIF()takes two arguments: a dataframe or array, and a We have excluded column 0 above (the intercept), which is not of in-terest. In this case the VIFs are not that exciting.The objectvalsabove could have been constructed with the followingfor loop:In[30]:vals = []for i in range(1, X.values.shape[1]):vals.append(VIF(X.values, i))List comprehension allows us to perform such repetitive operations in amore straightforward way.3.6.5 Interaction TermsIt is easy to include interaction terms in a linear model usingModelSpec().Including a tuple("lstat","age")tells the model matrix builder to includean interaction term betweenlstatandage.In[31]:X=M S ( = sm.OLS(y, X)summarize(model2.fit())Out[31]:coef std err t P>|t|intercept 36.0885 1.470 24.553 0.000lstat -1.3921 0.167 -8.313 0.0003.6 Lab: Linear Regression 125
age -0.0007 0.020 -0.036 0.971
lstat:age 0.0042 0.002 2.244 0.025
3.6.6 Non-linear Transformations of the For instance, the poly()function supplied in ISLPspecifiespoly()that columns representing polynomial functions of its first argument are
added to the model matrix.
In[32]: X=M S ( [ p o l y ( 'lstat' ,d e g r e e = 2 ) , 'age']).fit_transform(Boston)
model3 = sm.OLS(y, X)
results3 = model3.fit()
summarize(results3)
Out[32]: coef std err t P>|t|
intercept 17.7151 0.781 22.681 0.000
poly(lstat, degree=2)[0] -179.2279 6.733 -26.620 0.000
poly(lstat, degree=2)[1] 72.9908 5.482 13.315 0.000
age 0.0703 0.011 6.471 0.000
The effectively zero p-value associated with the quadratic term (i.e. the
third row above) suggests that it leads to an improved model.
By default, poly()creates a basis matrix for inclusion in the model ma-
trix whose columns are orthogonal polynomials , which are designed for sta-orthogonal
polynomialble least squares computations.13Alternatively, had we included an argu-
mentraw=True in the above call to poly(), the basis matrix would consist
simplyof lstatandlstat**2 the fitted values would not change in this case, just the poly-
nomial coefficients. Also by default, the columns created by poly()do not
include an intercept column as that is automatically added by MS().
We use the anova_lm() function to further quantify the extent to whichanova_lm()the quadratic fit is superior to the linear fit.
In[33]: anova_lm(results1, results3)
Out[33]: df_resid ssr df_diff ss_diff F Pr(>F)
05 0 3 . 0 1 9 1 6 8 . 1 3 0 . 0 N a N N a NN a N
15 0 2 . 0 1 4 1 6 5 . 6 1 1 . 0 5 0 0 2 . 5 2 1 7 7 . 2 8 7 . 4 7 e - 3 5
Hereresults1 represents the linear submodel containing predictors lstat
andage, while results3 corresponds to the larger model above with a
quadratic term in lstat. Theanova_lm() function performs a hypothesis
test comparing the two models. The null hypothesis is that the quadratic
term in the bigger model is not needed, and the alternative hypothesis is
that the bigger model is superior. Here the F-statistic is 177.28 and the
associated p-value is zero. In this case the F-statistic is the square of the
t-statistic for the quadratic term in the linear model summary for poly() is a wrapper for the workhorse and standalone function Poly()
that does the work in building the model matrix.126 3. Linear Regressionfreedom. This provides very clear evidence that the quadratic polynomialinlstatimproves the linear model. This is not surprising, since earlier wesaw evidence for non-linearity in the relationship betweenmedvandlstat.The functionanova_lm()can take more than two nested models as their areNaNs in the first row above, since there is no previous modelwith which to compare the first.In[34]:ax = results3.resid)ax.set_xlabel('Fitted value')ax.set_ylabel('Residual')ax.axhline(0, c='k',l s ='--')We see that when the quadratic term is included in the model, there islittle discernible pattern in the residuals. In order to create a cubic orhigher-degree polynomial fit, we can simply change the degree argument topoly().3.6.7 Qualitative PredictorsHere we use theCarseatsdata, which is included in theISLPpackage. Wewill attempt to predictSales(child car seat sales) in 400 locations basedon a number of predictors.In[35]:Carseats = includes qualitative predictors such asShelveLoc, anindicator of the quality of the shelving location — that is, the space withina store in which the car seat is displayed. The predictorShelveLoctakes onthree possible values,Bad,Medium, andGood. Given a qualitative variablesuch asShelveLoc,ModelSpec()generates dummy variables Their columns sum to one, so to avoid collinearity with an inter-cept, the first column is dropped. Below we see the columnShelveLoc[Bad]has been dropped, sinceBadis the first level ofShelveLoc. Below we fit amultiple regression model that includes some interaction terms.In[36]:allvars = list(Carseats.columns.drop('Sales'))y=C a r s e a t s ['Sales']final = allvars + [('Income','Advertising'),('Price','Age')]X=M S ( f i n a l ) . f i t _ t r a n s f o r m ( C a r s e a t s )model = sm.OLS(y, X)summarize(model.fit())Out[36]:coef std err t P>|t|intercept 6.5756 1.009 6.519 0.0003.7 Exercises 127
CompPrice 0.0929 0.004 22.567 0.000
Income 0.0109 0.003 4.183 0.000
Advertising 0.0702 0.023 3.107 0.002
Population 0.0002 0.000 0.433 0.665
Price -0.1008 0.007 -13.549 0.000
ShelveLoc[Good] 4.8487 0.153 31.724 0.000
ShelveLoc[Medium] 1.9533 0.126 15.531 0.000
Age -0.0579 0.016 -3.633 0.000
Education -0.0209 0.020 -1.063 0.288
Urban[Yes] 0.1402 0.112 1.247 0.213
US[Yes] -0.1576 0.149 -1.058 0.291
Income:Advertising 0.0008 0.000 2.698 0.007
Price:Age 0.0001 0.000 0.801 0.424
In the first line above, we made allvarsa list, so that we could add the
interaction terms two lines down. Our model-matrix builder has created a
ShelveLoc[Good] dummy variable that takes on a value of 1 if the shelving
location is good, and 0 otherwise. It has also created a ShelveLoc[Medium]
dummy variable that equals 1 if the shelving location is medium, and 0 oth-
erwise. A bad shelving location corresponds to a zero for each of the two
dummy variables. The fact that the coefficient for ShelveLoc[Good] in the
regression output is positive indicates that a good shelving location is asso-
ciated with high sales (relative to a bad location). And ShelveLoc[Medium]
has a smaller positive coefficient, indicating that a medium shelving loca-
tion leads to higher sales than a bad shelving location, but lower sales than
a good shelving location.
3.7 Exercises
Conceptual
1. Describe the null hypotheses to which the p-values given in Table 3.4
correspond. Explain what conclusions you can draw based on these
p-values. Your explanation should be phrased in terms of sales,TV,
radio, andnewspaper , rather than in terms of the coefficients of the
linear model.
2. methods.
3. Suppose we have a data set with five predictors, X1=GPA,X2=
IQ,X3=Level (1for College and 0for High School), X4=Interac-
tion between GPA and IQ, and X5=Interaction between GPA and
Level. The response is starting salary after graduation (in thousands
of dollars). Suppose we use least squares to fit the model, and get
ˆβ0= 50 ,ˆβ1= 20 ,ˆβ2=0.07,ˆβ3= 35 ,ˆβ4=0.01,ˆβ5=−10.
(a) Which answer is correct, and why?
i. For a fixed value of IQ and GPA, high school graduates earn
more, on average, than college graduates.
ii. For a fixed value of IQ and GPA, college graduates earn
more, on average, than high school graduates.128 3. Linear Regressioniii. For a fixed value of IQ and GPA, high school graduates earnmore, on average, than college graduates provided that theGPA is high enough.iv. For a fixed value of IQ and GPA, college graduates earnmore, on average, than high school graduates provided thatthe GPA is high enough.(b) Predict the salary of a college graduate with IQ of110and aGPA of4.0.(c) True or false: Since the coefficient for the GPA/IQ interactionterm is very small, there is very little evidence of an interactioneffect. Justify your answer.4. I collect a set of data (n= 100observations) containing a singlepredictor and a quantitative response. I then fit a linear regressionmodel to the data, as well as a separate cubic regression, i.e.Y=β0+β1X+β2X2+β3X3+/epsilon1.(a) Suppose that the true relationship between X and Y is linear,i.e.Y=β0+β1X+/epsilon1. Consider the training residual sum ofsquares (RSS) for the linear regression, and also the trainingRSS for the cubic regression. Would we expect one to be lowerthan the other, would we expect them to be the same, or is therenot enough information to tell? Justify your answer.(b) Answer (a) using test rather than training RSS.(c) for the linear regression, and also the training RSS for thecubic regression. Would we expect one to be lower than theother, would we expect them to be the same, or is there notenough information to tell? Justify your answer.(d) Answer (c) using test rather than training RSS.5. Consider the fitted values that result from performing linear regres-sion without an intercept. In this setting, theith fitted value takesthe that we can isai/prime?Note: We interpret this result by saying that the fitted values fromlinear regression arelinear combinationsof the response values.3.7 Exercises 129
6. Using ( 3.4), argue that in the case of simple linear regression, the
least squares line always passes through the point (¯x,¯y).
7. It is claimed in the text that in the case of simple linear regression
ofYontoX, theR2statistic ( 3.17) is equal to the square of the
correlation between XandY(3.18). Prove that this is the case. For
simplicity, you may assume that ¯x=¯y=0.
Applied
8. This question involves the use of simple linear regression on the Auto
data set.
(a) Use the sm.OLS() function to perform a simple linear regression
withmpgas the response and horsepower as the predictor. Use
thesummarize() function to print the results. Comment on the
output. For example:
i. Is there a relationship between the predictor and the re-
sponse?
ii. How strong is the relationship between the predictor and
the response?
iii. Is the relationship between the predictor and the response
positive or negative?
iv. What is the predicted mpgassociated with a horsepower of
98? What are the associated 95% confidence and prediction
intervals?
(b) Plot the response and the predictor in a new set of axes ax. Use
theax.axline() method or the abline() function defined in the
lab to display the least squares regression line.
(c) Produce some of diagnostic plots of the least squares regression
fit as described in the lab. Comment on any problems you see
with the fit.
9. This question involves the use of multiple linear regression on the
Autodata set.
(a) Produce a scatterplot matrix which includes all of the variables
in the data set.
(b) Compute the matrix of correlations between the variables using
theDataFrame.corr() method..corr()
(c) Usethe sm.OLS() the response and all other variables except nameas
the predictors. Use the summarize() function to print the results.
Comment on the output. For instance:
i. Is there a relationship between the predictors and the re-
sponse? Use the anova_lm() function from statsmodels to
answer this question.130 3. Linear Regressionii. Which predictors appear to have a statistically significantrelationship to the response?iii. What does the coefficient for theyearvariable suggest?(d) Produce some of diagnostic plots of the linear regression fit asdescribed in the lab. Comment on any problems you see with thefit. Do the residual plots suggest any unusually large outliers?Does the leverage plot identify any observations with unusuallyhigh leverage?(e) Fit some models with interactions as described in the lab. Doany interactions appear to be statistically significant?(f) Try a few different transformations of the variables, such aslog(X),√X,X2. Comment on your findings.10. This question should be answered using theCarseatsdata set.(a) Fit a multiple regression model to predictSalesusingPrice,Urban, andUS.(b) Provide an interpretation of each coefficient in the model. Becareful—some of the variables in the model are qualitative!(c) Write out the model in equation form, being careful to handlethe qualitative variables properly.(d) For which of the predictors can you reject the null hypothesisH0:βj=0?(e) On the basis of your response to the previous question, fit asmaller model that only uses the predictors for which there isevidence of association with the outcome.(f) How well do the models in (a) and (e) fit the data?(g) Using the model from (e), obtain 95% confidence intervals forthe coefficient(s).(h) Is there evidence of outliers or high leverage observations in themodel from (e)?11. In this problem we will investigate thet-statistic for the null hypoth-esisH0:β=0in simple linear regression without an intercept. Tobegin, we generate a predictorxand a responseyas follows.rng = np.random.default_rng(1)x=r n g . n o r m a l ( s i z e = 1 0 0 )y=2*x+r n g . n o r m a l ( s i z e = 1 0 0 )(a) Perform a simple linear regression ofyontox,withoutan in-tercept. Report the coefficient estimateˆβ, the standard error ofthis coefficient estimate, and thet-statistic andp-value associ-ated with the null hypothesisH0:β=0. Comment on theseresults. (You can perform regression without an intercept usingthe keywords argumentintercept=FalsetoModelSpec().)3.7 Exercises 131
(b) Now perform a simple linear regression of xontoywithout an
intercept, and report the coefficient estimate, its standard error,
and the corresponding t-statistic and p-values associated with
the null hypothesis H0:β=0. Comment on these results.
(c) What is the relationship between the results obtained in (a) and
(b)?
(d) For the regression of YontoXwithout an intercept, the t-
statistic for H0:β=0 takes the form ˆβ/SE(ˆβ), where ˆβis
given by ( 3.38), and formulas are slightly different from those given in Sec-
tions3.1.1and3.1.2, since here we are performing regression
without an intercept.) Show algebraically, and confirm numeri-
cally in R, that the t-statistic can be written Using the results from (d), argue that the t-statistic for the re-
gressionof yontoxisthesameasthe t-statisticfortheregression
ofxontoy.
(f) InR, show that when regression is performed withan intercept,
thet-statistic for H0:β1=0is the same for the regression of y
ontoxas it is for the regression of xontoy.
12. This problem involves simple linear regression without an intercept.
(a) Recall that the coefficient estimate ˆβfor the linear regression of
YontoXwithout an intercept is given by ( 3.38). Under what
circumstance is the coefficient estimate for the regression of X
ontoYthe same as the coefficient estimate for the regression of
YontoX?
(b) Generate an example in Pythonwithn= 100 observations in
which the coefficient estimate for the regression of XontoY
isdifferent from the coefficient estimate for the regression of Y
ontoX.
(c) Generate an example in Pythonwithn= 100 observations in
which the coefficient estimate for the regression of XontoYis
the same as the coefficient estimate for the regression of Yonto
X.
13. In this exercise you will create some simulated data and will fit simple
linear regression models to it. Make sure to use the default random
number generator with seed set to 1 prior to starting part (a) to
ensure consistent results.132 3. Linear Regression
(a) Using the normal() method of your random number generator,
create a vector, x, containing 100 observations drawn from a
N(0,1)distribution. This represents a feature, X.
(b) Using the normal() method, create a vector, eps, containing 100
observations drawn from a N(0,0.25)distribution—a normal
distribution with mean zero and variance 0.25.
(c) Using xandeps, generate a vector yaccording to the model
Y=−1+0 .5X+/epsilon1. (3.39)
What is the length of the vector y? What are the values of β0
andβ1in this linear model?
(d) Create a scatterplot displaying the relationship between xand
y. Comment on what you observe.
(e) Fit a least squares linear model to predict yusingx. Comment
on the model obtained. How do ˆβ0andˆβ1compare to β0and
β1?
(f) Display the least squares line on the scatterplot obtained in (d).
Draw the population regression line on the plot, in a different
color. Use the legend() method of the axes to create an appro-
priate legend.
(g) Now fit a polynomial regression model that predicts yusingx
andx2. Is there evidence that the quadratic term improves the
model fit? Explain your answer.
(h) Repeat (a)–(f) after modifying the data generation process in
such a way that there is lessnoise in the data. The model ( 3.39)
should remain the same. You can do this by decreasing the vari-
ance of the normal distribution used to generate the error term
/epsilon1in (b). Describe your results.
(i) Repeat (a)–(f) after modifying the data generation process in
such a way that there is morenoise in the data. The model
(3.39) should remain the same. You can do this by increasing
the variance of the normal distribution used to generate the
error term /epsilon1in (b). Describe your results.
(j) What are the confidence intervals for β0andβ1based on the
original data set, the noisier data set, and the less noisy data
set? Comment on your results.
14. This problem focuses on the collinearity problem.
(a) Perform the following commands in Python:
rng = np.random.default_rng(10)
x1 = rng.uniform(0, 1, size=100)
x2 = 0.5 * x1 + rng.normal(size=100) / 10
y=2+2*x 1+0 . 3*x 2+r n g . n o r m a l ( s i z e = 1 0 0 )
The last line corresponds to creating a linear model in which yis
a function of x1andx2. Write out the form of the linear model.
What are the regression coefficients?3.7 Exercises 133(b) What is the correlation betweenx1andx2? Create a scatterplotdisplaying the relationship between the variables.(c) Using this data, fit a least squares regression to predictyusingx1andx2. Describe the results obtained. What areˆβ0,ˆβ1, andˆβ2? How do these relate to the trueβ0,β1, andβ2? Can youreject the null hypothesisH0:β1=0? How about the nullhypothesisH0:β2=0?(d) Now fit a least squares regression to predictyusing onlyx1.Comment on your results. Can you reject the null hypothesisH0:β1=0?(e) Now fit a least squares regression to predictyusing onlyx2.Comment on your results. Can you reject the null hypothesisH0:β1=0?(f) answer.(g) Suppose we obtain one additional observation, which was unfor-tunately mismeasured. We use the this additional observation to each ofx1,x2andy.x1 = np.concatenate([x1, [0.1]])x2 = np.concatenate([x2, [0.8]])y=n p . c o n c a t e n a t e ( [ y ,[ 6 ] ] does this new observation have on the each of the models?In each model, is this observation an outlier? A high-leveragepoint? Both? Explain your answers.15. This problem involves theBostondata set, which we saw in the labfor this chapter. We will now try to predict per capita crime rateusing the other variables in this data set. In other words, per capitacrime rate is the response, and the other variables are the predictors.(a) For each predictor, fit a simple linear regression model to predictthe response. Describe your results. In which of the models isthere a statistically significant association between the predictorand the response? Create some plots to back up your assertions.(b) Fit a multiple regression model to predict the response usingall of the predictors. Describe your results. For which predictorscan we reject the null hypothesisH0:βj=0?(c) How do your results from (a) compare to your results from (b)?Create a plot displaying the univariate regression coefficientsfrom (a) on thex-axis, and the multiple regression coefficientsfrom (b) on they-axis. That is, each predictor is displayed as asingle point in the plot. Its coefficient in a simple linear regres-sion model is shown on thex-axis, and its coefficient estimatein the multiple linear regression model is shown on they-axis.134 3. Linear Regression(d) Is there evidence of non-linear association between any of thepredictors and the response? To answer this question, for eachpredictorX, fit a model of the linear regression model discussed in Chapter 3assumes that the re-
sponse variable Yis quantitative. But in many situations, the response
variable is instead qualitative . For example, eye color is qualitative. Of-qualitativeten qualitative variables are referred to as categorical ; we will use these
terms interchangeably. In this chapter, we study approaches for predicting
qualitative responses, a process that is known as classification . Predictingclassificationa qualitative response for an observation can be referred to as classifying
that observation, since it involves assigning the observation to a category,
or class. On the other hand, often the methods used for classification first
predict the probability that the observation belongs to each of the cate-
gories of a qualitative variable, as the basis for making the classification.
In this sense they also behave like regression methods.
There are many possible classification techniques, or classifiers , that oneclassifiermight use to predict a qualitative response. We touched on some of these
in Sections 2.1.5and2.2.3. In this chapter we discuss some widely-used
classifiers: logistic regression ,linear discriminant analysis ,quadratic analysis ,naive Bayes , andK-nearest neighbors . The Bayes
K-nearest
neighborsof logistic regression is used as a jumping-off point for a discussion of gen-
eralized linear models , and in particular, Poisson regression . We computer-intensive classification methods in later chapters: these in-
clude generalized additive models (Chapter 7); trees, random forests, and
boosting (Chapter 8); and support vector machines (Chapter 9).
4.1 An Overview of Classification
Classification problems occur often, perhaps even more so than regression
problems. Some examples include:
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_4  135136 4. Classification
1. A person arrives at the emergency room with a set of symptoms
that could possibly be attributed to one of three medical conditions.
Which of the three conditions does the individual have?
2. An online banking service must be able to determine whether or not
a transaction being performed on the site is fraudulent, on the basis
of the user’s IP address, past transaction history, and so forth.
3. On the basis of DNA sequence data for a number of patients with
and without a given disease, a biologist would like to figure out which
DNA mutations are deleterious (disease-causing) and which are not.
Just as in the regression setting, in the classification setting we have a
set of training observations (x1,y1),...,(xn,yn)that we can use to build
a classifier. We want our classifier to perform well not only on the training
data, but also on test observations that were not used to train the classifier.
In this chapter, we will illustrate the concept of classification using the
simulated Default data set. We are interested in predicting whether an
individual will default on his or her credit card payment, on the basis of
annual income and monthly credit card balance. The data set is displayed
in Figure 4.1. In the left-hand panel of Figure 4.1, we have plotted annual
incomeand monthly credit card balancefor a subset of 10,000individuals.
The individuals who defaulted in a given month are shown in orange, and
those who did not in blue. (The overall default rate is about 3%, so we
have plotted only a fraction of the individuals who did not default.) It
appears that individuals who defaulted tended to have higher credit card
balances than those who did not. In the center and right-hand panels of
Figure4.1, two pairs of boxplots are shown. The first shows the distribution
ofbalancesplit by the binary defaultvariable; the second is a similar default
(Y) for any given value of balance(X1) andincome(X2). SinceYis not
quantitative, the simple linear regression model of Chapter 3is not a good
choice: we will elaborate on this further in Section 4.2.
It is worth noting that Figure 4.1displays a very pronounced relation-
ship between the predictor balanceand the response default. In most real
applications, the relationship between the predictor and the response will
not be nearly so strong. However, for the sake of illustrating the classifica-
tion procedures discussed in this chapter, we use an example in which the
relationship between the predictor and the response is somewhat exagger-
ated.
4.2 Why Not Linear Regression?
We have stated that linear regression is not appropriate in the case of a
qualitative response. Why not?
Suppose that we are trying to predict the medical condition of a patient
in the emergency room on the basis of her symptoms. In this simplified
example, there are three possible diagnoses: stroke,drug overdose , and4.2 Why Not Linear Regression? 137
0 500 1000 1500 2000 25000 20000 40000 60000BalanceIncome
No Yes0 500 1000 1500 2000 2500DefaultBalance
No Yes020000 40000 60000DefaultIncome
FIGURE 4.1.TheDefaultdata set.Left:The annual incomes and monthlycredit card balances of a number of individuals. The individuals who defaulted ontheir credit card payments are shown in orange, and those who did not are shownin blue.Center:Boxplots ofbalanceas a function ofdefaultstatus.Right:Boxplots ofincomeas a function ofdefaultstatus.epileptic seizure. We could consider encoding these values as a quantita-tive response variable,Y, as follows:Y=1ifstroke;2ifdrug overdose;3ifepileptic predictYon the basis of a set of predictorsX1,...,Xp. Unfortunately,this coding implies an ordering on the outcomes, puttingdrug overdoseinbetweenstrokeandepileptic seizure, and insisting that the differencebetweenstrokeanddrug overdoseis the same as the difference betweendrug overdoseandepileptic seizure. In practice there is no particularreason that this needs to be the case. For instance, one could choose anequally reasonable coding,Y=1ifepileptic seizure;2ifstroke;3ifdrug overdose,which would imply a totally different relationship among the three condi-tions. Each of these codings would produce fundamentally different linearmodels that would ultimately lead to different sets of predictions on testobservations.If the response variable’s values did take on a natural ordering, such asmild,moderate, andsevere, and we felt the gap between mild and moderatewas similar to the gap between moderate and severe, then a 1, 2, 3 codingwould be reasonable. Unfortunately, in general there is no natural way to138 4. Classification
convert a qualitative response variable with more than two levels into a
quantitative response that is ready for linear regression.
For abinary(two level) qualitative response, the situation is better. Forbinaryinstance, perhaps there are only two possibilities for the patient’s medical
condition: strokeanddrug overdose . We could then potentially use the
dummyvariable approachfromSection overdose .
We could then fit a linear regression to this binary response, and predict
drug overdose ifˆY>0.5andstrokeotherwise. In the binary case it is not
hard to show that even if we flip the above coding, linear regression will
produce the same final predictions.
For a binary response with a 0/1 coding as above, regression by least
squares is not completely unreasonable: it can be shown that the Xˆβob-
tained using linear regression is in fact an estimate of Pr(drug overdose |X)
in this special case. However, if we use linear regression, some of our es-
timates might be outside the [0,1]interval (see Figure 4.2), making them
hard to interpret as probabilities! Nevertheless, the predictions provide an
ordering and can be interpreted as crude probability estimates. Curiously,
it turns out that the classifications that we get if we use linear regression
to predict a binary response will be the same as for the linear discriminant
analysis (LDA) procedure we discuss in Section 4.4.
To summarize, there are at least two reasons not to perform classifica-
tion using a regression method: (a) a regression method cannot accommo-
date a qualitative response with more than two classes; (b) a regression
method will not provide meaningful estimates of Pr(Y|X), even with just
two classes. Thus, it is preferable to use a classification method that is
truly suited for qualitative response values. In the next section, we present
logistic regression, which is well-suited for the case of a binary qualita-
tive response; in later sections we will cover classification methods that are
appropriate when the qualitative response has two or more classes.
4.3 Logistic Regression
Consider again the Defaultdata set, where the response defaultfalls into
one of two categories, YesorNo. Rather than modeling this response Y
directly, logistic regression models the probability thatYbelongs to a par-
ticular example, the probability of default given balancecan be written as
Pr(default=Yes|balance).
Thevaluesof Pr(default=Yes|balance),whichweabbreviate balance,aprediction
can be made for default. For example, one might predict default =Yes4.3 Logistic Regression 139
0 500 1000 1500 2000 25000.0 0.2 0.4 0.6 0.8 1.0BalanceProbability of Default|| |||| | |||||||||||||||||| | |||||| |||||||| | |||||||||||||||| | ||| ||||||||| |||||| | |||||| | | ||||||| |||||||||||||||| | |||||||||||||||||||||||| ||||
|||||| ||||| |||| ||||||||||||||||||| | ||||| ||||||||||
||||||| | | | |||||||||||||||||||| ||||||||| | | | |||||||||||| | | |||||||||||||||||||| ||
||||
|| ||
||||||||
||||||||||||||||| ||||||||||||||||||||||||||||||||
|| ||||||||||| | | |||||||||||||||||||
|||||||||||| ||||||||||||||||| | |||||||||||||||||
||||||||||||||||||||| ||||||||||| ||||||||||||||||| | | ||
|||||
|||||| ||||| ||| || |||| | ||||||||||||||||||||| ||
||||||||||
|| | |||||||| | | |||||||| | ||||||||||||||||||||||||| | | | | | ||||||||||
||||||||||||||||| ||||||||||
|||||| ||| ||||||||| |||
|| | ||| ||||||||| |||||||||||||| ||| ||||||||||
||||| |||||||||||| ||||| ||||||||
||||||||| |||||||||| ||||||||||||| ||
||||| |||| | ||||||||||||||||| ||| | | ||||||||||||||||
||| ||||
|| ||||||||||||| |||
|||||||||||||||||||
||| ||
||||||||||| | ||||||||
|| ||||||||| | | | ||||||||||| ||||||||||||||||
|||||||
|||||||||| |||||||
||||||| |||||||||||||||| ||| | | |||| |||||||| |||||| |||
||||||
|| ||| | ||||||||||| ||||||||| ||||||||||||||
|| |||||||||| ||||||| | ||||||||||||||||| ||||||||||||||||||||||||||| | |||||||||||||| | ||||||||||| | ||||| ||| ||||
||
||||||| | ||||||||||||||||| |||||||||
||||||||| |||||| |||||||||||||||||| |||||||||||||| | ||
||
|||||||| | | | | | | | | |||||||||||||||| |||||
|||
|||||||||
||||||
|||||||||||||| | |||||| | |||||| |||| ||||||||| | | |||
|||||||||||||||||||| | ||||||| ||||||||||||||
||| | | ||| |||| ||||| |||||||||| ||||||||||
|||||||
||||| |||||| | |||| ||||||||||| |||||||| | | |||||||||
||||
|||||||| ||||
|||| |||||||||| | |||
|||||| | |||||||
|| | ||||||| ||| | | |||||
|||||||| | |||| ||||| | |||| |||||||||||||||| | |||
||
|| ||||||| ||||||||||||||||||||||||||||||||| ||||||||| |||||| ||||
||||| |||
||||||||||||||||| ||||||
||||||||||||||||
||||||| | | |||||||||||||
|||||||| |||||||| | | |||| | |||||||| ||
|| |||| ||||||||
|| ||| ||
|||| ||||| ||||||||||||
||||
|||| | |||||||
|||||||||||||||||||||||
|||||||| |||||| |||| |||||||||| ||||| ||| | | |||||
|| ||| ||||||||||||| | | | | | |||| |||||||||||||
||| ||||||||| | ||||
||||||||||||||
|||| |||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||||||||| ||||||||||||||||||||||
||||||||||||
|| ||||| | |||| | |||| ||||||||||||||||||||||||||| |||||||||||||||||||||||||| ||||||||
||||| |||||||
|| ||||||||||||||| | | | ||||||||||||||| |||||||||||||||||||
||||||||||||||||||||| |||||||||||||||||||| ||||||||
|||||||||||||||| | ||||||||||||||| | ||||||||
||| ||| |||||||||||||||||||||||||||||| | |||||| |||| |||| | ||| |||
|||||||||||| |||||||| ||||||||||||
||||| | | | ||||||||
|||||||||||||||||||||||||| |||||||||||||||||||||||| |||| | | | |||||||||| | |||||||||| |||||||||||
|| |||||||||||||||||||||||||||||| | | ||||||
|||| ||||||||||||||||||||||||||||||||| ||||||| ||||| |||||||||| |||| | | | ||||||||||||||||||||||| | | ||||||||||||||||||||
||||| | | | |||||
|||||| ||||||||||| ||||||||||||||||| | ||||||| | |||||||
|||||| | |||||||
||||||
|||||| | |||||| | ||||||||| ||| | | | ||||
|||| ||
|||||||||||||||||||
|| |||| ||
|||| |||| ||||||||||| | ||
|||| ||||| |||||||||||| | |||||
||||||| |||
||||||||||||||| | |||||| | ||||| | ||||||||||||||||||||||||||||| |||| ||||||
|||
||||||
||||||
|||||||||||||||| | ||||||||| ||||||||||||||||||||
||||||||||||||||||||| ||||||||||||||||||||||||||||
|| ||
||||| |||||||||||||||||||| ||||| | ||||||||||| |||||||||||| ||||||||||||||||||
|||||| | |||||| | | |||||||||| |||||| ||||
||||||||| ||| |||
|||||||||||| | ||||||| | ||||||||
|||||||| | |||||||||||||||| ||||| ||||||||||||||||| | | ||||||||||||||||||| | | |||
||||
|||| || ||||||||||||||||||||||||| ||||||||| | |||||||| |||||||||||||||||
|||| |||||||| | |||||||||||||||||||||||||||||||||| |||| ||||||||| |||||||||||
||||||||||||||||||||||||||
||||| ||| | |||||||| |||||||||||||||
||| ||| ||
|| ||||||||||||| ||||| ||||||||||||||||
||||||||||||
|| |||||||||||||||||||||||||||||||||| || |||||||| ||||||||||||||||||||| |||||||||||||
|||||||| | ||
|||| | ||||||||
||||
||
||||||||||||||||||| |||||||||||||
|||||||||||||||||||||||||||||| | ||
||||||||||| |||
|||||||
||||| ||||||||||||| |||| |||||||||||| | |||||||||| | |||||| ||||||||||||| ||| | | |||||||
||||||||||||| ||| | |||||||||||||||||||||||||| |||||||||||||| | |||||
|||||| | ||||||| ||||||| ||||||||||||||||
|||||||||
|||||| ||| | |||
||||| |||||||||||||||||||||||| ||||
||||||||| |||||
|||||||||||||||| ||| | ||||| |||||||
||||
|||||||||||||||||||| |||||||| | | ||||||||||| | |||||||||||||
||||||||||||| |||||||||
||||
|| |||||||||||||||||| |||||||||||| ||| ||||||||||||||||| |||||||||||| || |||| |||| ||||| ||||||||
||
||||||||||||||
||||||||||||
|| |||||||||| |||||
|| |||||||||||||||||||||||||| | |||||||||| |||||| | ||
|||||||||||||||| | | | |||||||||||||||||||||| ||||||||||| ||||||||||||||||| | |||||||||||||| |||| | |||| | | ||||||||||||| ||||||
|||| | | | ||||
||||
||| |||||||||
||| | | |||| |||
|||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||||||| ||||
|||||| ||||| | ||||||||||| | ||||
|||||||||||||| ||||||
||||| ||| ||||||||||||| |||||||||||||||||| |||||||||||||||||||||||||||||| | ||||||
|||||||| |||||||| | | | | ||||||||| |||||||||||||||||||||||||| | | | |||||||| |||
|| |||| |||| ||||| |||| | ||||| ||||||||||| |||| ||
|| |||||||||||| ||||||| | ||||||||||| ||||||||||| ||||| ||||||
||||| | |||||| | | | |||| | | | | | | |||||||||| | | ||| | | | ||||||||||||||| ||||| ||| ||
|| | ||| ||| ||||||| |||||||||||||||||||||||||||||||||||||| | ||||| | | ||||||| | ||||||||
||||||| ||| |||
|||||||||
||||||||||||||||||||| ||||||||| | ||| ||||||| | ||||| | |||| ||| ||| ||||||||||| | |||||||||| |||||||||||||||| ||||||||||||
|| ||| |||||||||||||||||||||||||||||||||
||||||| |||||||||||||||| |||| ||||||||||
|||||||||||||||||||||||| |||||||||
||||||||||||| |||||||||| ||||| ||||||||| |||||| ||||||| | ||| |||| | |||||
||||||| ||||||
|||| |||||||| |||||||||||| | ||||||||||||||||||
||
||||||||||||||||| | ||
|| | ||||||||| ||||||| |||||
||||||||||||||||
|||||||||||||||||||| ||||||||||||||| ||||| |||
|||||||||||
||| |||| |||| |||| ||||||||||||||||| ||||||||| ||||||||||
|||||||
||||||||||||
|||||||||||| |||||||| |||||||||||||||||||||| | |||||| ||| | | |||||||||| |||||||||
|| | | |||| ||||||||||| | | ||||| | ||||||||||
||||||| |||||||||||||||||||||
|||| ||||||||||||||||||
||||||||||| ||||||| ||||||||||
||||| |||||||||||||
||
||| | | | | |||||| ||||||||| |||| |||||||||||| | ||||||| |||||||
|| |||
|||||||||||
|||||||||||||| | |||||||
|||||||||
|| ||| | |||||||| ||| |||||||||||||| | |||
|||||||||
||||||||| | ||||| ||||||||| |||
||||||||| | | | |||||
|||
||||||||||| |||| |||||||
||||||||||
|||||| |||||||||||||| | ||||||||||||||||||||
|||| ||||||| | | ||||||||||| |||||||||||||||||| ||||
||| ||||||||| ||||
||||| |||||| ||||||||| | ||||||||
||||| | | |||||||||||||||||||||||||
|||||||||||||| | |||||||||||||||||||||| | | ||| | ||||
|||||||||||
||||||||||| ||||||| ||| ||||||||||||| | |||||||||||||||
|||||||| |||| ||||| ||||||||||||||||||||||||||||||||||||||||||||| |||||||||||| ||||||||||||| ||
||
|||||| |||||||||||||||| |||
|||||||||||||||| ||||||||||||||||||||||||||| ||||| ||||| ||||||| ||| |||
|||||||||
|| ||||||| | | ||||| ||||||||||||||||||||||||||| ||||||
|||
||||||| | |||||||||||||||||| |||||||||
||||||||||||| | | |||||||||||||
|||||||||||||| | |||| | | |||||||| |||||||||||||||||||||||||||||||||||||||| ||||||| | |||||||||||||| ||||||||||||||||||
|||||||||||||||||||| | | |||||| |||| |||||| |||||||||||| | | ||| ||| | | | ||| ||||||
|||||||| |||||||||| | ||||||||||||||||| | |||||||
||||||||| || ||||||||||| | ||||||||||| |||||| ||||||||||||||||||||||| ||||||||||||||||||||||||||||||||||| |||||||||||||||||||| |||| ||| | ||||| | | ||||||||||||||||||||||||||||||| |||||||||||||||||| ||||||||| ||| | | ||||||
||||||||||||||||||||
||| ||||||||| | ||| |||| ||| | | | |||||||||| ||| ||| ||||| ||||||
||||||||||||||||||||||||| ||||||||||||||||||||
||||||||||||||||||| | ||| |||||| ||||
|||||||||||| ||
||||||||
||||||| ||||||||||||||||||||||||||||
|||||||||||
|| |||| |||||||||||
||||| |||| ||||||| | ||||||||||||
|||
||||
|||||| ||||||||||
||| |||||||
|| | |||
||||||||||||||||||||||| ||| | ||
|||| | | | | ||||||||||||||||||| | | | |||||||||||| ||||| |||| | | | ||||||||| | |||||||||||||||||||||||||| ||||| |||||||||||||||| | ||| ||||||||||||||||
|||| |||||||||||||||| ||||||| ||
||||||| ||||||| ||||||||||||| |||||||||||||
|||
||||||||||||||||||||||| | ||| | |||||||||||||||||||||||||||||| | |||||||||||||
||||||||||||
|||||||||||||||||| | |||||||||||||||||||||| | |||||||||| |||||||||||||||||||||
|||||||||||||||||| | |||| |||||||||||||||||||||||||
||| ||
||||||||| ||||||||||||||||
|||||||||
|||||
|| ||||| |||||||||||||||||| |||||||||||||||||||||||||||||||||||| ||||||||||||||| ||||||||||||||| ||||
|||||||||||||||||||||||||||||||| | | | ||| ||||||||||||||||||| ||||||||||||||||||||
||| | ||||||||| ||
||||||||||||||||||||| |||
||||| ||||||||||||||||||| | | | ||||||
|||||||||||||||| ||||||||||||||||||||||| ||
|||||||||| ||||||||||| ||||||||||||||||||||||||||||||||||||||||||
|| | ||
|||| | | |||||
|| ||||||||
|| | ||
|||||||
||||||||| |||||||
||||||||||||||||||||||| ||||||||||||||||||| | ||||||||| ||||||||||||||||||||
|||||| | ||||||||||||||||| |||| |||||||||| | | | |||
|||||| ||| ||| | ||||||||| | ||||||||| | ||||||||||||||||||||||| ||||||||||| | |||||||||||| | |||||||||| |||||||||||||||||| ||||||||||||||||| |||
|||
||||||||||
||||| ||||||||||||
|||||||||||||||||||||||||||||| |||||||||||||
|||||||||||||||||||||| |||||
||| |||||||
||||||||| | | | |||| | ||
|||||| |||
||||||| ||| | ||||||||| | ||||| ||
||
||| |||||||||||||| ||||| | ||||
||| | |||||||||||||| |||0 500 1000 1500 2000 25000.0 0.2 0.4 0.6 0.8 1.0BalanceProbability of Default|| |||| | |||||||||||||||||| | |||||| |||||||| | |||||||||||||||| | ||| ||||||||| |||||| | |||||| | | ||||||| |||||||||||||||| | |||||||||||||||||||||||| ||||
|||||| ||||| |||| ||||||||||||||||||| | ||||| ||||||||||
||||||| | | | |||||||||||||||||||| ||||||||| | | | |||||||||||| | | |||||||||||||||||||| ||
||||
|| ||
||||||||
||||||||||||||||| ||||||||||||||||||||||||||||||||
|| ||||||||||| | | |||||||||||||||||||
|||||||||||| ||||||||||||||||| | |||||||||||||||||
||||||||||||||||||||| ||||||||||| ||||||||||||||||| | | ||
|||||
|||||| ||||| ||| || |||| | ||||||||||||||||||||| ||
||||||||||
|| | |||||||| | | |||||||| | ||||||||||||||||||||||||| | | | | | ||||||||||
||||||||||||||||| ||||||||||
|||||| ||| ||||||||| |||
|| | ||| ||||||||| |||||||||||||| ||| ||||||||||
||||| |||||||||||| ||||| ||||||||
||||||||| |||||||||| ||||||||||||| ||
||||| |||| | ||||||||||||||||| ||| | | ||||||||||||||||
||| ||||
|| ||||||||||||| |||
|||||||||||||||||||
||| ||
||||||||||| | ||||||||
|| ||||||||| | | | ||||||||||| ||||||||||||||||
|||||||
|||||||||| |||||||
||||||| |||||||||||||||| ||| | | |||| |||||||| |||||| |||
||||||
|| ||| | ||||||||||| ||||||||| ||||||||||||||
|| |||||||||| ||||||| | ||||||||||||||||| ||||||||||||||||||||||||||| | |||||||||||||| | ||||||||||| | ||||| ||| ||||
||
||||||| | ||||||||||||||||| |||||||||
||||||||| |||||| |||||||||||||||||| |||||||||||||| | ||
||
|||||||| | | | | | | | | |||||||||||||||| |||||
|||
|||||||||
||||||
|||||||||||||| | |||||| | |||||| |||| ||||||||| | | |||
|||||||||||||||||||| | ||||||| ||||||||||||||
||| | | ||| |||| ||||| |||||||||| ||||||||||
|||||||
||||| |||||| | |||| ||||||||||| |||||||| | | |||||||||
||||
|||||||| ||||
|||| |||||||||| | |||
|||||| | |||||||
|| | ||||||| ||| | | |||||
|||||||| | |||| ||||| | |||| |||||||||||||||| | |||
||
|| ||||||| ||||||||||||||||||||||||||||||||| ||||||||| |||||| ||||
||||| |||
||||||||||||||||| ||||||
||||||||||||||||
||||||| | | |||||||||||||
|||||||| |||||||| | | |||| | |||||||| ||
|| |||| ||||||||
|| ||| ||
|||| ||||| ||||||||||||
||||
|||| | |||||||
|||||||||||||||||||||||
|||||||| |||||| |||| |||||||||| ||||| ||| | | |||||
|| ||| ||||||||||||| | | | | | |||| |||||||||||||
||| ||||||||| | ||||
||||||||||||||
|||| |||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||||||||| ||||||||||||||||||||||
||||||||||||
|| ||||| | |||| | |||| ||||||||||||||||||||||||||| |||||||||||||||||||||||||| ||||||||
||||| |||||||
|| ||||||||||||||| | | | ||||||||||||||| |||||||||||||||||||
||||||||||||||||||||| |||||||||||||||||||| ||||||||
|||||||||||||||| | ||||||||||||||| | ||||||||
||| ||| |||||||||||||||||||||||||||||| | |||||| |||| |||| | ||| |||
|||||||||||| |||||||| ||||||||||||
||||| | | | ||||||||
|||||||||||||||||||||||||| |||||||||||||||||||||||| |||| | | | |||||||||| | |||||||||| |||||||||||
|| |||||||||||||||||||||||||||||| | | ||||||
|||| ||||||||||||||||||||||||||||||||| ||||||| ||||| |||||||||| |||| | | | ||||||||||||||||||||||| | | ||||||||||||||||||||
||||| | | | |||||
|||||| ||||||||||| ||||||||||||||||| | ||||||| | |||||||
|||||| | |||||||
||||||
|||||| | |||||| | ||||||||| ||| | | | ||||
|||| ||
|||||||||||||||||||
|| |||| ||
|||| |||| ||||||||||| | ||
|||| ||||| |||||||||||| | |||||
||||||| |||
||||||||||||||| | |||||| | ||||| | ||||||||||||||||||||||||||||| |||| ||||||
|||
||||||
||||||
|||||||||||||||| | ||||||||| ||||||||||||||||||||
||||||||||||||||||||| ||||||||||||||||||||||||||||
|| ||
||||| |||||||||||||||||||| ||||| | ||||||||||| |||||||||||| ||||||||||||||||||
|||||| | |||||| | | |||||||||| |||||| ||||
||||||||| ||| |||
|||||||||||| | ||||||| | ||||||||
|||||||| | |||||||||||||||| ||||| ||||||||||||||||| | | ||||||||||||||||||| | | |||
||||
|||| || ||||||||||||||||||||||||| ||||||||| | |||||||| |||||||||||||||||
|||| |||||||| | |||||||||||||||||||||||||||||||||| |||| ||||||||| |||||||||||
||||||||||||||||||||||||||
||||| ||| | |||||||| |||||||||||||||
||| ||| ||
|| ||||||||||||| ||||| ||||||||||||||||
||||||||||||
|| |||||||||||||||||||||||||||||||||| || |||||||| ||||||||||||||||||||| |||||||||||||
|||||||| | ||
|||| | ||||||||
||||
||
||||||||||||||||||| |||||||||||||
|||||||||||||||||||||||||||||| | ||
||||||||||| |||
|||||||
||||| ||||||||||||| |||| |||||||||||| | |||||||||| | |||||| ||||||||||||| ||| | | |||||||
||||||||||||| ||| | |||||||||||||||||||||||||| |||||||||||||| | |||||
|||||| | ||||||| ||||||| ||||||||||||||||
|||||||||
|||||| ||| | |||
||||| |||||||||||||||||||||||| ||||
||||||||| |||||
|||||||||||||||| ||| | ||||| |||||||
||||
|||||||||||||||||||| |||||||| | | ||||||||||| | |||||||||||||
||||||||||||| |||||||||
||||
|| |||||||||||||||||| |||||||||||| ||| ||||||||||||||||| |||||||||||| || |||| |||| ||||| ||||||||
||
||||||||||||||
||||||||||||
|| |||||||||| |||||
|| |||||||||||||||||||||||||| | |||||||||| |||||| | ||
|||||||||||||||| | | | |||||||||||||||||||||| ||||||||||| ||||||||||||||||| | |||||||||||||| |||| | |||| | | ||||||||||||| ||||||
|||| | | | ||||
||||
||| |||||||||
||| | | |||| |||
|||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||||||| ||||
|||||| ||||| | ||||||||||| | ||||
|||||||||||||| ||||||
||||| ||| ||||||||||||| |||||||||||||||||| |||||||||||||||||||||||||||||| | ||||||
|||||||| |||||||| | | | | ||||||||| |||||||||||||||||||||||||| | | | |||||||| |||
|| |||| |||| ||||| |||| | ||||| ||||||||||| |||| ||
|| |||||||||||| ||||||| | ||||||||||| ||||||||||| ||||| ||||||
||||| | |||||| | | | |||| | | | | | | |||||||||| | | ||| | | | ||||||||||||||| ||||| ||| ||
|| | ||| ||| ||||||| |||||||||||||||||||||||||||||||||||||| | ||||| | | ||||||| | ||||||||
||||||| ||| |||
|||||||||
||||||||||||||||||||| ||||||||| | ||| ||||||| | ||||| | |||| ||| ||| ||||||||||| | |||||||||| |||||||||||||||| ||||||||||||
|| ||| |||||||||||||||||||||||||||||||||
||||||| |||||||||||||||| |||| ||||||||||
|||||||||||||||||||||||| |||||||||
||||||||||||| |||||||||| ||||| ||||||||| |||||| ||||||| | ||| |||| | |||||
||||||| ||||||
|||| |||||||| |||||||||||| | ||||||||||||||||||
||
||||||||||||||||| | ||
|| | ||||||||| ||||||| |||||
||||||||||||||||
|||||||||||||||||||| ||||||||||||||| ||||| |||
|||||||||||
||| |||| |||| |||| ||||||||||||||||| ||||||||| ||||||||||
|||||||
||||||||||||
|||||||||||| |||||||| |||||||||||||||||||||| | |||||| ||| | | |||||||||| |||||||||
|| | | |||| ||||||||||| | | ||||| | ||||||||||
||||||| |||||||||||||||||||||
|||| ||||||||||||||||||
||||||||||| ||||||| ||||||||||
||||| |||||||||||||
||
||| | | | | |||||| ||||||||| |||| |||||||||||| | ||||||| |||||||
|| |||
|||||||||||
|||||||||||||| | |||||||
|||||||||
|| ||| | |||||||| ||| |||||||||||||| | |||
|||||||||
||||||||| | ||||| ||||||||| |||
||||||||| | | | |||||
|||
||||||||||| |||| |||||||
||||||||||
|||||| |||||||||||||| | ||||||||||||||||||||
|||| ||||||| | | ||||||||||| |||||||||||||||||| ||||
||| ||||||||| ||||
||||| |||||| ||||||||| | ||||||||
||||| | | |||||||||||||||||||||||||
|||||||||||||| | |||||||||||||||||||||| | | ||| | ||||
|||||||||||
||||||||||| ||||||| ||| ||||||||||||| | |||||||||||||||
|||||||| |||| ||||| ||||||||||||||||||||||||||||||||||||||||||||| |||||||||||| ||||||||||||| ||
||
|||||| |||||||||||||||| |||
|||||||||||||||| ||||||||||||||||||||||||||| ||||| ||||| ||||||| ||| |||
|||||||||
|| ||||||| | | ||||| ||||||||||||||||||||||||||| ||||||
|||
||||||| | |||||||||||||||||| |||||||||
||||||||||||| | | |||||||||||||
|||||||||||||| | |||| | | |||||||| |||||||||||||||||||||||||||||||||||||||| ||||||| | |||||||||||||| ||||||||||||||||||
|||||||||||||||||||| | | |||||| |||| |||||| |||||||||||| | | ||| ||| | | | ||| ||||||
|||||||| |||||||||| | ||||||||||||||||| | |||||||
||||||||| || ||||||||||| | ||||||||||| |||||| ||||||||||||||||||||||| ||||||||||||||||||||||||||||||||||| |||||||||||||||||||| |||| ||| | ||||| | | ||||||||||||||||||||||||||||||| |||||||||||||||||| ||||||||| ||| | | ||||||
||||||||||||||||||||
||| ||||||||| | ||| |||| ||| | | | |||||||||| ||| ||| ||||| ||||||
||||||||||||||||||||||||| ||||||||||||||||||||
||||||||||||||||||| | ||| |||||| ||||
|||||||||||| ||
||||||||
||||||| ||||||||||||||||||||||||||||
|||||||||||
|| |||| |||||||||||
||||| |||| ||||||| | ||||||||||||
|||
||||
|||||| ||||||||||
||| |||||||
|| | |||
||||||||||||||||||||||| ||| | ||
|||| | | | | ||||||||||||||||||| | | | |||||||||||| ||||| |||| | | | ||||||||| | |||||||||||||||||||||||||| ||||| |||||||||||||||| | ||| ||||||||||||||||
|||| |||||||||||||||| ||||||| ||
||||||| ||||||| ||||||||||||| |||||||||||||
|||
||||||||||||||||||||||| | ||| | |||||||||||||||||||||||||||||| | |||||||||||||
||||||||||||
|||||||||||||||||| | |||||||||||||||||||||| | |||||||||| |||||||||||||||||||||
|||||||||||||||||| | |||| |||||||||||||||||||||||||
||| ||
||||||||| ||||||||||||||||
|||||||||
|||||
|| ||||| |||||||||||||||||| |||||||||||||||||||||||||||||||||||| ||||||||||||||| ||||||||||||||| ||||
|||||||||||||||||||||||||||||||| | | | ||| ||||||||||||||||||| ||||||||||||||||||||
||| | ||||||||| ||
||||||||||||||||||||| |||
||||| ||||||||||||||||||| | | | ||||||
|||||||||||||||| ||||||||||||||||||||||| ||
|||||||||| ||||||||||| ||||||||||||||||||||||||||||||||||||||||||
|| | ||
|||| | | |||||
|| ||||||||
|| | ||
|||||||
||||||||| |||||||
||||||||||||||||||||||| ||||||||||||||||||| | ||||||||| ||||||||||||||||||||
|||||| | ||||||||||||||||| |||| |||||||||| | | | |||
|||||| ||| ||| | ||||||||| | ||||||||| | ||||||||||||||||||||||| ||||||||||| | |||||||||||| | |||||||||| |||||||||||||||||| ||||||||||||||||| |||
|||
||||||||||
||||| ||||||||||||
|||||||||||||||||||||||||||||| |||||||||||||
|||||||||||||||||||||| |||||
||| |||||||
||||||||| | | | |||| | ||
|||||| |||
||||||| ||| | ||||||||| | ||||| ||
||
||| |||||||||||||| ||||| | ||||
||| | |||||||||||||| |||FIGURE 4.2. Classification using the Default data.Left:Estimated probability
ofdefault using linear regression. Some estimated probabilities are negative! The
orangeticks indicatethe 0/1values codedfor of default using logistic regression. All probabilities lie between 0
and1.
for any individual for whom p(balance )>0.5. Alternatively, if a company
wishes to be conservative in predicting individuals who are at risk for de-
fault, then they may choose to use a lower threshold, such as p(balance )>
0.1.
4.3.1 The Logistic Model
How should we model the relationship between p(X) = Pr( Y=1|X)and
X? (For convenience we are using the generic 0/1 coding for the response.)
In Section 4.2we considered using a linear regression model to represent
these probabilities:
p(X)=β0+β1X. (4.1)
If we use this approach to predict default=Yesusingbalance, then we
obtain the model shown in the left-hand panel of Figure 4.2. Here we see
the problem with this approach: for balances close to zero we predict a
negative probability of default; if we were to predict for very large balances,
we would get values bigger than 1. These predictions are not sensible, since
of course the true probability of default, regardless of credit card balance,
must fall between 0and1. This problem is not unique to the credit default
data. Any time a straight line is fit to a binary response that is coded as
0or1, in principle we can always predict p(X)<0for some values of X
andp(X)>1for others (unless the range of Xis limited).
To avoid this problem, we must model p(X)using a function that gives
outputs between 0and1for all values of X. Many functions meet this
description. In logistic regression, we use the logistic function ,logistic
function
p(X)=eβ0+β1X
1+eβ0+β1X. (4.2)
To fit the model ( 4.2), we use a method called maximum likelihood , 4.2illustrates
the fit of the logistic regression model to the Defaultdata. Notice that for140 4. Classification
low balances we now predict the probability of default as close to, but never
below, zero. Likewise, for high balances we predict a default probability
close to, but never above, one. The logistic function will always produce
anS-shaped curve of this form, and so regardless of the value of X,w e
will obtain a sensible prediction. We also see that the logistic model is
better able to capture the range of probabilities than is the linear regression
model in the left-hand plot. The average fitted probability in both cases is
0.0333 (averaged over the training data), which is the same as the overall
proportion of defaulters in the data set.
After a bit of manipulation of ( 4.2), we find that
p(X)
1−p(X)=eβ0+β1X. (4.3)
The quantity p(X)/[1−p(X)]is called the odds, and can take on any valueoddsbetween 0and∞. Values of the odds close to 0and∞indicate very low
and very high probabilities of default, respectively. For example, on average
1in5people with an odds of 1/4will default, since p(X)=0 .2implies an
odds of0.2
1−0.2=1/4. Likewise, on average nine out of every ten people with
an odds of 9will default, since p(X)=0 .9implies an odds of0.9
1−0.9=9.
Odds are traditionally used instead of probabilities in horse-racing, since
they relate more naturally to the correct betting strategy.
By taking the logarithm of both sides of ( 4.3), we arrive (4.4)
The left-hand side is called the log odds orlogit. We see that the logisticlog odds
logitregression model ( 4.2) has a logit that is linear in X.
Recall from Chapter 3that in a linear regression model, β1gives the
average change in Yassociated with a one-unit increase in X. By contrast,
in a logistic regression model, increasing Xby one unit changes the log
odds byβ1(4.4). Equivalently, it multiplies the odds by eβ1(4.3). However,
because the relationship between p(X)andXin (4.2) is not a straight line,
β1doesnotcorrespond to the change in p(X)associated with a one-unit
increase in X. The amount that p(X)changes due to a one-unit change in
Xdepends on the current value of X. But regardless of the value of X, if
β1is positive then increasing Xwill be associated with increasing p(X),
and ifβ1is negative then increasing Xwill be associated with decreasing
p(X). The fact that there is not a straight-line relationship between p(X)
andX, and the fact that the rate of change in p(X)per unit change in X
depends on the current value of X, can also be seen by inspection of the
right-hand panel of Figure 4.2.
4.3.2 Estimating the Regression Coefficients
The coefficients β0andβ1in (4.2) are unknown, and must be 3,weusedtheleastsquares
approach to estimate the unknown linear regression coefficients. Although
we could use (non-linear) least squares to fit the model ( 4.4), the more
general method of maximum likelihood is preferred, since it has better sta-
tistical properties. The basic intuition behind using maximum likelihood4.3 Logistic Regression 141
to fit a logistic regression model is as follows: we seek estimates for β0and
β1such that the predicted probability ˆp(xi)of default for each individual,
using (4.2), corresponds as closely as possible to the individual’s observed
default status. In other words, we try to find ˆβ0andˆβ1such that plugging
these estimates into the model for p(X), given in ( 4.2), yields a number
close to one for all individuals who defaulted, and a number close to zero
for all individuals who did not. This intuition can be formalized using a
mathematical equation called a likelihood function (4.5)
The estimates ˆβ0andˆβ1are chosen to maximize this likelihood function.
Maximum likelihood is a very general approach that is used to fit many
of the non-linear models that we examine throughout this book. In the
linear regression setting, the least squares approach is in fact a special case
of maximum likelihood. The mathematical details of maximum likelihood
are beyond the scope of this book. However, in general, logistic regression
and other models can be easily fit using statistical software such as R, and
so we do not need to concern ourselves with the details of the maximum
likelihood fitting procedure.
Table4.1shows the coefficient estimates and related information that
result from fitting a logistic regression model on the Defaultdata in order
to predict the probability of default=Yesusingbalance. We see that ˆβ1=
0.0055 ; this indicates that an increase in balance is associated with an
increase in the probability of default. To be precise, a one-unit increase in
balanceis associated with an increase in the log odds of defaultby0.0055
units.
Many aspects of the logistic regression output shown in Table 4.1are
similar to the linear regression output of Chapter 3. For example, we can
measure the accuracy of the coefficient estimates by computing their stan-
darderrors.The z-statisticinTable 4.1playsthesameroleasthe t-statistic
in the linear regression output, for example in Table 3.1on page 77. For
instance, the z-statistic associated with β1is equal to ˆβ1/SE(ˆβ1), and so a
large (absolute) value of the z-statistic indicates evidence against the null
hypothesis H0:β1=0. This null hypothesis implies that p(X)=eβ0
1+eβ0: in
other words, that the probability of defaultdoes not depend on balance.
Since the p-value associated with balancein Table 4.1is tiny, we can reject
H0. In other words,we conclude that there is indeed an association between
balanceand probability of default. The estimated intercept in Table 4.1
is typically not of interest; its main purpose is to adjust the average fitted
probabilities to the proportion of ones in the data (in this case, the overall
default rate).
4.3.3 Making Predictions
Once the coefficients have been estimated, we can compute the probability
ofdefaultfor any given credit card balance. For example, using the coeffi-
cient estimates given in Table 4.1, we predict that the default probability142 4. Classification
Coefficient Std. error z-statistic p-value
Intercept −10.6513 0.3612 −29.5<0.0001
balance 0.0055 0.0002 24.9 <0.0001
TABLE 4.1. For theDefault data, estimated coefficients of the logistic regres-
sion model that predicts the probability of default usingbalance. A one-unit
increase in balance is associated with an increase in the log odds of default by
0.0055units.
Coefficient Std. error z-statistic p-value
Intercept −3.5041 0.0707 −49.55<0.0001
student[Yes] 0.4049 0.1150 3.52 0.0004
TABLE 4.2. FortheDefault that predicts the probability of default using student status. Student status
is encoded as a dummy variable, with a value of 1for a student and a value of 0
for a non-student, and represented by the variable student[Yes] in the table.
for an individual with a is below 1%. In contrast, the predicted probability of default for an
individual with a balance of $2,000is much higher, and equals 0.586or
58.6%.
One can use qualitative predictors with the logistic regression model us-
ing the dummy variable approach from Section 3.3.1. As an example, the
Defaultdata set contains the qualitative variable student. To fit a model
that uses student status as a predictor variable, we simply create a dummy
variable that takes on a value of 1for students and 0for non-students. The
logistic regression model that results from predicting probability of default
from student status can be seen in Table 4.2. The coefficient associated
with the dummy variable is positive, and the associated p-value is statisti-
cally significant. This indicates that students tend to have higher default
probabilities than Multiple Logistic By analogy with the extension from simple to multiple linear
regression in Chapter 3, we can generalize ( 4.4) as (4.6)
whereX=(X1,...,X p)areppredictors. Equation 4.6can be rewritten (4.7)4.3 Logistic Regression 143
Coefficient Std. error z-statistic p-value
Intercept −10.8690 0.4923 −22.08<0.0001
balance 0.0057 0.0002 24.74 <0.0001
income 0.0030 0.0082 0.37 0.7115
student[Yes] −0.6468 0.2362 −2.74 0.0062
TABLE 4.3. FortheDefault that predicts the probability of default usingbalance,income, and student
status. Student status is encoded as a dummy variable student[Yes] , with a value
of1for a student and a value of 0for a non-student. In fitting this model, income
was measured in thousands of dollars.
JustasinSection the coefficient estimates for a logistic regression model
that uses balance,income(in thousands of dollars), and studentstatus to
predict probability of default. There is a surprising result here. The p-
values associated with balanceand the dummy variable for studentstatus
are very small, indicating that each of these variables is associated with
the probability of default. However, the coefficient for the dummy variable
is negative, indicating that students are less likely to default than non-
students. In contrast, the coefficient for the dummy variable is positive in
Table4.2. How is it possible for student status to be associated with an
increase in probability of default in Table 4.2and adecrease in probability
of default in Table 4.3? The left-hand panel of Figure 4.3provides a graph-
ical illustration of this apparent paradox. The orange and blue solid lines
show the average default rates for students and non-students, respectively,
as a function of credit card balance. The negative coefficient for studentin
the multiple logistic regression indicates that for a fixed value of balance
andincome, a student is less likely to default than a non-student. Indeed,
we observe from the left-hand panel of Figure 4.3that the student default
rate is at or below that of the non-student default rate for every value of
balance. But the horizontal broken lines near the base of the plot, which
show the default rates for students and non-students averaged over all val-
ues ofbalanceandincome, suggest the opposite effect: the overall a positive coefficient for studentin the single variable logistic regression
output shown in Table 4.2.
The right-hand panel of Figure 4.3provides an explanation for this dis-
crepancy. The variables studentandbalanceare correlated. Students tend
to hold higher levels of debt, which is in turn associated with higher prob-
ability of default. In other words, students are more likely to have large
credit card balances, which, as we know from the left-hand panel of Fig-
ure4.3, tend to be associated with high default rates. Thus, even though
an individual student with a given credit card balance will tend to have a
lower probability of default than a non-student with the same credit card
balance, the fact that students on the whole tend to have higher credit card
balances means that overall, students tend to default at a higher rate than
non-students. This is an important distinction for a credit card company
that is trying to determine to whom they should offer credit. A student is
riskier than a non-student if no information about the student’s credit card144 4. Classification
500 1000 1500 20000.0 0.2 0.4 0.6 0.8Credit Card BalanceDefault RateNoYes0 500 1000 1500 2000 2500Student StatusCredit Card BalanceFIGURE 4.3. Confounding in the Default data.Left:Default rates are shown
for students (orange) and non-students (blue). The solid lines display default rate
as a function of balance, while the horizontal broken lines display the overall
default rates. Right:Boxplots of balance for students (orange) and non-students
(blue) are shown.
balance is available. However, that student is less risky than a non-student
with the same credit card balance !
This simple example illustrates the dangers and subtleties associated
with performing regressions involving only a single predictor when other
predictors may also be relevant. As in the linear regression setting, the
results obtained using one predictor may be quite different from those ob-
tained using multiple predictors, especially when there is correlation among
the predictors. In general, the phenomenon seen in Figure 4.3is known as
confounding .confoundingBy substituting estimates for the regression coefficients from Table 4.3
into (4.7), we can make predictions. For example, a student with a credit
card balance of $1,500and an income of $40,000has an estimated proba-
bility of default of
ˆp(X)=e−10.869+0 .00574 ×1,500+0 .003×40−0.6468 ×1
1+e−10.869+0 .00574 ×1,500+0 .003×40−0.6468 ×1=0.058. (4.8)
A non-student with the same balance and income has an estimated prob-
ability of default of
ˆp(X)=e−10.869+0 .00574 ×1,500+0 .003×40−0.6468 ×0
1+e−10.869+0 .00574 ×1,500+0 .003×40−0.6468 ×0=0.105. (4.9)
(Here we multiply the incomecoefficient estimate from Table 4.3by 40,
rather than by 40,000, because in that table the model was fit with income
measured in units of $1,000.)
4.3.5 Multinomial Logistic Regression
We sometimes wish to classify a response variable that has more than two
classes. For example, in Section 4.2we had three categories of medical con-
dition in the emergency room: stroke,drug overdose ,epileptic seizure .
However, the logistic regression approach that we have seen in this section
only allows for K=2classes for the response variable.4.3 Logistic Regression 145
It turns out that it is possible to extend the two-class logistic regression
approach to the setting of K> 2classes. This extension is sometimes
known as multinomial logistic regression . To do this, we first select a singlemultinomial
logistic
regressionclass to serve as the baseline; without loss of generality, we select the Kth
class for this role. Then we replace the model ( 4.7) with the −1, (4.11)
It is not hard to show that for k=1,...,K (4.12)
Noticethat( 4.12)isquitesimilarto( 4.6).Equation 4.12indicatesthatonce
again, the log odds between any pair of classes is linear in the features.
It turns out that in ( 4.10)–(4.12), the decision to treat the Kth class into stroke,drug overdose , andepileptic seizure , suppose that we
fit two multinomial logistic regression models: one treating strokeas the
baseline, another treating drug overdose as the baseline. The coefficient
estimates will differ between the two fitted models due to the differing
choice of baseline, but the fitted values (predictions), the log odds between
any pair of classes, and the other key model outputs will remain the same.
Nonetheless, interpretation of the coefficients in a multinomial logistic
regression model must be done with care, since it is tied to the choice
of baseline. For example, if we set epileptic seizure to be the baseline,
then we can interpret βstroke 0as the log odds of strokeversusepileptic
seizure, given that x1=···=xp=0. Furthermore, a one-unit increase
inXjis associated with a βstroke jincrease in the log odds of strokeover
epileptic seizure . Stated another way, if Xjincreases by one unit, then
Pr(Y=stroke|X=x)
Pr(Y=epileptic seizure |X=x)
increases by eβstroke j.
We now briefly present an alternative coding for multinomial logistic
regression, known as the softmaxcoding. The softmax coding is equivalentsoftmaxto the coding just described in the sense that the fitted values, log odds
between any pair of classes, and other key model outputs will remain the
same, regardless of coding. But the softmax coding is used extensively in
some areas of the machine learning literature (and will appear again in
Chapter 10), so it is worth being aware of it. In the softmax coding, rather
than selecting a baseline class, we treat all Kclasses symmetrically, and
assume that for k=1,...,K (4.13)146 4. Classification
Thus, rather than estimating coefficients for K−1classes, we actually
estimate coefficients for all Kclasses. It is not hard to see that as a result
of (4.13), the log odds ratio between the kth andk/primeth classes Generative Models for Classification
Logistic regression involves directly modeling Pr(Y=k|X=x)using the
logistic function, given by ( 4.7) for the case of two response classes. In
statistical jargon, we model the conditional distribution of the response Y,
given the predictor(s) X. We now consider an alternative and less direct
approach to estimating these probabilities. In this new approach, we model
the distribution of the predictors Xseparately in each of the response
classes (i.e. for each value of Y). We then use Bayes’ theorem to flip these
around into estimates for Pr(Y=k|X=x). When the distribution of X
within each class is assumed to be normal, it turns out that the model is
very similar in form to logistic regression.
Why do we need another method, when we have logistic regression?
There are several reasons:
• When there is substantial separation between the two classes, the
parameter estimates for the logistic regression model are surprisingly
unstable. The methods that we consider in this section do not suffer
from this problem.
• If the distribution of the predictors Xis approximately normal in
each of the classes and the sample size is small, then the approaches
in this section may be more accurate than logistic regression.
• The methods in this section can be naturally extended to the case
of more than two response classes. (In the case of more than two
response classes, we can also use multinomial logistic regression from
Section4.3.5.)
Suppose that we wish to classify an observation into one of Kclasses,
whereK≥2. In other words, the qualitative response variable Ycan take
onKpossible distinct and unordered values. Let πkrepresent the overall
orpriorprobability that a randomly chosen observation comes from thepriorkth class. Let fk(X)≡Pr(X|Y=k)1denote the density function ofXdensity
functionfor an observation that comes from the kth class. In other words, fk(x)is
relatively large if there is a high probability that an observation in the kth
class has X≈x, andfk(x)is small if it is very unlikely that an observation
in thekth class has X≈x. ThenBayes’ theorem states thatBayes’
theorem
1Technically, this definition is only correct if Xis a qualitative random variable. If
Xis quantitative, then fk(x)dxcorresponds to the probability of Xfalling in a small
regiondxaroundx.4.4 Generative Models for Classification pk(x)=
Pr(Y=k|X=x); this is the posterior probability that an observationposteriorX=xbelongs to the kth class. That is, it is the probability that the
observation belongs to the kth class, giventhe predictor value for that
observation.
Equation 4.15suggests that instead of directly computing the posterior
probability pk(x)as in Section 4.3.1, we can simply plug in estimates of πk
andfk(x)into (4.15). In general, estimating πkis easy if we have a random
sample from the population: we simply compute the fraction of the training
observations that belong to the kth class. However, estimating the density
function fk(x)is much more challenging. As we will see, to estimate fk(x),
we will typically have to make some simplifying assumptions.
We know from Chapter 2that the Bayes classifier, which classifies an
observation xto the class for which pk(x)is largest, has the lowest possible
error rate out of all classifiers. (Of course, this is only true if all of the
terms in ( 4.15) are correctly specified.) Therefore, if we can find a way to
estimate fk(x), then we can plug it into ( 4.15) in order to approximate the
Bayes classifier.
In the following sections, we discuss three classifiers that use different
estimates of fk(x)in (4.15) to approximate the Bayes classifier: linear dis-
criminant analysis, quadratic discriminant analysis, andnaive Bayes .
4.4.1 Linear Discriminant Analysis for p=1
For now, assume that p=1—that is, we have only one predictor. We would
like to obtain an estimate for fk(x)that we can plug into ( 4.15) in order to
estimate pk(x). We will then classify an observation to the class for which
pk(x)is greatest. To estimate fk(x), we will first make some assumptions
about its form.
In particular, we assume that fk(x)isnormalorGaussian . In the one-normal
Gaussiandimensional setting, the normal density takes the (4.16)
whereµkandσ2
kare the mean and variance parameters for the kth class.
For now, let us further assume that σ2
1=···=σ2
K: that is, there is a shared
variance term across all Kclasses, which for simplicity we can denote by
σ2. Plugging ( 4.16) into (4.15), we find (4.17)
(Note that in ( 4.17),πkdenotes the prior probability that an observation
belongs to the kth class, not to be confused with π≈3.14159 , the math-
ematical constant.) The Bayes classifier2involves assigning an observation
2Recall that the Bayes classifier assigns an observation to the class for which pk(x)
is largest. This is different from Bayes’ theorem in (4.15), which allows us to manipulate
conditional distributions.148 4. Classification
−4 −2 0 2 4−3 −2 −1 0 1 2 3 4012345FIGURE 4.4. Left:Two one-dimensional normal density functions are shown.
The dashed vertical line represents the Bayes decision boundary. Right:20 obser-
vations were drawn from each of the two classes, and are shown as histograms.
The Bayes decision boundary is again shown as a dashed vertical line. The solid
vertical line represents the LDA decision boundary estimated from the training
data.
X=xto the class for which ( 4.17) is largest. Taking the logof (4.17) and
rearranging the terms, it is not hard to show3that this is equivalent to
assigning the observation to the class for which
δk(x)=x·µk
σ2−µ2
k
2σ2+ log( πk) (4.18)
is largest. For instance, if K=2 andπ1=π2, then the Bayes classifier
assigns an observation to class 1if2x(µ1−µ2)>µ2
1−µ2
2, and to class
2 otherwise. The Bayes decision boundary is the point for which δ1(x)=
δ2(x); one can show that this amounts to
x=µ2
1−µ2
2
2(µ1−µ2)=µ1+µ2
2. 4.4.Thetwonormal
density functions that are displayed, f1(x)andf2(x), represent two distinct
classes. The mean and variance parameters for the two density functions
areµ1=−1.25,µ2=1.25, andσ2
1=σ2
2=1. The two densities overlap,
and so given that X=x, there is some uncertainty about the class to which
the observation belongs. If we assume that an observation is equally likely
to come from either class—that is, π1=π2=0.5—then by inspection of
(4.19), we see that the Bayes classifier assigns the observation to class 1
ifx< 0and class 2 otherwise. Note that in this case, we can compute
the Bayes classifier because we know that Xis drawn from a Gaussian
distribution within each class, and we know all of the parameters involved.
In a real-life situation, we are not able to calculate the Bayes classifier.
In practice, even if we are quite certain of our assumption that Xis
drawn from a Gaussian distribution within each class, to apply the Bayes
classifier we still have to estimate the parameters µ1,...,µ K,π1,...,πK,
andσ2. Thelinear discriminant analysis (LDA) method approximates thelinear
discriminant
analysisBayes classifier by plugging estimates for πk,µk, andσ2into (4.18). In
3See Exercise 2 at the end of this chapter.4.4 Generative Models for Classification 149
particular, the following estimates are the total number of training observations, and nkis the number
of training observations in the kth class. The estimate for µkis simply the
average of all the training observations from the kth class, while ˆσ2can
be seen as a weighted average of the sample variances for each of the K
classes. Sometimes we have knowledge of the class membership probabili-
tiesπ1,...,πK, which can be used directly. In the absence of any additional
information, LDA estimates πkusing the proportion of the training obser-
vations that belong to the kth class. In other words,
ˆπk=nk/n. 4.20)and(4.21)into(4.18),
and assigns an observation X=xto the class for which
ˆδk(x)=x·ˆµk
ˆσ2−ˆµ2
k
2ˆσ2+ log(ˆ πk) (4.22)
is largest. The word linearin the classifier’s name stems from the fact
that the discriminant functions ˆδk(x)in (4.22) are linear functions of x(asdiscriminant
functionopposed to a more complex function of x).
The right-hand panel of Figure 4.4displays a histogram of a random
sample of 20observations from each class. To implement LDA, we began
byestimating boundary, shown as a black solid line, that results from assigning
an observation to the class for which ( 4.22) is largest. All points to the left
of this line will be assigned to the green class, while points to the right of
this line are assigned to the purple class. In this case, since n1=n2= 20 ,
we have ˆπ1=ˆπ2. As a result, the decision boundary corresponds to the
midpoint between the sample means for the two classes, (ˆµ1+ˆµ2)/2. The
figure indicates that the LDA decision boundary is slightly to the left of
the optimal Bayes decision boundary, which instead equals (µ1+µ2)/2=
0. How well does the LDA classifier perform on this data? Since this compute the Bayes error rate and the LDA test error rate. These are
10.6% and11.1%, respectively. In other words, the LDA classifier’s error
rate is only 0.5% above the smallest possible error rate! This indicates that
LDA is performing pretty well on this data set.
To reiterate, the LDA classifier results from assuming that the obser-
vations within each class come from a normal distribution with a class-
specific mean and a common variance σ2, and plugging estimates for these
parameters into the Bayes classifier. In Section 4.4.3, we will consider a less
stringent set of assumptions, by allowing the observations in the kth class
to have a class-specific variance, σ2
k.150 4. Classification
x1x1x2x2FIGURE 4.5. Two multivariate Gaussian density functions are shown, with
p=2.Left:The two predictors are uncorrelated. Right:The two variables have
a correlation of 0.7.
4.4.2 Linear Discriminant Analysis for p>1
We now extend the LDA classifier to the case of multiple predictors. To
do this, we will assume that X=(X1,X2,...,X p)is drawn from a multi-
variate Gaussian (or multivariate normal) distribution, with a this 4.16),withsome
correlation between each pair of predictors. Two examples of multivariate
Gaussian distributions with p=2 are shown in Figure 4.5. The height of
the surface at any particular point represents the probability that both X1
andX2fall in a small region around that point. In either panel, if the sur-
faceiscutalongthe X1axisoralongthe X2axis,theresultingcross-section
will have the shape of a one-dimensional normal distribution. The left-hand
panel of Figure 4.5illustrates an example in which Var (X1)=Var(X2)and
Cor(X1,X2)=0 ; this surface has a characteristic bell shape . However, the
bell shape will be distorted if the predictors are correlated or have unequal
variances, as is illustrated in the right-hand panel of Figure 4.5. In this
situation, the base of the bell will have an elliptical, rather than circular,
shape. To indicate that a p-dimensional random variable Xhas a multi-
variate Gaussian distribution, we write X∼N(µ,Σ). HereE(X)=µis
the mean of X(a vector with pcomponents), and Cov (X)= Σis the
p×pcovariance matrix of X. Formally, the multivariate Gaussian density
is defined (4.23)
In the case of p> 1predictors, the LDA classifier assumes that the
observations in the kth class are drawn from a multivariate Gaussian dis-
tribution N(µk,Σ), whereµkis a class-specific mean vector, and Σis a
covariance matrix that is common to all Kclasses. Plugging the density
function for the kth class, fk(X=x), into (4.15) and performing a little
bit of algebra reveals that the Bayes classifier assigns an observation X=x4.4 Generative Models for Classification 151
−4 −2 0 2 4−4 −2 0 2 4−4 −2 0 2 4−4 −2 0 2 4X1X1
X2X2
FIGURE 4.6. An example with three classes. The observations from each class
are drawn from a multivariate Gaussian distribution with p=2, with a class-spe-
cific mean vector and a common covariance matrix. Left:Ellipses that contain
95% of the probability for each of the three classes are shown. The dashed lines
are the Bayes decision boundaries. Right:20observations were generated from
each class, and the corresponding LDA decision boundaries are indicated using
solid black lines. The Bayes decision boundaries are once again shown as dashed
lines.
to the class for which
δk(x)=xTΣ−1µk−1
2µT
kΣ−1µk+ log πk (4.24)
is largest. This is the vector/matrix version of ( 4.18).
An example is shown in the left-hand panel of Figure 4.6. Three equally-
sized Gaussian classes are shown with class-specific mean vectors and a
common covariance matrix. The three ellipses represent regions that con-
tain95% of the probability for each of the three classes. The dashed lines
are the Bayes decision boundaries. In other words, they represent the set
of values xfor which δk(x)=δ/lscript(x); (4.25)
fork/negationslash=l. (Thelogπkterm from ( 4.24) has disappeared because each of
the three classes has the same number of training observations; i.e. πkis
the same for each class.) Note that there are three lines representing the
Bayes decision boundaries because there are three pairs of classes among
the three classes. That is, one Bayes decision boundary separates class 1
from class 2, one separates class 1 from class 3, and one separates class 2
from class 3. These three Bayes decision boundaries divide the predictor
space into three regions. The Bayes classifier will classify an observation
according to the region in which it is located.
Once again, we need to estimate the unknown parameters µ1,...,µ K,
π1,...,πK, andΣ; the formulas are similar to those used in the one-
dimensional case, given in ( 4.20). To assign a new observation X=x,
LDA plugs these estimates into ( 4.24) to obtain quantities ˆδk(x), and clas-
sifies to the class for which ˆδk(x)is largest. Note that in ( 4.24)δk(x)is
a linear function of x; that is, the LDA decision rule depends on xonly152 4. Classification
True default status
No Yes Total
Predicted No9644 252 9896
default status Yes23 81 104
Total9667 333 10000
TABLE 4.4. A confusion matrix compares the LDA predictions to the true
default statuses for the 10,000training observations in the Default data correctly predicted, while off-diagonal elements represent individuals that
were misclassified. LDA made incorrect predictions for 23individuals who did
not default and for 252individuals who did default.
through a linear combination of its elements. As previously discussed, this
is the reason for the word linearin LDA.
In the right-hand panel of Figure 4.6,20observations drawn from each of
the three classes are displayed, and the resulting LDA decision boundaries
are shown as solid black lines. Overall, the LDA decision boundaries are
pretty close to the Bayes decision boundaries, shown again as dashed 0.0746and0.0770,
respectively. This indicates that LDA is performing well on this data.
We can perform LDA on the Defaultdata in order to predict whether
or not an individual will default on the basis of credit card balance and
student status.4The LDA model fit to the 10,000training samples results
in atrainingerror rate of 2.75%. This sounds like a low error rate, but two
caveats must be noted.
• First of all, training error rates will usually be lower than test error
rates, which are the real quantity of interest. In other words, we
might expect this classifier to perform worse if we use it to predict
whether or not a new set of individuals will default. The reason is
that we specifically adjust the parameters of our model to do well on
the training data. The higher the ratio of parameters pto number
of samples n, the more we expect this overfitting to play a role. Foroverfittingthese data we don’t expect this to be a problem, since p=2and
n= 10,000.
• Second, since only 3.33% of the individuals in the training sample
defaulted, a simple but useless classifier that always predicts that
an individual will not default, regardless of his or her credit card
balance and student status, will result in an error rate of 3.33%. In
other words, the trivial nullclassifier will achieve an error rate thatnullis only a bit higher than the LDA training set error rate.
In practice, a binary classifier such as this one can make two types of
errors: it can incorrectly assign an individual who defaults to the no default
category, or it can incorrectly assign an individual who does not default to
4The careful reader will notice that student status is qualitative — thus, the normality
assumption made by LDA is clearly violated in this example! However, LDA is often
remarkably robust to model violations, as this example shows. Naive Bayes, discussed in
Section4.4.4, provides an alternative to LDA that does not assume normally distributed
predictors.4.4 Generative Models for Classification 153
thedefaultcategory. It is often of interest to determine which of these two
types of errors are being made. A confusion matrix , shown for the Defaultconfusion
matrixdata in Table 4.4, is a convenient way to display this information. The
table reveals that LDA predicted that a total of 104people would default.
Of these people, 81actually defaulted and 23did not. Hence only 23out
of9,667of the individuals who did not default were incorrectly labeled.
This looks like a pretty low error rate! However, of the 333individuals who
defaulted, 252(or75.7%) were missed by LDA. So while the overall error
rate is low, the error rate among individuals who defaulted is very high.
From the perspective of a credit card company that is trying to identify
high-risk individuals, an error rate of 252/333 = 75 .7% among individuals
who default may well be unacceptable.
Class-specific performance is also important in medicine and biology,
where the terms sensitivity andspecificity characterize the performance ofsensitivity
specificitya classifier or screening test. In this case the sensitivity is the percent-
age of true defaulters that are identified; it equals 24.3%. The specificity
is the percentage of non-defaulters that are correctly identified; it equals
(1−23/9667) = 99 .8%.
Why does LDA do such a poor job of classifying the customers who de-
fault? In other words, why does it have such low sensitivity? As we have
seen, LDA is trying to approximate the Bayes classifier, which has the low-
esttotalerror rate out of all classifiers. That is, the Bayes classifier will
yield the smallest possible total number of misclassified observations, from incorrectly assigning a customer who does not default to the
default class, and others will result from incorrectly assigning a customer
who defaults to the non-default class. In contrast, a credit card company
might particularly wish to avoid incorrectly classifying an individual who
will default, whereas incorrectly classifying an individual who will not de-
fault, though still to be avoided, is less problematic. We will now see that it
is possible to modify LDA in order to develop a classifier that better meets
the credit card company’s needs.
The Bayes classifier works by assigning an observation to the class for
which the posterior probability pk(X)is greatest. In the two-class case, this
amounts to assigning an observation to the defaultclass if
Pr(default =Yes|X=x)>0.5. (4.26)
Thus, the Bayes classifier, and by extension LDA, uses a threshold of 50%
for the posterior probability of default in order to assign an observation
to thedefaultclass. However, if we are concerned about incorrectly pre-
dicting the default status for individuals who default, then we can consider
lowering this threshold. For instance, we might label any customer with a
posterior probability of default above 20% to the defaultclass. In other
words, instead of assigning an observation to the defaultclass if ( 4.26)
holds, we could instead assign an observation to this class if
Pr(default =Yes|X=x)>0.2. 4.5.
Now LDA predicts that 430individuals will default. Of the 333individuals
who default, LDA correctly predicts all but 138, or41.4%. This is a vast154 4. Classification
True default status
No Yes Total
Predicted No9432 138 9570
default status Yes235 195 430
Total9667 333 10000
TABLE 4.5. A confusion matrix compares the LDA predictions to the true
default statuses for the 10,000training observations in the Default data set,
using a modified threshold value that predicts default for any individuals whose
posterior default probability exceeds 20%.
0.00.10.20.30.40.50.0 0.2 0.4 0.6ThresholdError RateFIGURE 4.7.For theDefaultdata set, error rates are shown as a function ofthe threshold value for the posterior probability that is used to perform the assign-ment. The black solid line displays the overall error rate. The blue dashed linerepresents the fraction of defaulting customers that are incorrectly classified, andthe orange dotted line indicates the fraction of errors among the non-defaultingcustomers.improvement over the error rate of75.7% that resulted from using thethreshold of50%. However, this improvement comes at a cost: now235individuals who do not default are incorrectly classified. As a result, slightincreasein thetotalerror ratetobe asmallprice topay for more accurate identification of individuals who do indeed value for the posterior probability of default. Various error rates areshown as a function of the threshold value. Using a threshold of0.5, as in(4.26), minimizes the overall error rate, shown as a black solid line. Thisis to be expected, since the Bayes classifier uses a threshold of0.5and isknown to have the lowest overall error rate. But when a threshold of0.5isused, the error rate among the individuals who default is quite high (bluedashed line). As the threshold is reduced, the error rate among individualswho default decreases steadily, but the error rate among the individualswho do not default increases. How can we decide which threshold value isbest? Such a decision must be based ondomain knowledge, such as detailedinformation about the costs associated with default.TheROC curveis a popular graphic for simultaneously displaying theROC curvetwo types of errors for all possible thresholds. The name “ROC” is historic,and comes from communications theory. It is an acronym forreceiver op-erating characteristics. Figure4.8displays the ROC curve for the LDAclassifier on the training data. The overall performance of a classifier, sum-4.4 Generative Models for Classification 155ROC Curve
False positive rateTrue positive rate0.0 0.2 0.4 0.6 0.8 1.00.0 0.2 0.4 0.6 0.8 1.0FIGURE 4.8. A ROC curve for the LDA classifier on the Default data. It
traces out two types of error as we vary the threshold value for the posterior
probability of default. The actual thresholds are not shown. The true positive rate
is the sensitivity: the fraction of defaulters that are correctly identified, using
a given threshold value. The false positive rate is 1-specificity: the fraction of
non-defaulters that we classify incorrectly as defaulters, using that same threshold
value. The ideal ROC curve hugs the top left corner, indicating a high true positive
rate and a low false positive rate. The dotted line represents the “no information”
classifier; this is what we would expect if student status and credit card balance
are not associated with probability of default.
marized over all possible thresholds, is given by the area under the (ROC)
curve(AUC). under
the (ROC)
curvethe AUC the better the classifier. For this data the AUC is 0.95, which is
close to the maximum of 1.0, so would be considered very good. We expect
a classifier that performs no better than chance to have an AUC of 0.5
(when evaluated on an independent test set not used in model training).
ROC curves are useful for comparing different classifiers, since they take
into account all possible thresholds. It turns out that the ROC curve for
the logistic regression model of Section 4.3.4fit to these data is virtually
indistinguishable from this one for the LDA model, so we do not display it
here.
As we have seen above, varying the classifier threshold changes its true
positive and false positive rate. These are also called the sensitivity and onesensitivityminus the specificity of our classifier. Since there is an almost bewilderingspecificityarray of terms used in this context, we now give a summary. Table 4.6
shows the possible results when applying a classifier (or diagnostic test)
to a population. To make the connection with the epidemiology literature,
we think of “+” as the “disease” that we are trying to detect, and “ −” as
the “non-disease” state. To make the connection to the classical hypothesis
testing literature, we think of “ −” as the null hypothesis and “+” as the156 4. Classification
True class
−or Null +or Non-null Total
Predicted −or Null True Neg. (TN) False Neg. (FN) N∗
class +or Non-null False Pos. (FP) True Pos. (TP) P∗
Total N P
TABLE 4.6. Possible results when applying a classifier or diagnostic test to a
population.
Name Definition Synonyms
False Pos. rate FP/NType I error, 1 −Specificity
True Pos. rate TP/P1−Type II error, power, sensitivity, recall
Pos. Pred. value TP/P∗Precision, 1 −false discovery proportion
Neg. Pred. value TN/N∗
TABLE 4.7. quantities in Table 4.6.
alternative (non-null) hypothesis. In the context of the Defaultdata, “+”
indicates an individual who defaults, and “ −” indicates one who does context. The denominators for the false positive and true positive the positive predictive value and the negative predictive value are the
total predicted counts for each class.
4.4.3 Quadratic Discriminant Analysis
As we have discussed, LDA assumes that the observations within each class
are drawn from a multivariate Gaussian distribution with a class-specific
mean vector and a covariance matrix that is common to all Kclasses.
Quadratic discriminant analysis (QDA) provides an alternative approach.quadratic
discriminant
analysisLike LDA, the QDA classifier results from assuming that the observations
from each class are drawn from a Gaussian distribution, and plugging es-
timates for the parameters into Bayes’ theorem in order to perform pre-
diction. However, unlike LDA, QDA assumes that each class has its own
covariance matrix. That is, it assumes that an observation from the kth
class is of the form X∼N(µk,Σk), whereΣkis a covariance matrix for
thekth class. Under this assumption, the Bayes classifier assigns an obser-
vationX=xto the class for logπk
(4.28)
is largest. So the QDA classifier involves plugging estimates for Σk,µk,
andπkinto (4.28), and then assigning an observation X=xto the class
for which this quantity is largest. Unlike in ( 4.24), the quantity xappears
as aquadratic function in ( 4.28). This is where QDA gets its name.
Why does it matter whether or not we assume that the Kclasses share a
common covariance matrix? In other words, why would one prefer LDA to4.4 Generative Models for Classification 157
−4 −2 0 2 4−4 −3 −2 −1 0 1 2−4 −2 0 2 4−4 −3 −2 −1 0 1 2X1X1
X2X2
FIGURE 4.9. Left:The Bayes (purple dashed), LDA (black dotted), and QDA
(green solid) decision boundaries for a two-class problem with Σ1=Σ2. The
shading indicates the QDA decision rule. Since the Bayes decision boundary is
linear, it is more accurately approximated by LDA than by QDA. Right:Details
are as given in the left-hand panel, except that Σ1/negationslash=Σ2. Since the Bayes decision
boundary is non-linear, it is more accurately approximated by QDA than by LDA.
QDA, or vice-versa? The answer lies in the bias-variance trade-off. When
there are ppredictors, then estimating a covariance matrix requires esti-
matingp(p+1)/2parameters. QDA estimates a separate covariance matrix
for each class, for a total of Kp(p+1)/2parameters. With 50 predictors this
is some multiple of 1,275, which is a lot of parameters. By instead assum-
ing that the Kclasses share a common covariance matrix, the LDA model
becomes linear in x, which means there are Kplinear coefficients to esti-
mate. Consequently, LDA is a much less flexible classifier than QDA, and
so has substantially lower variance. This can potentially lead to improved
prediction performance. But there is a trade-off: if LDA’s assumption that
theKclasses share a common covariance matrix is badly off, then LDA
can suffer from high bias. Roughly speaking, LDA tends to be a better bet
than QDA if there are relatively few training observations and so reducing
variance is crucial. In contrast, QDA is recommended if the training set is
very large, so that the variance of the classifier is not a major concern, or if
the assumption of a common covariance matrix for the Kclasses is the left-hand panel, the two Gaussian classes have a common correla-
tion of0.7between X1andX2. As a result, the Bayes decision boundary
is linear and is accurately approximated by the LDA decision boundary.
The QDA decision boundary is inferior, because it suffers from higher vari-
ance without a corresponding decrease in bias. In contrast, the right-hand
panel displays a situation in which the orange class has a correlation of 0.7
between the variables and the blue class has a correlation of −0.7. Now
the Bayes decision boundary is quadratic, and so QDA more accurately
approximates this boundary than does LDA.158 4. Classification
4.4.4 Naive Bayes
In previous sections, we used Bayes’ theorem ( 4.15) to develop the LDA
and QDA classifiers. Here, we use Bayes’ theorem to motivate the popular
naive Bayes classifier.naive BayesRecall that Bayes’ theorem ( 4.15) provides an expression for the pos-
terior probability pk(x) = Pr( Y=k|X=x)in terms of π1,...,πKand
f1(x),...,f K(x).Touse( 4.15)inpractice,weneedestimatesfor π1,...,πK
andf1(x),...,f K(x). As we saw in previous sections, estimating the prior
probabilities π1,...,πKis typically straightforward: for instance, we can
estimate ˆπkas the proportion of training observations belonging to the kth
class, for k=1,...,K .
However, estimating f1(x),...,f K(x)is more subtle. Recall that fk(x)
is thep-dimensional density function for an observation in the kth class,
fork=1,...,K . In general, estimating a p-dimensional density function is
challenging. In LDA, we make a very strong assumption that greatly sim-
plifies the task: we assume that fkis the density function for a multivariate
normal random variable with class-specific mean µk, and shared covariance
matrixΣ. By contrast, in QDA, we assume that fkis the density function
for a multivariate normal random variable with class-specific mean µk, and
class-specific covariance matrix Σk. By making these very strong assump-
tions, we are able to replace the very challenging problem of estimating K
p-dimensional density functions with the much simpler problem of estimat-
ingKp-dimensional mean vectors and one (in the case of LDA) or K(in
the case of QDA) (p×p)-dimensional covariance matrices.
The naive Bayes classifier takes a different tack for estimating f1(x),...,
fK(x). Instead of assuming that these functions belong to a particular
family of distributions (e.g. multivariate normal), we instead make a single
assumption:
Within the kth class, the ppredictors are independent.
Stated mathematically, this assumption means that for k=1,...,K ,
fk(x)=fk1(x1)×fk2(x2)×···×fkp(xp), (4.29)
wherefkjis the density function of the jth predictor among observations
in thekth class.
Why is this assumption so powerful? Essentially, estimating a p-dimen-
sional density function is challenging because we must consider not only
themarginal distribution of each predictor — that is, the distribution ofmarginal
distributioneach predictor on its own — but also the joint distribution of the predictors
joint
distribution— that is, the association between the different predictors. In the case of
a multivariate normal distribution, the association between the different
predictors is summarized by the off-diagonal elements of the covariance
matrix. However, in general, this association can be very hard to charac-
terize, and exceedingly challenging to estimate. But by assuming that the
pcovariates are independent within each class, we completely eliminate the
need to worry about the association between the ppredictors, because we
have simply assumed that there is noassociation between the predictors!
Do we really believe the naive Bayes assumption that the pcovariates
are independent within each class? In most settings, we do not. But even
though this modeling assumption is made for convenience, it often leads to4.4 Generative Models for Classification 159
prettydecentresults, especially in settings where nis not large enough rela-
tive topfor us to effectively estimate the joint distribution of the predictors
within each class. In fact, since estimating a joint distribution requires such
a huge amount of data, naive Bayes is a good choice in a wide range of set-
tings. Essentially, the naive Bayes assumption introduces some bias, but
reduces variance, leading to a classifier that works quite well in practice as
a result of the bias-variance trade-off.
Once we have made the naive Bayes assumption, we can plug ( 4.29) into
(4.15) to obtain an expression for the posterior .
To estimate the one-dimensional density function fkjusing training data
x1j,...,x nj, we have a few options.
• IfXjisquantitative,thenwecanassumethat Xj|Y=k∼N(µjk,σ2
jk).
In other words, we assume that within each class, the jth predictor is
drawn from a (univariate) normal distribution. While this may sound
a bit like QDA, there is one key difference, in that here we are assum-
ing that the predictors are independent; this amounts to QDA with
an additional assumption that the class-specific covariance matrix is
diagonal.
• IfXjis quantitative, then another option is to use a non-parametric
estimate for fkj. A very simple way to do this is by making a his-
togram for the observations of the jth predictor within each class.
Then we can estimate fkj(xj)as the fraction of the training obser-
vations in the kth class that belong to the same histogram bin as
xj. Alternatively, we can use a kernel density estimator , which iskernel
density
estimatoressentially a smoothed version of a histogram.
• IfXjis qualitative, then we can simply count the proportion of train-
ing observations for the jth predictor corresponding to each class. For
instance, suppose that Xj∈{1,2,3}, and we have 100observations
in thekth class. Suppose that the jth predictor takes on values of 1,
2, and3in 32, 55, and 13 of those observations, respectively. Then
we can estimate fkjas
ˆfkj(xj)=

0.32 ifxj=1
0.55 ifxj=2
0.13 ifxj=3.
We now consider the naive Bayes classifier in a toy example with p=3
predictors and K=2 classes. The first two predictors are quantitative,
and the third predictor is qualitative with three levels. Suppose further
thatˆπ1=ˆπ2=0.5. The estimated density functions ˆfkjfork=1,2
andj=1,2,3are displayed in Figure 4.10. Now suppose that we wish
to classify a new observation, x∗= (0 .4,1.5,1)T. It turns out that in this160 4. Classification
Density estimates for class k=1
ˆf11ˆf12ˆf13
−4 −2 0 2 4
Frequency−2 0 2 4123Density estimates for class k=2
ˆf21ˆf22ˆf23
−4 −2 0 2 4
Frequency−2 0 2 4123FIGURE 4.10. In the toy example in Section 4.4.4, we generate data with p=3
predictors and K=2classes. The first two predictors are quantitative, and the
third predictor is qualitative with three levels. In each class, the estimated density
for each of the three predictors is displayed. If the prior probabilities for the two
classes are equal, then the observation x∗= (0.4,1.5,1)Thas a94.4%posterior
probability of belonging to the first class.
True default status
No Yes Total
Predicted No9621 244 9865
default status Yes46 89 135
Total9667 333 10000
TABLE 4.8. Comparison of the naive Bayes predictions to the true default
status for the 10,000training observations in the Default data set, when we
predict default for any observation for which P(Y=default|X=x)>0.5.
example, ˆf11(0.4) = 0.368,ˆf12(1.5) = 0.484,ˆf13(1) = 0.226, andˆf21(0.4) =
0.030,ˆf22(1.5) = 0.130,ˆf23(1) = 0.616.Pluggingtheseestimatesinto( 4.30)
results in posterior probability estimates of classifier to the Defaultdata set, where we predict a default if the
posterior probability of a default — that is, P(Y=default|X=x)— ex-
ceeds0.5. Comparing this to the results for LDA in Table 4.4, our findings
are mixed. While LDA has a slightly lower overall error rate, naive Bayes4.5 A Comparison of Classification Methods 161
True default status
No Yes Total
Predicted No9339 130 9469
default status Yes328 203 531
Total9667 333 10000
TABLE 4.9. Comparison of the naive Bayes predictions to the true default
status for the 10,000training observations in the Default data set, when we
predict default for any observation for which P(Y=default|X=x)>0.2.
correctly predicts a higher fraction of the true defaulters. In this implemen-
tation of naive Bayes, we have assumed that each quantitative predictor is
drawn from a Gaussian distribution (and, of course, that within each class,
each predictor is independent).
Just as with LDA, we can easily adjust the probability threshold for
predicting a default. For example, Table 4.9provides the confusion matrix
resulting from predicting a default if P(Y=default|X=x)>0.2. Again,
the results are mixed relative to LDA with the same threshold (Table the true defaults.
In this example, it should not be too surprising that naive Bayes does
not convincingly outperform LDA: this data set has n= 10,000andp=2,
and so the reduction in variance resulting from the naive Bayes assumption
is not necessarily worthwhile. We expect to see a greater pay-off to using
naive Bayes relative to LDA or QDA in instances where pis larger or nis
smaller, so that reducing the variance is very important.
4.5 A Comparison of Classification Methods
4.5.1 An Analytical Comparison
Wenowperforman analytical (ormathematical)comparisonofLDA,QDA,
naive Bayes, and logistic regression. We consider these approaches in a
setting with Kclasses, so that we assign an observation to the class that
maximizes Pr(Y=k|X=x). Equivalently, we can set Kas thebaseline
class and assign an observation to the class that Examining the specific form of ( 4.31) for each method
provides a clear understanding of their similarities and differences.
First, for LDA, we can make use of Bayes’ theorem ( 4.15) as well as
the assumption that the predictors within each class are drawn from a
multivariate normal density ( 4.23) with class-specific mean and shared co-162 4. Classification
variance matrix in order to show (4.32)
whereak= thejth
component of Σ−1(µk−µK). Hence LDA, like logistic regression, assumes
that the log odds of the posterior probabilities is linear in x.
Using similar calculations, in the QDA setting ( 4.31) andckjlare functions of πk,πK,µk,µK,ΣkandΣK. Again,
as the name suggests, QDA assumes that the log odds of the posterior
probabilities is quadratic in x.
Finally, we examine ( 4.31) in the naive Bayes setting. Recall that in
this setting, fk(x)is modeled as a product of pone-dimensional functions
fkj(xj)forj=1,...,p . (4.34)
whereak= = Hence, the right-hand
side of (4.34) takes the form of a generalized additive model , a topic that is
discussed further in Chapter 7.4.5 A Comparison of Classification Methods 163
Inspection of ( 4.32), (4.33), and (4.34) yields the following observations
about LDA, QDA, and naive Bayes:
• LDA is a special case of QDA with ckjl=0 for allj=1,...,p ,
l=1,...,p , andk=1,...,K . (Of course, this is not surprising, since
LDAissimplyarestrictedversionofQDAwith Σ1=···=ΣK=Σ.)
• with gkj(xj)= bkjxj. In particular, this means that LDA is
a special case of naive Bayes! This is not at all obvious from the
descriptions of LDA and naive Bayes earlier in this chapter, since
each method makes very different assumptions: LDA assumes that
the features are normally distributed with a common within-class
covariance matrix, and naive Bayes instead assumes independence of
the features.
• If we model fkj(xj)in the naive Bayes classifier using a one-dimensio-
nal Gaussian distribution N(µkj,σ2
j), then we end up with special case of LDA with Σrestricted to be a diagonal matrix with
jth diagonal element equal to σ2
j.
• Neither QDA nor naive Bayes is a special case of the other. Naive
Bayes can produce a more flexible fit, since any choice can be made
forgkj(xj). However, it is restricted to a purely additive fit, in the
sense that in ( 4.34), a function of xjisaddedto a function of xl, for
j/negationslash=l; however, these terms are never multiplied. By contrast, QDA
includes multiplicative terms of the form ckjlxjxl. Therefore, QDA
has the potential to be more accurate in settings where of these methods uniformly dominates the others: in any setting, the
choice of method will depend on the true distribution of the predictors in
each of the Kclasses, as well as other considerations, such as the values of
nandp. The latter ties into the bias-variance trade-off.
How does logistic regression tie into this story? Recall from ( 4.12) that
multinomial logistic regression takes the is identical to the linear form of LDA ( 4.32): in both a linear function of the predictors. In LDA, the co-
efficients in this linear function are functions of estimates for πk,πK,µk,
µK, andΣobtained by assuming that X1,...,X pfollow a normal distri-
bution within each class. By contrast, in logistic regression, the coefficients
are chosen to maximize the likelihood function ( 4.5). Thus, we expect LDA
to outperform logistic regression when the normality assumption (approxi-
mately) holds, and we expect logistic regression to perform better when it
does not.164 4. Classification
We close with a brief discussion of K-nearest neighbors (KNN), intro-
duced in Chapter 2. Recall that KNN takes a completely different approach
from the classifiers seen in this chapter. In order to make a prediction for
an observation X=x, the training observations that are closest to xare
identified. Then Xis assigned to the class to which the plurality of these
observations belong. Hence KNN is a completely non-parametric approach:
no assumptions are made about the shape of the decision boundary. We
make the following observations about KNN:
• Because KNN is completely non-parametric, we can expect this ap-
proach to dominate LDA and logistic regression when the decision
boundary is highly non-linear, provided that nis very large and pis
small.
• In order to provide accurate classification, KNN requires a lotof nmuchlarger
thanp. This has to do with the fact that KNN is non-parametric, and
thus tends to reduce the bias while incurring a lot of variance.
• In settings where the decision boundary is non-linear but nis only
modest, or pis not very small, then QDA may be preferred to KNN.
This is because QDA can provide a non-linear decision boundary
while taking advantage of a parametric form, which means that it
requires a smaller sample size for accurate classification, relative to
KNN.
• Unlike logistic regression, KNN does not tell us which predictors are
important: we don’t get a table of coefficients as in Table 4.3.
4.5.2 An Empirical Comparison
We now compare the empirical (practical) performance of logistic regres-
sion, LDA, QDA, naive Bayes, and KNN. We generated data from six dif-
ferent scenarios, each of which involves a binary (two-class) classification
problem. In three of the scenarios, the Bayes decision boundary is linear,
and in the remaining scenarios it is non-linear. For each scenario, we pro-
duced100random training data sets. On each of these training sets, we
fit each method to the data and computed the resulting test error rate on
a large test set. Results for the linear scenarios are shown in Figure 4.11,
and the results for the non-linear scenarios are in Figure 4.12. The KNN
method requires selection of K, the number of neighbors (not to be con-
fused with the number of classes in earlier sections of this chapter). We
performed KNN with two values of K:K=1, and a value of Kthat was
chosen automatically using an approach called cross-validation , which we
discuss further in Chapter 5. We applied naive Bayes assuming univariate
Gaussian densities for the features within each class (and, of course — since
this is the key characteristic of naive Bayes — assuming independence of
the features).
In each of the six scenarios, there were p=2 quantitative predictors.
The scenarios were as follows:4.5 A Comparison of Classification Methods 165KNN−1KNN−CVLDALogisticNBayesQDASCENARIO 10.25 0.30 0.35 0.40 0.45
KNN−1KNN−CVLDALogisticNBayesQDASCENARIO 20.15 0.20 0.25 0.30
KNN−1KNN−CVLDALogisticNBayesQDASCENARIO 30.20 0.25 0.30 0.35 0.40 0.45 0.50FIGURE 4.11. Boxplots of the test error rates for each of the linear scenarios
described in the main text.
Scenario 1: There were 20training observations in each of two classes. The
observations within each class were uncorrelated random normal 4.11shows
that LDA performed well in this setting, as one would expect since this is
the model assumed by LDA. Logistic regression also performed quite also performed worse than LDA, since it fit a more flexible classifier
than necessary. The performance of naive Bayes was slightly better than
QDA, because the naive Bayes assumption of independent predictors is
correct.
Scenario 2: Details are as in Scenario 1, except that within each class, the
two predictors had a correlation of −0.5. The center panel of Figure 4.11
indicates that the performance of most methods is similar to the previ-
ous scenario. The notable exception is naive Bayes, which performs very
poorly here, since the naive Bayes assumption of independent predictors is
violated.
Scenario 3: As in the previous scenario, there is substantial negative cor-
relation between the predictors within each class. However, this time we
generated X1andX2fromthe t-distribution ,with50observationsperclass.t-
distribution Thet-distribution has a similar shape to the normal distribution, but it
has a tendency to yield more extreme points—that is, more points that are
far from the mean. In this setting, the decision boundary was still linear,
and so fit into the logistic regression framework. The set-up violated the
assumptions of LDA, since the observations were not drawn from a normal
distribution. The right-hand panel of Figure 4.11shows that logistic regres-
sion outperformed LDA, though both methods were superior to the other
approaches. In particular, the QDA results deteriorated considerably as a
consequence of non-normality. Naive Bayes performed very poorly because
the independence assumption is violated.
Scenario 4: The data were generated from a normal distribution, with a
correlation of 0.5between the predictors in the first class, and correlation QDA assumption, and resulted in quadratic decision boundaries. The
left-hand panel of Figure 4.12shows that QDA outperformed all of the166 4. 50.18 0.20 0.22 0.24 0.26 0.28 0.30 0.32
KNN−1KNN−CVLDALogisticNBayesQDASCENARIO 60.15 0.20 0.25 0.30 0.35 0.40 0.45FIGURE 4.12. Boxplots of the test error rates for each of the non-linear
scenarios described in the main text.
other approaches. The naive Bayes assumption of independent predictors
is violated, so naive Bayes performs poorly.
Scenario 5: The data were generated from a normal distribution with un-
correlated predictors. Then the responses were sampled from the logistic
function applied to a complicated non-linear function of the predictors. The
center panel of Figure 4.12shows that both QDA and naive Bayes gave
slightly better results than the linear methods, while the much more flexi-
ble KNN-CV method gave the best results. But KNN with K=1gave exhibits a complex non-linear relationship, a non-parametric method
such as KNN can still give poor results if the level of smoothness is not
chosen correctly.
Scenario 6: The observations were generated from a normal distribution
with a different diagonal covariance matrix for each class. However, the
sample size was verysmall: just n=6in each class. Naive Bayes performed
very well, because its assumptions are met. LDA and logistic regression
performed poorly because the true decision boundary is non-linear, due to
the unequal covariance matrices. QDA performed a bit worse than naive
Bayes, because given the very small sample size, the former incurred too
much variance in estimating the correlation between the predictors within
each class. KNN’s performance also suffered due to the very small sample
size.
These six examples illustrate that no one method will dominate the oth-
ers in every situation. When the true decision boundaries are linear, boundaries are moderately non-linear, QDA or naive Bayes may give
better results. Finally, for much more complicated decision boundaries, a
non-parametric approach such as KNN can be superior. But the level of
smoothness for a non-parametric approach must be chosen carefully. In the
next chapter we examine a number of approaches for choosing the correct
level of smoothness and, in general, for selecting the best overall method.
Finally,recallfromChapter 3thatintheregressionsettingwecanaccom-
modate a non-linear relationship between the predictors and the response
by performing regression using transformations of the predictors. A similar
approach could be taken in the classification setting. For instance, we could4.6 Generalized Linear Models 167
Coefficient Std. error t-statistic p-value
Intercept 73.60 5.13 14.34 0.00
workingday 1.27 1.78 0.71 0.48
temp 157.21 10.26 15.32 0.00
weathersit[cloudy/misty] -12.89 1.96 -6.56 0.00
weathersit[light rain/snow] -66.49 2.97 -22.43 0.00
weathersit[heavy rain/snow] -109.75 76.67 -1.43 0.15
TABLE 4.10. Results for a least squares linear model fit to predict bikersin
theBikeshare data. The predictors mnthandhrare omitted from this table due
to space constraints, and can be seen in Figure 4.13. For the qualitative variable
weathersit , the baseline level corresponds to clear skies.
create a more flexible version of logistic regression by including X2,X3,
and even X4as predictors. This may or may not improve logistic regres-
sion’s performance, depending on whether the increase in variance due to
the added flexibility is offset by a sufficiently large reduction in bias. We
could do the same for LDA. If we added all possible quadratic terms and
cross-products to LDA, the form of the model would be the same as the
QDA model, although the parameter estimates would be different. This
device allows us to move somewhere between an LDA and a QDA model.
4.6 Generalized Linear Models
In Chapter 3, we assumed that the response Yis quantitative, and ex-
plored the use of least squares linear regression to predict Y. Thus far in
this chapter, we have instead assumed that Yis qualitative. However, we
may sometimes be faced with situations in which Yis neither qualitative
nor quantitative, and so neither linear regression from Chapter 3nor the
classification approaches covered in this chapter is applicable.
As a concrete example, we consider the Bikeshare data set. The response
isbikers, the number of hourly users of a bike sharing program in Wash-
ington, DC. This response value is neither qualitative nor quantitative:
instead, it takes on non-negative integer values, or counts. We will considercountspredicting bikersusing the covariates mnth(month of the year), hr(hour
of the day, from 0 to 23), workingday (an indicator variable that equals 1if
it is neither a weekend nor a holiday), temp(the normalized temperature,
in Celsius), and weathersit (a qualitative variable that takes on one of four
possible values: clear; misty or cloudy; light rain or light snow; or heavy
rain or heavy snow.)
In the analyses that follow, we will treat mnth,hr, andweathersit as
qualitative variables.
4.6.1 Linear Regression on the Bikeshare Data
To begin, we consider predicting bikersusing linear regression. The results
are shown in Table 4.10.
We see, for example, that a progression of weather from clear to cloudy
results in, on average, 12.89fewer bikers per hour; however, if the weather
progresses further to rain or snow, then this further results in 53.60fewer
bikers per hour. Figure 4.13displays the coefficients associated with mnth168 4. Classification
FIGURE 4.13. A least squares linear regression model was fit to predict bikers
in theBikeshare data set. Left:The coefficients associated with the month of the
year. Bike usage is highest in the spring and fall, and lowest in the winter. Right:
The coefficients associated with the hour of the day. Bike usage is highest during
peak commute times, and lowest overnight.
and the coefficients associated with hr. We see that bike usage is highest in
the spring and fall, and lowest during the winter months. Furthermore, bike
usage is greatest around rush hour (9 AM and 6 PM), and lowest overnight.
Thus, at first glance, fitting a linear regression model to the Bikeshare data
set seems to provide reasonable and intuitive results.
But upon more careful inspection, some issues become apparent. For
example, 9.6% of the fitted values in the Bikeshare data set are negative:
that is, the linear regression model predicts a negative number of users
during 9.6% of the hours in the data set. This calls into question our ability
to perform meaningful predictions on the data, and it also raises concerns
about the accuracy of the coefficient estimates, confidence intervals, and
other outputs of the regression model.
Furthermore, it is reasonable to suspect that when the expected value
ofbikersis small, the variance of bikersshould be small as well. For
instance, at 2 AM during a heavy December snow storm, we expect that
extremely few people will use a bike, and moreover that there should be
little variance associated with the number of users during those conditions.
This is borne out in the data: between 1 AM and 4 AM, in December,
January, and February, when it is raining, there are 5.05users, on average,
with a standard deviation of 3.73. By contrast, between 7 AM and 10 AM,
in April, May, and June, when skies are clear, there are 243.59users, on
average,withastandarddeviationof 131.7.Themean-variancerelationship
is displayed in the left-hand panel of Figure 4.14. This is a major violation
of the assumptions of a linear model, which state that a mean-zero error term with variance σ2that isconstant, and
not a function of the covariates. Therefore, the heteroscedasticity of the
data calls into question the suitability of a linear regression model.
Finally, the response bikersis integer-valued. But under a linear where/epsilon1is a continuous-valued error term. This
means that in a linear model, the response Yis necessarily continuous-
valued (quantitative). Thus, the integer nature of the response bikerssug-
gests that a linear regression model is not entirely satisfactory for this −20 0 20
MonthCoefficient
JF M A MJJAS O N 0 1 5 2 0−100 0 50 100 200
HourCoefficient4.6 Generalized Linear Models 169
5 10 15 200 100 200 300 400 500 600HourNumber of Bikers5 10 15 200123456HourLog(Number of Bikers)FIGURE 4.14. Left:On theBikeshare dataset, the number of bikers is dis-
played on the y-axis, and the hour of the day is displayed on the x-axis. Jitter
was applied for ease of visualization. For the most part, as the mean number of
bikers increases, so does the variance in the number of bikers. A smoothing spline
fit is shown in green. Right:The log of the number of bikers is now displayed on
they-axis.
Some of the problems that arise when fitting a linear regression model
to theBikeshare data can be overcome by transforming the response; for
instance, we can fit the the response avoids the possibility of negative predictions,
and it overcomes much of the heteroscedasticity in the untransformed data,
as is shown in the right-hand panel of Figure 4.14. However, it is not quite
a satisfactory solution, since predictions and inference are made in terms of
the log of the response, rather than the response. This leads to challenges
in interpretation, e.g. “a one-unit increase in Xjis associated with an
increase in the mean of the log of Yby an amount βj”. Furthermore, a
log transformation of the response cannot be applied in settings where the
response can take on a value of 0. Thus, while fitting a linear model to
a transformation of the response may be an adequate approach for some
count-valued data sets, it often leaves something to be desired. We will see
in the next section that a Poisson regression model provides a much more
natural and elegant approach for this task.
4.6.2 Poisson Regression on the Bikeshare Bikeshare
data set, we will make use of an alternative approach, called Poisson
regression . Before we can talk about Poisson regression, we must first in-Poisson
regressiontroduce the Poisson distribution .
Poisson
distributionSuppose that a random variable Ytakes on nonnegative integer values,
i.e.Y∈{0,1,2,...}. IfYfollows the Poisson distribution, then
Pr(Y=k)=e−λλk
k!fork=0,1,2,.... (4.35)170 4. Classification
Here,λ>0is the expected value of Y, i.e.E(Y). It turns out that λalso
equals the variance of Y, i.e.λ= E( Y) = Var( Y). This means that if Y
follows the Poisson distribution, then the larger the mean of Y, the larger
its variance. (In ( 4.35), the notation k!, pronounced “k factorial”, is defined
ask!=k×(k−1)×(k−2)×...×3×2×1.)
The Poisson distribution is typically used to model counts; this is a nat-
ural choice for a number of reasons, including the fact that counts, like
the Poisson distribution, take on nonnegative integer values. To see how
we might use the Poisson distribution in practice, let Ydenote the num-
ber of users of the bike sharing program during a particular hour of the
day, under a particular set of weather conditions, and during a particu-
lar month of the year. We might model Yas a Poisson distribution with
meanE(Y)= λ=5. This means that the probability of no users dur-
ing this particular hour is Pr(Y= 0) =e−550
0!=e−5=0.0067 (where
0! = 1 by convention). The probability that there is exactly one user
isPr(Y= 1) =e−551
1!=5e−5=0.034, the probability of two users is
Pr(Y= 2) =e−552
2!=0.084, and so on.
Of course, in reality, we expect the mean number of users of the bike
sharing program, λ= E( Y), to vary as a function of the hour of the day,
the month of the year, the weather conditions, and so forth. So rather
than modeling the number of bikers, Y, as a Poisson distribution with a
fixed mean value like λ=5, we would like to allow the mean to vary as a
function of the covariates. In particular, we consider the following model
for the mean λ= E( Y), which we now write as λ(X1,...,X p)to emphasize
that it is a function of the covariates X1,...,X p:
log(λ(X1,...,X p)) = β0+β1X1+···+βpXp (4.36)
or equivalently
λ(X1,...,X p)=eβ0+β1X1+···+βpXp. (4.37)
Here,β0,β1,...,βpare parameters to be estimated. Together, ( 4.35) and
(4.36) define the Poisson regression model. Notice that in ( 4.36), we take
thelogofλ(X1,...,X p)to be linear in X1,...,X p, rather than having
λ(X1,...,X p)itselfbelinearin X1,...,X p;thisensuresthat λ(X1,...,X p)
takes on nonnegative values for all values of the covariates.
To estimate the coefficients β0,β1,...,βp, we use the same maximum
likelihood approach that we adopted for logistic regression in Section 4.3.2.
Specifically, given nindependent observations from the Poisson regression
model, the likelihood takes the (4.38)
whereλ(xi)= eβ0+β1xi1+···+βpxip, due to ( 4.37). We estimate the coef-
ficients that maximize the likelihood /lscript(β0,β1,...,βp), i.e. that make the
observed data as likely as possible.
We now fit a Poisson regression model to the Bikeshare data set. The
results are shown in Table 4.11and Figure 4.15. Qualitatively, the results
are similar to those from linear regression in Section 4.6.1. We again see
that bike usage is highest in the spring and fall and during rush hour,4.6 Generalized Linear Models 171
Coefficient Std. error z-statistic p-value
Intercept 4.12 0.01 683.96 0.00
workingday 0.01 0.00 7.5 0.00
temp 0.79 0.01 68.43 0.00
weathersit[cloudy/misty] -0.08 0.00 -34.53 0.00
weathersit[light rain/snow] -0.58 0.00 -141.91 0.00
weathersit[heavy rain/snow] -0.93 0.17 -5.55 0.00
TABLE 4.11. Results for a Poisson regression model fit to predict bikersin
theBikeshare data. The predictors mnthandhrare omitted from this table due
to space constraints, and can be seen in Figure 4.15. For the qualitative variable
weathersit , the baseline corresponds to clear skies.
FIGURE 4.15. A Poisson regression model was fit to predict bikersin the
Bikeshare data set. Left:The coefficients associated with the month of the year.
Bike usage is highest in the spring and fall, and lowest in the winter. Right:The
coefficients associated with the hour of the day. Bike usage is highest during peak
commute times, and lowest overnight.
and lowest during the winter and in the early morning hours. Moreover,
bike usage increases as the temperature increases, and decreases as the
weather worsens. Interestingly, the coefficient associated with linear regression model.
Some important distinctions between the Poisson regression model and
the linear regression model are as follows:
•Interpretation: To interpret the coefficients in the Poisson regression
model, we must pay close attention to ( 4.37), which states that an
increase in Xjby one unit is associated with a change in E(Y)=λ
by a factor of exp(βj). For example, a change in weather from clear
to cloudy skies is associated with a change in mean bike usage by a
factor of exp(−0.08) = 0 .923, i.e. on average, only 92.3% as many
people will use bikes when it is cloudy relative to when it is clear.
If the weather worsens further and it begins to rain, then the mean
bike usage will further change by a factor of exp(−0.5) = 0 .607, i.e.
on average only 60.7% as many people will use bikes when it is rainy
relative to when it is 0.0 0.2
MonthCoefficient
JF M A MJJAS O N 0 1 5 2 0−2 −10 1
HourCoefficient172 4. Classification
•Mean-variance relationship: As mentioned earlier, under the Poisson
model,λ= E( Y) = Var( Y). Thus, by modeling bike usage with a
Poisson regression, we implicitly assume that mean bike usage in a
given hour equals the variance of bike usage during that hour. By
contrast, under a linear regression model, the variance of bike usage
always takes on a constant value. Recall from Figure 4.14that in the
Bikeshare data, when biking conditions are favorable, both the mean
andthe variance in bike usage are much higher than when conditions
are unfavorable. Thus, the Poisson regression model is able to handle
the mean-variance relationship seen in the Bikeshare data in a way
that the linear regression model is not.5
overdispersion
•nonnegative fitted values: There are no negative predictions using the
Poisson regression model. This is because the Poisson model itself
only allows for nonnegative values; see ( 4.35). By contrast, when we
fit a linear regression model to the Bikeshare data set, almost 10% of
the predictions were negative.
4.6.3 Generalized Linear Models in Greater Generality
We have now discussed three types of regression models: linear, logistic and
Poisson. These approaches share some common characteristics:
1. Each approach uses predictors X1,...,X pto predict a response Y.
We assume that, conditional on X1,...,X p,Ybelongs to a certain
family of distributions. Forlinear regression, wetypicallyassume that
Yfollows a Gaussian or normal distribution. For logistic regression,
weassumethat we assume that Yfollows a Poisson distribution.
2. Each approach models the mean of Yas a function of the predictors.
In linear regression, the mean of Ytakes the form
E(Y|X1,...,X p)=β0+β1X1+···+βpXp, (4.39)
i.e. it is a linear function of the predictors. For logistic regression, the
mean instead takes the form
E(Y|X1,...,X p) = Pr( Y=1|X1,...,X p)
=eβ0+β1X1+···+βpXp
1+eβ0+β1X1+···+βpXp, (4.40)
while for Poisson regression it takes the form
E(Y|X1,...,X p)=λ(X1,...,X p)=eβ0+β1X1+···+βpXp.(4.41)
Equations ( 4.39)–(4.41) can be expressed using a link function ,η, whichlink function
5In fact, the variance in the Bikeshare data appears to be much higher than the
mean, a situation referred to as overdispersion . This causes the Z-values to be inflated
in Table 4.11. A more careful analysis should account for this overdispersion to obtain
more accurate Z-values, and there are a variety of methods for doing this. But they are
beyond the scope of this book.4.7 Lab: Logistic Regression, LDA, QDA, and KNN 173
applies a transformation to E(Y|X1,...,X p)so that the transformed mean
is a linear function of the predictors. That is,
η(E(Y|X1,...,X p)) = β0+β1X1+···+βpXp. (4.42)
The link functions for linear, logistic and Poisson regression are η(µ)=µ,
η(µ) = log( µ/(1−µ)), andη(µ) = log( µ), respectively.
The Gaussian, Bernoulli and Poisson distributions are all members of a
wider class of distributions, known as the exponential family . Other well-exponential
familyknown members of this family are the exponential distribution, the Gamma
exponential
Gammadistribution, and the negative binomial distribution. In general, we can per-
negative
binomialform a regression by modeling the response Yas coming from a particular
member of the exponential family, and then transforming the mean of the
response so that the transformed mean is a linear function of the predictors
via (4.42). Any regression approach that follows this very general recipe is
knownas a generalized linear model (GLM). Thus,linear regression, logisticgeneralized
linear modelregression, and Poisson regression are three examples of GLMs. Other ex-
amples not covered here include Gamma regression andnegative binomial
regression .
4.7 Lab: Logistic Regression, LDA, QDA, and
KNN
4.7.1 The Stock Market Data
In this lab we will examine the Smarket data, which is part of the ISLP
library. This data set consists of percentage returns for the S&P 500 stock
index over 1,250 days, from the beginning of 2001 until the end of 2005.
For each date, we have recorded the percentage returns for each of the five
previous trading days, Lag1through Lag5. We have also recorded Volume
(the number of shares traded on the previous day, in billions), Today(the
percentage return on the date in question) and Direction (whether the
market was UporDownon this date).
We start by importing our libraries at this top level; these are all imports
we have seen in previous labs.
In[1]: import numpy as np
import pandas as pd
from matplotlib.pyplot import subplots
import statsmodels.api as sm
from ISLP import load_data
from ISLP.models import (ModelSpec as MS,
summarize)
We also collect together the new imports needed for this lab.
In[2]: from ISLP import confusion_table
from ISLP.models import contrast
from sklearn.discriminant_analysis import \
(LinearDiscriminantAnalysis as LDA,
QuadraticDiscriminantAnalysis as QDA)
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler174 4. Classificationfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LogisticRegressionNow we are ready to load theSmarketdata.In[3]:Smarket = load_data('Smarket')SmarketThis gives a truncated listing of the data, which we do not show here. Wecan see what the variable names compute the correlation matrix using thecorr()method for data.corr()frames, which produces a matrix that contains all of the pairwise corre-lations among the variables. (We suppress the output here.) Thepandaslibrary does not report a correlation for theDirectionvariable because itis qualitative.In[5]:Smarket.corr()As one would expect, the correlations between the lagged return variablesand today’s return are close to zero. The only substantial correlation isbetweenYearandVolume. By plotting the data we see thatVolumeis in-creasing over time. In other words, the average number of shares tradeddaily increased from 2001 to 2005.In[6]:Smarket.plot(y='Volume');4.7.2 Logistic RegressionNext, we will fit a logistic regression model in order to Thesm.GLM()function fitsgener-sm.GLM()alized linear models, a class of models that includes logistic regression.generalizedlinear modelAlternatively, the functionsm.Logit()fits a logistic regression model di-rectly. The syntax ofsm.GLM()is similar to that ofsm.OLS(), except thatwe must pass in the argumentfamily=sm.families.Binomial()in order totellstatsmodelsto run a logistic regression rather than some other type ofgeneralized linear model.In[7]:allvars = = MS(allvars)X=d e s i g n . f i t _ t r a n s f o r m ( S m a r k e t )y=S m a r k e t . D i r e c t i o n= ='Up'glm = = glm.fit()summarize(results)4.7 Lab: Logistic Regression, LDA, QDA, and KNN 175Out[7]:coef std err z P>|z|intercept -0.1260 0.241 -0.523 0.601Lag1 -0.0731 0.050 -1.457 0.145Lag2 -0.0423 0.050 -0.845 0.398Lag3 0.0111 0.050 0.222 0.824Lag4 0.0094 0.050 0.187 0.851Lag5 0.0103 0.050 0.208 0.835Volume 0.1354 0.158 0.855 0.392The smallestp-value here is associated withLag1. The negative it is less likely to go up today. However, at a value of 0.15, thep-valueis still relatively large, and so there is no clear evidence of a real associationbetweenLag1andDirection.We use theparamsattribute ofresultsin order to access just the coeffi-cients for this fitted model.In[8]:results.paramsOut[8]:intercept -0.126000Lag1 -0.073074Lag2 0.135441dtype: float64Likewise we can use thepvaluesattribute to access thep-values for thecoefficients (not ofresultscan be used to predict the probabilitythat the market will go up, given values of the predictors. This methodreturns predictions on the probability scale. If no data set is supplied tothepredict()function, then the probabilities are computed for the train-ing data that was used to fit the logistic regression model. As with linearregression, one can pass an optionalexogargument consistent with a designmatrix if desired. Here we have printed only the first ten probabilities.In[10]:probs = 0.4814679, 0.4811388, 0.5152223, 0.5107812,0.5069565, 0.4926509, 0.5092292, 0.5176135, 0.4888378])In order to make a prediction as to whether the market will go up ordown on a particular day, we must convert these predicted probabilitiesinto class labels,UporDown. The following two commands create a vectorof class predictions based on whether the predicted probability of a marketincrease is greater than or less than 0.5.In[11]:labels = np.array(['Down']*1250)labels[probs>0.5] ="Up"176 4. ClassificationTheconfusion_table()function from theISLPpackage summarizes theseconfusion_table()predictions, showing how many observations were correctly or incorrectlyclassified. Our function, which is adapted from a similar function in themodulesklearn.metrics, transposes the resulting matrix and includes rowand column labels. Theconfusion_table()function takes as first argumentthe predicted labels, and second argument the true labels.In[12]:confusion_table(labels, Smarket.Direction)Out[12]:Truth Down UpPredictedDown 145 141Up 457 507The diagonal elements of the confusion matrix indicate correct predictions,while the off-diagonals represent incorrect predictions. Hence our modelcorrectly predicted that the market would go up on 507 days and thatit would go down on 145 days, for a total of 507 + 145 = 652 correctpredictions. Thenp.mean()function can be used to compute the fraction ofdays for which the prediction was correct. In this case, logistic regressioncorrectly predicted the movement of the market 52.2% of the time.In[13]:(507+145)/1250, np.mean(labels == Smarket.Direction)Out[13]:(0.5216, 0.5216)At first glance, it appears that the logistic regression model is workinga little better than random guessing. However, this result is misleadingbecause we trained and tested the model on the same set of 1,250 obser-vations. In other words,100−52.2 = 47.8%is thetrainingerror rate. Aswe have seen previously, the training error rate is often overly optimistic— it tends to underestimate the test error rate. In order to better assessthe accuracy of the logistic regression model in this setting, we can fit themodel using part of the data, and then examine how well it predicts theheld outdata. This will yield a more realistic error rate, in the sense that inpractice we will be interested in our model’s performance not on the datathat we used to fit the model, but rather on days in the future for whichthe market’s movements are unknown.To implement this strategy, we first create a Boolean vector correspond-ing to the observations from 2001 through 2004. We then use this vectorto create a held out data set of observations from 2005.In[14]:train = (Smarket.Year < 2005)Smarket_train = Smarket.loc[train]Smarket_test = 9)The objecttrainis a vector of 1,250 elements, corresponding to theobservations in our data set. The elements of the vector that correspondto observations that occurred before 2005 are set toTrue, whereas thosethat correspond to observations in 2005 are set toFalse. Hencetrainis abooleanarray, since its elements areTrueandFalse. Boolean arrays can beused to obtain a subset of the rows or columns of a data frame using the4.7 Lab: Logistic Regression, LDA, QDA, and KNN 177locmethod. For instance, the commandSmarket.loc[train]would pickout a submatrix of the stock market data set, corresponding only to thedates before 2005, since those are the ones for which the elements oftrainareTrue. The∼symbol can be used to negate all of the elements of aBoolean vector. That is,∼trainis a vector similar totrain, except thatthe elements that areTrueintrainget swapped toFalsein∼train, andvice versa. Therefore,Smarket.loc[∼train]yields a subset of the rows ofthe data frame of the stock market data containing only the observationsfor whichtrainisFalse. The output above indicates that there are 252such observations.We now fit a logistic regression model using only the subset of the ob-servations that correspond to dates before 2005. We then obtain predictedprobabilities of the stock market going up for each of the days in our testset — that is, for the days in 2005.In[15]:X_train, X_test = X.loc[train], X.loc[∼train]y_train, y_test = y.loc[train], y.loc[∼train]glm_train = = glm_train.fit()probs = results.predict(exog=X_test)Notice that we have trained and tested our model on two completelyseparate data sets: training was performed using only the dates before2005, and testing was performed using only the dates in 2005.Finally, we compare the predictions for 2005 to the actual movements ofthe market over that time period. We will first store the test and traininglabels (recally_testis binary).In[16]:D=S m a r k e t . D i r e c t i o nL_train, L_test = D.loc[train], = np.array(['Down']*252)labels[probs>0.5] ='Up'confusion_table(labels, L_test)Out[17]:Truth Down UpPredictedDown 77 97Up 34 44The test accuracy is about 48% while the error rate is about 52%In[18]:np.mean(labels == L_test), np.mean(labels != L_test)Out[18]:(0.4802, 0.5198)The!=notation meansnot equal to, and so the last command computes!=the test set error rate. The results are rather disappointing: the test errorrate is 52%, which is worse than random guessing! Of course this resultis not all that surprising, given that one would not generally expect to beable to use previous days’ returns to predict future market performance.(After all, if it were possible to do so, then the authors of this book wouldbe out striking it rich rather than writing a statistics textbook.)178 4. ClassificationWe recall that the logistic regression model had very underwhelmingp-values associated with all of the predictors, and that the smallestp-value,though not very small, corresponded toLag1. Perhaps by removing thevariables that appear not to be helpful in predictingDirection, we canobtain a more effective model. After all, using predictors that have norelationship with the response tends to cause a deterioration in the testerror rate (since such predictors cause an increase in variance without acorresponding decrease in bias), and so removing such predictors may inturn yield an improvement. Below we refit the logistic regression using justLag1andLag2, which seemed to have the highest predictive power in theoriginal logistic regression model.In[19]:model = MS(['Lag1','Lag2']).fit(Smarket)X=m o d e l . t r a n s f o r m ( S m a r k e t )X_train, X_test = X.loc[train], X.loc[∼train]glm_train = = glm_train.fit()probs = results.predict(exog=X_test)labels = np.array(['Down']*252)labels[probs>0.5] ='Up'confusion_table(labels, L_test)Out[19]:Truth Down UpPredictedDown 35 35Up 76 106Let’s evaluate the overall accuracy as well as the accuracy within thedays when logistic regression predicts an 0.5824)Now the results appear to be a little better: 56% of the daily movementshave been correctly predicted. It is worth noting that in this case, a muchsimpler strategy of predicting that the market will increase every day willalso be correct 56% of the time! Hence, in terms of overall error rate, thelogistic regression method is no better than the naive approach. However,the confusion matrix shows that on days when logistic regression predictsan increase in the market, it has a 58% accuracy rate. This suggests apossible trading strategy of buying on days when the model predicts an in-creasing market, and avoiding trades on days when a decrease is predicted.Of course one would need to investigate more carefully whether this smallimprovement was real or just due to random chance.Suppose that we want to predict the returns associated with particularvalues ofLag1andLag2. In particular, we want to predictDirectionon aday whenLag1andLag2equal1.2and1.1, respectively, and on a day whenthey equal1.5and−0.8. We do this using thepredict()function.In[21]:newdata = pd.DataFrame({'Lag1':[1.2, 1.5],'Lag2':[1.1, -0.8]});4.7 Lab: Logistic Regression, LDA, QDA, and KNN 179
newX = 00 . 4 7 9 1
10 . 4 9 6 1
dtype: float64
4.7.3 Linear Discriminant Analysis
We begin by performing LDA on the Smarket data, using the function
LinearDiscriminantAnalysis() , which we have abbreviated LDA(). We fitLinear
Discriminant
Analysis()the model using only the observations before 2005.
In[22]: lda = LDA(store_covariance=True)
Since the LDAestimator automatically adds an intercept, we should X_trainandX_test.
We can also directly use the labels rather than the Boolean vectors y_train.
In[23]: X_train, X_test = [M.drop(columns=[ 'intercept' ])
for M in [X_train, X_test]]
lda.fit(X_train, L_train)
Out[23]: we have used the list comprehensions introduced in Section 3.6.4.
Looking at our first line above, we see that the right-hand side is a list of
length two. This is because the code for M in [X_train, X_test] iterates
over a list of length two. While here we loop over a list, the list comprehen-
sion method works when looping over any iterable object. We then apply
thedrop()method to each element in the iteration, collecting the result.drop()in a list. The left-hand side tells Pythonto unpack this list of length two,
assigning its elements to the variables X_trainandX_test. Of course, this
overwrites the previous values of X_trainandX_test.
Having fit the model, we can extract the means in the two classes with
themeans_attribute. These are the average of each predictor within each
class, and are used by LDA as estimates of µk. These suggest that there is
a tendency for the previous 2 days’ returns to be negative on days when
the market increases, and a tendency for the previous days’ returns to be
positive on days when the market declines.
In[24]: lda.means_
Out[24]: array([[ 0.04, 0.03],
[-0.04, -0.03]])
Theestimated prior probabilities are stored in the priors_attribute.The
package sklearntypicallyusesthistrailing _todenoteaquantityestimated
when using the fit()method. We can be sure of which entry corresponds
to which label by looking at the classes_ attribute.
In[25]: lda.classes_
Out[25]: array([ 'Down','Up'], dtype= '<U4')180 4. Classification
The LDA output indicates that ˆπDown=0.492andˆπUp=0.508.
In[26]: lda.priors_
Out[26]: array([0.492, 0.508])
The linear discriminant vectors can be found in the scalings_ attribute:
In[27]: lda.scalings_
Out[27]: array([[-0.642],
[-0.513]])
These values provide the linear combination of Lag1andLag2that are used
to form the LDA decision rule. In other words, these are the multipliers of
the elements of X=xin (4.24). If−0.64×Lag1−0.51×Lag2is large,
then the LDA classifier will predict a market increase, and if it is small,
then the LDA classifier will predict a market decline.
In[28]: lda_pred = lda.predict(X_test)
As we observed in our comparison of classification methods (Section 4.5),
the LDA and logistic regression predictions are almost identical.
In[29]: confusion_table(lda_pred, L_test)
Out[29]: Truth Down Up
Predicted
Down 35 35
Up 76 106
We can also estimate the probability of each class for each point in a
training set. Applying a 50% threshold to the posterior probabilities of be-
ing in class one allows us to recreate the predictions contained in lda_pred .
In[30]: lda_prob = >= 0.5, 'Up','Down')= =l d a _ p r e d
)
Out[30]: True
Above, we used the np.where() function that creates an array with valuenp.where()'Up'for indices where the second column of lda_prob (the estimated poste-
rior probability of 'Up') is greater than 0.5. For problems with more than
two classes the labels are chosen as the class whose posterior probability is
highest:
In[31]: np.all(
[lda.classes_[i] for i in np.argmax(lda_prob, 1)] ==
lda_pred
)
Out[31]: True
If we wanted to use a posterior probability threshold other than 50% in
order to make predictions, then we could easily do so. For instance, Lab: Logistic Regression, LDA, QDA, and KNN 181
market will indeed decrease on that day — say, if the posterior probability
is at least 90%. We know that the first column of lda_prob corresponds to
the label Downafter having checked the classes_ attribute, hence we use
the column index 0 rather than 1 as we did above.
In[32]: np.sum(lda_prob[:,0] > 0.9)
Out[32]: 0
No days in 2005 meet that threshold! In fact, the greatest posterior prob-
ability of decrease in all of 2005 was that simplifies tasks such as cross-validation, which we will see in
Chapter 5. Specifically, the methods first create a generic classifier without
referring to any data. This classifier is then fit to data with the fit()
method and predictions are always produced with the predict() method.
This pattern of first instantiating the classifier, followed by fitting it, and
then producing predictions is an explicit design choice of sklearn. This
uniformity makes it possible to cleanly copy the classifier so that it can be
fit on different data; e.g. different training sets arising in cross-validation.
This standard pattern also allows for a predictable formation of workflows.
4.7.4 Quadratic Discriminant Analysis
We will now fit a QDA model to the Smarketdata. QDA is in thesklearnpackage, which we ab-Quadratic
Discriminant
Analysis()breviate to QDA(). The syntax is very similar to LDA().
In[33]: qda = QDA(store_covariance=True)
qda.fit(X_train, L_train)
Out[33]: will again compute means_andpriors_.
In[34]: qda.means_, qda.priors_
Out[34]: (array([[ 0.04279022, 0.03389409],
[-0.03954635, -0.03132544]]),
array([0.49198397, 0.50801603]))
TheQDA()classifier will estimate one covariance per class. Here is the
estimated covariance in the first class:
In[35]: qda.covariance_[0]
Out[35]: array([[ 1.50662277, -0.03924806],
[-0.03924806, 1.53559498]])
The output contains the group means. But it does not contain the coef-
ficients of the linear discriminants, because the QDA classifier involves a
quadratic, rather than a linear, function of the predictors. The predict()
function works in exactly the same fashion as for LDA.182 4. ClassificationIn[36]:qda_pred = qda.predict(X_test)confusion_table(qda_pred, L_test)Out[36]:Truth Down UpPredictedDown 30 20Up 81 121Interestingly, the QDA predictions are accurate almost 60% of the time,even though the 2005 data was not used to fit the model.In[37]:np.mean(qda_pred == L_test)Out[37]:0.599This level of accuracy is quite impressive for stock market data, whichis known to be quite hard to model accurately. This suggests that thequadratic form assumed by QDA may capture the true relationship moreaccurately than the linear forms assumed by LDA and logistic regression.However, we recommend evaluating this method’s performance on a largertest set before betting that this approach will consistently beat the market!4.7.5 Naive BayesNext, we fit a naive Bayes model to theSmarketdata. The syntax is similarto that ofLDA()andQDA(). By default, this implementationGaussianNB()ofGaussianNB()the naive Bayes classifier models each quantitative feature using a Gaussiandistribution. However, a kernel density method can also be used to estimatethe distributions.In[38]:NB = GaussianNB()NB.fit(X_train, L_train)Out[38]:GaussianNB()The classes are stored dtype='<U4')The class prior probabilities are stored in 0.51])The parameters of the features can be found in thetheta_andvar_attributes. The number of rows is equal to the number of classes, while thenumber of columns is equal to the number of features. We see below thatthe mean for featureLag1in theDownclass is 0.043.In[41]:NB.theta_Out[41]:array([[ 0.043, 0.034],[-0.040, -0.031]])4.7 Lab: Logistic Regression, LDA, QDA, and KNN 183
Its variance is 1.503.
In[42]: NB.var_
Out[42]: array([[1.503, 1.532],
[1.514, 1.487]])
How do we know the names of these attributes? We use NB?(or?NB).
We can easily verify the mean computation:
In[43]: X_train[L_train == 'Down'].mean()
Out[43]: Lag1 0.042790
Lag2 0.033894
dtype: float64
Similarly for the variance:
In[44]: X_train[L_train == 'Down'].var(ddof=0)
Out[44]: Lag1 1.503554
Lag2 1.532467
dtype: float64
TheGaussianNB() function calculates variances using the 1/nformula.6
SinceNB()is a classifier in the sklearnlibrary, making predictions uses the
same syntax as for LDA()andQDA()above.
In[45]: nb_labels = NB.predict(X_test)
confusion_table(nb_labels, L_test)
Out[45]: Truth Down Up
Predicted
Down 29 20
Up 82 121
Naive Bayes performs well on these data, with accurate predictions over
59% of the time. This is slightly worse than QDA, but much better than
LDA.
As forLDA, thepredict_proba() method estimates the probability that
each observation belongs to a particular class.
In[46]: NB.predict_proba(X_test)[:5]
Out[46]: array([[0.4873, 0.5127],
[0.4762, 0.5238],
[0.4653, 0.5347],
[0.4748, 0.5252],
[0.4902, 0.5098]])
4.7.6 K-Nearest Neighbors
WewillnowperformKNNusingthe KNeighborsClassifier() function.ThisKNeighbors
Classifier()
6There are two formulas for computing the sample variance of nobservations
x1,...,x the sample mean.
In most cases the distinction is not important.184 4. Classificationfunction works similarly to the other model-fitting functions that we haveencountered thus far.As is the case for LDA and QDA, we fit the classifier using byfit().In[47]:knn1 = L_train)knn1_pred = L_test)Out[47]:Truth Down UpPredictedDown 43 58Up 68 83The results usingK=1are not very good, since only50%of the observa-tions are correctly predicted. Of course, it may be thatK=1results in anoverly-flexible fit to the data.In[48]:(83+43)/252, np.mean(knn1_pred == L_test)Out[48]:(0.5, 0.5)We repeat the analysis below usingK=3.In[49]:knn3 = KNeighborsClassifier(n_neighbors=3)knn3_pred = knn3.fit(X_train, L_train).predict(X_test)np.mean(knn3_pred == L_test)Out[49]:0.532The results have improved slightly. But increasingKfurther provides nofurther improvements. It appears that for these data, and this train/testsplit, QDA gives the best results of the methods that we have examined results. As an example we will apply the KNN approach to theCaravandata set, which is part of theISLPlibrary. This data set includes 85predictors that measure demographic characteristics for 5,822 individuals.The response variable isPurchase, which indicates whether or not a givenindividual purchases a caravan insurance policy. In this data set, only 6%of people purchased caravan insurance.In[50]:Caravan = load_data('Caravan')Purchase = 5474Yes 348Name: Purchase, dtype: int64The methodvalue_counts()takes apd.Seriesorpd.DataFrameand re-turns apd.Serieswith the corresponding counts for each unique element.In this casePurchasehas onlyYesandNovalues and returns how manyvalues of each there are.4.7 Lab: Logistic Regression, LDA, QDA, and KNN 185In[51]:348 / 5822Out[51]:0.0598Our features will include all columns exceptPurchase.In[52]:feature_df = Caravan.drop(columns=['Purchase'])Because the KNN classifier predicts the class of a given test observa-tion by identifying the observations that are nearest to it, the scale ofthe variables matters. Any variables that are on a large scale will have amuch larger effect on thedistancebetween the observations, and hence onthe KNN classifier, than variables that are on a small scale. For instance,imagine a data set that contains two variables,salaryandage(measuredin dollars and years, respectively). As far as KNN is concerned, a differenceof 1,000 USD in salary is enormous compared to a difference of 50 years inage. Consequently,salarywill drive the KNN classification results, andagewill have almost no effect. This is contrary to our intuition that a salarydifference of 1,000 USD is quite small compared to an age difference of 50years. Furthermore, the importance of scale to the KNN classifier leads toanother issue: if we measuredsalaryin Japanese yen, or if we measuredagein minutes, then we’d get quite different classification results from what weget if these two variables are measured in dollars and years.A good way to handle this problem is tostandardizethe data so that allstandardizevariables are given a mean of zero and a standard deviation of one. Thenall variables will be on a comparable scale. This is accomplished using = argumentwith_meanindicates whether or not we should subtract themean, whilewith_stdindicates whether or not we should scale the columnsto have standard deviation of 1 or not. Finally, the argumentcopy=Truein-dicates that we will always copy data, rather than trying to do calculationsin place where possible.This transformation can be fit and then applied to arbitrary data. In thefirst line below, the parameters for the scaling are computed and storedinscaler, while the second line actually constructs the standardized set offeatures.In[54]:scaler.fit(feature_df)X_std = scaler.transform(feature_df)Now every column offeature_stdbelow has a standard deviation of oneand a mean of zero.In[55]:feature_std = 1.000086MAANTHUI 1.000086186 4. Classification
MGEMOMV 1.000086
MGEMLEEF 1.000086
MOSHOOFD 1.000086
...
AZEILPL 1.000086
APLEZIER 1.000086
AFIETS 1.000086
AINBOED 1.000086
ABYSTAND 1.000086
Length: 85, dtype: float64
Notice that the standard deviations are not quite 1here; this is again due
to some procedures using the 1/nconvention for variances (in this case
scaler() ), while others use 1/(n−1)(thestd()method). See the footnote.std()on page183. In this case it does not matter, as long as the variables are all
on the same scale.
Usingthefunction train_test_split() a test set, containing 1000 observations, and a training set containing the
remaining observations. The argument random_state=0 ensures that we get
the same split each time we rerun the code.
In[56]: (X_train,
X_test,
y_train,
y_test) = reveals that the non-keyword arguments can be lists,
arrays,pandas dataframes etc that all have the same length ( shape[0] ) and
hence are indexable . In this case they are the dataframe feature_std andindexablethe response variable Purchase . We fit a KNN model on the training data
usingK=1, and evaluate its performance on the test data.
In[57]: knn1 = KNeighborsClassifier(n_neighbors=1)
knn1_pred = knn1.fit(X_train, y_train).predict(X_test)
np.mean(y_test != knn1_pred), np.mean(y_test != "No")
Out[57]: (0.111, 0.067)
The KNN error rate on the 1,000 test observations is about 11%. At first
glance, this may appear to be fairly good. However, since just over 6% of
customers purchased insurance, we could get the error rate down to almost
6% by always predicting Noregardless of the values of the predictors! This
is known as the null rate.null rateSuppose that there is some non-trivial cost to trying to sell insurance
to a given individual. For instance, perhaps a salesperson must visit each
potential customer. If the company tries to sell insurance to a random
selection of customers, then the success rate will be only 6%, which may
be far too low given the costs involved. Instead, the company would like
to try to sell insurance only to customers who are likely to buy it. So the
overall error rate is not of interest. Instead, the fraction of individuals that
are correctly predicted to buy insurance is of interest.
In[58]: confusion_table(knn1_pred, y_test)4.7 Lab: Logistic Regression, LDA, QDA, and KNN 187
Out[58]: Truth No Yes
Predicted
No 880 58
Yes 53 9
It turns out that KNN with K=1does far better than random guessing
among the customers that are predicted to buy insurance. Among 62 such
customers, 9, or 14.5%, actually do purchase insurance. This is double the
rate that one would obtain from random guessing.
In[59]: 9/(53+9)
Out[59]: 0.145
Tuning Parameters
The number of neighbors in KNN is referred to as a tuning parameter , alsotuning
parameterreferred to as a hyperparameter . We do not know a priori what value to
hyper-
parameteruse. It is therefore of interest to see how the classifier performs on test
data as we vary these parameters. This can be achieved with a forloop,
described in Section 2.3.8. Here we use a for loop to look at the accuracy of
our classifier in the group predicted to purchase insurance as we vary the
number of neighbors from 1 to 5:
In[60]: for K in range(1,6):
knn = KNeighborsClassifier(n_neighbors=K)
knn_pred = knn.fit(X_train, y_train).predict(X_test)
C=c o n f u s i o n _ t a b l e ( k n n _ p r e d ,y _ t e s t )
templ = ( 'K={0:d}: # predicted to rent: {1:>2},' +
'# w h o d i d r e n t { 2 : d } , a c c u r a c y { 3 : . 1 % } ' )
pred = C.loc[ 'Yes'].sum()
did_rent = C.loc[ / pred))
K=1:#p r e d i c t e dt or e n t :6 2 , #w h od i dr e n t9 ,a c c u r a c y1 4 . 5 %
K=2:#p r e d i c t e dt or e n t :6 , #w h od i dr e n t1 ,a c c u r a c y1 6 . 7 %
K=3:#p r e d i c t e dt or e n t :2 0 , #w h od i dr e n t3 ,a c c u r a c y1 5 . 0 %
K=4:#p r e d i c t e dt or e n t :3 , #w h od i dr e n t0 ,a c c u r a c y0 . 0 %
K=5:#p r e d i c t e dt or e n t :7 , #w h od i dr e n t1 ,a c c u r a c y1 4 . 3 %
We see some variability — the numbers for K=4are very different from the
rest.
Comparison to Logistic Regression
As a comparison, we can also fit a logistic regression model to the data.
This can also be done with sklearn, though by default it fits something
like theridge regression version of logistic regression, which we introduce
in Chapter 6. This can be modified by appropriately setting the argument
Cbelow. Its default value is 1 but by setting it to a very large number,
the algorithm converges to the same solution as the usual (unregularized)
logistic regression estimator discussed above.188 4. Classification
Unlike the statsmodels package, sklearnfocuses less on inference and
more on classification. Hence, the summary methods seen in statsmodels
and our simplified version seen with summarize are not generally available
for the classifiers in sklearn.
In[61]: logit = LogisticRegression(C=1e10, solver= 'liblinear' )
logit.fit(X_train, y_train)
logit_pred = logit.predict_proba(X_test)
logit_labels = np.where(logit_pred[:,1] > 5, 'Yes','No')
confusion_table(logit_labels, y_test)
Out[61]: Truth No Yes
Predicted
No 933 67
Yes 0 0
We used the argument solver='liblinear' above to avoid a warning with
the default solver which would indicate that the algorithm does not con-
verge.
If we use 0.5as the predicted probability cut-off for the classifier, then
we have a problem: none of the test observations are predicted to purchase
insurance. However, we are not required to use a cut-off of 0.5. If we instead
predict a purchase any time the predicted probability of purchase exceeds
0.25, we get much better results: we predict that 29 people will purchase
insurance, and we are correct for about 31% of these people. This is almost
five times better than random guessing!
In[62]: logit_labels = np.where(logit_pred[:,1]>0.25, 'Yes','No')
confusion_table(logit_labels, y_test)
Out[62]: Truth No Yes
Predicted
No 913 58
Yes 20 9
In[63]: 9/(20+9)
Out[63]: 0.310
4.7.7 Linear and Poisson Regression on the Bikeshare Data
Here we fit linear and Poisson regression models to the Bikeshare data, as
described in Section 4.6. The response bikersmeasures the number of bike
rentals per hour in Washington, DC in the period 2010–2012.
In[64]: Bike = load_data( 'Bikeshare' )
Let’s have a peek at the dimensions and names of the variables in this
dataframe.
In[65]: Bike.shape, Bike.columns4.7 Lab: Logistic Regression, LDA, QDA, and KNN 189
Out[65]: ((8645, 15),
Index([ 'season' ,'mnth','day','hr','holiday' ,'weekday' ,
'workingday' ,'weathersit' ,'temp','atemp' ,'hum',
'windspeed' ,'casual' ,'registered' ,'bikers' ],
dtype='object' ))
Linear Regression
We begin by fitting a linear regression model to the data.
In[66]: X=M S ( [ 'mnth',
'hr',
'workingday' ,
'temp',
'weathersit' ]).fit_transform(Bike)
Y=B i k e [ 'bikers' ]
M_lm = sm.OLS(Y, X).fit()
summarize(M_lm)
Out[66]: coef std err t P>|t|
intercept -68.6317 5.307 -12.932 0.000
mnth[Feb] 6.8452 4.287 1.597 0.110
mnth[March] 16.5514 4.301 3.848 0.000
mnth[April] 41.4249 4.972 8.331 0.000
mnth[May] 72.5571 5.641 12.862 0.000
mnth[June] 67.8187 6.544 10.364 0.000
mnth[July] 45.3245 7.081 6.401 0.000
mnth[Aug] 53.2430 6.640 8.019 0.000
mnth[Sept] 66.6783 5.925 11.254 0.000
mnth[Oct] 75.8343 4.950 15.319 0.000
mnth[Nov] 60.3100 4.610 13.083 0.000
mnth[Dec] 46.4577 4.271 10.878 0.000
hr[1] -14.5793 5.699 -2.558 0.011
hr[2] -21.5791 5.733 -3.764 0.000
hr[3] -31.1408 5.778 -5.389 0.000
..... ....... ..... ..... .....
There are 24 levels in hrand 40 rows in all, so we have truncated the
summary. In M_lm, the first levels hr[0]andmnth[Jan] are treated as the
baseline values, and so no coefficient estimates are provided for them: to these baselines. For example, the Feb coefficient of 6.845signi-
fies that, holding all other variables constant, there are on average about
7 more riders in February than in January. Similarly there are about 16.5
more riders in March than in January.
The results seen in Section 4.6.1used a slightly different coding of the
variables hrandmnth, as follows:
In[67]: hr_encode = contrast( 'hr','sum')
mnth_encode = contrast( 'mnth','sum')
Refitting again:
In[68]: X2 = MS([mnth_encode,
hr_encode,
'workingday' ,
'temp',190 4. Classification
'weathersit' ]).fit_transform(Bike)
M2_lm = sm.OLS(Y, X2).fit()
S2 = summarize(M2_lm)
S2
Out[68]: coef std err t P>|t|
intercept 73.5974 5.132 14.340 0.000
mnth[Jan] -46.0871 4.085 -11.281 0.000
mnth[Feb] -39.2419 3.539 -11.088 0.000
mnth[March] -29.5357 3.155 -9.361 0.000
mnth[April] -4.6622 2.741 -1.701 0.089
mnth[May] 26.4700 2.851 9.285 0.000
mnth[June] 21.7317 3.465 6.272 0.000
mnth[July] -0.7626 3.908 -0.195 0.845
mnth[Aug] 7.1560 3.535 2.024 0.043
mnth[Sept] 20.5912 3.046 6.761 0.000
mnth[Oct] 29.7472 2.700 11.019 0.000
mnth[Nov] 14.2229 2.860 4.972 0.000
hr[0] -96.1420 3.955 -24.307 0.000
hr[1] -110.7213 3.966 -27.916 0.000
hr[2] -117.7212 4.016 -29.310 0.000
..... ....... ..... ...... .....
What is the difference between the two codings? In M2_lm, a coefficient esti-
mate is reported for all but level 23ofhrand level Decofmnth. Importantly,
inM2_lm, the (unreported) coefficient estimate for the last level of mnthis
not zero: instead, it equals the negative of the sum of the coefficient esti-
mates for all of the other levels. Similarly, in M2_lm, the coefficient estimate
for the last level of hris the negative of the sum of the coefficient estimates
for all of the other levels. This means that the coefficients of hrandmnth
inM2_lmwill always sum to zero, and can be interpreted as the difference
from the mean level. For example, the coefficient for January of −46.087
indicates that, holding all other variables constant, there are typically 46
fewer riders in January relative to the yearly average.
It is important to realize that the choice of coding really does not matter,
provided that we interpret the model output correctly in light of the coding
used. For example, we see that the predictions from the linear model are
the same regardless of coding:
In[69]: np.sum((M_lm.fittedvalues - M2_lm.fittedvalues)**2)
Out[69]: 1.53e-20
The sum of squared differences is zero. We can also see this using the
np.allclose() function:np.allclose()
In[70]: np.allclose(M_lm.fittedvalues, M2_lm.fittedvalues)
Out[70]: True
To reproduce the left-hand side of Figure 4.13we must first obtain the
coefficient estimates associated with mnth. The coefficients for January
through November can be obtained directly from the M2_lmobject. The
coefficient for December must be explicitly computed as the negative sum
of all the other months. We first extract all the coefficients for month from
the coefficients of M2_lm.4.7 Lab: Logistic Regression, LDA, QDA, and KNN 191
In[71]: coef_month = S2[S2.index.str.contains( 'mnth')]['coef']
coef_month
Out[71]: mnth[Jan] -46.0871
mnth[Feb] -39.2419
mnth[March] -29.5357
mnth[April] -4.6622
mnth[May] 26.4700
mnth[June] 21.7317
mnth[July] -0.7626
mnth[Aug] 7.1560
mnth[Sept] 20.5912
mnth[Oct] 29.7472
mnth[Nov] 14.2229
Name: coef, dtype: float64
Next, we append Decas the negative of the sum of all other months.
In[72]: months = Bike[ 'mnth'].dtype.categories
coef_month = 'mnth[Dec]'
])
])
coef_month
Out[72]: mnth[Jan] -46.0871
mnth[Feb] -39.2419
mnth[March] -29.5357
mnth[April] -4.6622
mnth[May] 26.4700
mnth[June] 21.7317
mnth[July] -0.7626
mnth[Aug] 7.1560
mnth[Sept] 20.5912
mnth[Oct] 29.7472
mnth[Nov] 14.2229
mnth[Dec] 0.3705
Name: coef, dtype: float64
Finally, to make the plot neater, we’ll just use the first letter of each month,
which is the 6th entry of each of the labels in the index.
In[73]: fig_month, ax_month = subplots(figsize=(8,8))
x_month = coef_month, marker= 'o',m s = 1 0 for l in coef_month.index], fontsize
=20)
ax_month.set_xlabel( 'Month' ,f o n t s i z e = 2 0 )
ax_month.set_ylabel( 'Coefficient' ,f o n t s i z e = 2 0 ) ;
Reproducing the right-hand plot in Figure 4.13follows a similar process.
In[74]: coef_hr = S2[S2.index.str.contains( 'hr')]['coef']
coef_hr = coef_hr.reindex([ 'hr[{0}]' .format(h) for h in range(23)])
coef_hr = pd.concat([coef_hr,192 4. Classification
pd.Series([-coef_hr.sum()], index=[ 'hr[23]' ])
])
We now make the hour plot.
In[75]: fig_hr, ax_hr = subplots(figsize=(8,8))
x_hr = np.arange(coef_hr.shape[0])
ax_hr.plot(x_hr, coef_hr, marker= 'o',m s = 1 0 fontsize=20)
ax_hr.set_xlabel( 'Hour',f o n t s i z e = 2 0 )
ax_hr.set_ylabel( 'Coefficient' ,f o n t s i z e = 2 0 ) ;
Poisson Regression
Now we fit instead a Poisson regression model to the Bikeshare data. Very
little changes, except that we now use the function sm.GLM() with the Pois-
son family specified:
In[76]: M_pois = sm.GLM(Y, X2, family=sm.families.Poisson()).fit()
We can plot the coefficients associated with mnthandhr, in order to
reproduce Figure 4.15. We first complete these coefficients as before.
In[77]: S_pois = summarize(M_pois)
coef_month = S_pois[S_pois.index.str.contains( 'mnth')]['coef']
coef_month = 'mnth[Dec]' ])])
coef_hr = S_pois[S_pois.index.str.contains( 'hr')]['coef']
coef_hr = 'hr[23]' ])])
The plotting is as before.
In[78]: fig_pois, (ax_month, ax_hr) = subplots(1, 2, figsize=(16,8))
ax_month.plot(x_month, coef_month, marker= 'o',m s = 1 0 for l in coef_month.index], fontsize
=20)
ax_month.set_xlabel( 'Month' ,f o n t s i z e = 2 0 )
ax_month.set_ylabel( 'Coefficient' ,f o n t s i z e = 2 0 )
ax_hr.plot(x_hr, coef_hr, marker= 'o',m s = 1 0 )
ax_hr.set_xticklabels(range(24)[::2], fontsize=20)
ax_hr.set_xlabel( 'Hour',f o n t s i z e = 2 0 )
ax_hr.set_ylabel( 'Coefficient' ,f o n t s i z e = 2 0 ) thefittedvalues attribute returned by the fit()method for both the
linear regression and the Poisson fits. The linear predictors are stored as
the attribute lin_pred .
In[79]: fig, ax = subplots(figsize=(8, 'Linear Regression Fit' ,f o n t s i z e = 2 0 )4.8 Exercises 193
ax.set_ylabel( 'Poisson Regression Fit' ,f o n t s i z e = 2 0 )
ax.axline([0,0], c= 'black' ,l i n e w i d t h = 3 ,
linestyle= '--',s l o p e = 1 ) ;
The predictions from the Poisson regression model are correlated with
those from the linear model; however, the former are non-negative. As a
result the Poisson regression predictions tend to be larger than those from
the linear model for either very low or very high levels of ridership.
In this section, we fit Poisson regression models using the sm.GLM() func-
tion with the argument family=sm.families.Poisson() . Earlier in this lab
we used the sm.GLM() function with family=sm.families.Binomial() to per-
form logistic regression. Other choices for the familyargument can be used
to fit other types of GLMs. For instance, family=sm.families.Gamma() fits
a Gamma regression model.
4.8 Exercises
Conceptual
1. Using a little bit of algebra, prove that ( 4.2) is equivalent to ( 4.3). In
other words, the logistic function representation and logit represen-
tation for the logistic regression model are equivalent.
2. It was stated in the text that classifying an observation to the class
for which ( 4.17) is largest is equivalent to classifying an observation
to the class for which ( 4.18) is largest. Prove that this is the case. In
other words, under the assumption that the observations in the kth
class are drawn from a N(µk,σ2)distribution, the Bayes maximized.
3. This problem relates to the QDA model, in which the observations
within each class are drawn from a normal distribution with a class-
specific mean vector and a class specific covariance matrix. We con-
sider the simple case where p=1; i.e. there is only one feature.
Suppose that we have Kclasses, and that if an observation belongs
to thekth class then Xcomes from a one-dimensional normal dis-
tribution, X∼N(µk,σ2
k). Recall that the density function for the
one-dimensional normal distribution is given in ( 4.16). Prove that in
this case, the Bayes classifier is notlinear. Argue that it is in fact
quadratic.
Hint: For this problem, you should follow the arguments laid out in
Section4.4.1, but without making the assumption that σ2
1=···=σ2
K.
4. When the number of features pis large, there tends to be a deteri-
oration in the performance of KNN and other localapproaches that
perform prediction using only observations that are nearthe test ob-
servation for which a prediction must be made. This phenomenon is
known as thecurse of dimensionality, and it ties into the fact thatcurse of di-mensionalitynon-parametric approaches often perform poorly whenpis large. Wewill now investigate this curse.194 4. Classification(a) Suppose that we have a set of observations, each with measure-ments onp=1feature,X. We assume thatXis uniformly(evenly) distributed on[0,1]. Associated with each observationis a response value. Suppose that we wish to predict a test obser-vation’s response using only observations that are within 10% ofthe range ofXclosest to that test observation. For instance, will use observations in the range[0.55,0.65]. On average,what fraction of the available observations will we use to makethe prediction?(b) Now suppose that we have a set of observations, each withmeasurements onp=2features,X1andX2. We assume that(X1,X2)are uniformly distributed on[0,1]×[0,1]. We wish within 10% of the range ofX1andwithin 10% of the rangeofX2closest to that test observation. For instance, in order topredict the response for a test observation withX1=0.6andX2=0.35, we will use observations in the range[0.55,0.65]forX1and in the range[0.3,0.4]forX2. On average, what fractionof the available observations will we use to make the prediction?(c) Now suppose that we have a set of observations onp= 100fea-tures. Again the observations are uniformly distributed on eachfeature, and again each feature ranges in value from 0 to 1. Wewish to predict a test observation’s response using observationswithin the 10% of each feature’s range that is closest to that testobservation. What fraction of the available observations will weuse to make the prediction?(d) Using your answers to parts (a)–(c), argue that a drawback ofKNN whenpis large is that there are very few training obser-vations “near” any given test observation.(e) Now suppose that we wish to make a prediction for a test obser-vation by creating ap-dimensional hypercube centered aroundthe test observation that contains, on average, 10% of the of the hypercube? Comment on your answer.Note: A hypercube is a generalization of a cube to an arbitrarynumber of dimensions. Whenp=1, a hypercube is simply a linesegment, whenp=2it is a square, and whenp= 100it is a100-dimensional cube.5. We now examine the differences between LDA and QDA.(a) If the Bayes decision boundary is linear, do we expect LDA orQDA to perform better on the training set? On the test set?(b) If the Bayes decision boundary is non-linear, do we expect LDAor QDA to perform better on the training set? On the test set?4.8 Exercises 195(c) In general, as the sample sizenincreases, do we expect the testprediction accuracy of QDA relative to LDA to improve, decline,or be unchanged? Why?(d) True or False: Even if the Bayes decision boundary for a givenproblem is linear, we will probably achieve a superior test er-ror rate using QDA rather than LDA because QDA is flexibleenough to model a linear decision boundary. Justify your an-swer.6. Suppose we collect data for a group of students in a statistics classwith variablesX1=hours studied,X2=undergrad GPA, andY=receive an A. We fit a logistic regression and produce Estimate the probability that a student who studies for40h andhas an undergrad GPA of3.5gets an A in the class.(b) How many hours would the student in part (a) need to study tohave a 50% chance of getting an A in the class?7. Suppose that we wish to predict whether a given stock will issue adividend this year (“Yes” or “No”) based onX, last year’s value ofXfor companies that issued a dividend was¯X= 10,while the mean for those that didn’t was¯X=0. In addition, thevariance ofXfor these two sets of companies wasˆσ2= 36. Finally,80% of companies issued dividends. Assuming thatXfollows a nor-mal distribution, predict the probability that a company will issuea dividend this year given that its percentage profit wasX=4lastyear.Hint: Recall that the density function for a normal random variableisf(x)=1√2πσ2e−(x−µ)2/2σ2. You will need to use Bayes’ theorem.8. Suppose that we take a data set, divide it into equally-sized trainingand test sets, and then try out two different classification procedures.First we use logistic regression and get an error rate of 20% on thetraining data and 30% on the test data. Next we use 1-nearest neigh-bors (i.e.K=1) and get an average error rate (averaged over bothtestand training data sets) of 18%. Based on these results, whichmethod should we prefer to use for classification of new observations?Why?9. This problem has to do withodds.(a) On average, what fraction of people with an odds of 0.37 ofdefaulting on their credit card payment will in fact default?(b) Suppose that an individual has a 16% chance of defaulting onher credit card payment. What are the odds that she will de-fault?196 4. Classification
10. Equation 4.32derived an expression for the
setting where p>1, so that the mean for the kth class, µk, is ap-
dimensional vector, and the shared covariance Σis ap×pmatrix.
However, in the setting with p=1,(4.32) takes a simpler form, since
the means µ1,...,µ Kand the variance σ2are scalars. In this simpler
setting, repeat the calculation in ( 4.32), and provide expressions for
akandbkjin terms of πk,πK,µk,µK, andσ2.
11. Workoutthedetailedformsof ak,bkj,andbkjlin(4.33).Youranswer
should involve πk,πK,µk,µK,Σk, andΣK.
12. Suppose that you wish to classify an observation X∈Rintoapples
andoranges. You fit a logistic regression model and find that
/hatwiderPr(Y=orange |X=x)=exp( ˆβ0+ˆβ1x)
1 + exp( ˆβ0+ˆβ1x).
Your friend fits a logistic regression model to the same data using the
softmaxformulation in ( 4.13), and finds that
/hatwiderPr(Y=orange |X=x)=
exp(ˆαorange 0+ˆαorange 1x)
exp(ˆαorange 0+ˆαorange 1x) + exp(ˆ αapple 0+ˆαapple 1x).
(a) What is the log odds of orangeversusapplein your model?
(b) What is the log odds of orangeversusapplein your friend’s
model?
(c) Suppose that in your model, ˆβ0=2 andˆβ1=−1. What are
the coefficient estimates in your friend’s model? Be as specific
as possible.
(d) Now suppose that you and your friend fit the same two models
on a different data set. This time, your friend gets the coefficient
estimates ˆαorange 0=1.2,ˆαorange 1=−2,ˆαorange 0=3,ˆαorange 1=
0.6. What are the coefficient estimates in your model?
(e) Finally, suppose you apply both models from (d) to a data set
with 2,000 test observations. What fraction of the time do you
expect the predicted class labels from your model to agree with
those from your friend’s model? Explain your answer.
Applied
13. This question should be answered using the Weeklydata set, which
is part of the ISLPpackage. This data is similar in nature to the
Smarketdata from this chapter’s lab, except that it contains 1,089
weekly returns for 21 years, from the beginning of 1990 to the end of
2010.
(a) Produce some numerical and graphical summaries of the Weekly
data. Do there appear to be any patterns?4.8 Exercises 197(b) Use the full data set to perform a logistic regression withDirectionas the response and the five lag variables plusVolumeas predictors. Use the summary function to print the results. Doany of the predictors appear to be statistically significant? If so,which ones?(c) Compute the confusion matrix and overall fraction of correctpredictions. Explain what the confusion matrix is telling youabout the types of mistakes made by logistic regression.(d) 1990 to 2008, withLag2as the only predictor. Compute theconfusion matrix and the overall fraction of correct predictionsfor the held out data (that is, the data from 2009 and 2010).(e) Repeat (d) using LDA.(f) Repeat (d) using QDA.(g) Repeat (d) using KNN withK=1.(h) Repeat (d) using naive Bayes.(i) Which of these methods appears to provide the best results onthis data?(j) Experiment with different combinations of predictors, includ-ing possible transformations and interactions, for each of themethods. Report the variables, method, and associated confu-sion matrix that appears to provide the best results on the heldout data. Note that you should also experiment with values forKin the KNN classifier.14. In this problem, you will develop a model to predict whether a givencar gets high or low gas mileage based on theAutodata set.(a) Create a binary variable,mpg01, that contains a 1 ifmpgcontainsa value above its median, and a 0 ifmpgcontains a value belowits median. You can compute the median using themedian()method of the data frame. Note you may find it helpful to adda columnmpg01to the data frame by assignment. Assuming youhave stored the data frame asAuto, this can be done as follows:Auto['mpg01']=m p g 0 1(b) Explore the data graphically in order to investigate the associ-ation betweenmpg01and the other features. Which of the otherfeatures seem most likely to be useful in predictingmpg01? Scat-terplots and boxplots may be useful tools to answer this ques-tion. Describe your findings.(c) Split the data into a training set and a test set.(d) Perform LDA on the training data in order to predictmpg01using the variables that seemed most associated withmpg01in(b). What is the test error of the model obtained?198 4. Classification(e) Perform QDA on the training data in order to predictmpg01using the variables that seemed most associated withmpg01in(b). What is the test error of the model obtained?(f) Perform logistic regression on the training data in order to pre-dictmpg01using the variables that seemed most associated withmpg01in (b). What is the test error of the model obtained?(g) Perform naive Bayes on the training data in order to (b). What is the test error of the model obtained?(h) Perform KNN on the training data, with several values ofK, inorder to predictmpg01. Use only the variables that seemed mostassociated withmpg01in (b). What test errors do you obtain?Which value ofKseems to perform the best on this data set?15. This problem involves writing functions.(a) Write a function,Power(), that prints out the result of raising2to the3rd power. In other words, your function should compute23and print out the results.Hint: Recall thatx**araisesxto the powera. Use theprint()function to display the result.(b) Create a new function,Power2(), that allows you to passanytwo numbers,xanda, and prints out the value ofx**a. You cando this by beginning your function with the linedef Power2(x, Using thePower2()function that you just wrote, compute103,817, and1313.(d) Now create a new function,Power3(), that actuallyreturnstheresultx**aas aPythonobject, rather than simply printing itto the screen. That is, if you store the valuex**ain an objectcalledresultwithin your function, then you can simplyreturnreturnthis result, using the following line:return resultNote that the line above should be the last line in your function,and it should be indented 4 spaces.(e) Now using thePower3()function, create a plot off(x)=x2.Thex-axis should display a range of integers from1to10, andthey-axis should displayx2. Label the axes appropriately, anduse an appropriate title for the figure. Consider displaying eitherthex-axis, they-axis, or both on the log-scale. You can do thisby using theax.set_xscale()andax.set_yscale()methods of.set_xscale().set_yscale()the axes you are plotting to.4.8 Exercises 199(f) Create a function,PlotPower(), that allows you to create a plotofxagainstx**afor a fixedaand a sequence of values ofx. Forinstance, if you callPlotPower(np.arange(1, 11), 3)then a plot should be created with anx-axis taking on values1,2,...,10, and ay-axis taking on values13,23,...,103.16. Using theBostondata set, fit classification models in order to predictwhether a given suburb has a crime rate above or below the subsets of the predictors. Describe your findings.Hint: You will have to create the response variable yourself, using thevariables that are contained in theBostondata set.5
Resampling Methods
Resampling methods are an indispensable tool in modern statistics. interest on each sample in order to obtain additional information fit, we can repeatedly draw different samples from the training
data, fit a linear regression to each new sample, and then examine the
extent to which the resulting fits differ. Such an approach may allow us to
obtain information that would not be available from fitting the model only
once using the original training sample.
Resampling approaches can be computationally expensive, because they
involve fitting the same statistical method multiple times using different
subsets of the training data. However, due to recent advances in computing
power, the computational requirements of resampling methods generally
are not prohibitive. In this chapter, we discuss two of the most commonly
usedresamplingmethods, cross-validation andthebootstrap .Bothmethods
are important tools in the practical application of many statistical learning
procedures. For example, cross-validation can be used to estimate the performance, or to select the appropriate level of flexibility. The model assessment ,whereasmodel
assessmenttheprocess of selecting theproper levelof flexibilityfora model is knownas
model selection . The bootstrap is used in several contexts, most commonlymodel
selectionto provide a measure of accuracy of a parameter estimate or of a given
statistical learning method.
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_5  201202 5. Resampling Methods
5.1 Cross-Validation
In Chapter 2we discuss the distinction between the test error rate and the
trainingerrorrate is, a measurement that was not used in training the method. Given
a data set, the use of a particular statistical learning method is warranted
if it results in a low test error. The test error can be easily calculated if a
designated test set is available. Unfortunately, this is usually not the case.
In contrast, the training error can be easily calculated by applying the
statistical learning method to the observations used in its training. But as
we saw in Chapter 2, the training error rate often is quite different from the
test error rate, and in particular the former can dramatically underestimate
the latter.
In the absence of a very large designated test set that can be used to
directly estimate the test error rate, a number of techniques can be used
to estimate this quantity using the available training data. Some methods
make a mathematical adjustment to the training error rate in order to
estimate the test error rate. Such approaches are discussed in Chapter 6.
In this section, we instead consider a class of methods that estimate the
test error rate by holding out a subset of the training observations from the
fitting process, and then applying the statistical learning method to those
held out observations.
In Sections 5.1.1–5.1.4, for simplicity we assume that we are interested
in performing regression with a quantitative response. In Section 5.1.5we
consider the case of classification with a qualitative response. As we will
see, the key concepts remain the same regardless of whether the response
is quantitative or qualitative.
5.1.1 The Validation Set Approach
Suppose that we would like to estimate the test error associated with fit-
ting a particular statistical learning method on a set of observations. The
validation set approach , displayed in Figure 5.1, is a very simple strategyvalidation
set approachfor this task. It involves randomly dividing the available set of observa-
tions into two parts, a training set and avalidation set orhold-out set . Thevalidation
set
hold-out setmodel is fit on the training set, and the fitted model is used to predict error rate—typically assessed using MSE in the case of a quantitative
response—provides an estimate of the test error Autodataset.Recallfrom
Chapter 3that there appears to be a non-linear relationship between mpg
andhorsepower , and that a model that predicts mpgusinghorsepower and
horsepower2gives better results than a model that uses only a linear term.
It is natural to wonder whether a cubic or higher-order fit might provide
even better results. We answer this question in Chapter 3by looking at
the p-values associated with a cubic term and higher-order polynomial
terms in a linear regression. But we could also answer this question using
the validation method. We randomly split the 392observations into two5.1 Cross-Validation 5.1. A schematic display of the validation set approach. A set of n
observations are randomly split into a training set (shown in blue, containing
observations 7, 22, and 13, among others) and a validation set (shown in beige,
and containing observation 91, among others). The statistical learning method is
fit on the training set, and its performance is evaluated on the validation set.
sets, a training set containing 196of the data points, and a validation set
containing the remaining 196observations. The validation set error rates
that result from fitting various regression models on the training sample
and evaluating their performance on the validation sample, using MSE
as a measure of validation set error, are shown in the left-hand panel of
Figure5.2. The validation set MSE for the quadratic fit is is actually slightly larger than for the quadratic fit. This implies that
including a cubic term in the regression does not lead to better prediction
than simply using a quadratic term.
Recall that in order to create the left-hand panel of Figure 5.2, we ran-
domly divided the data set into two parts, a training set and a validation
set. If we repeat the process of randomly splitting the sample set into two
parts, we will get a somewhat different estimate for the test MSE. As an
illustration, the right-hand panel of Figure 5.2displays ten different vali-
dation set MSE curves from the Autodata set, produced using ten different
random splits of the observations into training and validation sets. All ten
curves indicate that the model with a quadratic term has a dramatically
smaller validation set MSE than the model with only a linear term. Fur-
thermore, all ten curves indicate that there is not much benefit in including
cubic or higher-order polynomial terms in the model. But it is worth noting
that each of the ten curves results in a different test MSE estimate for each
of the ten regression models considered. And there is no consensus among
the curves as to which model results in the smallest validation set MSE.
Based on the variability among these curves, all that we can conclude with
any confidence is that the linear fit is not adequate for this data.
The validation set approach is conceptually simple and is easy to imple-
ment. But it has two potential drawbacks:
1. As is shown in the right-hand panel of Figure 5.2, the validation esti-
mate of the test error rate can be highly variable, depending on pre-
cisely which observations are included in the training set and which
observations are included in the validation set.
2. In the validation approach, only a subset of the observations—those
that are included in the training set rather than in the validation
set—are used to fit the model. Since statistical methods tend to per-
form worse when trained on fewer observations, this suggests that the204 5. Resampling Methods
2 4 6 8 1016 18 20 22 24 26 28Degree of PolynomialMean Squared Error2 4 6 8 1016 18 20 22 24 26 28Degree of PolynomialMean Squared ErrorFIGURE 5.2. The validation set approach was used on the Autodata set in
order to estimate the test error that results from predicting mpgusing polynomial
functions of horsepower .Left:Validation error estimates for a single split into
training and validation data sets. Right:The validation method was repeated ten
times, each time using a different random split of the observations into a training
set and a validation set. This illustrates the variability in the estimated test MSE
that results from this approach.
validation set error rate may tend to overestimate the test error rate
for the model fit on the entire data set.
In the coming subsections, we will present cross-validation , a refinement of
the validation set approach that addresses these two issues.
5.1.2 Leave-One-Out Cross-Validation
Leave-one-out cross-validation approach of Section 5.1.1, but it attempts to address that method’s
drawbacks.
Like the validation set approach, LOOCV involves splitting the set of
observations into two parts. However, instead of creating two subsets of
comparable size, a single observation (x1,y1)is used for the validation
set, and the remaining observations {(x2,y2),...,(xn,yn)}make up the
training set. The statistical learning method is fit on the n−1training
observations, and a prediction ˆy1is made for the excluded observation,
usingitsvalue x1.Since(x1,y1)wasnotusedinthefittingprocess, MSE 1=
(y1−ˆy1)2provides an approximately unbiased estimate for the test error.
But even though MSE 1is unbiased for the test error, it is a poor estimate
because it is highly variable, since it is based upon a single observation
(x1,y1).
We can repeat the procedure by selecting (x2,y2)for the validation
data, training the statistical learning procedure on the MSE 2=(y2−ˆy2)2.Repeat-
ing this approach ntimes produces nsquared errors, MSE 1,..., MSE n.
The LOOCV estimate for the test MSE is the average of these ntest error
estimates:
CV (n)=1
nn/summationdisplay
i=1MSE i. (5.1)5.1 Cross-Validation 5.3. A schematic display of LOOCV. A set of ndata points is repeat-
edly split into a training set (shown in blue) containing all but one observation,
and a validation set that contains only that observation (shown in beige). The test
error is then estimated by averaging the nresulting MSEs. The first training set
contains all but observation 1, the second training set contains all but observation
2, and so forth.
A schematic of the LOOCV approach is illustrated in Figure 5.3.
LOOCV has a couple of major advantages over the validation set ap-
proach. First, it has far less bias. In LOOCV, we repeatedly fit the sta-
tistical learning method using training sets that contain n−1observa-
tions, almost as many as are in the entire data set. This is in contrast to
the validation set approach, in which the training set is typically around
half the size of the original data set. Consequently, the LOOCV approach
tends not to overestimate the test error rate as much as the validation
set approach does. Second, in contrast to the validation approach which
will yield different results when applied repeatedly due to randomness in
the training/validation set splits, performing LOOCV multiple times will
always yield the same results: there is no randomness in the training/vali-
dation set splits.
We used LOOCV on the Autodata set in order to obtain an estimate
of the test set MSE that results from fitting a linear regression model to
predictmpgusingpolynomialfunctionsof horsepower .Theresultsareshown
in the left-hand panel of Figure 5.4.
LOOCV has the potential to be expensive to implement, since the model
has to be fit ntimes. This can be very time consuming if nis large, and if
each individual model is slow to fit. With least squares linear or polynomial
regression, an amazing shortcut makes the cost of LOOCV the same as that
of a single model fit! The following formula holds:
CV (5.2)206 5. Resampling Methods
2 4 6 8 1016 18 20 22 24 26 28LOOCV
Degree of PolynomialMean Squared Error2 4 6 8 1016 18 20 22 24 26 2810−fold CV
Degree of PolynomialMean Squared ErrorFIGURE 5.4. Cross-validation was used on the Autodata set in order to
estimate the test error that results from predicting mpgusing polynomial functions
ofhorsepower .Left:The LOOCV error curve. Right:10-fold CV was run nine
separate times, each with a different random split of the data into ten parts. The
figure shows the nine slightly different CV error curves.
whereˆyiis theith fitted value from the original least squares fit, and hiis
the leverage defined in ( 3.37) on page 105.1This is like the ordinary MSE,
except the ith residual is divided by 1−hi. The leverage lies between 1/n
and1, and reflects the amount that an observation influences its own fit.
Hence the residuals for high-leverage points are inflated in this formula by
exactly the right amount for this equality to hold.
LOOCV is a very general method, and can be used with any kind of
predictive modeling. For example we could use it with logistic regression
or linear discriminant analysis, or any of the methods discussed in later
chapters. The magic formula ( 5.2) does not hold in general, in which case
the model has to be refit ntimes.
5.1.3k-Fold Cross-Validation
An alternative to LOOCV is k-fold CV . This approach involves randomlyk-fold CVdividing the set of observations into kgroups, or folds, of approximately
equal size. The first fold is treated as a validation set, and the method
is fit on the remaining k−1folds. The mean squared error, MSE 1, is
then computed on the observations in the held-out fold. This procedure is
repeated ktimes; each time, a different group of observations is treated
as a validation set. This process results in kestimates of the test error,
MSE 1,MSE 2,...,MSE k. Thek-fold CV estimate is computed by averaging
these values,
CV (k)=1
kk/summationdisplay
i=1MSE i. (5.3)
Figure5.5illustrates the k-fold CV approach.
1In the case of multiple linear regression, the leverage takes a slightly more compli-
cated form than ( 3.37), but (5.2) still holds.5.1 Cross-Validation 5.5. A schematic display of 5-fold CV. A set of nobservations is
randomly split into five non-overlapping groups. Each of these fifths acts as a
validation set (shown in beige), and the remainder as a training set (shown in
blue). The test error is estimated by averaging the five resulting MSE estimates.
It is not hard to see that LOOCV is a special case of k-fold CV in which k
is set to equal n. In practice, one typically performs k-fold CV using k=5
ork= 10 . What is the advantage of using k=5 ork= 10 rather than
k=n? The most obvious advantage is computational. LOOCV requires
fitting the statistical learning method ntimes. This has the potential to be
computationally expensive (except for linear models fit by least squares,
in which case formula ( 5.2) can be used). But cross-validation is a very
general approach that can be applied to almost any statistical learning
method. Some statistical learning methods have computationally intensive
fitting procedures, and so performing LOOCV may pose computational
problems, especially if nis extremely large. In contrast, performing 10-fold
CV requires fitting the learning procedure only ten times, which may be
much more feasible. As we see in Section 5.1.4, there also can be other
non-computational advantages to performing 5-fold or10-fold CV, which
involve the bias-variance trade-off.
The right-hand panel of Figure 5.4displays nine different 10-fold CV
estimates for the Autodata set, each resulting from a different random split
of the observations into ten folds. As we can see from the figure, there is
some variability in the CV estimates as a result of the variability in how
the observations are divided into ten folds. But this variability is typically
much lower than the variability in the test error estimates that results from
the validation set approach (right-hand panel of Figure 5.2).
When we examine real data, we do not know the truetest MSE, and
so it is difficult to determine the accuracy of the cross-validation estimate.
However, if we examine simulated data, then we can compute the true
test MSE, and can thereby evaluate the accuracy of our cross-validation
results. In Figure 5.6, we plot the cross-validation estimates and true test
error rates that result from applying smoothing splines to the simulated
data sets illustrated in Figures 2.9–2.11of Chapter 2. The true test MSE
is displayed in blue. The black dashed and orange solid lines respectively
show the estimated LOOCV and 10-fold CV estimates. In all three plots,
the two cross-validation estimates are very similar. In the right-hand panel208 5. Resampling Methods
25 10 200.0 0.5 1.0 1.5 2.0 2.5 3.0FlexibilityMean Squared Error25 10 200.0 0.5 1.0 1.5 2.02.5 3.0
FlexibilityMean Squared Error25 10 2005101520
FlexibilityMean Squared ErrorFIGURE 5.6. True and estimated test MSE for the simulated data sets in
Figures2.9(left),2.10(center), and2.11(right). The true test MSE is shown
in blue, the LOOCV estimate is shown as a black dashed line, and the 10-fold
CV estimate is shown in orange. The crosses indicate the minimum of each of
the MSE curves.
of Figure 5.6, the true test MSE and the cross-validation curves are almost
identical. In the center panel of Figure 5.6, the two sets of curves are similar
at the lower degrees of flexibility, while the CV curves overestimate the 5.6,
the CV curves have the correct general shape, but they underestimate the
true test MSE.
When we perform cross-validation, our goal might be to determine how
well a given statistical learning procedure can be expected to perform on
independent data; in this case, the actual estimate of the test MSE is
of interest. But at other times we are interested only in the location of
theminimum point in the estimated test MSE curve . This is because we
might be performing cross-validation on a number of statistical learning
methods, or on a single method using different levels of flexibility, in location of the minimum point in the estimated test MSE curve is
important, but the actual value of the estimated test MSE is not. We find
in Figure 5.6that despite the fact that they sometimes underestimate the
true test MSE, all of the CV curves come close to identifying the MSE.
5.1.4 Bias-Variance Trade-Off for k-Fold Cross-Validation
We mentioned in Section 5.1.3thatk-fold CV with k<n has a compu-
tational advantage to LOOCV. But putting computational issues aside,
a less obvious but potentially more important advantage of k-fold CV is
that it often gives more accurate estimates of the test error rate than does
LOOCV. This has to do with a bias-variance trade-off.
It was mentioned in Section 5.1.1that the validation set approach can
lead to overestimates of the test error rate, since in this approach the
training set used to fit the statistical learning method contains only half
the observations of the entire data set. Using this logic, it is not hard to see5.1 Cross-Validation 209
that LOOCV will give approximately unbiased estimates of the test error,
since each training set contains n−1observations, which is almost as many
as the number of observations in the full data set. And performing k-fold
CV for, say, k=5 ork= 10 will lead to an intermediate level of bias,
since each training set contains approximately (k−1)n/kobservations—
fewer than in the LOOCV approach, but substantially more than in the
validation set approach. Therefore, from the perspective of bias reduction,
it is clear that LOOCV is to be preferred to k-fold CV.
However, we know that bias is not the only source for concern in an esti-
mating procedure; we must also consider the procedure’s variance. It turns
outthatLOOCV hashigher variancethan does k-foldCVwith k<n .Why
is this the case? When we perform LOOCV, we are in effect averaging the
outputs of nfitted models, each of which is trained on an almost identical
set of observations; therefore, these outputs are highly (positively) corre-
lated with each other. In contrast, when we perform k-fold CV with k<n ,
we are averaging the outputs of kfitted models that are somewhat less
correlated with each other, since the overlap between the training sets in
each model is smaller. Since the mean of many highly correlated quantities
has higher variance than does the mean of many quantities that are not
as highly correlated, the test error estimate resulting from LOOCV tends
to have higher variance than does the test error estimate resulting from
k-fold CV.
To summarize, there is a bias-variance trade-off associated with the
choice of kink-fold cross-validation. Typically, given these considerations,
one performs k-fold cross-validation using k=5ork= 10 , as these values
have been shown empirically to yield test error rate estimates that suffer
neither from excessively high bias nor from very high variance.
5.1.5 Cross-Validation on Classification Problems
In this chapter so far, we have illustrated the use of cross-validation in the
regression setting where the outcome Yis quantitative, and so have used
MSE to quantify test error. But cross-validation can also be a very useful
approach in the classification setting when Yis qualitative. In this setting,
cross-validation works just as described earlier in this chapter, except that
rather than using MSE to quantify test error, we instead use the number
of misclassified observations. For instance, in the classification setting, the
LOOCV error rate takes the form
CV (n)=1
nn/summationdisplay
i=1Err i, (5.4)
whereErr i=I(yi/negationslash=ˆyi). Thek-fold CV error rate and validation set error
rates are defined analogously.
As an example, we fit various logistic regression models on the two-
dimensional classification data displayed in Figure 2.13. In the top-left
panelofFigure resulting from fitting a standard logistic regression model to this data
set. Since this is simulated data, we can compute the truetest error rate,
which takes a value of 0.201and so is substantially larger than the Bayes210 5. Resampling 5.7. Logistic regression fits on the two-dimensional classification data
displayed in Figure 2.13. The Bayes decision boundary is represented using a
purple dashed line. Estimated decision boundaries from linear, quadratic, cubic
and quartic (degrees 1–4) logistic regressions are displayed in black. The test error
rates for the four logistic regression fits are respectively 0.201,0.197,0.160, and
0.162, while the Bayes error rate is 0.133.
error rate of 0.133. Clearly logistic regression does not have enough flexi-
bility to model the Bayes decision boundary in this setting. We can easily
extend logistic regression to obtain a non-linear decision boundary by using
polynomial functions of the predictors, as we did in the regression setting in
Section3.3.2. For example, we can fit a quadratic logistic regression model,
given (5.5)
The top-right panel of Figure 5.7displays the resulting decision A much larger improvement is apparent in the bottom-left panel5.1 Cross-Validation 211
2 4 6 8 100.12 0.14 0.16 0.18 0.20Order of Polynomials UsedError Rate0.01 0.02 0.05 0.10 0.20 0.50 1.000.12 0.14 0.16 0.18 0.201/KError RateFIGURE 5.8. Test error (brown), training error (blue), and 10-fold CV error
(black) on the two-dimensional classification data displayed in Figure 5.7.Left:
Logistic regression using polynomial functions of the predictors. The order of
the polynomials used is displayed on the x-axis.Right:The KNN classifier with
different values of K, the number of neighbors used in the KNN classifier.
of Figure 5.7, in which we have fit a logistic regression model involving
cubic polynomials of the predictors. Now the test error rate has decreased
to0.160. Going to a quartic polynomial (bottom-right) slightly increases
the test error.
In practice, for real data, the Bayes decision boundary and the test er-
ror rates are unknown. So how might we decide between the four logistic
regression models displayed in Figure 5.7? We can use cross-validation in
order to make this decision. The left-hand panel of Figure 5.8displays in
black the 10-fold CV error rates that result from fitting ten logistic regres-
sion models to the data, using polynomial functions of the predictors up
to tenth order. The true test errors are shown in brown, and the training
errors are shown in blue. As we have seen previously, the training error
tends to decrease as the flexibility of the fit increases. (The figure indicates
that though the training error rate doesn’t quite decrease monotonically,
it tends to decrease on the whole as the model complexity increases.) In
contrast, the test error displays a characteristic U-shape. The 10-fold CV
error rate provides a pretty good approximation to the test error rate.
While it somewhat underestimates the error rate, it reaches a minimum
when fourth-order polynomials are used, which is very close to the min-
imum of the test curve, which occurs when third-order polynomials are
used. In fact, using fourth-order polynomials would likely lead to good test
set performance, as the true test error rate is approximately the same for
third, fourth, fifth, and sixth-order polynomials.
The right-hand panel of Figure 5.8displays the same three curves us-
ing the KNN approach for classification, as a function of the value of K
(which in this context indicates the number of neighbors used in the KNN
classifier, rather than the number of CV folds used). Again the training
error rate declines as the method becomes more flexible, and so we see that
the training error rate cannot be used to select the optimal value for K.
Though the cross-validation error curve slightly underestimates the test
error rate, it takes on a minimum very close to the best value for K.212 5. Resampling Methods
5.2 The Bootstrap
Thebootstrap is a widely applicable and extremely powerful statistical toolbootstrapthat can be used to quantify the uncertainty associated with a given esti-
mator or statistical learning method. As a simple example, the bootstrap
can be used to estimate the standard errors of the coefficients from a linear
regression fit. In the specific case of linear regression, this is not particularly
useful, since we saw in Chapter 3that standard statistical software such as
Routputs such standard errors automatically. However, the power of the
bootstrap lies in the fact that it can be easily applied to a wide range of
statistical learning methods, including some for which a measure of vari-
ability is otherwise difficult to obtain and is not automatically output by
statistical software.
In this section we illustrate the bootstrap on a toy example in which we
wish to determine the best investment allocation under a simple model.
In Section 5.3we explore the use of the bootstrap to assess the variability
associated with the regression coefficients in a linear model fit.
Suppose that we wish to invest a fixed sum of money in two financial
assets that yield returns of XandY, respectively, where XandYare
random quantities. We will invest a fraction αof our money in X, and will
invest the remaining 1−αinY. Since there is variability associated with
the returns on these two assets, we wish to choose αto minimize the total
risk, or variance, of our investment. In other words, we want to minimize
Var(αX+ (1 −α)Y). One can show that the value that minimizes the risk
is given by
α=σ2
Y−σXY
σ2
X+σ2
Y−2σXY, (5.6)
whereσ2
X= Var( X),σ2
Y= Var( Y), andσXY= Cov( X,Y).
Inreality,thequantities for these quantities, ˆσ2
X,ˆσ2
Y, andˆσXY, using a data set that
contains past measurements for XandY. We can then estimate the value
ofαthat minimizes the variance of our investment using
ˆα=ˆσ2
Y−ˆσXY
ˆσ2
X+ˆσ2
Y−2ˆσXY. (5.7)
Figure5.9illustrates this approach for estimating αon a simulated data
set. In each panel, we simulated 100pairs of returns for the investments
XandY. We used these returns to estimate σ2
X,σ2
Y, andσXY, which we
then substituted into ( 5.7) in order to obtain estimates for α. The value of
ˆαresulting from each simulated data set ranges from 0.532to0.657.
It is natural to wish to quantify the accuracy of our estimate of α.T o
estimate the standard deviation of ˆα, we repeated the process of simu-
lating100paired observations of XandY, and estimating αusing (5.7),
1,000 times. We thereby obtained 1,000 estimates for α, which we can call
ˆα1,ˆα2,..., ˆα1,000. The left-hand panel of Figure 5.10displays a histogram
of the resulting estimates. For these simulations the parameters were set to
σ2
X=1,σ2
Y=1.25, andσXY=0.5, and so we know that the true value of
αis0.6. We indicated this value using a solid vertical line on the histogram.5.2 The Bootstrap 213
−2 −1 0 1 2−2 −1 0 1 2XY
−2 −1 0 1 2−2 −1 0 1 2XY
−3 −2 −1 0 1 2−3 −2 −1 0 1 2XY
−2 −1 0 1 2 3−3 −2 −1 0 1 2XYFIGURE 5.9. Each panel displays 100 simulated returns for investments
XandY. From left to right and top to bottom, the resulting estimates for α
are0.576,0.532,0.657, and0.651.
The mean over all 1,000 estimates for ,
very close to α=0.6, and the standard deviation of the estimates gives us a very good idea of the accuracy of ˆα:SE(ˆα)≈0.083. So
roughly speaking, for a random sample from the population, we would
expectˆαto differ from αby approximately 0.08, on average.
In practice, however, the procedure for estimating SE(ˆα)outlined above
cannot be applied, because for real data we cannot generate new samples
from the original population. However, the bootstrap approach allows us
to use a computer to emulate the process of obtaining new sample sets,
so that we can estimate the variability of ˆαwithout generating additional
samples. Rather than repeatedly obtaining independent data sets from the
population, we instead obtain distinct data sets by repeatedly sampling
observations from the original data set .
This approach is illustrated in Figure 5.11on a simple data set, which
we callZ, that contains only n=3 observations. We randomly select n
observations from the data set in order to produce a bootstrap data set,214 5. Resampling Methods
0.4 0.5 0.6 0.7 0.8 0.90 50 100 150 2000.3 0.4 0.5 0.6 0.7 0.8 0.90 50 100 150 200TrueBootstrap0.3 0.4 0.5 0.6 0.7 0.8 0.9αα
αFIGURE 5.10. Left:A histogram of the estimates of αobtained by generating
1,000 simulated data sets from the true population. Center:A histogram of the
estimates of αobtained from 1,000 bootstrap samples from a single data set.
Right:The estimates of αdisplayed in the left and center panels are shown as
boxplots. In each panel, the pink line indicates the true value of α.
Z∗1. The sampling is performed with replacement , which means that thewith
replacementsame observation can occur more than once in the bootstrap data set. In
this example, Z∗1contains the third observation twice, the first contained in Z∗1, then both its XandYvalues are included. We can use
Z∗1to produce a new bootstrap estimate for α, which we call ˆα∗1. This
procedureisrepeated Btimesforsomelargevalueof B,inordertoproduce
Bdifferent bootstrap data sets, Z∗1,Z∗2,...,Z∗B, andBcorresponding α
estimates, ˆα∗1,ˆα∗2,..., ˆα∗B. We can compute the standard error of these
bootstrap estimates using the (5.8)
This serves as an estimate of the standard error of ˆαestimated from the
original data set.
The bootstrap approach is illustrated in the center panel of Figure 5.10,
which displays a histogram of 1,000 bootstrap estimates of α, each com-
puted using a distinct bootstrap data set. This panel was constructed on
the basis of a single data set, and hence could be created using real data.
Note that the histogram looks very similar to the left-hand panel, which
displays the idealized histogram of the estimates of αobtained by generat-
ing 1,000 simulated data sets from the true population. In particular the
bootstrap estimate SE(ˆα)from (5.8) is0.087, very close to the estimate of
0.083obtained using 1,000 simulated data sets. The right-hand panel dis-
plays the information in the center and left panels in a different way, via
boxplots of the estimates for αobtained by generating 1,000 simulated data
sets from the true population and using the bootstrap approach. Again, the
boxplots have similar spreads, indicating that the bootstrap approach can
be used to effectively estimate the variability associated with ˆα.5.3 Lab: Cross-Validation and the Bootstrap 215
2.8 5.3 3 1.1 2.1 2 2.4 4.3 1 Y X Obs 2.8 5.3 3 2.4 4.3 1 2.8 5.3 3 Y X Obs 
2.4 4.3 1 2.8 5.3 3 1.1 2.1 2 Y X Obs 
2.4 4.3 1 1.1 2.1 2 1.1 2.1 2 Y X Obs Original Data (Z) 5.11.A graphical illustration of the bootstrap approach on a smallsample containingn=3observations. Each bootstrap data set containsnobser-vations, sampled with replacement from the original data set. Each bootstrap dataset is used to obtain an estimate ofα.5.3 Lab: Cross-Validation and the BootstrapIn this lab, we explore the resampling techniques covered in this chap-ter. Some of the commands in this lab may take a while to run on yourcomputer.We again begin by placing most of our imports at this top level.In[1]:import numpy as npimport statsmodels.api as smfrom ISLP import load_datafrom ISLP.models import (ModelSpec as MS,summarize,poly)from sklearn.model_selection import train_test_splitThere are several new imports needed for this lab.In[2]:from functools import partialfrom sklearn.model_selection import \(cross_validate,KFold,ShuffleSplit)from sklearn.base import clonefrom ISLP.models import sklearn_sm216 5. Resampling Methods5.3.1 The Validation Set ApproachWe explore the use of the validation set approach in order to estimate thetest error rates that result from fitting various linear models on theAutodata set.We use the functiontrain_test_split()to split the data into trainingtrain_test_split()and validation sets. As there are 392 observations, we split into two equalsets of size 196 using the argumenttest_size=196. It is generally a goodidea to set a random seed when performing operations like this that containan element of randomness, so that the results obtained can be reproducedprecisely at a later time. We set the random seed of the splitter with theargumentrandom_state=0.In[3]:Auto = load_data('Auto')Auto_train, Auto_valid = we can fit a linear regression using only the observations corre-sponding to the training setAuto_train.In[4]:hp_mm = MS(['horsepower'])X_train = hp_mm.fit_transform(Auto_train)y_train = Auto_train['mpg']model = sm.OLS(y_train, X_train)results = for this model created using the validation data set. We also calculatethe validation MSE of our model.In[5]:X_valid = hp_mm.transform(Auto_valid)y_valid = Auto_valid['mpg']valid_pred = results.predict(X_valid)np.mean((y_valid - valid_pred)**2)Out[5]:23.6166Hence our estimate for the validation MSE of the linear regression fit is23.62.We can also estimate the validation error for higher-degree polynomialregressions. We first provide a functionevalMSE()that takes a model stringas well as a training and test set and returns the MSE on the test set.In[6]:def evalMSE(terms,response,train,test):mm = MS(terms)X_train = mm.fit_transform(train)y_train = train[response]X_test = mm.transform(test)y_test = test[response]5.3 Lab: Cross-Validation and the Bootstrap 217results = sm.OLS(y_train, X_train).fit()test_pred = results.predict(X_test)return np.mean((y_test - test_pred)**2)Let’s use this function to estimate the validation MSE using linear,quadratic and cubic fits. We use theenumerate()function here, which givesenumerate()both the values and indices of objects as one iterates over a for loop.In[7]:MSE = np.zeros(3)for idx, degree in enumerate(range(1, 4)):MSE[idx] = evalMSE([poly('horsepower',d e g r e e ) ] 18.76, 18.80])These error rates are23.62,18.76, and18.80, respectively. If we choose adifferent training/validation split instead, then we can expect somewhatdifferent errors on the validation set.In[8]:Auto_train, Auto_valid = = np.zeros(3)for idx, degree in enumerate(range(1, 4)):MSE[idx] = evalMSE([poly('horsepower',d e g r e e ) ] 16.95, 16.97])Using this split of the observations into a training set and a validationset, we find that the validation set error rates for the models with linear,quadratic, and cubic terms are20.76,16.95, and16.97, respectively.These results are consistent with our previous findings: a model thatpredictsmpgusing a quadratic function ofhorsepowerperforms better thana model that involves only a linear function ofhorsepower, and there is noevidence of an improvement in using a cubic function ofhorsepower.5.3.2 Cross-ValidationIn theory, the cross-validation estimate can be computed for any general-ized linear model. In practice, however, the simplest way to cross-validatein Python is to usesklearn, which has a different interface or API thanstatsmodels, the code we have been using to fit do taskA, and need to feed it into something that performs taskB, sothat I can computeB(A(D)), whereDis my data.” WhenAandBdon’tnaturally speak to each other, this requires the use of awrapper. In theISLPwrapper218 5. Resampling Methods
package, we provide a wrapper, sklearn_sm() , that enables us to easily usesklearn_sm()the cross-validation tools of sklearnwith models fit by statsmodels .
Theclass sklearn_sm() hasasitsfirstargumentamodelfrom statsmodels .
Itcantaketwoadditional optionalarguments: model_str whichcanbeused
to specify a formula, and model_args which should be a dictionary of addi-
tional arguments used when fitting the model. For example, to fit a logistic
regression model we have to specify a familyargument. This is passed .
Here is our wrapper in action:
In[9]: hp_model = sklearn_sm(sm.OLS,
MS(['horsepower' ]))
X, Y = Auto.drop(columns=[ 'mpg']), Auto[ 'mpg']
cv_results = = np.mean(cv_results[ 'test_score' ])
cv_err
Out[9]: 24.2315
The arguments to cross_validate() are as follows: an object with the ap-
propriate fit(),predict() ,andscore()methods,anarrayoffeatures Xand
aresponse Y.Wealsoincludedanadditionalargument cvtocross_validate() ;
specifyinganinteger Kresultsin K-foldcross-validation.Wehaveprovided
a value corresponding to the total number of observations, which results
in leave-one-out cross-validation (LOOCV). The cross_validate() func-cross_
validate() tion produces a dictionary with several components; we simply want the
cross-validated test score here (MSE), which is estimated to be 24.23.
We can repeat this procedure for increasingly complex polynomial fits.
To automate the process, we again use a for loop which iteratively fits
polynomial regressions of degree 1 to 5, computes the associated cross-
validation error, and stores it in the ith element of the vector cv_error .
The variable din the for loop corresponds to the degree of the polynomial.
We begin by initializing the vector. This command may take a couple of
seconds to run.
In[10]: cv_error = np.zeros(5)
H=n p . a r r a y ( A u t o [ 'horsepower' ])
M=s k l e a r n _ s m ( s m . O L S )
for i, d in enumerate(range(1,6)):
X=n p . p o w e r . o u t e r ( H ,n p . a r a n g e ( d + 1 ) )
M_CV = = np.mean(M_CV[ 'test_score' ])
cv_error
Out[10]: array([24.2315, 19.2482, 19.3350, 19.4244, 19.0332])
As in Figure 5.4, we see a sharp drop in the estimated test MSE between
the linear and quadratic fits, but then no clear improvement from using
higher-degree polynomials.5.3 Lab: Cross-Validation and the Bootstrap 219
Above we introduced the outer() method of the np.power() function..outer()
np.power()Theouter()method is applied to an operation that has two arguments,
such as add(),min(), orpower(). It has two arrays as arguments, and then
forms a larger array where the operation is applied to each pair of elements
of the two arrays.
In[11]: A=n p . a r r a y ( [ 3 ,5 ,9 ] )
B=n p . a r r a y ( [ 2 ,4 ] )
np.add.outer(A, B)
Out[11]: array([[ 5, 7],
[7 , 9 ] ,
[11, 13]])
In the CV example above, we used K=n, but of course we can also use
K<n. The code is very similar to the above (and is significantly faster).
Here we use KFold()to partition the data into K= 10random groups. WeKFold()userandom_state to set a random seed and initialize a vector cv_error in
which we will store the CV errors corresponding to the polynomial fits of
degrees one to five.
In[12]: cv_error = np.zeros(5)
cv = #u s es a m es p l i t sf o re a c hd e g r e e
for i, d in enumerate(range(1,6)):
X=n p . p o w e r . o u t e r ( H ,n p . a r a n g e ( d + 1 ) )
M_CV = cross_validate(M,
X,
Y,
cv=cv)
cv_error[i] = np.mean(M_CV[ 'test_score' ])
cv_error
Out[12]: array([24.2077, 19.1853, 19.2763, 19.4785, 19.1372])
Notice that the computation time is much shorter than that of LOOCV.
(In principle, the computation time for LOOCV for a least squares linear
model should be faster than for K-fold CV, due to the availability of the
formula ( 5.2) for LOOCV; however, the generic cross_validate() function
does not make use of this formula.) We still see little evidence that using
cubic or higher-degree polynomial terms leads to a lower test error than
simply using a quadratic fit.
Thecross_validate() function is flexible and can take different splitting
mechanisms as an argument. For instance, one can use the ShuffleSplit()Shuffle
Split() funtion to implement the validation set approach just as easily as K-fold
cross-validation.
In[13]: validation = = cross_validate(hp_model,
Auto.drop([ 'mpg'], 'test_score' ]220 5. Resampling Methods
Out[13]: validation = = cross_validate(hp_model,
Auto.drop([ 'mpg'], axis=1),
Auto['mpg'],
cv=validation)
results[ 'test_score' ].mean(), results[ 'test_score' ].std()
Out[14]: (23.8022, 1.4218)
Note that this standard deviation is not a valid estimate of the sam-
pling variability of the mean test score or the individual scores, since the
randomly-selected training samples overlap and hence introduce correla-
tions. But it does give an idea of the Monte Carlo variation incurred by
picking different random folds.
5.3.3 The Bootstrap
We illustrate the use of the bootstrap in the simple example of Section 5.2,
as well as on an example involving estimating the accuracy of the linear
regression model on the Autodata set.
Estimating the Accuracy of a Statistic of Interest
One of the great advantages of the bootstrap approach is that it can be
applied in almost all situations. No complicated mathematical calculations
are required. While there are several implementations of the bootstrap own function below for the case when our data is stored in a Portfolio
data set in the ISLPpackage is described in Section 5.2. The goal is to es-
timate the sampling variance of the parameter αgiven in formula ( 5.7).
We will create a function alpha_func() , which takes as input a dataframe D
assumed to have columns XandY, as well as a vector idxindicating which
observations should be used to estimate α. The function then outputs the
estimate for αbased on the selected observations.
In[15]: Portfolio = load_data( 'Portfolio' )
def alpha_func(D, idx):
cov_ = np.cov(D[[ 'X','Y']].loc[idx], rowvar=False)
return ((cov_[1,1] - cov_[0,1]) /
(cov_[0,0]+cov_[1,1]-2*cov_[0,1]))
This function returns an estimate for αbased on applying the minimum
varianceformula( 5.7)totheobservationsindexedbytheargument idx.For
instance, the following command estimates αusing all 100 observations.
In[16]: alpha_func(Portfolio, range(100))5.3 Lab: Cross-Validation and the Bootstrap 221Out[16]:0.5758Next we randomly select 100 observations fromrange(100), with replace-ment. This is equivalent to constructing a new bootstrap data set andrecomputingˆαbased on the new data set.In[17]:rng = process can be generalized to create a simple functionboot_SE()forcomputing the bootstrap standard error for arbitrary functions that takeonly a data frame as an argument.In[18]:def boot_SE(func,D,n=None,B=1000,seed=0):rng = np.random.default_rng(seed)first_, second_ = 0, 0n=no rD . s h a p e [ 0 ]for _ in range(B):idx = rng.choice(D.index,n,replace=True)value = func(D, idx)first_ += valuesecond_ += value**2return np.sqrt(second_ / B - (first_ / B)**2)Notice the use of_as a loop variable infor _ in range(B). This is oftenused if the value of the counter is unimportant and simply makes sure theloop is executedBtimes.Let’s use our function to evaluate the accuracy of our estimate ofαusingB=1,000bootstrap replications.In[19]:alpha_SE = final output shows that the bootstrap estimate forSE(ˆα)is0.0912.Estimating the Accuracy of a Linear Regression ModelThe bootstrap approach can be used to assess the variability of the coef-ficient estimates and predictions from a statistical learning method. Herewe use the bootstrap approach in order to assess the variability of the222 5. Resampling Methods
estimates for β0andβ1, the intercept and slope terms for the linear regres-
sion model that uses horsepower to predict mpgin theAutodata set. We
will compare the estimates obtained using the bootstrap to those obtained
using the formulas for SE(ˆβ0)andSE(ˆβ1)described in Section 3.1.2.
To use our boot_SE() function, we must write a function (its first argu-
ment) that takes a data frame Dand indices idxas its only arguments. But
here we want to bootstrap a specific regression model, specified by a model
formula and data. We show how to do this in a few simple steps.
We start by writing a generic function boot_OLS() for bootstrapping a
regression model that takes a formula to define the corresponding regres-
sion. We use the clone()function to make a copy of the formula that canclone()be refit to the new dataframe. This means that any derived features such
as those defined by poly()(which we will see shortly), will be re-fit on the
resampled data frame.
In[20]: def boot_OLS(model_matrix, response, D, idx):
D_ = D.loc[idx]
Y_ = D_[response]
X_ = clone(model_matrix).fit_transform(D_)
return sm.OLS(Y_, boot_SE() .Thefirst
two arguments which specify the model will not change in the bootstrap
process, and we would like to freezethem. The function partial() from thepartial()functools module does precisely this: it takes a function as an argument,
and freezes some of its arguments, starting from the left. We use it to freeze
the first two model-formula arguments of boot_OLS() .
In[21]: hp_func = partial(boot_OLS, MS([ 'horsepower' ]),'mpg')
Typing hp_func? will show that it has two arguments Dandidx— it is a
version of boot_OLS() with the first two arguments frozen — and hence is
ideal as the first argument for boot_SE() .
Thehp_func() function can now be used in order to create bootstrap
estimates for the intercept and slope terms by randomly sampling from
among the observations with replacement. We first demonstrate its utility
on 10 bootstrap samples.
In[22]: rng = for _ in range(10)])
Out[22]: array([[39.8806, -0.1568],
[38.733 , -0.147 ],
[38.3173, -0.1444],
[39.9145, -0.1578],
[39.4335, -0.1507],
[40.3663, -0.1591],
[39.6233, -0.1545],
[39.0581, -0.1495],
[38.6669, -0.1452],
[39.6428, -0.1556]])5.3 Lab: Cross-Validation and the Bootstrap 223
Next, we use the boot_SE() function to compute the standard errors of
1,000 bootstrap estimates for the intercept and slope terms.
In[23]: hp_se = intercept 0.8488
horsepower 0.0074
dtype: float64
This indicates that the bootstrap estimate for SE(ˆβ0)is 0.85, and that
the bootstrap estimate for SE(ˆβ1)is 0.0074. As discussed in Section 3.1.2,
standard formulas can be used to compute the standard errors for the
regression coefficients in a linear model. These can be obtained using the
summarize() function from ISLP.sm.
In[24]: hp_model.fit(Auto, Auto[ 'mpg'])
model_se = summarize(hp_model.results_)[ 'std err' ]
model_se
Out[24]: intercept 0.717
horsepower 0.006
Name: std err, dtype: float64
The standard error estimates for ˆβ0andˆβ1obtained using the formulas
from Section 3.1.2are 0.717 for the intercept and 0.006 for the slope. Inter-
estingly, these are somewhat different from the estimates obtained using
the bootstrap. Does this indicate a problem with the bootstrap? In fact,
it suggests the opposite. Recall that the standard formulas given in Equa-
tion3.8on page75rely on certain assumptions. For example, they depend
on the unknown parameter σ2, the noise variance. We then estimate σ2
using the RSS. Now although the formula for the standard errors do not
rely on the linear model being correct, the estimate for σ2does. We see in
Figure3.8on page 99that there is a non-linear relationship in the data,
and so the residuals from a linear fit will be inflated, and so will ˆσ2. Sec-
ondly, the standard formulas assume (somewhat unrealistically) that the
xiare fixed, and all the variability comes from the variation in the errors
/epsilon1i. The bootstrap approach does not rely on any of these assumptions, and
so it is likely giving a more accurate estimate of the standard errors of ˆβ0
andˆβ1than the results from sm.OLS.
Below we compute the bootstrap standard error estimates and the the data. Since this model provides a good fit to the data (Figure 3.8),
there is now a better correspondence between the bootstrap estimates and
the standard estimates of SE(ˆβ0),SE(ˆβ1)andSE(ˆβ2).
In[25]: quad_model = MS([poly( 'horsepower' ,2 ,r a w = T r u e ) ] )
quad_func = Auto, B=1000)224 5. Resampling Methods
Out[25]: intercept 2.067840
poly(horsepower, 2, raw=True)[0] 0.033019
poly(horsepower, 2, raw=True)[1] 0.000120
dtype: float64
We compare the results to the standard errors computed using sm.OLS() .
In[26]: M=s m . O L S ( A u t o [ 'std err' ]
Out[26]: intercept 1.800
poly(horsepower, 2, raw=True)[0] 0.031
poly(horsepower, 2, raw=True)[1] 0.000
Name: std err, dtype: float64
5.4 Exercises
Conceptual
1. Using basic statistical properties of the variance, as well as single-
variable calculus, derive ( 5.6). In other words, prove that αgiven by
(5.6) does indeed minimize Var(αX+ (1−α)Y).
2. We will now derive the probability that a given observation is part
of a bootstrap sample. Suppose that we obtain a bootstrap sample
from a set of nobservations.
(a) What is the probability that the first bootstrap observation is
notthejth observation from the original sample? Justify your
answer.
(b) What is the probability that the second bootstrap observation
isnotthejth observation from the original sample?
(c) Argue that the probability that the jth observation is notin the
bootstrap sample is (1−1/n)n.
(d) When n=5, what is the probability that the jth observation is
in the bootstrap sample?
(e) When n= 100, what is the probability that the jth observation
is in the bootstrap sample?
(f) When n= 10,000, what is the probability that the jth observa-
tion is in the bootstrap sample?
(g) Create a plot that displays, for each integer value of nfrom1
to100,000, the probability that the jth observation is in the
bootstrap sample. Comment on what you observe.
(h) We will now investigate numerically the probability that a boot-
strap sample of size n= 100contains the jth observation. Here
j=4. We first create an array storewith values that will subse-
quently be overwritten using the function np.empty() . We thennp.empty()5.4 Exercises 225
repeatedly create bootstrap samples, and each time we = np.random.default_rng(10)
store = np.empty(10000)
for i in range(10000):
store[i] = np.sum(rng.choice(100, replace=True) == 4)
>0
np.mean(store)
Comment on the results obtained.
3. We now review k-fold cross-validation.
(a) Explain how k-fold cross-validation is implemented.
(b) What are the advantages and disadvantages of k-fold cross-
validation relative to:
i. The validation set approach?
ii. LOOCV?
4. Suppose that we use some statistical learning method to make a pre-
diction for the response Yfor a particular value of the predictor X.
Carefully describe how we might estimate the standard deviation of
our prediction.
Applied
5. In Chapter 4, we used logistic regression to predict the probability of
defaultusingincomeandbalanceon theDefaultdata set. We will
now estimate the test error of this logistic regression model using the
validation set approach. Do not forget to set a random seed before
beginning your analysis.
(a) Fit a logistic regression model that uses incomeandbalanceto
predict default.
(b) Using the validation set approach, estimate the test error of this
model. In order to do this, you must perform the following steps:
i. Split the sample set into a training set and a validation set.
ii. Fit a multiple logistic regression model using only the train-
ing observations.
iii. Obtain a prediction of default status for each individual in
the validation set by computing the posterior probability of
default for that individual, and classifying the individual to
thedefaultcategory if the posterior probability is greater
than 0.5.
iv. Compute the validation set error, which is the fraction of
the observations in the validation set that are misclassified.
(c) Repeat the process in (b) three times, using three different splits
of the observations into a training set and a validation set. Com-
ment on the results obtained.226 5. Resampling Methods
(d) Now consider a logistic regression model that predicts the prob-
ability of defaultusingincome,balance, and a dummy variable
forstudent. Estimate the test error for this model using the val-
idation set approach. Comment on whether or not including a
dummy variable for studentleads to a reduction in the test error
rate.
6. We continue to consider the use of a logistic regression model to
predict the probability of defaultusingincomeandbalanceon the
Defaultdata set. In particular, we will now compute estimates for the
standard errors of the incomeandbalancelogistic regression coeffi-
cients in two different ways: (1) using the bootstrap, and (2) using the
standard formula for computing the standard errors in the sm.GLM()
function. Do not forget to set a random seed before beginning your
analysis.
(a) Using the summarize() andsm.GLM() functions, determine the
estimated standard errors for the coefficients associated with
incomeandbalancein a multiple logistic regression model that
uses both predictors.
(b) Writeafunction, boot_fn() ,thattakesasinputthe Defaultdata
set as well as an index of the observations, and that outputs
the coefficient estimates for incomeandbalancein the multiple
logistic regression model.
(c) Following the bootstrap example in the lab, use your boot_fn()
function to estimate the standard errors of the logistic regression
coefficients for incomeandbalance.
(d) Comment on the estimated standard errors obtained using the
sm.GLM() function and using the bootstrap.
7. InSections 5.1.2and5.1.3,wesawthatthe cross_validate() function
can be used in order to compute the LOOCV test error estimate.
Alternatively, one could compute those quantities using just sm.GLM()
and the predict() method of the fitted model within a for loop. You
will now take this approach in order to compute the LOOCV error
for a simple logistic regression model on the Weeklydata set. Recall
that in the context of classification problems, the LOOCV error is
given in ( 5.4).
(a) Fitalogisticregressionmodelthatpredicts Direction usingLag1
andLag2.
(b) Fitalogisticregressionmodelthatpredicts Direction usingLag1
andLag2using all but the first observation .
(c) Usethe model from (b) to predict the direction of the first obser-
vation. You can do this by predicting that the first observation
will go up if P(Direction = "Up" |Lag1,Lag2)>0.5. Was this
observation correctly classified?
(d) Write a for loop from i=1toi=n, wherenis the number of
observations in the data set, that performs each of the following
steps:5.4 Exercises 227i. Fit a logistic regression model using all but theith obser-vation to predictDirectionusingLag1andLag2.ii. Compute the posterior probability of the market moving upfor theith observation.iii. predict whether or not the market moves up.iv. Determine whether or not an error was made in predictingthe direction for theith observation. If an error was made,then indicate this as a1, and otherwise indicate it as a0.(e) Take the average of thennumbers obtained in (d)iv in order toobtain the LOOCV estimate for the test error. Comment on theresults.8. We will now perform cross-validation on a simulated data set.(a) Generate a simulated data set as follows:rng = np.random.default_rng(1)x=r n g . n o r m a l ( s i z e = 1 0 0 )y=x-2*x * * 2+r n g . n o r m a l ( s i z e = 1 0 0 )In this data set, what isnand what isp? Write out the modelused to generate the data in equation form.(b) Createa scatterplot ofXagainstY.Commenton what youfind.(c) Set a random seed, and then compute the LOOCV errors thatresult from fitting the following four models using least you may find it helpful to use thedata.frame()functionto create a single data set containing bothXandY.(d) Repeat (c) using another random seed, and report your results.Are your results the same as what you got in (c)? Why?(e) Which of the models in (c) had the smallest LOOCV error? Isthis what you expected? Explain your answer.(f) Comment on the statistical significance of the coefficient esti-mates that results from fitting each of the models in (c) usingleast squares. Do these results agree with the conclusions drawnbased on the cross-validation results?9. We will now consider theBostonhousing data set, from theISLPlibrary.(a) Based on this data set, provide an estimate for the populationmean ofmedv. Call this estimateˆµ.228 5. Resampling Methods
(b) Provide an estimate of the standard error of ˆµ. Interpret this
result.
Hint: We can compute the standard error of the sample mean by
dividing the sample standard deviation by the square root of the
number of observations.
(c) Now estimate the standard error of ˆµusing the bootstrap. How
does this compare to your answer from (b)?
(d) Based on your bootstrap estimate from (c), provide a 95% con-
fidence interval for the mean of medv. Compare it to the results
obtained by using Boston['medv'].std() and the two standard
error rule ( 3.9).
Hint: You can approximate a 95% confidence interval using the
formula[ˆµ−2SE(ˆ µ),ˆµ+ 2SE(ˆ µ)].
(e) Basedonthisdataset,provideanestimate, ˆµmed,forthemedian
value of medvin the population.
(f) Wenowwouldliketoestimatethestandarderrorof ˆµmed.Unfor-
tunately, there is no simple formula for computing the standard
error of the median. Instead, estimate the standard error of the
median using the bootstrap. Comment on your findings.
(g) Based on this data set, provide an estimate for the tenth per-
centile of medvin Boston census tracts. Call this quantity ˆµ0.1.
(You can use the np.percentile() function.)np.
percentile() (h) Use the bootstrap to estimate the standard error of ˆµ0.1. Com-
ment on your findings.6
Linear Model Selection
and Regularization
In the regression setting, the standard linear model
Y=β0+β1X1+···+βpXp+/epsilon1 (6.1)
is commonly used to describe the relationship between a response Yand
a set of variables X1,X2,...,X p. We have seen in Chapter 3that one
typically fits this model using least squares.
In the chapters that follow, we consider some approaches for extending
the linear model framework. In Chapter 7we generalize ( 6.1) in order to
accommodate non-linear, but still additive, relationships, while in Chap-
ters8and10we consider even more general non-linear models. However,
the linear model has distinct advantages in terms of inference and, on real-
world problems, is often surprisingly competitive in relation to non-linear
methods. Hence, before moving to the non-linear world, we discuss in plain least squares fitting with some alternative fitting procedures.
Why might we want to use another fitting procedure instead of least
squares? As we will see, alternative fitting procedures can yield better pre-
diction accuracy andmodel interpretability .
•Prediction Accuracy : Provided that the true relationship between the
response and the predictors is approximately linear, the least squares
estimates will have low bias. If n/greatermuchp—that is, if n, the number of
observations,ismuchlargerthan p,thenumberofvariables—thenthe
least squares estimates tend to also have low variance, and hence will
perform well on test observations. However, if nis not much larger
thanp, then there can be a lot of variability in the least squares fit,
resulting in overfitting and consequently poor predictions on p>n ,thenthereisno
longer a unique least squares coefficient estimate: there are infinitely
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_6  229230 6. Linear Model Selection and Regularization
many solutions. Each of these least squares solutions gives zero error
on the training data, but typically very poor test set performance
due to extremely high variance.1Byconstraining orshrinking the
estimated coefficients, we can often substantially reduce the variance
at the cost of a negligible increase in bias. This can lead to substantial
improvements in the accuracy with which we can predict the response
for observations not used in model training.
•Model Interpretability : It is often the case that some or many of the
variables used in a multiple regression model are in fact not associ-
ated with the response. Including such irrelevant variables leads to
unnecessary complexity in the resulting model. By removing these
variables—that is, by setting the corresponding coefficient estimates
to zero—we can obtain a model that is more easily interpreted. Now
least squares is extremely unlikely to yield any coefficient estimates
that are exactly zero. In this chapter, we see some approaches for au-
tomatically performing feature selection orvariable selection —that is,feature
selection
variable
selectionfor excluding irrelevant variables from a multiple regression model.
There are many alternatives, both classical and modern, to using least
squares to fit ( 6.1). In this chapter, we discuss three important classes of
methods.
•Subset Selection . This approach involves identifying a subset of the p
predictors that we believe to be related to the response. We then fit
a model using least squares on the reduced set of variables.
•Shrinkage . This approach involves fitting a model involving all to the least squares estimates. This shrinkage (also known as
regularization of shrinkage is performed, some of the coefficients may be esti-
mated to be exactly zero. Hence, shrinkage methods can also perform
variable selection.
•Dimension Reduction . This approach involves projecting theppredic-
tors into an M-dimensional subspace, where M<p . This is achieved
by computing Mdifferent linear combinations , orprojections , of the
variables. Then these Mprojections are used as predictors to fit a
linear regression model by least squares.
In the following sections we describe each of these approaches in greater de-
tail, along with their advantages and disadvantages. Although this chapter
describes extensions and modifications to the linear model for regression
seen in Chapter 3, the same concepts apply to other methods, such as the
classification models seen in Chapter 4.
1Whenp/greatermuchn, the least squares solution that has the smallest sum of squared coeffi-
cients can sometimes perform quite well. See Section 10.8for a more detailed discussion.6.1 Subset Selection 231
6.1 Subset Selection
In this section we consider some methods for selecting subsets of predictors.
These include best subset and stepwise model selection procedures.
6.1.1 Best Subset Selection
To perform best subset selection , we fit a separate least squares regressionbest ppredictors.Thatis,wefitall pmodels
that contain exactly one predictor, that contain
exactly two predictors, and so forth. We then look at all of the resulting
models, with the goal of identifying the one that is best.
The problem of selecting the best model from among the 2ppossibilities
considered by best subset selection is not trivial. This is usually broken up
into two stages, as described in Algorithm 6.1.
Algorithm 6.1 Best subset selection
1. LetM0denote the null model , which contains no predictors. This
model simply predicts the sample mean for each observation.
2. Fork=1,2,...p :
(a) Fit all/parenleftbigp
k/parenrightbig
models that contain exactly kpredictors.
(b) Pick the best among these/parenleftbigp
k/parenrightbig
models, and call it Mk. Herebest
is defined as having the smallest RSS, or equivalently largest R2.
3. Select a single best model from among M0,...,Mpusing using the
prediction error on a validation set, Cp(AIC), BIC, or adjusted R2.
Or use the cross-validation method.
In Algorithm 6.1, Step 2 identifies the best model (on the training data)
for each subset size, in order to reduce the problem from one of 2ppossible
models to one of p+1possible models. In Figure 6.1, these models form
the lower frontier depicted in red.
Now in order to select a single best model, we must simply choose among
thesep+1options. This task must be performed with care, because the
RSS of these p+1models decreases monotonically, and the R2increases
monotonically, as the number of features included in the models increases.
Therefore, if we use these statistics to select the best model, then we will
always end up with a model involving all of the variables. The problem is
that a low RSS or a high R2indicates a model with a low training error,
whereas we wish to choose a model that has a low testerror. (As shown in
Chapter 2in Figures 2.9–2.11, training error tends to be quite a bit smaller
than test error, and a low training error by no means guarantees a low test
error.) Therefore, in Step 3, weuse the error on a validationset, Cp, BIC, or
adjusted R2in order to select among M0,M1,...,Mp. If cross-validation
is used to select the best model, then Step 2 is repeated on each training
fold, and the validation errors are averaged to select the best value of k.232 6. Linear Model Selection and Regularization
2 4 6 8 102e+07 4e+07 6e+07 8e+07Number of PredictorsResidual Sum of Squares2 4 6 8 100.0 0.2 0.4 0.6 0.8 1.0Number of PredictorsR2
FIGURE 6.1. For each possible model containing a subset of the ten predictors
in theCreditdata set, the RSS and R2are displayed. The red frontier tracks the
bestmodel for a given number of predictors, according to RSS and R2. Though
the data set contains only ten predictors, the x-axis ranges from 1to11, since one
of the variables is categorical and takes on three values, leading to the creation of
two dummy variables.
Then the model Mkfit on the full training set is delivered for the chosen
k. These approaches are discussed in Section 6.1.3.
An application of best subset selection is shown in Figure 6.1. Each
plotted point corresponds to a least squares regression model fit using a
different subset of the 10 predictors in the Creditdata set, discussed in
Chapter 3. Here the variable regionis a three-level qualitative variable,
and so is represented by two dummy variables, which are selected sepa-
rately in this case. Hence, there are a total of 11 possible variables which
can be included in the model. We have plotted the RSS and R2statistics
for each model, as a function of the number of variables. The red curves
connect the best models for each model size, according to RSS or R2. The
figure shows that, as expected, these quantities improve as the number in RSS and R2as a result of including additional predictors.
Although we have presented best subset selection here for least squares
regression, the same ideas apply to other types of models, such as logistic
regression. In the case of logistic regression, instead of ordering models by
RSS in Step 2 of Algorithm 6.1, we instead use the deviance, a measuredeviancethat plays the role of RSS for a broader class of models. The deviance is
negative two times the maximized log-likelihood; the smaller the deviance,
the better the fit.
While best subset selection is a simple and conceptually appealing ap-
proach, it suffers from computational limitations. The number of possible
models that must be considered grows rapidly as pincreases. In general,
there are 2pmodels that involve subsets of ppredictors. So if p= 10 ,
then there are approximately 1,000 possible models to be considered, and if
p= 20 pgreaterthan6.1 Subset Selection 233
Algorithm 6.2 Forward stepwise selection
1. LetM0denote the nullmodel, which contains no predictors.
2. Fork=0,...,p −1:
(a) Consider all p−kmodels that augment the predictors in Mk
with one additional predictor.
(b) Choose the bestamong these p−kmodels, and call it Mk+1.
Herebestis defined as having smallest RSS or highest R2.
3. Select a single best model from among M0,...,Mpusing the pre-
diction error on a validation set, Cp(AIC), BIC, or adjusted R2. Or
use the cross-validation method.
around40, even with extremely fast modern computers. There are compu-
tational shortcuts—so called branch-and-bound techniques—for eliminat-
ing some choices, but these have their limitations as pgets large. They also
only work for least squares linear regression. We present computationally
efficient alternatives to best subset selection next.
6.1.2 Stepwise Selection
For computational reasons, best subset selection cannot be applied with
very large p. Best subset selection may also suffer from statistical that look good on the training data, even though they might not
have any predictive power on future data. Thus an enormous search space
can lead to overfitting and high variance of the coefficient estimates.
For both of these reasons, stepwise methods, which explore a far more
restricted set of models, are attractive alternatives to best subset selection.
Forward Stepwise Selection
Forward stepwise selection is a computationally efficient alternative to bestforward
stepwise
selectionsubset selection. While the best subset selection procedure considers all
2ppossible models containing subsets of the ppredictors, forward step-
wise considers a much smaller set of models. Forward stepwise selection
begins with a model containing no predictors, and then adds predictors
to the model, one-at-a-time, until all of the predictors are in the model.
In particular, at each step the variable that gives the greatest additional
improvement to the fit is added to the model. More formally, the forward
stepwise selection procedure is given in Algorithm 6.2.
Unlike best subset selection, which involved fitting 2pmodels, forward
stepwise selection involves fitting one null model, along with p−kmodels
in thekth iteration, for k=0,...,p −1. This amounts to a total of 1+/summationtextp−1
k=0(p−k)=1 + p(p+1)/2models. This is a substantial difference: when234 6. Linear Model Selection and Regularization
# Variables Best subset Forward stepwise
One rating rating
Two rating,income rating,income
Three rating,income,student rating ,income,student
Four cards,income rating,income,
student,limit student,limit
TABLE 6.1. The first four selected models for best subset selection and forward
stepwise selection on the Creditdata set. The first three models are identical but
the fourth models differ.
p= 20 , best subset selection requires fitting 1,048,576models, whereas
forward stepwise selection requires fitting only 211models.2
In Step 2(b) of Algorithm 6.2, we must identify the bestmodel from
among those p−kthat augment Mkwith one additional predictor. We can
do this by simply choosing the model with the lowest RSS or the highest
R2. However, in Step 3, we must identify the best model among a set of
models with different numbers of variables. This is more challenging, and
is discussed in Section 6.1.3.
Forward stepwise selection’s computational advantage over best subset
selection is clear. Though forward stepwise tends to do well in practice,
it is not guaranteed to find the best possible model out of all 2pmod-
els containing subsets of the ppredictors. For instance, suppose that in a
given data set with p=3predictors, the best possible one-variable model
contains X1, and the best possible two-variable model instead contains X2
andX3. Then forward stepwise selection will fail to select the best possible
two-variable model, because M1will contain X1, soM2must also contain
X1together with one additional variable.
Table6.1, which shows the first four selected models for best subset
and forward stepwise selection on the Creditdata set, illustrates this phe-
nomenon. Both best subset selection and forward stepwise selection choose
ratingfor the best one-variable model and then include incomeandstudent
for the two- and three-variable models. However, best subset selection re-
placesratingbycardsin the four-variable model, while forward stepwise
selection must maintain ratingin its four-variable model. In this example,
Figure6.1indicates that there is not much difference between the three-
and four-variable models in terms of RSS, so either of the four-variable
models will likely be adequate.
Forward stepwise selection can be applied even in the high-dimensional
setting where n<p ; however, in this case, it is possible to construct sub-
modelsM0,...,Mn−1only, since each submodel is fit using least squares,
which will not yield a unique solution if p≥n.
Backward Stepwise Selection
Like forward stepwise selection, backward stepwise selection provides anbackward
stepwise
selection 2Though forward stepwise selection considers p(p+ 1)/2+1 models, it performs a
guidedsearch over model space, and so the effective model space considered contains
substantially more than p(p+ 1)/2+1 models.6.1 Subset Selection 235
efficient alternative to best subset selection. However, unlike forward step-
wise selection, it begins with the full least squares model containing all p
predictors, and then iteratively removes the least useful predictor, one-at-
a-time. Details are given in Algorithm 6.3.
Algorithm 6.3 Backward stepwise selection
1. LetMpdenote the fullmodel, which contains all ppredictors.
2. Fork=p, p−1,...,1:
(a) Consider all kmodels that contain all but one of the predictors
inMk, for a total of k−1predictors.
(b) Choose the bestamong these kmodels, and call it Mk−1. Here
bestis defined as having smallest RSS or highest R2.
3. Select a single best model from among M0,...,Mpusing the pre-
diction error on a validation set, Cp(AIC), BIC, or adjusted R2. Or
use the cross-validation only 1+p(p+1)/2models, and so can be applied in settings where
pis too large to apply best subset selection.3Also like forward stepwise
selection, backward stepwise selection is not guaranteed to yield the best
model containing a subset of the ppredictors.
Backward selection requires that the number of samples nis larger than
the number of variables p(so that the full model can be fit). In contrast,
forward stepwise can be used even when n<p , and so is the only viable
subset method when pis very large.
Hybrid Approaches
The best subset, forward stepwise, and backward stepwise selection ap-
proaches generally give similar but not identical models. As another al-
ternative, hybrid versions of forward and backward stepwise selection are
available, in which variables are added to the model sequentially, in analogy
to forward selection. However, after adding each new variable, the method
may also remove any variables that no longer provide an improvement in
the model fit. Such an approach attempts to more closely mimic best sub-
set selection while retaining the computational advantages of forward and
backward stepwise selection.
6.1.3 Choosing the Optimal Model
Best subset selection, forward selection, and backward selection result in
the creation of a set of models, each of which contains a subset of the p
3Likeforwardstepwiseselection, backwardstepwiseselection performs a guidedsearch
over model space, and so effectively considers substantially more than 1+p(p+ 1)/2
models.236 6. Linear Model Selection and Regularization
predictors. To apply these methods, we need a way to determine which of
these models is best. As we discussed in Section 6.1.1, the model containing
all of the predictors will always have the smallest RSS and the largest R2,
since these quantities are related to the training error. Instead, we wish to
choose a model with a low test error. As is evident here, and as we show
in Chapter 2, the training error can be a poor estimate of the test error.
Therefore, RSS and R2are not suitable for selecting the best model among
a collection of models with different numbers of predictors.
In order to select the best model with respect to test error, we need to
estimate this test error. There are two common approaches:
1. We can indirectly estimate test error by making an adjustment to the
training error to account for the bias due to overfitting.
2. We can directlyestimate the test error, using either a validation set
approach or a cross-validation approach, as discussed in Chapter 5.
We consider both of these approaches below.
Cp, AIC, BIC, and Adjusted R2
We show in Chapter 2that the training set MSE is generally an under-
estimate of the test MSE. (Recall that MSE = RSS /n.) This is because
when we fit a model to the training data using least squares, we specifi-
cally estimate the regression coefficients such that the training RSS (but
not the test RSS) is as small as possible. In particular, the training error
will decrease as more variables are included in the model, but the test error
may not. Therefore, training set RSS and training set R2cannot be used
to select from among a set of models with different numbers of variables.
However, a number of techniques for adjusting the training error for models with different numbers of variables. We now consider four such
approaches: Cp,Akaike information criterion (AIC),Bayesian (BIC),and adjusted R2R2for the best model of each size produced by best subset selection on the
Creditdata set.
For a fitted least squares model containing dpredictors, the Cpestimate
of test MSE is computed using the equation
Cp=1
n/parenleftbig
RSS + 2 dˆσ2/parenrightbig
, (6.2)
whereˆσ2is an estimate of the variance of the error /epsilon1associated with each
response measurement in ( 6.1).4Typically ˆσ2is estimated using the full
model containing all predictors. Essentially, the Cpstatistic adds a penalty
of2dˆσ2to the training RSS in order to adjust for the fact that the training
error tends to underestimate the test error. Clearly, the penalty increases as
the number of predictors in the model increases; this is intended to adjust
4Mallow’s Cpis sometimes defined as C/prime
p= RSS /ˆσ2+2d−n. This is equivalent to
the definition given above in the sense that Cp=1
nˆσ2(C/prime
p+n), and so the model with
smallest Cpalso has smallest C/prime
p.6.1 Subset Selection 237
2 4 6 8 1010000 15000 20000 25000 30000Number of PredictorsCp
2 4 6 8 1010000 15000 20000 25000 30000Number of PredictorsBIC
2 4 6 8 100.86 0.88 0.90 0.92 0.94 0.96Number of PredictorsAdjusted R2 
FIGURE 6.2. Cp, BIC, and adjusted R2are shown for the best models of each
size for the Creditdata set (the lower frontier in Figure 6.1).Cpand BIC are
estimates of test MSE. In the middle plot we see that the BIC estimate of test
error shows an increase after four variables are selected. The other two plots are
rather flat after four variables are included.
for the corresponding decrease in training RSS. Though it is beyond the
scope of this book, one can show that if ˆσ2is an unbiased estimate of σ2in
(6.2), thenCpis an unbiased estimate of test MSE. As a consequence, the
Cpstatistic tends to take on a small value for models with a low test error,
so when determining which of a set of models is best, we choose the model
with the lowest Cpvalue. In Figure 6.2,Cpselects the six-variable model
containing the predictors income,limit,rating,cards,ageandstudent.
The AIC criterion is defined for a large class of models fit by maximum
likelihood. In the case of the model ( 6.1) with Gaussian errors, maximum
likelihood and least squares are the same thing. In this case AIC is given by
AIC =1
n/parenleftbig
RSS + 2 dˆσ2/parenrightbig
,
where, for simplicity, we have omitted irrelevant constants.5Hence for least
squares models, Cpand AIC are proportional to each other, and so only
Cpis displayed in Figure 6.2.
BIC is derived from a Bayesian point of view, but ends up looking similar
toCp(and AIC) as well. For the least squares model with dpredictors, the
BIC is, up to irrelevant constants, given by
BIC=1
n/parenleftbig
RSS + log( n)dˆσ2/parenrightbig
. (6.3)
LikeCp, the BIC will tend to take on a small value for a model with a
low test error, and so generally we select the model that has the lowest
BIC value. Notice that BIC replaces the 2dˆσ2used byCpwith alog(n)dˆσ2
term, where nis the number of observations. Since logn>2for anyn>7,
5There are two formulas for AIC for least squares regression. The formula that we
provide here requires an expression for σ2, which we obtain using the full model con-
taining all predictors. The second formula is appropriate when σ2is unknown and we do
not want to explicitly estimate it; that formula has a log(RSS)term instead of an RSS
term. Detailed derivations of these two formulas are outside of the scope of this book.238 6. Linear Model Selection and Regularization
the BIC statistic generally places a heavier penalty on models with many
variables, and hence results in the selection of smaller models than Cp.
In Figure 6.2, we see that this is indeed the case for the Creditdata set;
BIC chooses a model that contains only the four predictors income,limit,
cards, andstudent. In this case the curves are very flat and so there does
not appear to be much difference in accuracy between the four-variable and
six-variable models.
Theadjusted set of models that contain different numbers of variables. Recall from
Chapter 3that the usual R2is defined as 1−RSS/TSS, where TSS =/summationtext(yi−y)2is thetotal sum of squares for the response. Since RSS always
decreases as more variables are added to the model, the R2always increases
as more variables are added. For a least squares model with dvariables,
the adjusted R2statistic is calculated as
Adjusted R2=1−RSS/(n−d−1)
TSS/(n−1). (6.4)
UnlikeCp, AIC, and BIC, for which a smallvalue indicates a model with
a low test error, a largevalue of adjusted R2indicates a model with a
small test error. Maximizing the adjusted R2is equivalent to increase or decrease, due to the presence of din the
denominator.
The intuition behind the adjusted R2is that once all of the noisevariables
will lead to only a very small decrease in RSS. Since adding noise variables
leads to an increase in d, such variables will lead to an increase inRSS
n−d−1,
and consequently a decrease in the adjusted R2. Therefore, in theory, the
model with the largest adjusted R2will have only correct variables and
no noise variables. Unlike the R2statistic, the adjusted R2statistic pays
a pricefor the inclusion of unnecessary variables in the model. Figure 6.2
displays the adjusted R2for theCreditdata set. Using this statistic results
in the selection of a model that contains seven variables, adding ownto the
model selected by Cpand AIC.
Cp, AIC, and BIC all have rigorous theoretical justifications that are
beyond the scope of this book. These justifications rely on asymptotic ar-
guments (scenarios where the sample size nis very large). Despite its pop-
ularity, and even though it is quite intuitive, the adjusted R2is not as well
motivated in statistical theory as AIC, BIC, and Cp. All of these measures
are simple to use and compute. Here we have presented their formulas in
the case of a linear model fit using least squares; however, AIC and BIC
can also be defined for more general types of models.
Validation and Cross-Validation
As an alternative to the approaches just discussed, we can directly esti-
mate the test error using the validation set and cross-validation methods
discussed in Chapter 5. We can compute the validation set error or the
cross-validation error for each model under consideration, and then select6.1 Subset Selection 239
2 4 6 8 10100 120 140 160 180 200 220Number of PredictorsSquare Root of BIC2 4 6 8 10100 120 140 160 180 200 220Number of PredictorsValidation Set Error2 4 6 8 10100 120 140 160 180 200 220Number of PredictorsCross−Validation ErrorFIGURE 6.3. For theCreditdata set, three quantities are displayed for the
best model containing dpredictors, for dranging from 1to11. The overall best
model, based on each of these quantities, is shown as a blue cross. Left:Square
root of BIC. Center:Validation set errors. Right:Cross-validation errors.
the model for which the resulting estimated test error is smallest. This pro-
cedure has an advantage relative to AIC, BIC, Cp, and adjusted R2, in that
it provides a direct estimate of the test error, and makes fewer assumptions
about the true underlying model. It can also be used in a wider range of
model selection tasks, even in cases where it is hard to pinpoint the model
degrees of freedom (e.g. the number of predictors in the model) or hard
to estimate the error variance σ2. Note that when cross-validation is used,
the sequence of models Mkin Algorithms 6.1–6.3is determined separately
for each training fold, and the validation errors are averaged over all folds
for each model size k. This means, for example with best-subset regression,
thatMk, the best subset of size k, can differ across the folds. Once the
best size kis chosen, we find the best model of that size on the full data
set.
In the past, performing cross-validation was computationally prohibitive
for many problems with large pand/or large n, and so AIC, BIC, Cp,
and adjusted R2were more attractive approaches for choosing among a
set of models. However, nowadays with fast computers, the computations
required to perform cross-validation are hardly ever an issue. Thus, cross-
validation is a very attractive approach for selecting from among a number
of models under consideration.
Figure6.3displays, as a function of d, the BIC, validation set errors, and
cross-validation errors on the Creditdata, for the best d-variable model.
The validation errors were calculated by randomly selecting three-quarters
of the observations as the training set, and the remainder as the valida-
tion set. The cross-validation errors were computed using k= 10 folds.
In this case, the validation and cross-validation methods both result in a
six-variable model. However, all three approaches suggest that the four-,
five-, and six-variable models are roughly equivalent in terms of their test
errors.
In fact, the estimated test error curves displayed in the center and right-
handpanelsofFigure test error than a two-variablemodel, the estimated test
errors of the 3- to 11-variable models are quite similar. Furthermore, if we240 6. Linear Model Selection and Regularization
repeated the validation set approach using a different split of the data into
a training set and a validation set, or if we repeated cross-validation using
a different set of cross-validation folds, then the precise model with the
lowest estimated test error would surely change. In this setting, we can
select a model using the one-standard-error rule . We first calculate theone-
standard-
error
rulestandard error of the estimated test MSE for each model size, and then
select the smallest model for which the estimated test error is within one
standard error of the lowest point on the curve. The rationale here is that
if a set of models appear to be more or less equally good, then we might
as well choose the simplest model—that is, the model with the smallest
number of predictors. In this case, applying the one-standard-error rule
to the validation set or cross-validation approach leads to selection of the
three-variable model.
6.2 Shrinkage Methods
The subset selection methods described in Section 6.1involve using least
squares to fit a linear model that contains a subset of the predictors. As an
alternative, we can fit a model containing all ppredictors using a technique
thatconstrains orregularizes the coefficient estimates, or equivalently, that
shrinksthe coefficient estimates towards zero. It may not be immediately
obvious why such a constraint should improve the fit, but it turns out that
shrinking the coefficient estimates can significantly reduce their variance.
The two best-known techniques for shrinking the regression coefficients
towards zero are ridge regression and thelasso.
6.2.1 Ridge Regression
Recall from Chapter 3that the least squares fitting procedure estimates
β0,β1,...,βpusing the values that minimize
RSS regression is very similar to least squares, except that the coefficientsridge
regressionare estimated by minimizing a slightly different quantity. In particular, the
ridge regression coefficient estimates ˆβRare the values that RSS + λp/summationdisplay
j=1β2
j, (6.5)
whereλ≥0is atuning parameter , to be determined separately. Equa-tuning
parametertion6.5trades off two different criteria. As with least squares, ridge regres-
sion seeks coefficient estimates that fit the data well, by making the RSS
small. However, the second term, λ/summationtext
jβ2
j, called a shrinkage penalty , isshrinkage
penaltysmall when β1,...,βpare close to zero, and so it has the effect of shrinking
the estimates of βjtowards zero. The tuning parameter λserves to control6.2 Shrinkage Methods 241
1e−02 1e+00 1e+02 1e+04−300 −100 0 100 200 300 400Standardized CoefficientsIncomeLimitRatingStudent
0.0 0.2 0.4 0.6 0.8 1.0−300 −100 0 100 200 300 400Standardized 6.4. The standardized ridge regression coefficients are displayed for
theCreditdata set, as a function of relative impact of these two terms on the regression coefficient esti-
mates. When λ=0, the penalty term has no effect, and ridge regression
will produce the least squares estimates. However, as λ→∞, the impact of
the shrinkage penalty grows, and the ridge regression coefficient estimates
will approach zero. Unlike least squares, which generates only one set of co-
efficient estimates, ridge regression will produce a different set of coefficient
estimates, ˆβR
λ, for each value of λ. Selecting a good value for λis critical;
we defer this discussion to Section 6.2.3, where we use cross-validation.
Note that in ( 6.5), the shrinkage penalty is applied to β1,...,βp, but
not to the intercept β0. We want to shrink the estimated association of
each variable with the response; however, we do not want to shrink the
intercept, which is simply a measure of the mean value of the response
whenxi1=xi2=...=xip=0. If we assume that the variables—that is,
the columns of the data matrix X—have been centered to have mean zero
before ridge regression is performed, then the estimated intercept will take
the form ˆβ0=¯y=/summationtextn
i=1yi/n.
An Application to the Credit Data
In Figure 6.4, the ridge regression coefficient estimates for the Creditdata
set are displayed. In the left-hand panel, each curve corresponds to the
ridge regression coefficient estimate for one of the ten variables, plotted
as a function of λ. For example, the black solid line represents the ridge
regression estimate for the incomecoefficient, as λis varied. At the extreme
left-hand side of the plot, λis essentially zero, and so the corresponding
ridge coefficient estimates are the same as the usual least squares esti-
mates. But as λincreases, the ridge coefficient estimates shrink towards
zero. When λis extremely large, then all of the ridge coefficient estimates
are basically zero; this corresponds to the null model that contains no pre-
dictors. In this plot, the income,limit,rating, andstudentvariables are
displayed in distinct colors, since these variables tend to have by far the
largest coefficient estimates. While the ridge coefficient estimates tend to
decrease in aggregate as λincreases, individual coefficients, such as rating
andincome, may occasionally increase as λincreases.242 6. Linear Model Selection and Regularization
The right-hand panel of Figure 6.4displays the same ridge coefficient
estimates as the left-hand panel, but instead of displaying λon thex-axis,
we now display /bardblˆβR
λ/bardbl2//bardblˆβ/bardbl2, where ˆβdenotes the vector of least squares
coefficient estimates. The notation /bardblβ/bardbl2denotes the /lscript2norm(pronounced/lscript2norm
“ell 2”) of a vector, and is defined as It measures the
distance of βfrom zero. As λincreases, the /lscript2norm of ˆβR
λwillalways
decrease, and so will /bardblˆβR
λ/bardbl2//bardblˆβ/bardbl2. The latter quantity ranges from 1 (when
λ=0, in which case the ridge regression coefficient estimate is the same
as the least squares estimate, and so their /lscript2norms are the same) to 0
(whenλ=∞, in which case the ridge regression coefficient estimate is a
vector of zeros, with /lscript2norm equal to zero). Therefore, we can think of the
x-axis in the right-hand panel of Figure 6.4as the amount that the ridge
regression coefficient estimates have been shrunken towards zero; a small
value indicates that they have been shrunken very close to zero.
The standard least squares coefficient estimates discussed in Chapter 3
arescale equivariant : multiplying Xjby a constant csimply leads to ascale
equivariantscaling of the least squares coefficient estimates by a factor of 1/c. In other
words, regardless of how the jth predictor is scaled, Xjˆβjwill remain the
same. In contrast, the ridge regression coefficient estimates can change sub-
stantially when multiplying a given predictor by a constant. For instance,
consider the incomevariable, which is measured in dollars. One could rea-
sonably have measured income in thousands of dollars, which would result
inareductionintheobservedvaluesof incomebyafactorof1,000.Nowdue
to the sum of squared coefficients term in the ridge regression formulation
(6.5), such a change in scale will not simply cause the ridge regression co-
efficient estimate for incometo change by a factor of 1,000. In other words,
XjˆβR
j,λwill depend not only on the value of λ, but also on the scaling of the
jth predictor. In fact, the value of XjˆβR
j,λmay even depend on the scaling
of theotherpredictors! Therefore, it is best to apply ridge regression after
standardizing the predictors , using the (6.6)
so that they are all on the same scale. In ( 6.6), the denominator is the
estimated standard deviation of the jth predictor. Consequently, all of the
standardized predictors will have a standard deviation of one. As a re-
sult the final fit will not depend on the scale on which the predictors are
measured. In Figure 6.4, they-axis displays the standardized ridge regres-
sion coefficient estimates—that is, the coefficient estimates that result from
performing ridge regression using standardized predictors.
Why Does Ridge Regression Improve Over Least bias-variance
trade-off. Asλincreases, the flexibility of the ridge regression fit decreases,
leading to decreased variance but increased bias. This is illustrated in the
left-hand panel of Figure 6.5, using a simulated data set containing p= 45
predictors and n= 50 observations. The green curve in the left-hand panel6.2 Shrinkage Methods 243
1e−01 1e+01 1e+030 10 20 30 40 50 60Mean Squared Error0.0 0.2 0.4 0.6 0.8 1.00 10 20 30 40 50 60Mean Squared 6.5. Squared bias (black), variance (green), and test mean squared
error (purple) for the ridge regression predictions on a simulated data set, as a
function of λand/bardblˆβR
λ/bardbl2//bardblˆβ/bardbl2. The horizontal dashed lines indicate the minimum
possible MSE. The purple crosses indicate the ridge regression models for which
the MSE is smallest.
of Figure 6.5displays the variance of the ridge regression predictions as a
function of λ. At the least squares coefficient estimates, which correspond
to ridge regression with λ=0, the variance is high but there is no bias. But
asλincreases, the shrinkage of the ridge coefficient estimates leads to a
substantial reduction in the variance of the predictions, at the expense of a
slight increase in bias. Recall that the test mean squared error (MSE), plot-
ted in purple, is closely related to the variance plus the squared bias. For
values of λup to about 10, the variance decreases rapidly, with very little
increase in bias, plotted in black. Consequently, the MSE drops consider-
ably asλincreases from 0to10. Beyond this point, the decrease in variance
due to increasing λslows, and the shrinkage on the coefficients causes them
to be significantly underestimated, resulting in a large increase in the bias.
The minimum MSE is achieved at approximately λ= 30 . Interestingly,
because of its high variance, the MSE associated with the least squares
fit, when λ=0, is almost as high as that of the null model for which all
coefficient estimates are zero, when λ=∞. However, for an intermediate
value ofλ, the MSE is considerably lower.
The right-hand panel of Figure 6.5displays the same curves as the left-
hand panel, this time plotted against the /lscript2norm of the ridge regression
coefficient estimates divided by the /lscript2norm of the least squares estimates.
Now as we move from left to right, the fits become more flexible, and so
the bias decreases and the variance increases.
In general, in situations where the relationship between the response
and the predictors is close to linear, the least squares estimates will have
low bias but may have high variance. This means that a small change in
the training data can cause a large change in the least squares coefficient
estimates. In particular, when the number of variables pis almost as large
as the number of observations n, as in the example in Figure 6.5, the
least squares estimates will be extremely variable. And if p>n , then the
least squares estimates do not even have a unique solution, whereas ridge
regression can still perform well by trading off a small increase in bias for a244 6. Linear Model Selection and Regularization
large decrease in variance. Hence, ridge regression works best in situations
where the least squares estimates have high variance.
Ridge regression also has substantial computational advantages over best
subset selection, which requires searching through 2pmodels. As we dis-
cussed previously, even for moderate values of p, such a search can be
computationally infeasible. In contrast, for any fixed value of λ, ridge re-
gression only fits a single model, and the model-fitting procedure can be
performed quite quickly. In fact, one can show that the computations re-
quired to solve ( 6.5),simultaneously for all values of λ, are almost identical
to those for fitting a model using least squares.
6.2.2 The Lasso
Ridge regression does have one obvious disadvantage. Unlike best subset,
forward stepwise, and backward stepwise selection, which will generally
select models that involve just a subset of the variables, ridge regression
will include all ppredictors in the final model. The penalty λ/summationtextβ2
jin to zero (unless λ=∞). This may not be a problem for prediction
accuracy, but it can create a challenge in model interpretation in settings in
which the number of variables pis quite large. For example, in the Credit
data set, it appears that the most important variables are income,limit,
rating, andstudent. So we might wish to build a model including just
these predictors. However, ridge regression will always generate a model
involving all ten predictors. Increasing the value of λwill tend to reduce
the magnitudes of the coefficients, but will not result in exclusion of any of
the variables.
Thelassois a relatively recent alternative to ridge regression that over-lassocomes this disadvantage. The lasso coefficients, ˆβL
λ, minimize the RSS + λp/summationdisplay
j=1|βj|. (6.7)
Comparing ( 6.7) to (6.5), we see that the lasso and ridge regression have
similar formulations. The only difference is that the β2
jterm in the ridge
regression penalty ( 6.5) has been replaced by |βj|in the lasso penalty ( 6.7).
In statistical parlance, the lasso uses an /lscript1(pronounced “ell 1”) penalty
instead of an /lscript2penalty. The /lscript1norm of a coefficient vector βis given by
/bardblβ/bardbl1=/summationtext|βj|.
As with ridge regression, the lasso shrinks the coefficient estimates to-
wards zero. However, in the case of the lasso, the /lscript1penalty has the effect
of forcing some of the coefficient estimates to be exactly equal to zero when
thetuningparameter the lasso performs variable selection . As a result, models generated
from the lasso are generally much easier to interpret than those produced
by ridge regression. We say that the lasso yields sparsemodels—that is,sparse
models that involve only a subset of the variables. As in ridge regression,
selecting a good value of λfor the lasso is critical; we defer this discussion
to Section 6.2.3, where we use cross-validation.6.2 Shrinkage Methods 245
20 50 100 200 500 2000 5000−200 0 100 200 300 400Standardized Coefficients0.0 0.2 0.4 0.6 0.8 1.0−300 −100 0 100 200 300 400Standardized 6.6. The standardized lasso coefficients on the Creditdata set are
shown as a function of an example, consider the coefficient plots in Figure 6.6, which are gen-
erated from applying the lasso to the Creditdata set. When λ=0, then
the lasso simply gives the least squares fit, and when λbecomes sufficiently
large, the lasso gives the null model in which all coefficient estimates equal
zero. However, in between these two extremes, the ridge regression and
lasso models are quite different from each other. Moving from left to right
in the right-hand panel of Figure 6.6, we observe that at first the lasso re-
sults in a model that contains only the ratingpredictor. Then studentand
limitenter the model almost simultaneously, shortly followed by income.
Eventually, the remaining variables enter the model. Hence, depending on
the value of λ, the lasso can produce a model involving any number of vari-
ables. In contrast, ridge regression will always include all of the variables in
the model, although the magnitude of the coefficient estimates will depend
onλ.
Another Formulation for Ridge Regression and the Lasso
One can show that the lasso and ridge regression coefficient estimates solve
the In other words, for every value of λ, there is some ssuch that
the Equations ( 6.7) and (6.8) will give the same lasso coefficient estimates.
Similarly, for every value of λthere is a corresponding ssuch that 6. Linear Model Selection and Regularization
Whenp=2, then (6.8) indicates that the lasso coefficient estimates have
the smallest RSS out of all points that lie within the diamond defined by
|β1|+|β2|≤s. Similarly, the ridge regression estimates have the smallest
RSS out of all points that lie within the circle defined by β2
1+β2
2≤s.
Wecanthinkof( find the set of coefficient estimates that lead to the smallest RSS, subject
to the constraint that there is a budgetsfor how large/summationtextp
j=1|βj|can be.
Whensis extremely large, then this budget is not very restrictive, and so
the coefficient estimates can be large. In fact, if sis large enough that the
least squares solution falls within the budget, then ( 6.8) will simply yield
the least squares solution. In contrast, if sis small, then/summationtextp
j=1|βj|must be
small in order to avoid violating the budget. Similarly, ( 6.9) indicates that
when we perform ridge regression, we seek a set of coefficient estimates
such that the RSS is as small as possible, subject to the requirement that/summationtextp
j=1β2
jnot exceed the budget s.
The formulations ( 6.8) and (6.9) reveal a close connection between the
lasso, ridge regression, and best subset selection. Consider the top/summationdisplay
j=1I(βj/negationslash= 0) ≤s.
(6.10)
HereI(βj/negationslash= 0) isanindicatorvariable:ittakesonavalueof1if βj/negationslash=0,and
equals zero otherwise. Then ( 6.10) amounts to finding a set of coefficient
estimates such that RSS is as small as possible, subject to the constraint
that no more than scoefficients can be nonzero. The problem ( 6.10) is
equivalent to best subset selection. Unfortunately, solving ( 6.10) is com-
putationally infeasible when pis large, since it requires considering all/parenleftbigp
s/parenrightbig
models containing spredictors. Therefore, we can interpret ridge regression
and the lasso as computationally feasible alternatives to best subset selec-
tion that replace the intractable form of the budget in ( 6.10) with forms
that are much easier to solve. Of course, the lasso is much more closely
related to best subset selection, since the lasso performs feature selection
forssufficiently small in ( 6.8), while ridge regression does not.
The Variable Selection Property of the Lasso
Why is it that the lasso, unlike ridge regression, results in coefficient esti-
mates that are exactly equal to zero? The formulations ( 6.8) and (6.9) can
be used to shed light on the issue. Figure 6.7illustrates the situation. The
least squares solution is marked as ˆβ, while the blue diamond and circle
represent the lasso and ridge regression constraints in ( 6.8) and (6.9), re-
spectively. If sis sufficiently large, then the constraint regions will contain
ˆβ, and so the ridge regression and lasso estimates will be the same as the
least squares estimates. (Such a large value of scorresponds to λ=0 in
(6.5) and (6.7).) However, in Figure 6.7the least squares estimates lie out-
side of the diamond and the circle, and so the least squares estimates are
not the same as the lasso and ridge regression estimates.
Each of the ellipses centered around ˆβrepresents a contour: this meanscontourthat all of the points on a particular ellipse have the same RSS value. As6.2 Shrinkage Methods 247
FIGURE 6.7. Contours of the error and constraint functions for the lasso
(left)and ridge regression (right). The solid blue areas are the constraint regions,
|β1|+|β2|≤sandβ2
1+β2
2≤s, while the red ellipses are the contours of the RSS.
the ellipses expand away from the least squares coefficient estimates, the
RSS increases. Equations ( 6.8) and (6.9) indicate that the lasso and ridge
regression coefficient estimates are given by the first point at which an
ellipse contacts the constraint region. Since ridge regression has a axis, and so the ridge regression coefficient estimates will be exclusively
non-zero. However, the lasso constraint has cornersat each of the axes, and
so the ellipse will often intersect the constraint region at an axis. When this
occurs, one of the coefficients will equal zero. In higher dimensions, many of
the coefficient estimates may equal zero simultaneously. In Figure 6.7, the
intersection occurs at β1=0, and so the resulting model will only include
β2.
In Figure 6.7, we considered the simple case of p=2. When p=3,
then the constraint region for ridge regression becomes a sphere, and the
constraint region for the lasso becomes a polyhedron. When p>3, the
constraint for ridge regression becomes a hypersphere, and the constraint
for the lasso becomes a polytope. However, the key ideas depicted in Fig-
ure6.7still hold. In particular, the lasso leads to feature selection when
p>2due to the sharp corners of the polyhedron or polytope.
Comparing the Lasso and Ridge Regression
It is clear that the lasso has a major advantage over ridge regression, in
that it produces simpler and more interpretable models that involve only a
subset of the predictors. However, which method leads to better prediction
accuracy? Figure 6.8displays the variance, squared bias, and test MSE of
the lasso applied to the same simulated data as in Figure 6.5. Clearly the
lasso leads to qualitatively similar behavior to ridge regression, in that as λ
increases, the variance decreases and the bias increases. In the right-hand248 6. Linear Model Selection and Regularization
0.02 0.10 0.50 2.00 10.00 50.000 10 20 30 40 50 60Mean Squared Error0.0 0.2 0.4 0.6 0.8 1.00 10 20 30 40 50 60R2 on Training DataMean Squared ErrorλFIGURE 6.8. Left:Plots of squared bias (black), variance (green), and test
MSE (purple) for the lasso on a simulated data set. Right:Comparison of squared
bias, variance, and test MSE between lasso (solid) and ridge (dotted). Both are
plotted against their R2on the training data, as a common form of indexing. The
crosses in both plots indicate the lasso model for which the MSE is smallest.
panel of Figure 6.8, the dotted lines represent the ridge regression fits.
Here we plot both against their R2on the training data. This is another
useful way to index models, and can be used to compare models with
different types of regularization, as is the case here. In this example, the
lasso and ridge regression result in almost identical biases. However, the
variance of ridge regression is slightly lower than the variance of the of the lasso.
However, the data in Figure 6.8were generated in such a way that all zero. The lasso implicitly assumes that a number of the
coefficients truly equal zero. Consequently, it is not surprising that ridge
regression outperforms the lasso in terms of prediction error in this setting.
Figure6.9illustrates a similar situation, except that now the response is a
function of only 2 out of 45predictors. Now the lasso tends to outperform
ridge regression in terms of bias, variance, and MSE.
These two examples illustrate that neither ridge regression nor the lasso
will universally dominate the other. In general, one might expect the lasso
to perform better in a setting where a relatively small number of predictors
have substantial coefficients, and the remaining predictors have coefficients
that are very small or that equal zero. Ridge regression will perform better
when the response is a function of many predictors, all with coefficients of
roughly equal size. However, the number of predictors that is related to the
response is never known a priori for real data sets. A technique such as
cross-validation can be used in order to determine which approach is better
on a particular data set.
As with ridge regression, when the least squares estimates have exces-
sively high variance, the lasso solution can yield a reduction in variance
at the expense of a small increase in bias, and consequently can gener-
ate more accurate predictions. Unlike ridge regression, the lasso performs
variable selection, and hence results in models that are easier to interpret.6.2 Shrinkage Methods 249
0.02 0.10 0.50 2.00 10.00 50.000 20 40 60 80 100Mean Squared Error0.4 0.5 0.6 0.7 0.8 0.9 1.00 20 40 60 80 100R2 on Training DataMean Squared ErrorλFIGURE 6.9. Left:Plots of squared bias (black), variance (green), and test
MSE (purple) for the lasso. The simulated data is similar to that in Figure 6.8,
except that now only two predictors are related to the response. Right:Comparison
of squared bias, variance, and test MSE between lasso (solid) and ridge (dotted).
Both are plotted against their R2on the training data, as a common form of
indexing. The crosses in both plots indicate the lasso model for which the MSE both cases the entire coefficient paths can be computed with about the
same amount of work as a single least squares fit. We will explore this
further in the lab at the end of this chapter.
A Simple Special Case for Ridge Regression and the Lasso
In order to obtain a better intuition about the behavior of ridge regression
and the lasso, consider a simple special case with n=p, andXa diag-
onal matrix with 1’s on the diagonal and 0’s in all off-diagonal elements.
To simplify the problem further, assume also that we are performing regres-
sion without an intercept. With these assumptions, the usual least squares
problem simplifies to finding β1,...,βpthat minimize
p/summationdisplay
j=1(yj−βj)2. (6.11)
In this case, the least squares solution is given by
ˆβj=yj.
And in this setting, ridge regression amounts to finding β1,...,βpsuch (6.12)
is minimized, and the lasso amounts to finding the coefficients such (6.13)250 6. Linear Model Selection and Regularization
−1.5 −0.5 0.0 0.5 1.0 1.5−1.5 −0.5 0.5 1.5Coefficient EstimateRidgeLeast Squares
−1.5 −0.5 0.0 0.5 1.0 1.5−1.5 −0.5 0.5 1.5Coefficient EstimateLassoLeast Squares
yjyjFIGURE 6.10. The ridge regression and lasso coefficient estimates for a simple
setting with n=pandXa diagonal matrix with 1’s on the diagonal. Left:The
ridge regression coefficient estimates are shrunken proportionally towards zero,
relative to the least squares estimates. Right:The lasso coefficient estimates are
soft-thresholded towards zero.
is minimized. One can show that in this setting, the ridge regression esti-
mates take the form
ˆβR
j=yj/(1 + λ), (6.14)
and the lasso estimates take the if|yj|≤λ/2.(6.15)
Figure6.10displays the situation. We can see that ridge regression and
the lasso perform two very different types of shrinkage. In ridge regression,
each least squares coefficient estimate is shrunken by the same proportion.
In contrast, the lasso shrinks each least squares coefficient towards zero by
a constant amount, λ/2; the least squares coefficients that are less than
λ/2in absolute value are shrunken entirely to zero. The type of shrink-
age performed by the lasso in this simple setting ( 6.15) is known as soft-
thresholding . The fact that some lasso coefficients are shrunken entirely tosoft-
thresholdingzero explains why the lasso performs feature selection.
In the case of a more general data matrix X, the story is a little more
complicated than what is depicted in Figure 6.10, but the main ideas still
hold approximately: ridge regression more or less shrinks every dimension
of the data by the same proportion, whereas the lasso more or less shrinks
all coefficients toward zero by a similar amount, and sufficiently small co-
efficients are shrunken all the way to zero.
Bayesian Interpretation of Ridge Regression and the Lasso
We now show that one can view ridge regression and the lasso through
a Bayesian lens. A Bayesian viewpoint for regression assumes that the
coefficient vector βhas some priordistribution, say p(β), where β=
(β0,β1,...,βp)T. The likelihood of the data can be written as f(Y|X,β),6.2 Shrinkage Methods 251
−3 −2 −1 0 1 2 30.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7−3 −2 −1 0 1 2 30.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7βjβj
g(βj)g(βj)
FIGURE 6.11. Left:Ridge regression is the posterior mode for βunder a Gaus-
sian prior. Right:The lasso is the posterior mode for βunder a double-exponential
prior.
whereX=(X1,...,X p). Multiplying the prior distribution by the likeli-
hood gives us (up to a proportionality constant) the posterior distribution ,posterior
distributionwhich takes the the proportionality above follows from Bayes’ theorem, and the
equality above follows from the assumption that Xis fixed.
We assume the usual linear model,
Y=β0+X1β1+···+Xpβp+/epsilon1,
and suppose that the errors are independent and drawn from a normal dis-
tribution. Furthermore, assume that p(β)=/producttextp
j=1g(βj), for some density
function g. It turns out that ridge regression and the lasso follow naturally
from two special cases of g:
• Ifgis a Gaussian distribution with mean zero and standard deviation
a function of λ, then it follows that the posterior mode forβ—thatposterior
modeis, the most likely value for β, given the data—is given by the ridge
regression solution. (In fact, the ridge regression solution is also the
posterior mean.)
• Ifgis a double-exponential (Laplace) distribution with mean zero
and scale parameter a function of λ, then it follows that the posterior
mode for βis the lasso solution. (However, the lasso solution is not
the posterior mean, and in fact, the posterior mean does not yield a
sparse coefficient vector.)
The Gaussian and double-exponential priors are displayed in Figure 6.11.
Therefore, from a Bayesian viewpoint, ridge regression and the lasso follow
directly from assuming the usual linear model with normal errors, together
with a simple prior distribution for β. Notice that the lasso prior is steeply
peaked at zero, while the Gaussian is flatter and fatter at zero. Hence, the
lasso expects a priori that many of the coefficients are (exactly) zero, while
ridge assumes the coefficients are randomly distributed about zero.252 6. Linear Model Selection and Regularization
5e−03 5e−02 5e−01 5e+0025.0 25.2 25.4 25.6Cross−Validation Error5e−03 5e−02 5e−01 5e+00−300 −100 0 100 300Standardized CoefficientsλλFIGURE 6.12. Left:Cross-validation errors that result from applying ridge
regression to the Creditdata set with various values of λ.Right:The coefficient
estimates as a function of λ. The vertical dashed lines indicate the value of λ
selected by cross-validation.
6.2.3 Selecting the Tuning Parameter
Just as the subset selection approaches considered in Section 6.1require
a method to determine which of the models under consideration is best,
implementing ridge regression and the lasso requires a method for selecting
a value for the tuning parameter λin (6.5) and (6.7), or equivalently, the
value of the constraint sin (6.9) and (6.8). Cross-validation provides a sim-
ple way to tackle this problem. We choose a grid of λvalues, and compute
the cross-validation error for each value of λ, as described in Chapter 5.W e
then select the tuning parameter value for which the cross-validation error
is smallest. Finally, the model is re-fit using all of the available observations
and the selected value of the tuning parameter.
Figure6.12displays the choice of λthat results from performing leave-
one-out cross-validation on the ridge regression fits from the Creditdata
set. The dashed vertical lines indicate the selected value of λ. In this case
the value is relatively small, indicating that the optimal fit only involves dip is not very pronounced, so there is rather a wide range of values
that would give a very similar error. In a case like this we might simply use
the least squares solution.
Figure6.13provides an illustration of ten-fold cross-validation applied to
the lasso fits on the sparse simulated data from Figure 6.9. The left-hand
panelofFigure displays the coefficient estimates. The vertical dashed lines indicate
the point at which the cross-validation error is smallest. The two colored
lines in the right-hand panel of Figure 6.13represent the two predictors
that are related to the response, while the grey lines represent the unre-
lated predictors; these are often referred to as signalandnoisevariables,signalrespectively. Not only has the lasso correctly given much larger coeffi-
cient estimates to the two signal predictors, but also the minimum cross-
validation error corresponds to a set of coefficient estimates for which only
the signal variables are non-zero. Hence cross-validation together with the
lasso has correctly identified the two signal variables in the model, even
though this is a challenging setting, with p= 45 variables and only n= 506.3 Dimension Reduction Methods 253
0.0 0.2 0.4 0.6 0.8 1.00 200 600 1000 1400Cross−Validation Error0.0 0.2 0.4 0.6 0.8 1.0−5 0 5 10 15Standardized 6.13. Left: Ten-fold cross-validation MSE for the lasso, applied to
the sparse simulated data set from Figure 6.9.Right:The corresponding lasso
coefficient estimates are displayed. The two signal variables are shown in color,
and the noise variables are in gray. The vertical dashed lines indicate the lasso
fit for which the cross-validation error is smallest.
observations. In contrast, the least squares solution—displayed on the far
right of the right-hand panel of Figure 6.13—assigns a large coefficient
estimate to only one of the two signal variables.
6.3 Dimension Reduction Methods
The methods that we have discussed so far in this chapter have controlled
variance in two different ways, either by using a subset of the original vari-
ables, or by shrinking their coefficients toward zero. All of these methods
are defined using the original predictors, X1,X2,...,X p. We now explore
a class of approaches that transform the predictors and then fit a least
squares model using the transformed variables. We will refer to these tech-
niques as dimension reduction methods.dimension
reductionLetZ1,Z2,...,Z Mrepresent M<p linear combinations of our original
linear
combinationppredictors. That is,
Zm=p/summationdisplay
j=1φjmXj (6.16)
for some constants φ1m,φ2m...,φpm,m=1,...,M . We can then fit the
linear regression . . . , n, (6.17)
using least squares. Note that in ( 6.17), the regression coefficients are given
byθ0,θ1,...,θM.Iftheconstants φ1m,φ2m,...,φpmarechosenwisely,then
such dimension reduction approaches can often outperform least squares
regression. In other words, fitting ( 6.17) using least squares can lead to
better results than fitting ( 6.1) using least squares.
The term dimension reduction comes from the fact that this approach
reduces the problem of estimating the p+1coefficients β0,β1,...,βpto the254 6. Linear Model Selection and Regularization
102030405060700 5 10 15 20 25 30 35PopulationAd SpendingFIGURE 6.14. The population size ( pop) and ad spending ( ad) for100different
cities are shown as purple circles. The green solid line indicates the first principal
component, and the blue dashed line indicates the second principal component.
simpler problem of estimating the M+1coefficients θ0,θ1,...,θM, where
M<p . In other words, the dimension of the problem has been reduced
fromp+1toM+1.
Notice that from ( (6.18)
Hence (6.17) can be thought of as a special case of the original linear
regression model given by ( 6.1). Dimension reduction serves to constrain
the estimated βjcoefficients, since now they must take the form ( 6.18).
This constraint on the form of the coefficients has the potential to bias the
coefficient estimates. However, in situations where pis large relative to n,
selectingavalueof If M=p, and all the Zmare linearly independent, then ( 6.18)
poses no constraints. In this case, no dimension reduction occurs, and so
fitting (6.17) is equivalent to performing least squares on the original p
predictors.
All dimension reduction methods work in two steps. First, the trans-
formed predictors Z1,Z2,...,Z Mare obtained. Second, the model is fit
using these Mpredictors. However, the choice of Z1,Z2,...,Z M, or equiv-
alently, the selection of the φjm’s, can be achieved in different ways. In principal components
andpartial least squares .
6.3.1 Principal Components Regression
Principal components analysis (PCA) is a popular approach for derivingprincipal
components
analysis6.3 Dimension Reduction Methods 255
a low-dimensional set of features from a large set of variables. PCA is
discussed in greater detail as a tool for unsupervised learning in Chapter 12.
Here we describe its use as a dimension reduction technique for regression.
An Overview of Principal Components Analysis
PCA is a technique for reducing the dimension of an n×pdata matrix X.
Thefirst principal component direction of the data is that along which the
observations vary the most . For instance, consider Figure 6.14, which shows
population size ( pop) in tens of thousands of people, and ad spending for a
particular company ( ad) in thousands of dollars, for 100cities.6The green
solid line represents the first principal component direction of the data. We
can see by eye that this is the direction along which there is the greatest
variability in the data. That is, if we projected the 100 observations onto
this line (as shown in the left-hand panel of Figure 6.15), then the resulting
projected observations would have the largest possible variance; projecting
the observations onto any other line would yield projected observations
with lower variance. Projecting a point onto a line simply involves finding
the location on the line which is closest to the point.
The first principal component is displayed graphically in Figure 6.14, but
how can it be summarized mathematically? It is given by the formula
Z1=0.839×(pop−pop)+0 .544×(ad−ad). (6.19)
Hereφ11=0.839andφ21=0.544are the principal component loadings,
which define the direction referred to above. In ( 6.19),pop indicates the
mean of all popvalues in this data set, and adindicates the mean of all ad-
vertisingspending. The idea is that out of everypossible linear combination
ofpopandadsuch that φ2
11+φ2
21=1, this particular linear combination
yields the highest variance: i.e. this is the linear combination for which
Var(φ11×(pop−pop)+φ21×(ad−ad))is maximized. It is necessary to
consider only linear combinations of the form φ2
11+φ2
21=1, since otherwise
we could increase φ11andφ21arbitrarily in order to blow up the variance.
In (6.19), the two loadings are both positive and have similar size, and so
Z1is almost an averageof the two variables.
Sincen= 100 ,popandadare vectors of length 100, and so is Z1in
(6.19). For instance,
zi1=0.839×(pop i−pop)+0 .544×(adi−ad). (6.20)
The values of z11,...,z n1are known as the principal component scores , and
can be seen in the right-hand panel of Figure 6.15.
There is also another interpretation of PCA: the first principal compo-
nent vector defines the line that is as close as possible to the data. For
instance, in Figure 6.14, the first principal component line minimizes the
sum of the squared perpendicular distances between each point and the
line. These distances are plotted as dashed line segments in the left-hand
6This dataset is distinct from the Advertising data discussed in Chapter 3.256 6. Linear Model Selection and Regularization
20 30 40 505 10 15 20 25 30PopulationAd Spending−20 −10 0 10 20−10 −5 0 5 101st Principal Component2nd Principal ComponentFIGURE 6.15. A subset of the advertising data. The mean popandadbudgets
are indicated with a blue circle. Left:The first principal component direction is
shown in green. It is the dimension along which the data vary the most, and it also
defines the line that is closest to all nof the observations. The distances from each
observation to the principal component are represented using the black dashed line
segments. The blue dot represents (pop,ad).Right:The left-hand panel has been
rotated so that the first principal component direction coincides with the x-axis.
panel of Figure 6.15, in which the crosses represent the projection of each
point onto the first principal component line. The first principal component
has been chosen so that the projected observations are as close as possible
to the original observations.
In the right-hand panel of Figure 6.15, the left-hand panel has been
rotated so that the first principal component direction coincides with the
x-axis. It is possible to show that the first principal component score for
theith observation, given in ( 6.20), is the distance in the x-direction of the
ith cross from zero. So for example, the point in the bottom-left corner of
the left-hand panel of Figure 6.15has a large negative principal component
score,zi1=−26.1, while the point in the top-right corner has a large
positive score, zi1= 18 .7. These scores can be computed directly using
(6.20).
We can think of the values of the principal component Z1as single-
number summaries of the joint popandadbudgets for each location. In
this example, if zi1=0.839×(pop i−pop)+0 .544×(adi−ad)<0,
then this indicates a city with below-average population size and below-
average ad spending. A positive score suggests the opposite. How well can a
single number represent both popandad? In this case, Figure 6.14indicates
thatpopandadhave approximately a linear relationship, and so we might
expect that a single-number summary will work well. Figure 6.16displays
zi1versus both popandad.7The plots show a strong relationship between
the first principal component and the two features. In other words, the first
principal component appears to capture most of the information contained
in thepopandadpredictors.
So far we have concentrated on the first principal component. In gen-
eral, one can construct up to pdistinct principal components. The second
7The principal components were calculated after first standardizing both popandad,
a common approach. Hence, the x-axes on Figures 6.15and6.16are not on the same
scale.6.3 Dimension Reduction Methods 257
−3 −2 −1 0 1 2 320 30 40 50 601st Principal ComponentPopulation−3 −2 −1 0 1 2 35 10 15 20 25 301st Principal ComponentAd SpendingFIGURE 6.16. Plots of the first principal component scores zi1versuspopand
ad. The relationships are strong.
principal component Z2is a linear combination of the variables that is un-
correlated with Z1, and has largest variance subject to this constraint. The
second principal component direction is illustrated as a dashed blue line in
Figure6.14. It turns out that the zero correlation condition of Z1withZ2
is equivalent to the condition that the direction must be perpendicular , orperpen-
dicular orthogonal , to the first principal component direction. The second principal
orthogonal component is given by the the advertising data has two predictors, the first two principal com-
ponents contain all of the information that is in popandad. However, by
construction, the first component will contain the most information. Con-
sider, for example, the much larger variability of zi1(thex-axis) versus
zi2(they-axis) in the right-hand panel of Figure 6.15. The fact that the
second principal component scores are much closer to zero indicates that
this component captures far less information. As another illustration, Fig-
ure6.17displays zi2versuspopandad. There is little relationship between
the second principal component and these two predictors, again suggesting
that in this case, one only needs the first principal component in order to
accurately represent the popandadbudgets.
With two-dimensional data, such as in our advertising example, we can
construct at most two principal components. However, if we had other
predictors, such as population age, income level, education, and so forth,
then additional components could be constructed. They would successively
maximize variance, subject to the constraint of being uncorrelated with the
preceding components.
The Principal Components Regression Approach
Theprincipal components regression (PCR) approach involves construct-principal
components
regressioning the first Mprincipal components, Z1,...,Z M, and then using these
components as the predictors in a linear regression model that is fit us-
ing least squares. The key idea is that often a small number of principal
components suffice to explain most of the variability in the data, as well
as the relationship with the response. In other words, we assume that the258 6. Linear Model Selection and Regularization
−1.0 −0.5 0.0 0.5 1.020 30 40 50 602nd Principal ComponentPopulation−1.0 −0.5 0.0 0.5 1.05 10 15 20 25 302nd Principal ComponentAd SpendingFIGURE 6.17. Plots of the second principal component scores zi2versuspop
andad. The relationships are weak.
0 10 20 30 400 10 20 30 40 50 60 70Number of ComponentsMean Squared Error0 10 20 30 400 50 100 150Number of ComponentsMean Squared ErrorSquared BiasTest MSEVariance
FIGURE 6.18. PCR was applied to two simulated data sets. In each panel, the
horizontal dashed line represents the irreducible error. Left:Simulated data from
Figure6.8.Right:Simulated data from Figure 6.9.
directions in which X1,...,X pshow the most variation are the directions
that are associated with Y. While this assumption is not guaranteed to be
true, it often turns out to be a reasonable enough approximation to give
good results.
If the assumption underlying PCR holds, then fitting a least squares
model to Z1,...,Z Mwill lead to better results than fitting a least squares
model to X1,...,X p, since most or all of the information in the data that
relates to the response is contained in Z1,...,Z M, and by estimating only
M/lessmuchpcoefficients we can mitigate overfitting. In the advertising data, the
first principal component explains most of the variance in both popandad,
so a principal component regression that uses this single variable to predict
some response of interest, such as sales, will likely perform quite well.
Figure6.18displays the PCR fits on the simulated data sets from Fig-
ures6.8and6.9. Recall that both data sets were generated using n= 50
observations and p= 45 predictors. However, while the response in the
first data set was a function of all the predictors, the response in the sec-
ond data set was generated using only two of the predictors. The curves are
plotted as a function of M, the number of principal components used as
predictors in the regression model. As more principal components are used6.3 Dimension Reduction Methods 259
0 10 20 30 400 10 20 30 40 50 60 70PCR
Number of ComponentsMean Squared ErrorSquared BiasTest MSEVariance
0.0 0.2 0.4 0.6 0.8 1.00 10 20 30 40 50 60 70Ridge Regression and Lasso
Shrinkage FactorMean Squared ErrorFIGURE 6.19. PCR, ridge regression, and the lasso were applied to a simu-
lated data set in which the first five principal components of Xcontain all the
information about the response Y. In each panel, the irreducible error Var(/epsilon1)is
shown as a horizontal dashed line. Left:Results for PCR. Right:Results for lasso
(solid) and ridge regression (dotted). The x-axis displays the shrinkage factor
of the coefficient estimates, defined as the /lscript2norm of the shrunken coefficient
estimates divided by the /lscript2norm of the least squares estimate.
in the regression model, the bias decreases, but the variance increases. This
results in a typical U-shape for the mean squared error. When M=p= 45 ,
then PCR amounts simply to a least squares fit using all of the original
predictors. The figure indicates that performing PCR with an appropriate
choice of Mcan result in a substantial improvement over least squares, es-
pecially in the left-hand panel. However, by examining the ridge regression
and lasso results in Figures 6.5,6.8, and6.9, we see that PCR does not
perform as well as the two shrinkage methods in this example.
The relatively worse performance of PCR in Figure 6.18is a consequence
of the fact that the data were generated in such a way that many princi-
pal components are required in order to adequately model the response.
In contrast, PCR will tend to do well in cases when the first few principal
components are sufficient to capture most of the variation in the predictors
as well as the relationship with the response. The left-hand panel of Fig-
ure6.19illustrates the results from another simulated data set designed to
be more favorable to PCR. Here the response was generated in such a way
that it depends exclusively on the first five principal components. Now the
bias drops to zero rapidly as M, the number of principal components used
in PCR, increases. The mean squared error displays a clear minimum at
M=5. The right-hand panel of Figure 6.19displays the results on these
data using ridge regression and the lasso. All three methods offer a signif-
icant improvement over least squares. However, PCR and ridge regression
slightly outperform the lasso.
We note that even though PCR provides a simple way to perform re-
gression using M<p predictors, it is nota feature selection method. This
is because each of the Mprincipal components used in the regression is a
linear combination of all pof theoriginalfeatures. For instance, in ( 6.19),
Z1was a linear combination of both popandad. Therefore, while PCR of-
ten performs quite well in many practical settings, it does not result in the260 6. Linear Model Selection and Regularization
2 4 6 8 10−300 −100 0 100 200 300 400Number of ComponentsStandardized CoefficientsIncomeLimitRatingStudent
2 4 6 8 1020000 40000 60000 80000Number of ComponentsCross−Validation MSEFIGURE 6.20. Left:PCR standardized coefficient estimates on the Creditdata
set for different values of M.Right:The ten-fold cross-validation MSE obtained
using PCR, as a function of M.
development of a model that relies upon a small set of the original features.
In this sense, PCR is more closely related to ridge regression than to the
lasso. In fact, one can show that PCR and ridge regression are very closely
related. One can even think of ridge regression as a continuous version of
PCR!8
In PCR, the number of principal components, M, is typically chosen by
cross-validation. The results of applying PCR to the Creditdata set are
shown in Figure 6.20; the right-hand panel displays the cross-validation er-
rorsobtained,asafunctionof M.Onthesedata,thelowestcross-validation
error occurs when there are M= 10 components; this corresponds to al-
most no dimension reduction at all, since PCR with M= 11 is equivalent
to simply performing least squares.
When performing PCR, we generally recommend standardizing each pre-
dictor, using ( 6.6), prior to generating the principal components. This stan-
dardization ensures that all variables are on the same scale. In the absence
of standardization, the high-variance variables will tend to play a larger
role in the principal components obtained, and the scale on which the vari-
ables are measured will ultimately have an effect on the final PCR model.
However, if the variables are all measured in the same units (say, kilograms,
or inches), then one might choose not to standardize them.
6.3.2 Partial Least or directions , that best represent the predictors X1,...,X p. These
directions are identified in an unsupervised way, since the response Yis
not used to help determine the principal component directions. That is,
the response does not supervise the identification of the principal compo-
nents. Consequently, PCR suffers from a drawback: there is no guarantee
8More details can be found in Section 3.5 of The Elements of Statistical Learning by
Hastie, Tibshirani, and Friedman.6.3 Dimension Reduction Methods 261
20304050605 10 15 20 25 30PopulationAd SpendingFIGURE 6.21. For the advertising data, the first PLS direction (solid line)
and first PCR direction (dotted line) are shown.
that the directions that best explain the predictors will also be the best
directions to use for predicting the response. Unsupervised methods are
discussed further in Chapter 12.
We now present partial least squares (PLS), a supervised alternative topartial Z1,...,Z and then fits a linear model via least squares using these Mnew
features. But unlike PCR, PLS identifies these new features in a supervised
way—that is, it makes use of the response Yin order to identify new
features that not only approximate the old features well, but also that are
related to the response . Roughly speaking, the PLS approach attempts to
find directions that help explain both the response and the predictors.
We now describe how the first PLS direction is computed. After stan-
dardizing the ppredictors, PLS computes the first direction Z1by setting
eachφj1in (6.16) equal to the coefficient from the simple linear regression
ofYontoXj. One can show that this coefficient is proportional to the cor-
relation between YandXj. Hence, in computing Z1=/summationtextp
j=1φj1Xj, PLS
places the highest weight on the variables that are most strongly related to
the response.
Figure6.21displays an example of PLS on a synthetic dataset with Sales
in each of 100 regions as the response, and two predictors; Population Size
and Advertising Spending. The solid green line indicates the first PLS di-
rection, while the dotted line shows the first principal component direction.
PLS has chosen a direction that has less change in the addimension per
unit change in the popdimension, relative to PCA. This suggests that pop
is more highly correlated with the response than is ad. The PLS direction
does not fit the predictors as closely as does PCA, but it does a better job
explaining the response.
To identify the second PLS direction we first adjusteach of the variables
forZ1, by regressing each variable on Z1and taking residuals . These resid-
uals can be interpreted as the remaining information that has not been
explained by the first PLS direction. We then compute Z2using this or-262 6. Linear Model Selection and Regularizationthogonalizeddata in exactly the same fashion asZ1was computed basedon the original data. This iterative approach can be repeatedMtimes toidentify multiple PLS componentsZ1,...,ZM. Finally, at the end of thisprocedure, we use least squares to fit a linear model to predictYusingZ1,...,ZMin exactly the same fashion as for PCR.As with PCR, the numberMof partial least squares directions used inPLS is a tuning parameter that is typically chosen by cross-validation. Wegenerally standardize the predictors and response before performing PLS.PLS is popular in the field of chemometrics, where many variables arisefrom digitized spectrometry signals. In practice it often performs no betterthan ridge regression or PCR. While the supervised dimension reductionof PLS can reduce bias, it also has the potential to increase variance, sothat the overall benefit of PLS relative to PCR is a wash.6.4 Considerations in High Dimensions6.4.1 High-Dimensional DataMost traditional statistical techniques for regression and classification areintended for thelow-dimensionalsetting in whichn, the number of ob-low-dimensionalservations, is much greater thanp, the number of features. This is due inpart to the fact that throughout most of the field’s history, the bulk of sci-entific problems requiring the use of statistics have been low-dimensional.For instance, consider the task of developing a model to predict a patient’sblood pressure on the basis of his or her age, sex, and body mass index(BMI). There are three predictors, or four if an intercept is included in themodel, and perhaps several thousand patients for whom blood pressureand age, sex, and BMI are available. Hencen/greatermuchp, and so the problem islow-dimensional. (By dimension here we are referring to the size ofp.)In the past 20 years, new technologies have changed the way that dataare collected in fields as diverse as finance, marketing, and medicine. It isnow commonplace to collect an almost unlimited number of feature mea-surements (pvery large). Whilepcan be extremely large, the number ofobservationsnis often limited due to cost, sample availability, or otherconsiderations. Two examples are as follows:1. Rather than predicting blood pressure on the basis of just age, sex,and BMI, one might also collect measurements for half a millionsin-gle nucleotide polymorphisms(SNPs; these are individual DNA mu-tations that are relatively common in the population) for inclusion inthe predictive model. Thenn≈200andp≈500,000.2. patterns could treat as features all of the search terms enteredby users of a search engine. This is sometimes known as the “bag-of-words” model. The same researcher might have access to the searchhistories of only a few hundred or a few thousand search engine userswho have consented to share their information with the researcher.For a given user, each of thepsearch terms is scored present (0) or6.4 Considerations in High Dimensions 263
absent (1), creating a large binary feature vector. Then n≈1,000
andpis much larger.
Data sets containing more features than observations are often referred
to ashigh-dimensional . Classical approaches such as least squares linearhigh-
dimensionalregression are not appropriate in this setting. Many of the issues that arise
in the analysis of high-dimensional data were discussed earlier in this book,
since they apply also when n>p : these include the role of the bias-variance
trade-off and the danger of overfitting. Though these issues are always rele-
vant, they can become particularly important when the number of features
is very large relative to the number of observations.
We have defined the high-dimensional setting as the case where the num-
ber of features pis larger than the number of observations n. But the con-
siderations that we will now discuss certainly also apply if pis slightly
smaller than n, and are best always kept in mind when performing super-
vised learning.
6.4.2 What Goes Wrong in High Dimensions?
In order to illustrate the need for extra care and specialized techniques
for regression and classification when p>n , we begin by examining what
can go wrong if we apply a statistical technique not intended for the high-
dimensional setting. For this purpose, we examine least squares and other classical statistical approaches.
When the number of features pis as large as, or larger than, the number
of observations n, least squares as described in Chapter 3cannot (or rather,
should not ) be performed. The reason is simple: regardless of whether or
not there truly is a relationship between the features and the response,
least squares will yield a set of coefficient estimates that result in a perfect
fit to the data, such that the residuals are zero.
AnexampleisshowninFigure 6.22withp=1feature(plusanintercept)
in two cases: when there are 20 observations, and when there are only
two observations. When there are 20 observations, n>p and the seeks to approximate the 20 observations as well as possible. On the
other hand, when there are only two observations, then regardless of the
values of those observations, the regression line will fit the data exactly.
This is problematic because this perfect fit will almost certainly lead to
overfitting of the data. In other words, though it is possible to perfectly fit
the training data in the high-dimensional setting, the resulting linear model
will perform extremely poorly on an independent test set, and therefore
does not constitute a useful model. In fact, we can see that this happened
in Figure 6.22: the least squares line obtained in the right-hand panel will
perform very poorly on a test set comprised of the observations in the left-
hand panel. The problem is simple: when p>n orp≈n, a simple least
squares regression line is too flexibleand hence overfits the data.
Figure6.23further illustrates the risk of carelessly applying least squares
when the number of features pis large. Data were simulated with n= 20
observations, and regression was performed with between 1and20features,264 6. Linear Model Selection and Regularization
−1.5 −1.0 −0.5 0.0 0.5 1.0−10 −5 0 5 10−1.5 −1.0 −0.5 0.0 0.5 1.0−10 −5 0 5 10XXYY
FIGURE 6.22.Left:Least squares regression in the low-dimensional setting.Right:Least squares regression withn=2observations and two parameters to beestimated (an intercept and a coefficient).
5 10 150.2 0.4 0.6 0.8 1.0Number of VariablesR2
5 10 150.0 0.2 0.4 0.6 0.8Number of VariablesTraining MSE5 10 151 5 50 500Number of VariablesTest MSEFIGURE 6.23.On a simulated example withn= 20training observations,features that are completely unrelated to the outcome are added to the model.Left:TheR2increases to 1 as more features are included.Center:The trainingset MSE decreases to 0 as more features are included.Right:The test set MSEincreases as more features are included.each of which was completely unrelated to the response. As shown in increases, and correspondingly the training set MSE decreases to 0as the number of features increases,even though the features are completelyunrelated to the response. On the other hand, the MSE on anindependenttest setbecomes extremely large as the number of features included in themodel increases, because including the additional predictors leads to a vastincrease in the variance of the coefficient estimates. Looking at the testset MSE, it is clear that the best model contains at most a few variables.However, someone who carelessly examines only theR2or the training setMSE might erroneously conclude that the model with the greatest numberof variables is best. This indicates the importance of applying extra carewhen analyzing data sets with a large number of variables, and of alwaysevaluating model performance on an independent test set.6.4 Considerations in High Dimensions 265
116 21012345128 51012345170 111012345p= 20p= 50p= 2000
Degrees of FreedomDegrees of FreedomDegrees of FreedomFIGURE 6.24. The lasso was performed with n= 100 observations and three
values of p, the number of features. Of the pfeatures, 20 were associated with
the response. The boxplots show the test MSEs that result using three different
values of the tuning parameter λin (6.7). For ease of interpretation, rather than
reporting λ, thedegrees of freedom are reported; for the lasso this turns out
to be simply the number of estimated non-zero coefficients. When p= 20 , the
lowest test MSE was obtained with the smallest amount of regularization. When
p= 50 , the lowest test MSE was achieved when there is a substantial amount
of regularization. When p=2,000the lasso performed poorly regardless of the
amount of regularization, due to the fact that only 20 of the 2,000 features truly
are associated with the outcome.
InSection RSS or R2in order to account for the number of variables used to fit
a least squares model. Unfortunately, the Cp, AIC, and BIC approaches
are not appropriate in the high-dimensional setting, because estimating ˆσ2
is problematic. (For instance, the formula for ˆσ2from Chapter 3yields an
estimate ˆσ2=0in this setting.) Similarly, problems arise in the application
of adjusted R2in the high-dimensional setting, since one can easily obtain
a model with an adjusted R2value of 1. Clearly, alternative approaches
that are better-suited to the high-dimensional setting are required.
6.4.3 Regression in High Dimensions
It turns out that many of the methods seen in this chapter for fitting
less flexible least squares models, such as forward stepwise selection, ridge
regression, the lasso, and principal components regression, are approaches avoid overfitting by using a less flexible fitting approach
than least squares.
Figure6.24illustrates the performance of the lasso in a simple simulated
example. There are p= 20 ,50, or2,000features, of which 20 are truly
associated with the outcome. The lasso was performed on n= 100 training
observations, and the mean squared error was evaluated on an independent
test set. As the number of features increases, the test set error increases.
Whenp= 20 , the lowest validation set error was achieved when λin266 6. Linear Model Selection and Regularization
(6.7) was small; however, when pwas larger then the lowest validation
set error was achieved using a larger value of λ. In each boxplot, rather
than reporting the values of λused, the degrees of freedom of the resulting
lasso solution is displayed; this is simply the number of non-zero coefficient
estimates in the lasso solution, and is a measure of the flexibility of the
lasso fit. Figure 6.24highlights three important points: (1) regularization
or shrinkage plays a key role in high-dimensional problems, (2) appropriate
tuning parameter selection is crucial for good predictive performance, and
(3) the test error tends to increase as the dimensionality of the problem
(i.e. the number of features or predictors) increases, unless the additional
features are truly associated with the response.
The third point above is in fact a key principle in the analysis of high-
dimensionaldata,whichisknownasthe curse of dimensionality .Onemightcurse of di-
mensionalitythink that as the number of features used to fit a model increases, the
quality of the fitted model will increase as well. However, comparing the
left-hand and right-hand panels in Figure 6.24, we see that this is not
necessarily the case: in this example, the test set MSE almost doubles as
pincreases from 20 to 2,000. In general, adding additional signal features
that are truly associated with the response will improve the fitted model ,
in the sense of leading to a reduction in test set error. However, adding
noise features that are not truly associated with the response will lead
to a deterioration in the fitted model, and consequently an increased test
set error. This is because noise features increase the dimensionality of the
problem, exacerbating the risk of overfitting (since noise features may be
assigned nonzero coefficients due to chance associations with the response
on the training set) without any potential upside in terms of improved test
set error. Thus, we see that new technologies that allow for the collection
of measurements for thousands or millions of features are a double-edged
sword: they can lead to improved predictive models if these features are in
fact relevant to the problem at hand, but will lead to worse results if the
features are not relevant. Even if they are relevant, the variance incurred
in fitting their coefficients may outweigh the reduction in bias that they
bring.
6.4.4 Interpreting Results in High Dimensions
When we perform the lasso, ridge regression, or other regression proce-
dures in the high-dimensional setting, we must be quite cautious in the way
that we report the results obtained. In Chapter 3, we learned about multi-
collinearity , the concept that the variables in a regression might be corre-
lated with each other. In the high-dimensional setting, the multicollinearity
problem is extreme: any variable in the model can be written as a linear
combination of all of the other variables in the model. Essentially, this
means that we can never know exactly which variables (if any) truly are
predictive of the outcome, and we can never identify the bestcoefficients
for use in the regression. At most, we can hope to assign large regression
coefficients to variables that are correlated with the variables that truly are
predictive of the outcome.6.5 Lab: Linear Models and Regularization Methods 267
For instance, suppose that we are trying to predict blood pressure on the
basis of half a million SNPs, and that forward stepwise selection indicates
that 17 of those SNPs lead to a good predictive model on the training data.
It would be incorrect to conclude that these 17 SNPs predict blood pressure
more effectively than the other SNPs not included in the model. There are
likely to be many sets of 17 SNPs that would predict blood pressure just
as well as the selected model. If we were to obtain an independent data set
and perform forward stepwise selection on that data set, we would likely
obtain a model containing a different, and perhaps even non-overlapping,
set of SNPs. This does not detract from the value of the model obtained—
for instance, the model might turn out to be very effective in predicting
blood pressure on an independent set of patients, and might be clinically
useful for physicians. But we must be careful not to overstate the results
obtained, and to make it clear that what we have identified is simply one
of many possible models for predicting blood pressure, and that it must be
further validated on independent data of model fit in the high-dimensional setting. We have seen that when
p>n , it is easy to obtain a useless model that has zero residuals. There-
fore, one should neveruse sum of squared errors, p-values, R2statistics, or
other traditional measures of model fit on the training data as evidence of
a good model fit in the high-dimensional setting. For instance, as we saw
in Figure 6.23, one can easily obtain a model with R2=1 whenp>n .
Reporting this fact might mislead others into thinking that a statistically
valid and useful model has been obtained, whereas in fact this provides
absolutely no evidence of a compelling model. It is important to instead
report results on an independent test set, or cross-validation errors. For
instance, the MSE or R2on an independent test set is a valid measure of
model fit, but the MSE on the training set certainly is not.
6.5 Lab: Linear Models and Regularization
Methods
In this lab we implement many of the techniques discussed in this chapter.
We import some of our libraries at this top level.
In[1]: import numpy as np
import pandas as pd
from matplotlib.pyplot import subplots
from statsmodels.api import OLS
import sklearn.model_selection as skm
import sklearn.linear_model as skl
from sklearn.preprocessing import StandardScaler
from ISLP import load_data
from ISLP.models import ModelSpec as MS
from functools import partial
We again collect the new imports needed for this lab.
In[2]: from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA268 6. Linear Model Selection and Regularization
from sklearn.cross_decomposition import PLSRegression
from ISLP.models import install l0bnb
from l0bnb import fit_path
We have installed the package l0bnbon the fly. Note the escaped !pip
install— this is run as a separate system command.
6.5.1 Subset Selection Methods
Here we implement methods that reduce the number of parameters in a
model by restricting the model to a subset of the input variables.
Forward Selection
We will apply the forward-selection approach to the Hittersdata. We wish
to predict a baseball player’s Salaryon the basis of various statistics asso-
ciated with performance in the previous year.
First of all, we note that the Salaryvariable is missing for some of the
players. The np.isnan() function can be used to identify the missing ob-np.isnan()servations. It returns an array of the same shape as the input vector, with
aTruefor any elements that are missing, and a Falsefor non-missing el-
ements. The sum()method can then be used to count all of the missingsum()elements.
In[3]: Hitters = load_data( 'Hitters' )
np.isnan(Hitters[ 'Salary' ]).sum()
Out[3]: 59
We see that Salaryis missing for 59 players. The dropna() method of data
frames removes all of the rows that have missing values in any variable (by
default — see Hitters.dropna? ).
In[4]: Hitters = Hitters.dropna();
Hitters.shape
Out[4]: (263, 20)
We first choose the best model using forward selection based on Cp(6.2).
This score is not built in as a metric to sklearn. We therefore define a
function to compute it ourselves, and use it as a scorer. By default, sklearn
tries to maximize a score, hence our scoring function computes the negative
Cpstatistic.
In[5]: def nCp(sigma2, estimator, X, Y):
"Negative Cp statistic"
n, p = X.shape
Yhat = estimator.predict(X)
RSS = np.sum((Y - Yhat)**2)
return -(RSS + 2 * p * sigma2) / n6.5 Lab: Linear Models and Regularization Methods 269
We need to estimate the residual variance σ2, which is the first argument
in our scoring function above. We will fit the biggest model, using all the
variables, and estimate σ2based on its MSE.
In[6]: design = MS(Hitters.columns.drop( 'Salary' )).fit(Hitters)
Y=n p . a r r a y ( H i t t e r s [ 'Salary' ])
X=d e s i g n . t r a n s f o r m ( H i t t e r s )
sigma2 = OLS(Y,X).fit().scale
The function sklearn_selected() expects a scorer with just three argu-
ments — the last three in the definition of nCp()above. We use the function
partial() first seen in Section 5.3.3to freeze the first argument with our
estimate of σ2.
In[7]: neg_Cp = partial(nCp, sigma2)
We can now use neg_Cp() as a scorer for model selection.
Along with a score we need to specify the search strategy. This is done
through the object Stepwise() in theISLP.models package. The method
Stepwise.first_peak() runs forward stepwise until any further additions
to the model do not result in an improvement in the evaluation score.
Similarly, the method Stepwise.fixed_steps() runs a fixed number of steps
of stepwise search.
In[8]: strategy = Stepwise.first_peak(design,
direction= 'forward' ,
max_terms=len(design.terms))
We now fit a linear regression model with Salaryas outcome using for-
ward selection. To do so, we use the function sklearn_selected() from thesklearn_
selected()ISLP.models package. This takes a model from statsmodels along with a
search strategy and selects a model with its fitmethod. Without specify-
ing ascoringargument, the score defaults to MSE, and so all 19 variables
will be selected (output not shown).
In[9]: hitters_MSE = in a smaller model, as expected, with just 10 vari-
ables selected.
In[10]: hitters_Cp = Y)
hitters_Cp.selected_state_
Out[10]: ('Assists' ,
'AtBat' ,
'CAtBat' ,
'CRBI',
'CRuns' ,
'CWalks' ,
'Division' ,270 6. Linear Model Selection and Among Models Using the Validation Set Approach andCross-ValidationAs an alternative to usingCp, we might try cross-validation to select amodel in forward selection. For this, we need a method that stores thefull path of models found in forward selection, and allows predictions foreach of these. This can be done with fromISLP.models. The the cross-validated predictions for each of the models along thepath, which we can use to evaluate the cross-validated MSE along the path.Here we define a strategy that fits the full forward selection path. Whilethere are various parameter choices forsklearn_selection_path(), we usethe defaults here, which selects the model at each step based on the biggestreduction in RSS.In[11]:strategy = = sklearn_selection_path(OLS, strategy)We now fit the full forward-selection path on theHittersdata and com-pute the fitted values.In[12]:full_path.fit(Hitters, Y)Yhat_in = 20)This gives us an array of fitted values — 20 steps in all, including thefitted mean for the null model — which we can use to evaluate in-sampleMSE. As expected, the in-sample MSE improves each step we take, indicat-ing we must use either the validation or cross-validation approach to selectthe number of steps. We fix the y-axis to range from 50,000 to 250,000to compare to the cross-validation and validation set MSE below, as wellas other methods such as ridge regression, lasso and principal componentsregression.In[13]:mse_fig, ax = subplots(figsize=(8,8))insample_mse = ((Yhat_in - Y[:,None])**2).mean(0)n_steps = o l o rb l a c steps of forward Lab: Linear Models and Regularization Methods 271
ax.set_ylim([50000,250000]);
Notice the expression NoneinY[:,None] above. This adds an axis (dimen-
sion) to the one-dimensional array Y, which allows it to be recycled when
subtracted from the two-dimensional Yhat_in.
We are now ready to use cross-validation to estimate test error along
the model path. We must use only the training observations to perform
all aspects of model-fitting — including variable selection. Therefore, the
determination of which model of a given size is best must be made using
only the training observations in each training fold. This point is subtle but
important. If the full data set is used to select the best subset at each step,
then the validation set errors and cross-validation errors that we obtain
will not be accurate estimates of the test error.
We now compute the cross-validated predicted values using 5-fold cross-
validation.
In[14]: K=5
kfold = = (263, 20)
The prediction matrix Yhat_cvis the same shape as Yhat_in; the difference
is that the predictions in each row, corresponding to a particular sample
index, were made from models fit on a training fold that did not include
that row.
At each model along the path, we compute the MSE in each of the cross-
validation folds. These we will average to get the mean MSE, and can also
use the individual values to compute a crude estimate of the standard error
of the mean.9Hence we must know the test indices for each cross-validation
split. This can be found by using the split()method of kfold. Because we
fixed the random state above, whenever we split any array with the same
number of rows as Ywe recover the same training and test indices, though
we simply ignore the training indices below.
In[15]: cv_mse = []
for train_idx, test_idx in kfold.split(Y):
errors = (Yhat_cv[test_idx] - #c o l u m nm e a n s
cv_mse = np.array(cv_mse).T
cv_mse.shape
Out[15]: (20, 5)
9The estimate is crude because the five error estimates are based on overlapping
training sets, and hence are not independent.272 6. Linear Model Selection and RegularizationWe now add the cross-validation error estimates to our MSE plot. of the / np.sqrt(K),label='Cross-validated',c='r')#c o l o rr e repeat the above using the validation set approach, we simply changeourcvargument to a validation set: one random split of the data into atest and training. We choose a test size of 20%, similar to the size of eachtest set in 5-fold = train_idx, test_idx in = = (Yhat_val - Y[test_idx,None])**2validation_mse = o l o rb l u e ,b r o k e nl i n Subset SelectionForward stepwise is agreedyselection procedure; at each step it augmentsthe current set by including one additional variable. We now apply bestsubset selection to theHittersdata, which for every subset size, searchesfor the best set of predictors.We will use a package calledl0bnbto perform best subset of solutions using the subset size as a penalty rather than a constraint.Although the distinction is subtle, the difference comes when we cross-validate.In[19]:D=d e s i g n . f i t _ t r a n s f o r m ( H i t t e r s )D=D . d r o p ('intercept',a x i s = 1 )X=n p . a s a r r a y ( D )6.5 Lab: Linear Models and Regularization Methods 273
Here we excluded the first column corresponding to the intercept, as l0bnb
will fit the intercept separately. We can find a path using the fit_path()
function.
In[20]: path = fit_path(X,
Y,
max_nonzeros=X.shape[1])
The function fit_path() returns a list whose values include the fitted
coefficients as B, an intercept as B0, as well as a few other attributes related
to the particular path algorithm used. Such details are beyond the scope
of this book.
In[21]: path[3]
Out[21]: {'B':a r r a y ( [ 0 . ,3 . 2 5 4 8 4 4 ,0 . ,0 . ,0 . ,
0. , 0. , 0. , 0. , 0. ,
0. , 0.677753 , 0. , 0. , 0. ,
0. , 0. , 0. , 0. ]),
'B0':- 3 8 . 9 8 2 1 6 7 3 9 5 5 5 4 9 4 ,
'lambda_0' :0 . 0 1 1 4 1 6 2 4 8 0 2 7 4 5 0 1 9 4 ,
'M':0 . 5 8 2 9 8 6 1 7 3 3 3 8 2 0 1 1 ,
'Time_exceeded' :F a l s e }
In the example above, we see that at the fourth step in the path, we have
two nonzero coefficients in 'B', corresponding to the value 0.114for the
penaltyparameter lambda_0 .Wecouldmakepredictionsusingthissequence
of fits on a validation set as a function of lambda_0 , or with more work using
cross-validation.
6.5.2 Ridge Regression and the Lasso
We will use the sklearn.linear_model package (for which we use sklas
shorthand below) to fit ridge and lasso regularized linear models on the
Hitters data. We start with the model matrix X(without an intercept)
that we computed in the previous section on best subset regression.
Ridge Regression
Wewillusethefunction skl.ElasticNet() tofitbothridgeandthelasso.Toskl.Elastic
Net() fit apathof ridge regressions models, we use skl.ElasticNet.path() , which
skl.Elastic
Net.path()can fit both ridge and lasso, as well as a hybrid mixture; ridge regression
corresponds to l1_ratio=0 . It is good practice to standardize the columns
ofXin these applications, if the variables are measured in different units.
Sinceskl.ElasticNet() does no normalization, we have to take care of that
ourselves. Since we standardize first, in order to find coefficient estimates
on the original scale, we must unstandardize the coefficient estimates. The
parameter λin (6.5) and (6.7) is called alphasinsklearn. In order to be
consistent with the rest of this chapter, we use lambdasrather than alphas
in what follows.10
10At the time of publication, ridge fits like the one in code chunk [22] issue unwarranted
convergence warning messages; we expect these to disappear as this package matures.274 6. Linear Model Selection and Regularization
In[22]: Xs = X - X.mean(0)[None,:]
X_scale = X.std(0)
Xs = Xs / X_scale[None,:]
lambdas = 10**np.linspace(8, -2, 100) / Y.std()
soln_array = (19, 100)
Here we extract the array of coefficients corresponding to the solutions
along the regularization path. By default the skl.ElasticNet.path method
fits a path along an automatically selected range of λvalues, except for
the case when l1_ratio=0 , which results in ridge regression (as is the case
here).11So here we have chosen to implement the function over a grid of
values ranging from λ= 108toλ= 10−2scaled by the standard deviation
ofy, essentially covering the full range of scenarios from the null model
containing only the intercept, to the least squares fit.
Associated with each value of λis a vector of ridge regression coefficients,
that can be accessed by a column of soln_array . In this case, soln_array is
a19×100matrix, with 19 rows (one for each predictor) and 100 columns
(one for each value of λ).
We transpose this matrix and turn it into a data frame to facilitate
viewing and plotting.
In[23]: soln_path = = 'negative log(lambda)'
soln_path
Out[23]: AtBat Hits HmRun Runs ...
negative
log(lambda)
-12.310855 0.000800 0.000889 0.000695 0.000851 ...
-12.078271 0.001010 0.001122 0.000878 0.001074 ...
-11.845686 0.001274 0.001416 0.001107 0.001355 ...
-11.613102 0.001608 0.001787 0.001397 0.001710 ...
-11.380518 0.002029 0.002255 0.001763 0.002158 ...
... ... ... ... ... ...
100 rows × 19 columns
We plot the paths to get a sense of how the coefficients vary with λ.T o
control the location of the legend we first set legendtoFalsein the plot
method, adding it afterward with the legend() method of ax.
In[24]: path_fig, ax = subplots(figsize=(8,8))
soln_path.plot(ax=ax, legend=False)
ax.set_xlabel( '$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
11The reason is rather technical; for all models except ridge, we can find the smallest
value of λfor which all coefficients are zero. For ridge this value is ∞.6.5 Lab: Linear Models and Regularization Methods 275ax.set_ylabel('Standardized coefficients',f o n t s i z e = 2 0 )ax.legend(loc='upper left');(We have usedlatexformatting in the horizontal label, in order to formatthe Greekλappropriately.) We expect the coefficient estimates to be muchsmaller, in terms of/lscript2norm, when a large value ofλis used, as comparedto when a small value ofλis used. (Recall that the/lscript2norm is the squareroot of the sum of squared coefficient values.) We display the coefficientsat the40th step, whereλis 25.535.In[25]:beta_hat = compute the/lscript2norm of the standardized contrast, here is the/lscript2norm whenλis 2.44e-01. Note the much larger/lscript2norm of the coefficients associated with this smaller value ofλ.In[27]:beta_hat = np.linalg.norm(beta_hat)Out[27]:(0.2437, 160.4237)Above we normalizedXupfront, and fit the ridge model usingXs. ThePipeline()object insklearnprovides a clear way to separate feature nor-malization from the fitting of the ridge model itself.In[28]:ridge = skl.ElasticNet(alpha=lambdas[59], l1_ratio=0)scaler = StandardScaler(with_mean=True, with_std=True)pipe = Pipeline(steps=[('scaler',s c a l e r ) ,('ridge',r i d g e ) ] )pipe.fit(X, Y)We show that it gives the same/lscript2norm as in our previous fit on thestandardized that the operationpipe.fit(X, Y)above has changed theridgeobject, and in particular has added attributes such ascoef_that were notthere before.276 6. Linear Model Selection and RegularizationEstimating Test Error of Ridge RegressionChoosing ana priorivalue ofλfor ridge regression is difficult if not im-possible. We will want to use the validation method or cross-validation toselect the tuning parameter. The reader may not be surprised that thePipeline()approach can be used inskm.cross_validate()with either avalidation method (i.e.validation) ork-fold cross-validation.We fix the random state of the splitter so that the results obtained willbe reproducible.In[30]:validation = = 0.01results = test MSE is 1.342e+05. Note that if we had instead simply fit a modelwith just an intercept, we would have predicted each test observation usingthe mean of the training observations. We can get the same result by fittinga ridge regression model with averylarge value ofλ. Note that1e10means1010.In[31]:ridge.alpha = 1e10results = choosingλ=0.01is arbitrary, so we will use cross-validation orthe validation-set approach to choose the tuning parameterλ. The objectGridSearchCV()allows exhaustive grid search to choose such a parameter.GridSearchCV()We first use the validation set method to chooseλ.In[32]:param_grid = {'ridge__alpha':l a m b d a s }grid = t a n d a r d S c a l e r ( ) ) ,('ridge',E l a s t i c N e t ( a l p h a = 0 . 0 0 5 8 9 9 ,l 1 _ r a t i o = 0 ) ) ] )6.5 Lab: Linear Models and Regularization Methods 277
Alternatively, we can use 5-fold cross-validation.
In[33]: grid = 'neg_mean_squared_error' )
grid.fit(X, Y)
grid.best_params_[ 'ridge__alpha' ]
grid.best_estimator_
Recall we set up the kfoldobject for 5-fold cross-validation on page 271.
We now plot the cross-validated MSE as a function of −log(λ), which has
shrinkage decreasing from left to right.
In[34]: ridge_fig, ax = 'mean_test_score' ],
yerr=grid.cv_results_[ 'std_test_score' ]/n p . s q r t ( K ) )
ax.set_ylim([50000,250000])
ax.set_xlabel( '$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
ax.set_ylabel( 'Cross-validated MSE' ,f o n t s i z e = 2 0 ) ;
One can cross-validate different metrics to choose a parameter. The de-
fault metric for skl.ElasticNet() is testR2. Let’s compare R2to MSE for
cross-validation here.
In[35]: grid_r2 = Y)
Finally, let’s plot the results for cross-validated R2.
In[36]: r2_fig, ax = 'mean_test_score' ],
yerr=grid_r2.cv_results_[ 'std_test_score' ]/n p . s q r t ( K )
)
ax.set_xlabel( '$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
ax.set_ylabel( 'Cross-validated $R^2$' ,f o n t s i z e = 2 0 ) ;
Fast Cross-Validation for Solution Paths
The ridge, lasso, and elastic net can be efficiently fit along a sequence of
λvalues, creating what is known as a solution path orregularization path .
Hence there is specialized code to fit such paths, and to choose a suitable
value ofλusing cross-validation. Even with identical splits the results will
not agree exactlywith our gridabove because the standardization of each
feature in gridis carried out on each fold, while in pipeCVbelow it is carried
out only once. Nevertheless, the results are similar as the normalization is
relatively stable across folds.
In[37]: ridgeCV = = Pipeline(steps=[( 'scaler' ,s c a l e r ) ,278 6. Linear Model Selection and Regularization
('ridge' ,r i d g e C V ) ] )
pipeCV.fit(X, Y)
Let’s produce a plot again of the cross-validation error to see that it is
similar to using skm.GridSearchCV .
In[38]: tuned_ridge = pipeCV.named_steps[ 'ridge' ]
ridgeCV_fig, ax = / c= 'k',l s '$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
ax.set_ylabel( 'Cross-validated MSE' ,f o n t s i z e = 2 0 ) ;
We see that the value of λthat results in the smallest cross-validation
error is 1.19e-02, available as the value tuned_ridge.alpha_ . What is the
test MSE associated with this value of λ?
In[39]: 115526.71
This represents a further improvement over the test MSE that we got using
λ=4. Finally, tuned_ridge.coef_ has the coefficients fit on the entire data
set at this value of λ.
In[40]: tuned_ridge.coef_
Out[40]: array([-222.80877051, 238.77246614, 3.21103754, -2.93050845,
3.64888723, 108.90953869, -50.81896152, -105.15731984,
122.00714801, 57.1859509 , 210.35170348, 118.05683748,
-150.21959435, 30.36634231, -61.62459095, 77.73832472,
40.07350744, -25.02151514, -13.68429544])
As expected, none of the coefficients are zero—ridge regression does not
perform variable selection!
Evaluating Test Error of Cross-Validated Ridge
Choosing λusing cross-validation provides a single regression estimator,
similar to fitting a linear regression model as we saw in Chapter 3. It is
therefore reasonable to estimate what its test error is. We run into a prob-
lem here in that cross-validation will have touchedall of its data in choosing
λ, hence we have no further data to estimate test error. A compromise is
to do an initial split of the data into two disjoint sets: a training set and a
test set. We then fit a cross-validation tuned ridge regression on the train-
ing set, and evaluate its performance on the test set. We might call this
cross-validation nested within the validation set approach. A priori there
is no reason to use half of the data for each of the two sets in validation.
Below, we use 75% for training and 25% for test, with the estimator being
ridge regression tuned using 5-fold cross-validation. This can be achieved
in code as follows:6.5 Lab: Linear Models and Regularization Methods 279In[41]:outer_valid = = = = Pipeline(steps=[('scaler',s c a l e r ) ,('ridge',r i d g e C V ) ] ) ;In[42]:results = LassoWe saw that ridge regression with a wise choice ofλcan outperform leastsquares as well as the null model on theHittersdata set. We now askwhether the lasso can yield either a more accurate or a more interpretablemodel than ridge regression. In order to fit a lasso model, we once againuse theElasticNetCV()function; however, this time we use the argumentl1_ratio=1. Other than that change, we proceed just as we did in fitting aridge model.In[43]:lassoCV = = Pipeline(steps=[('scaler',s c a l e r ) ,('lasso',l a s s o C V ) ] )pipeCV.fit(X, Y)tuned_lasso = soln_array = = can see from the coefficient plot of the standardized coefficients thatdepending on the choice of tuning parameter, some of the coefficients willbe exactly equal to zero.280 6. Linear Model Selection and Regularization
In[45]: path_fig, ax = subplots(figsize=(8,8))
soln_path.plot(ax=ax, legend=False)
ax.legend(loc= 'upper left' )
ax.set_xlabel( '$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
ax.set_ylabel( 'Standardized coefficiients' ,f o n t s i z e = 2 0 ) ;
The smallest cross-validated error is lower than the test set MSE of the null
model and of least squares, and very similar to the test MSE of 115526.71
of ridge regression (page 278) withλchosen by cross-validation.
In[46]: 114690.73
Let’s again produce a plot of the cross-validation error.
In[47]: lassoCV_fig, ax = / c= 'k',l s '$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
ax.set_ylabel( 'Cross-validated MSE' ,f o n t s i z e = 2 0 ) ;
However, the lasso has a substantial advantage over ridge regression in
that the resulting coefficient estimates are sparse. Here we see that 6 of the
19 coefficient estimates are exactly zero. So the lasso model with λchosen
by cross-validation contains only 13 variables.
In[48]: tuned_lasso.coef_
Out[48]: array([-210.01008773, 243.4550306 , 0. , 0. ,
0. , 97.69397357, -41.52283116, -0. ,
0. , 39.62298193, 205.75273856, 124.55456561,
-126.29986768, 15.70262427, -59.50157967, 75.24590036,
21.62698014, -12.04423675, -0. ])
As in ridge regression, we could evaluate the test error of cross-validated
lasso by first splitting into test and training sets and internally running
cross-validation on the training set. We leave this as an exercise.
6.5.3 PCR and PLS Regression
Principal Components Regression
Principal components regression (PCR) can be performed using PCA()fromPCA()thesklearn.decomposition module. We now apply PCR to the Hitters
data, in order to predict Salary. Again, ensure that the missing values
have been removed from the data, as described in Section 6.5.1.
We use LinearRegression() to fit the regression model here. Note thatLinear
Regression() it fits an intercept by default, unlike the OLS()function seen earlier in
Section6.5.1.6.5 Lab: Linear Models and Regularization Methods 281In[49]:pca = PCA(n_components=2)linreg = skl.LinearRegression()pipe = Pipeline([('pca',p c a ) ,('linreg',l i n r e g ) ] )pipe.fit(X, 0.4758765 ])When performing PCA, the results vary depending on whether the datahas beenstandardizedor not. As in the earlier examples, this can be ac-complished by including an additional step in the pipeline.In[50]:pipe = Pipeline([('scaler',s c a l e r ) ,('pca',p c a ) ,('linreg',l i n r e g ) ] )pipe.fit(X, -21.60350456])We can of course use CV to choose the number of components, byusingskm.GridSearchCV, in this case fixing the parameters to vary then_components.In[51]:param_grid = {'pca__n_components':r a n g e ( 1 ,2 0 ) }grid = Y)Let’s plot the results as we have for other methods.In[52]:pcr_fig, ax = subplots(figsize=(8,8))n_comp = p . s q r t ( K ) )ax.set_ylabel('Cross-validated MSE',f o n t s i z e = 2 0 )ax.set_xlabel('# principal components',f o n t s i z e = 2 0 see that the smallest cross-validation error occurs when 17 compo-nents are used. However, from the plot we also see that the cross-validationerror is roughly the same when only one component is included in themodel. This suggests that a model that uses just a small number of com-ponents might suffice.The CV score is provided for each possible number of components from1 to 19 inclusive. ThePCA()method complains if we try to fit an interceptonly withn_components=0so we also compute the MSE for just the nullmodel with these splits.In[53]:Xn = np.zeros((X.shape[0], 1))cv_null = skm.cross_validate(linreg,282 6. Linear Model Selection and Regularization
Xn,
Y,
cv=kfold,
scoring= 'neg_mean_squared_error' )
-cv_null[ 'test_score' ].mean()
Out[53]: 204139.31
Theexplained_variance_ratio_ attribute of our PCAobject provides the
percentage of variance explained in the predictors and in the response using
different numbers of components. This concept is discussed in greater detail
in Section 12.2.
In[54]: pipe.named_steps[ 'pca'].explained_variance_ratio_
Out[54]: array([0.3831424 , 0.21841076])
Briefly, we can think of this as the amount of information about the predic-
tors that is captured using Mprincipal components. For example, setting
M=1only captures 38.31% of the variance, while M=2captures an ad-
ditional 21.84%, for a total of 60.15% of the variance. By M=6it increases
to 88.63%. Beyond this the increments continue to diminish, until we use
allM=p= 19components, which captures all 100% of the variance.
Partial Least PLSRegression() function.PLS
Regression()In[55]: pls = Y)
As was the case in PCR, we will want to use CV to choose the number
of components.
In[56]: param_grid = { 'n_components' :range(1, 20)}
grid = 'neg_mean_squared_error' )
grid.fit(X, Y)
As for our other methods, we plot the MSE.
In[57]: pls_fig, ax = subplots(figsize=(8,8))
n_comp = param_grid[ 'n_components' ]
ax.errorbar(n_comp,
-grid.cv_results_[ 'mean_test_score' ],
grid.cv_results_[ 'std_test_score' ]/n p . s q r t ( K ) )
ax.set_ylabel( 'Cross-validated MSE' ,f o n t s i z e = 2 0 )
ax.set_xlabel( '# principal components' ,f o n t s i z e = 2 0 error is minimized at 12, though there is little noticable difference
between this point and a much lower number like 2 or 3 components.6.6 Exercises 2836.6 ExercisesConceptual1. We perform best subset, forward stepwise, and backward stepwiseselection on a single data set. For each approach, we obtainp+1models, containing0,1,2,...,ppredictors. Explain your answers:(a) Which of the three models withkpredictors has the smallesttrainingRSS?(b) Which of the three models withkpredictors has the smallesttestRSS?(c) True or False:i. The predictors in thek-variable model identified by forwardstepwise are a subset of the predictors in the(k+1)-variablemodel identified by forward stepwise selection.ii. The predictors in thek-variable model identified by back-ward stepwise are a subset of the predictors in the(k+ 1)-variable model identified by backward stepwise selection.iii. The predictors in thek-variable model identified by back-ward stepwise are a subset of the predictors in the(k+ 1)-variable model identified by forward stepwise selection.iv. The predictors in thek-variable model identified by forwardstepwise are a subset of the predictors in the(k+1)-variablemodel identified by backward stepwise selection.v. The predictors in thek-variable model identified by bestsubset are a subset of the predictors in the(k+ 1)-variablemodel identified by best subset selection.2. For parts (a) through (c), indicate which of i. through iv. is correct.Justify your answer.(a) The lasso, relative to least squares, is:i. More flexible and hence will give improved prediction ac-curacy when its increase in bias is less than its decrease invariance.ii. More flexible and hence will give improved prediction accu-racy when its increase in variance is less than its decreasein bias.iii. Less flexible and hence will give improved prediction accu-racy when its increase in bias is less than its decrease invariance.iv. Less flexible and hence will give improved prediction accu-racy when its increase in variance is less than its decreasein bias.(b) Repeat (a) for ridge regression relative to least squares.(c) Repeat (a) for non-linear methods relative to least squares.284 6. Linear Model Selection and Regularization3. Suppose we estimate the regression coefficients in a linear regressionmodel by top/summationdisplayj=1|βj|≤sfor a particular value ofs. For parts (a) through (e), indicate whichof i. through v. is correct. Justify your answer.(a) As we increasesfrom 0, the training RSS will:i. Increase initially, and then eventually start decreasing in aninverted U shape.ii. Decrease initially, and then eventually start increasing in aU shape.iii. Steadily increase.iv. Steadily decrease.v. Remain constant.(b) Repeat (a) for test RSS.(c) Repeat (a) for variance.(d) Repeat (a) for (squared) bias.(e) Repeat (a) for the irreducible error.4. Suppose we estimate the regression coefficients in a linear regressionmodel by a particular value ofλ. For parts (a) through (e), indicate whichof i. through v. is correct. Justify your answer.(a) As we increaseλfrom 0, the training RSS will:i. Increase initially, and then eventually start decreasing in aninverted U shape.ii. Decrease initially, and then eventually start increasing in aU shape.iii. Steadily increase.iv. Steadily decrease.v. Remain constant.(b) Repeat (a) for test RSS.(c) Repeat (a) for variance.(d) Repeat (a) for (squared) bias.(e) Repeat (a) for the irreducible error.6.6 Exercises 285
5. It is well-known that ridge regression tends to give similar coefficient
values to correlated variables, whereas the lasso may give quite dif-
ferent coefficient values to correlated variables. We will now explore
this property in a very simple setting.
Suppose that n=2,p=2,x11=x12,x21=x22. Furthermore,
suppose that y1+y2=0andx11+x21=0andx12+x22=0, so that
the estimate for the intercept in a least squares, ridge regression, or
lasso model is zero: ˆβ0=0.
(a) Write out the ridge regression optimization problem in this set-
ting.
(b) Argue that in this setting, the ridge coefficient estimates satisfy
ˆβ1=ˆβ2.
(c) Write out the lasso optimization problem in this setting.
(d) Argue that in this setting, the lasso coefficients ˆβ1andˆβ2are
not unique—in other words, there are many possible solutions
to the optimization problem in (c). Describe these solutions.
6. We will now explore ( 6.12) and (6.13) further.
(a) Consider ( 6.12) withp=1. For some choice of y1andλ>0,
plot (6.12) as a function of β1. Your plot should confirm that
(6.12) is solved by ( 6.14).
(b) Consider ( 6.13) withp=1. For some choice of y1andλ>0,
plot (6.13) as a function of β1. Your plot should confirm that
(6.13) is solved by ( 6.15).
7. We will now derive the Bayesian connection to the lasso and ridge
regression discussed in Section 6.2.2.
(a) Suppose that inde-
pendentandidenticallydistributedfroma N(0,σ2)distribution.
Write out the likelihood for the data.
(b) Assume the following prior for β:β1,...,βpare independent
and identically distributed according to a double-exponential
distribution with mean 0 and common scale parameter b: i.e.
p(β)=1
2bexp(−|β|/b). Write out the posterior for βin this
setting.
(c) Argue that the lasso estimate is the modeforβunder this pos-
terior distribution.
(d) Nowassumethefollowingpriorfor β:β1,...,βpareindependent
and identically distributed according to a normal distribution
with mean zero and variance c. Write out the posterior for βin
this setting.
(e) Argue that the ridge regression estimate is both the modeand
themeanforβunder this posterior distribution.286 6. Linear Model Selection and RegularizationApplied8. In this exercise, we will generate simulated data, and will then usethis data to perform forward and backward stepwise selection.(a) Create a random number generator and use itsnormal()methodto generate a predictorXof lengthn= 100, as well as a noisevector/epsilon1of lengthn= 100.(b) Generate a response vectorYof lengthn= 100according tothe andβ3are constants of your choice.(c) the predictorsX,X2,...,X10. What is the model obtainedaccording toCp? Report the coefficients of the model obtained.(d) Repeat (c), using backwards stepwise selection. How does youranswer compare to the results in (c)?(e) Now fit a lasso model to the simulated data, again usingX,X2,...,X10as predictors. Use cross-validation to select the Report the resulting coefficient estimates, and discuss theresults obtained.(f) Now generate a response vectorYaccording to the modelY=β0+β7X7+/epsilon1,and perform forward stepwise selection and the lasso. Discussthe results obtained.9. In this exercise, we will predict the number of applications receivedusing the other variables in theCollegedata set.(a) Split the data set into a training set and a test set.(b) Fit a linear model using least squares on the training set, andreport the test error obtained.(c) Fit a ridge regression model on the training set, withλchosenby cross-validation. Report the test error obtained.(d) Fit a lasso model on the training set, withλchosen by cross-validation. Report the test error obtained, along with the num-ber of non-zero coefficient estimates.(e) Fit a PCR model on the training set, withMchosen by cross-validation. Report the test error obtained, along with the valueofMselected by cross-validation.(f) Fit a PLS model on the training set, withMchosen by cross-validation. Report the test error obtained, along with the valueofMselected by cross-validation.6.6 Exercises 287(g) Comment on the results obtained. How accurately can we pre-dict the number of college applications received? Is there muchdifference among the test errors resulting from these five ap-proaches?10. will now explore this in a simulated data set.(a) Generate a data set withp= 20features,n=1,000observa-tions, and an associated quantitative response vector generatedaccording to the modelY=Xβ+/epsilon1,whereβhas some elements that are exactly equal to zero.(b) a test set containing 900 observations.(c) Perform best subset selection on the training set, and plot thetraining set MSE associated with the best model of each size.(d) Plot the test set MSE associated with the best model of eachsize.(e) For which model size does the test set MSE take on its a model containing only an intercept or a model containingall of the features, then play around with the way that you aregenerating the data in (a) until you come up with a scenario inwhich the test set MSE is minimized for an intermediate modelsize.(f) How does the model at which the test set MSE is minimizedcompare to the true model used to generate the data? Commenton the coefficient values.(g) Create a plot a range of valuesofr, whereˆβrjis thejth coefficient estimate for the best modelcontainingrcoefficients. Comment on what you observe. Howdoes this compare to the test MSE plot from (d)?11. We will now try to predict per capita crime rate in theBostondataset.(a) Try out some of the regression methods explored in this chapter,such as best subset selection, the lasso, ridge regression, andPCR. Present and discuss results for the approaches that youconsider.(b) Propose a model (or set of models) that seem to perform well onthis data set, and justify your answer. Make sure that you areevaluating model performance using validation set error, cross-validation, or some other reasonable alternative, as opposed tousing training error.288 6. Linear Model Selection and Regularization(c) Does your chosen model involve all of the features in the dataset? Why or why not?7
Moving Beyond Linearity
So far in this book, we have mostly focused on linear models. Linear models
are relatively simple to describe and implement, and have advantages over
other approaches in terms of interpretation and inference. However, stan-
dard linear regression can have significant limitations in terms of predic-
tive power. This is because the linearity assumption is almost always an
approximation, and sometimes a poor one. In Chapter 6we see that we can
improve upon least squares using ridge regression, the lasso, principal com-
ponents regression, and other techniques. In that setting, the improvement
is obtained by reducing the complexity of the linear model, and hence the
variance of the estimates. But we are still using a linear model, which can
only be improved so far! In this chapter we relax the linearity assumption
while still attempting to maintain as much interpretability as possible. We
do this by examining very simple extensions of linear models like as splines, local regression, and generalized additive models.
•Polynomial regression extends the linear model by adding extra pre-
dictors, obtained by raising each of the original predictors to a power.
For example, a cubicregression uses three variables, X,X2, andX3,
as predictors. This approach provides a simple way to provide a non-
linear fit to data.
•Step functions cut the range of a variable into Kdistinct regions in
order to produce a qualitative variable. This has the effect of fitting
a piecewise constant function.
•Regression splines are more flexible than polynomials and step func-
tions, and in fact are an extension of the two. They involve dividing
the range of XintoKdistinct regions. Within each region, a poly-
nomial function is fit to the data. However, these polynomials are
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 7. Moving Beyond Linearity
constrained so that they join smoothly at the region boundaries, or
knots. Provided that the interval is divided into enough regions, this
can produce an extremely flexible fit.
•Smoothing splines are similar to regression splines, but arise in a
slightly different situation. Smoothing splines result from minimizing
a residual sum of squares criterion subject to a smoothness penalty.
•Local regression is similar to splines, but differs in an important way.
The regions are allowed to overlap, and indeed they do so in a very
smooth way.
•Generalized additive models allow us to extend the methods above to
deal with multiple predictors.
In Sections 7.1–7.6, we present a number of approaches for modeling the
relationship between a response Yand a single predictor Xin a flexible
way. In Section 7.7, we show that these approaches can be seamlessly in-
tegrated in order to model a response Yas a function of several predictors
X1,...,X p.
7.1 Polynomial Regression
Historically, the standard way to extend linear regression to settings in
which the relationship between the predictors and the response is non-
linear has been to replace the standard linear model
yi=β0+β1xi+/epsilon1i
with a polynomial (7.1)
where/epsilon1iis the error term. This approach is known as polynomial regression ,polynomial
regressionand in fact we saw an example of this method in Section 3.3.2. For large
enough degree d, a polynomial regression allows us to produce an 7.1)canbeeasilyestimated
using least squares linear regression because this is just a standard linear
model with predictors xi,x2
i,x3
i,...,xd
i. Generally speaking, it is unusual
to usedgreater than 3or4because for large values of d, the polynomial
curve can become overly flexible and can take on some very strange shapes.
This is especially true near the boundary of the Xvariable.
The left-hand panel in Figure 7.1is a plot of wageagainst agefor the
Wagedata set, which contains income and demographic information for
males who reside in the central Atlantic region of the United States. We
see the results of fitting a degree-4 polynomial using least squares (solid
blue curve). Even though this is a linear regression model like any other,
the individual coefficients are not of particular interest. Instead, we look at
the entire fitted function across a grid of 63 values for agefrom 18 to 80 in
order to understand the relationship between ageandwage.7.1 Polynomial Regression 291
20 30 40 50 60 70 8050 100 150 200 250 300AgeWageDegree−4 Polynomial
20 30 40 50 60 70 800.00 0.05 0.10 0.15 0.20Age|||| | |||||||| |||||||| |||||
|||||||| ||||| | | ||||||
||||||
|| |||||||||| | | |||||| | | ||
||||||||||||||||||||| |||||||| |||| |||| | | | ||
|| | |||||| |||||||||||||| |||||||| ||||||||| |||||||| | | ||||||||||| |||| |||||||||||||||||||||||
|||| | |||||||||||||||||||||||||
|| ||||| | ||| | ||| |||||||||||| | | | | | |||| | ||||||||||||| ||| ||||||||||||| |||||||| | | | | ||| |||||||||||||||||||||||||||| ||
||||||||||| ||||||| ||||
||||
|||||||||||||||||||||| |||| ||||| | |||||||||| | ||||||||||||| |||||||| | | |||
||||||||| | | ||
|||||||||||| | | ||||||||||||||||| |||
|||||||||| ||||
|||| | | ||||||
||||| || | | | ||||||||||
|| ||||||||||||||||||| ||||| ||
|| |||| | | |||||||||
|||| ||||||||||||||||||| ||||||||||| ||||||| | |||||| ||||||||||||||
||||||||| | |||||
|| |||||| |||||| | | |||||||| | | | | |||||||||| |||||||
|| | | | ||||||||||||| |||||| | | ||
||||||||||| | ||||||||||||||||||
|| ||| | ||||||| |||||||||||||||||||
|| |||||||||||||||||||||||||||| | | ||||||
||||||||||||||||||||| | |||||||||| |||||||| ||| |||||||| |||| |||||||||| | | | | ||
||||| | |||| |||||
|| | |||||||| | |||||||| ||| ||||| ||||| | |||||
|||| ||| ||| | ||||| |||| |||||||||||||||| |||||||||||||||| ||||||||
|||||||||||| | ||||||||||||||||||||| ||| | | |||| |||||| |||||||||| ||||||||||
|| |||||||||||||||| |||| |||| ||
|||||||||||||||
|||||| ||||||| | | ||||||| || ||||| |||| | |||||| |||||||||||||||| |||||||||| |||| | ||||| ||||||| | ||||||||||||||||||
||| | |||||| |||| | ||||||||||||||| ||||||||||||
|||||||||||
||||| ||| | ||
||||||||||||||||
||||||||||||||||
|||||||| | | |||| | | |||||||||| |||||| | ||||||| ||||||
|| | | | | | | | | | ||||||| |||||||| ||||||| ||||| |||||||||||||||||||| ||||||||||||| |||| |||||||||||||||||||||| |||||||||||||||
|||| | | |||||||||||| | | | | | |||| ||||||||| | ||| ||||||| ||||||| ||| |||||||| | |||||||||||||||||| | | | |||| ||||||||||
|||||||||| |||||||||||||||||||||||||| | ||||||||||||||
|||||||||| | |||||||||||||| ||| |||| |||||||||||| ||||||| |||||||||||
|||| | |||| |||||||||||||| | | | ||||||||||||||||||||||| ||||||||| | ||||||||| |||| |||
|||||
|| ||| | ||||||||||||| | |||||||||||||||| | ||||||||||||
||| | | | | |||||| ||||||||||||||||||||| |||||||| ||||| | |||||||||||||||||||| ||||| ||||||||||||||||||| | |||||||||
||||||||||||| ||| ||| | | | ||||| ||| | ||||
|||||||
|| ||| ||| | ||||||||||||||||||||||||||||| ||| | | |||||||||||||||||||||| |||||||||| | || ||||||
|| ||||
||| | ||||||||||||| | ||||||||||||||
||||||||||||||||||||||| |||||||| |||||||||| | | | |||||||||||| ||||||||||||||||||| | ||||||||||||||||||| | ||||| | | ||||| | | ||||||
||||||||
|| |||||||| ||||
|| | ||||||||| ||||| ||||||| |||| |||| |||| | |||||||| ||||||||||||||||||||
|||| | |||||| |||||||
|| ||| |||||||
|| | | ||||||| ||||
|||||| ||||||| | |||||||||||| | |||||||| | ||||||||||||||||||| |||||||||||||||| | | ||
||||||
||||||||| | | |||| ||||||| |||| | | | | | | | |||||| | ||||||
||| | | ||||
|||||||| ||||||||||||| | | | | | |||||||||||||||||||||| | ||| | ||||| |||||| |||||| | ||| |||||| |||||| | | | ||||||| | |||||||| |||| |||| | | | | ||||||||||||||| ||||||||||||||||
|||||
||||
|||
||
|| | ||||| | ||
|||||||
||||||||||||||| | | | | ||| ||||| ||||||||| | ||||||||||||||| ||||| |||||||||||| || |||||||||| |||
|||||||| |||||||| | | ||||||||||||||||||||
|||||| ||||| | ||| |||||||| | | ||||||||||| | |||||||||
|||||||| |||||
|| ||||||| |||||||||||||| ||| | |||||
||| |||||||||| ||| ||||| |||||||||||||||||||||||||||| |||| |||||||||||||| | |||| ||Pr(Wage>250|Age)
FIGURE 7.1. TheWagedata.Left:The solid blue curve is a degree-4 polynomial
ofwage(in thousands of dollars) as a function of age, fit by least squares. The
dashed curves indicate an estimated 95% confidence interval. Right:We model the
binary event wage>250 using logistic regression, again with a degree-4 polynomial.
The fitted posterior probability of wageexceeding $250,000is shown in blue, along
with an estimated 95% confidence interval.
In Figure 7.1, a pair of dashed curves accompanies the fit; these are ( 2×)
standard error curves. Let’s see how these arise. Suppose we have computed
the fit at a particular value of (7.2)
Whatisthevarianceofthefit,i.e.Var ˆf(x0)?Leastsquaresreturnsvariance
estimates for each of the fitted coefficients ˆβj, as well as the covariances
between pairs of coefficient estimates. We can use these to compute the
estimated variance of ˆf(x0).1The estimated pointwise standard error of
ˆf(x0)is the square-root of this variance. This computation is repeated
at each reference point x0, and we plot the fitted curve, as well as twice
the standard error on either side of the fitted curve. We plot twice the
standard error because, for normally distributed error terms, this quantity
corresponds to an approximate 95% confidence interval.
It seems like the wages in Figure 7.1are from two distinct populations:
there appears to be a high earners group earning more than $250 ,000per
annum, as well as a low earners group. We can treat wageas a binary
variable by splitting it into these two groups. Logistic regression can then
be used to predict this binary response, using polynomial functions of age
1IfˆCis the5×5covariance matrix of the ˆβj, and if /lscriptT
0= (1 ,x0,x2
0,x3
0,x4
0), then
Var[ˆf(x0)] = /lscriptT
0ˆC/lscript0.292 7. Moving Beyond Linearity
as predictors. In other words, we fit the + exp( β0+β1xi+β2x2
i+···+βdxd
i). (7.3)
The result is shown in the right-hand panel of Figure 7.1. The gray marks
on the top and bottom of the panel indicate the ages of the high earners
and the low earners. The solid blue curve indicates the fitted probabilities
of being a high earner, as a function of age. The estimated 95% confidence
interval is shown as well. We see that here the confidence intervals are fairly
wide, especially on the right-hand side. Although the sample size for this
data set is substantial ( n=3,000), there are only 79high earners, which
results in a high variance in the estimated coefficients and consequently
wide confidence intervals.
7.2 Step Functions
Using polynomial functions of the features as predictors in a linear model
imposes a globalstructure on the non-linear function of X. We can instead
usestep functions in order to avoid imposing such a global structure. Herestep
function we break the range of Xintobins, and fit a different constant in each greater detail, we create cutpoints c1,c2,...,c Kin the range of X,
and then construct K+1new variables
C0(X)= I(X<c 1),
C1(X)= I(c1≤X<c 2),
C2(X)= I(c2≤X<c 3),
...
CK−1(X)= I(cK−1≤X<c K),
CK(X)= I(cK≤X),(7.4)
whereI(·)is anindicator function that returns a 1if the condition is true,indicator
functionand returns a 0otherwise. For example, I(cK≤X)equals1ifcK≤X, and
equals0otherwise. These are sometimes called dummyvariables. Notice
that for any value of X,C0(X)+C1(X)+···+CK(X)=1 , sinceXmust
be in exactly one of the K+1intervals. We then use least squares to fit a
linear model using C1(X),C2(X),...,C K(X)as (7.5)
For a given value of X, at most one of C1,C2,...,C Kcan be non-zero.
Note that when X<c 1, all of the predictors in ( 7.5) are zero, so β0can
2We exclude C0(X)as a predictor in ( 7.5) because it is redundant with the intercept.
This is similar to the fact that we need only two dummy variables to code a qualitative
variable with three levels, provided that the model will contain an intercept. The decision
to exclude C0(X)instead of some other Ck(X)in (7.5) is arbitrary. Alternatively, we
could include C0(X),C1(X),...,C K(X), and exclude the intercept.7.3 Basis Functions 293
20 30 40 50 60 70 8050 100 150 200 250 300AgeWagePiecewise Constant
20 30 40 50 60 70 800.00 0.05 0.10 0.15 7.2. TheWagedata.Left:The solid curve displays the fitted value from
a least squares regression of wage(in thousands of dollars) using step functions
ofage. The dashed curves indicate an estimated 95% confidence interval. Right:
We model the binary event wage>250 using logistic regression, again using step
functions of age. The fitted posterior probability of wageexceeding $250,000is
shown, along with an estimated 95% confidence interval.
be interpreted as the mean value of YforX<c 1. By comparison, ( 7.5)
predictsaresponseof β0+βjforcj≤X<c j+1,soβjrepresentstheaverage
increase in the response for Xincj≤X<c j+1relative to X<c 1.
An example of fitting step functions to the Wagedata from Figure 7.1is
shown in the left-hand panel of Figure 7.2. We also fit the logistic + exp( β0+β1C1(xi)+···+βKCK(xi))(7.6)
in order to predict the probability that an individual is a high earner on the
basis of age. The right-hand panel of Figure 7.2displays the fitted posterior
probabilities obtained using this approach.
Unfortunately, unless there are natural breakpoints in the predictors,
piecewise-constant functions can miss the action. For example, in the left-
hand panel of Figure 7.2, the first bin clearly misses the increasing trend
ofwagewithage. Nevertheless, step function approaches are very popular
in biostatistics and epidemiology, among other disciplines. For example,
5-year age groups are often used to define the bins.
7.3 Basis Functions
Polynomial and piecewise-constant regression models are in fact special
cases of a basis function approach. The idea is to have at hand a fam-basis
function294 7. Moving Beyond Linearity
ily of functions or transformations that can be applied to a variable X:
b1(X),b2(X),...,b K(X). Instead of fitting a linear model in X, we fit that the basis functions b1(·),b2(·),...,b K(·)are fixed and known.
(In other words, we choose the functions ahead of time.) For polynomial
regression, the basis functions are bj(xi)=xj
i, and for piecewise constant
functions they are bj(xi)= I(cj≤xi<c j+1). We can think of ( 7.7) as
a standard linear model with predictors b1(xi),b2(xi),...,b K(xi). Hence,
we can use least squares to estimate the unknown regression coefficients
in (7.7). Importantly, this means that all of the inference tools for linear
models that are discussed in Chapter 3, such as standard errors for the
coefficient estimates and F-statistics for the model’s overall significance,
are available in this setting.
Thus far we have considered the use of polynomial functions and piece-
wise constant functions for our basis functions; however, many alternatives
are possible. For instance, we can use wavelets or Fourier series to construct
basis functions. In the next section, we investigate a very common choice
for a basis function: regression splines .regression
spline
7.4 Regression Splines
Now we discuss a flexible class of basis functions that extends upon the
polynomial regression and piecewise constant regression approaches that
we have just seen.
7.4.1 Piecewise X,piece-
wise polynomial regression involves fitting separate low-degree different regions of X. For example, a piecewise cubic polynomial
works by fitting a cubic regression model of the form
yi=β0+β1xi+β2x2
i+β3x3
i+/epsilon1i, (7.8)
where the coefficients β0,β1,β2, andβ3differ in different parts of the range
ofX. The points where the coefficients change are called knots.knotFor example, a piecewise cubic with no knots is just a standard cubic
polynomial, as in ( 7.1) withd=3. A piecewise cubic polynomial with a
single knot at a point ctakes the other words, we fit two different polynomial functions to the data, one
on the subset of the observations with xi<c, and one on the subset of
the observations with xi≥c. The first polynomial function has coefficients7.4 Regression Splines 295
20 30 40 50 60 7050 100 150 200 250AgeWagePiecewise Cubic
20 30 40 50 60 7050 100 150 200 250AgeWageContinuous Piecewise Cubic
20 30 40 50 60 7050 100 150 200 250AgeWageCubic Spline
20 30 40 50 60 7050 100 150 200 250AgeWageLinear Spline
FIGURE 7.3. Various piecewise polynomials are fit to a subset of the Wage
data, with a knot at age=50.Top Left: The cubic polynomials are unconstrained.
Top Right: The cubic polynomials are constrained to be continuous at age=50.
Bottom Left: The cubic polynomials are constrained to be continuous, and to have
continuous first and second derivatives. Bottom Right: A linear spline is shown,
which is constrained to be continuous.
β01,β11,β21,andβ31, and the second has coefficients β02,β12,β22,andβ32.
Each of these polynomial functions can be fit using least squares applied
to simple functions of the original predictor.
Using more knots leads to a more flexible piecewise polynomial. In gen-
eral, if we place Kdifferent knots throughout the range of X, then we
will end up fitting K+1different cubic polynomials. Note that we do not
need to use a cubic polynomial. For example, we can instead fit piecewise
linear functions. In fact, our piecewise constant functions of Section 7.2are
piecewise polynomials of degree 0!
The top left panel of Figure 7.3shows a piecewise cubic polynomial fit to
a subset of the Wagedata, with a single knot at age=50. We immediately see
a problem: the function is discontinuous and looks ridiculous! Since each
polynomial has four parameters, we are using a total of eight degrees of
freedomin fitting this piecewise polynomial model.degrees of
freedom296 7. Moving Beyond Linearity
7.4.2 Constraints and Splines
The top left panel of Figure 7.3looks wrong because the fitted curve is just
too flexible. To remedy this problem, we can fit a piecewise polynomial
under the constraint that the fitted curve must be continuous. In other
words,therecannotbeajumpwhen age=50.ThetoprightplotinFigure 7.3
shows the resulting fit. This looks better than the top left plot, but the V-
shaped join looks first and second derivatives of the piecewise polynomials are continuousderivativeatage=50. In other words, we are requiring that the piecewise polynomial
be not only continuous when age=50, but also very smooth. Each constraint
that we impose on the piecewise cubic polynomials effectively frees up one
degree of freedom, by reducing the complexity of the resulting piecewise
polynomial fit. So in the top left plot, we are using eight degrees of free-
dom, but in the bottom left plot we imposed three constraints (continuity,
continuity of the first derivative, and continuity of the second derivative)
and so are left with five degrees of freedom. The curve in the bottom left
plot is called a cubic spline .3In general, a cubic spline with Kknots usescubic splinea total of 4+Kdegrees of freedom.
In Figure 7.3, the lower right plot is a linear spline , which is continuouslinear splineatage=50. The general definition of a degree- dspline is that it is a piecewise
degree-dpolynomial, with continuity in derivatives up to degree d−1at
each knot. Therefore, a linear spline is obtained by fitting a line in each
region of the predictor space defined by the knots, requiring continuity at
each knot.
In Figure 7.3, there is a single knot at age=50. Of course, we could add
more knots, and impose continuity at each.
7.4.3 The Spline Basis Representation
The regression splines that we just saw in the previous section may have
seemed somewhat complex: how can we fit a piecewise degree- dpolynomial
under the constraint that it (and possibly its first d−1derivatives) be
continuous? It turns out that we can use the basis model ( 7.7) to represent
a regression spline. A cubic spline with Kknots can be modeled (7.9)
for an appropriate choice of basis functions b1,b2,...,b K+3. The model
(7.9) can then be fit using least squares.
Just as there were several ways to represent polynomials, there are also
many equivalent ways to represent cubic splines using different choices of
basis functions in ( 7.9). The most direct way to represent a cubic spline
using (7.9) is to start off with a basis for a cubic polynomial—namely,
x, x2,andx3—and then add one truncated power basis function per knot.truncated
power basis
3Cubic splines are popular because most human eyes cannot detect the discontinuity
at the knots.7.4 Regression Splines 297
20 30 40 50 60 7050 100 150 200 250AgeWageNatural Cubic SplineCubic Spline
FIGURE 7.4. A cubic spline and a natural cubic spline, with three knots, fit to
a subset of the Wagedata. The dashed lines denote the knot locations.
A truncated power basis function is defined as
h(x,ξ)=( x−ξ)3
+=/braceleftbigg
(x−ξ)3ifx>ξ
0otherwise ,(7.10)
whereξis the knot. One can show that adding a term of the form β4h(x,ξ)
to the model ( 7.8) for a cubic polynomial will lead to a discontinuity in
only the third derivative at ξ; the function will remain continuous, with
continuous first and second derivatives, at each of the Kknots,we
perform least squares regression with an intercept and 3+Kpredictors, of
the form X,X2,X3,h(X,ξ1),h(X,ξ2),...,h (X,ξK), whereξ1,...,ξKare
the knots. This amounts to estimating a total of K+4regression coeffi-
cients; for this reason, fitting a cubic spline with Kknots uses K+4degrees
of freedom.
Unfortunately, splines can have high variance at the outer range of the
predictors—that is, when Xtakes on either a very small or very large
value. Figure 7.4shows a fit to the Wagedata with three knots. We see that
the confidence bands in the boundary region appear fairly wild. A natu-
ral spline is a regression spline with additional boundary constraints : thenatural
splinefunction is required to be linear at the boundary (in the region where Xis
smaller than the smallest knot, or larger than the largest knot). This addi-
tional constraint means that natural splines generally produce more stable
estimates at the boundaries. In Figure 7.4, a natural cubic spline is also
displayed as a red line. Note that the corresponding confidence intervals
are narrower.
7.4.4 Choosing the Number and Locations of the Knots
When we fit a spline, where should we place the knots? The regression
spline is most flexible in regions that contain a lot of knots, because in
those regions the polynomial coefficients can change rapidly. Hence, one298 7. Moving Beyond Linearity
20 30 40 50 60 70 8050 100 150 200 250 300AgeWageNatural Cubic Spline
20 30 40 50 60 70 800.00 0.05 0.10 0.15 0.20Age|||| | |||||||| |||||||| |||||
|||||||| ||||| | | ||||||
||||||
|| |||||||||| | | |||||| | | ||
||||||||||||||||||||| |||||||| |||| |||| | | | ||
|| | |||||| |||||||||||||| |||||||| ||||||||| |||||||| | | ||||||||||| |||| |||||||||||||||||||||||
|||| | |||||||||||||||||||||||||
|| ||||| | ||| | ||| |||||||||||| | | | | | |||| | ||||||||||||| ||| ||||||||||||| |||||||| | | | | ||| |||||||||||||||||||||||||||| ||
||||||||||| ||||||| ||||
||||
|||||||||||||||||||||| |||| ||||| | |||||||||| | ||||||||||||| |||||||| | | |||
||||||||| | | ||
|||||||||||| | | ||||||||||||||||| |||
|||||||||| ||||
|||| | | ||||||
||||| || | | | ||||||||||
|| ||||||||||||||||||| ||||| ||
|| |||| | | |||||||||
|||| ||||||||||||||||||| ||||||||||| ||||||| | |||||| ||||||||||||||
||||||||| | |||||
|| |||||| |||||| | | |||||||| | | | | |||||||||| |||||||
|| | | | ||||||||||||| |||||| | | ||
||||||||||| | ||||||||||||||||||
|| ||| | ||||||| |||||||||||||||||||
|| |||||||||||||||||||||||||||| | | ||||||
||||||||||||||||||||| | |||||||||| |||||||| ||| |||||||| |||| |||||||||| | | | | ||
||||| | |||| |||||
|| | |||||||| | |||||||| ||| ||||| ||||| | |||||
|||| ||| ||| | ||||| |||| |||||||||||||||| |||||||||||||||| ||||||||
|||||||||||| | ||||||||||||||||||||| ||| | | |||| |||||| |||||||||| ||||||||||
|| |||||||||||||||| |||| |||| ||
|||||||||||||||
|||||| ||||||| | | ||||||| || ||||| |||| | |||||| |||||||||||||||| |||||||||| |||| | ||||| ||||||| | ||||||||||||||||||
||| | |||||| |||| | ||||||||||||||| ||||||||||||
|||||||||||
||||| ||| | ||
||||||||||||||||
||||||||||||||||
|||||||| | | |||| | | |||||||||| |||||| | ||||||| ||||||
|| | | | | | | | | | ||||||| |||||||| ||||||| ||||| |||||||||||||||||||| ||||||||||||| |||| |||||||||||||||||||||| |||||||||||||||
|||| | | |||||||||||| | | | | | |||| ||||||||| | ||| ||||||| ||||||| ||| |||||||| | |||||||||||||||||| | | | |||| ||||||||||
|||||||||| |||||||||||||||||||||||||| | ||||||||||| |||
|||||||||| | |||||||||||||| ||| |||| |||||||||||| ||||||| |||||||||||
|||| | |||| |||||||||||||| | | | ||||||||||||||||||||||| ||||||||| | ||||||||| |||| |||
|||||
|| ||| | ||||||||||||| | ||||||||| ||||||| | ||||||||||||
||| | | | | |||||| ||||||||||||||||||||| |||||||| ||||| | |||||||||||||||||||| | |||| ||||||||||||||||||| | |||||||||
||||||||||||| ||| ||| | | | ||||| ||| | ||||
|||||||
|| ||| ||| | |||||||||||||||||||||| ||||||| ||| | | |||||||||||||||||||||| |||||||||| | || ||||||
|| ||||
||| | ||||||||||||| | ||||||||||||||
||||||||||||||||||||||| |||||||| |||||||||| | | | |||||||||||| ||||||||||||||||||| | ||||||||||||||||||| | ||||| | | ||||| | | ||||||
||||||||
|| |||||||| ||||
|| | ||||||||| ||||| ||||||| |||| |||| |||| | |||||||| ||||||||||||||||||||
|||| | |||||| |||||||
|| ||| |||||||
|| | | ||||||| ||||
|||||| ||||||| | |||||||||||| | |||||||| | ||||||||||||||||||| |||||||||||||||| | | ||
||||||
||||||||| | | |||| ||||||| |||| | | | | | | | |||||| | ||||||
||| | | ||||
|||||||| ||||||||||||| | | | | | |||||||||||||||||||||| | ||| | ||||| |||||| |||||| | ||| |||||| |||||| | | | ||||||| | |||||||| |||| |||| | | | | ||||||||||||||| ||||||||||||||||
|||||
||||
|||
||
|| | ||||| | ||
|||||||
||||||||||||||| | | | | ||| ||||| ||||||||| | ||||||||||||||| ||||| |||||||||||| || |||||||||| |||
|||||||| |||||||| | | ||||||||||||||||||||
|||||| ||||| | ||| |||||||| | | ||||||||||| | |||||||||
|||||||| |||||
|| ||||||| |||||||||||||| ||| | |||||
||| |||||||||| ||| ||||| |||||||||||||||||||||||||||| |||| |||||||||||||| | |||| ||Pr(Wage>250|Age)
FIGURE 7.5. A natural cubic spline function with four degrees of freedom is
fit to the Wagedata.Left:A spline is fit to wage(in thousands of dollars) as
a function of age.Right:Logistic regression is used to model the binary event
wage>250 as a function of age. The fitted posterior probability of wageexceeding
$250,000is shown. The dashed lines denote the knot locations.
option is to place more knots in places where we feel the function might
vary most rapidly, and to place fewer knots where it seems more stable.
While this option can work well, in practice it is common to place knots in
a uniform fashion. One way to do this is to specify the desired degrees of
freedom, and then have the software automatically place the corresponding
number of knots at uniform quantiles of the data.
Figure7.5shows an example on the Wagedata. As in Figure 7.4,w e
have fit a natural cubic spline with three knots, except this time the knot
locations were chosen automatically as the 25th, 50th, and 75th percentiles
ofage. This was specified by requesting four degrees of freedom. The ar-
gument by which four degrees of freedom leads to three interior knots is
somewhat technical.4
How many knots should we use, or equivalently how many degrees of
freedom should our spline contain? One option is to try out different num-
bers of knots and see which produces the best looking curve. A somewhat
more objective approach is to use cross-validation, as discussed in Chap-
ters5and6. With this method, we remove a portion of the data (say 10%),
fit a spline with a certain number of knots to the remaining data, and then
use the spline to make predictions for the held-out portion. We repeat this
process multiple times until each observation has been left out once, and
4There are actually five knots, including the two boundary knots. A cubic spline with
five knots has nine degrees of freedom. But natural cubic splines have two additional
naturalconstraints at each boundary to enforce linearity, resulting in 9−4=5 degrees
of freedom. Since this includes a constant, which is absorbed in the intercept, we count
it as four degrees of freedom.7.4 Regression Splines 299
2 4 6 8 101600 1620 1640 1660 1680Degrees of Freedom of Natural SplineMean Squared Error2 4 6 8 101600 1620 1640 1660 1680Degrees of Freedom of Cubic SplineMean Squared ErrorFIGURE 7.6. Ten-fold cross-validated mean squared errors for selecting the
degrees of freedom when fitting splines to the Wagedata. The response is wage
and the predictor age.Left:A natural cubic spline. Right:A cubic spline.
then compute the overall cross-validated RSS. This procedure can be re-
peated for different numbers of knots K. Then the value of Kgiving the
smallest RSS is chosen.
Figure7.6shows ten-fold cross-validated mean squared errors for splines
with various degrees of freedom fit to the Wagedata. The left-hand panel
corresponds to a natural cubic spline and the right-hand panel to a cu-
bic spline. The two methods produce almost identical results, with clear
evidence that a one-degree fit (a linear regression) is not adequate. Both
curves flatten out quickly, and it seems that three degrees of freedom for
the natural spline and four degrees of freedom for the cubic spline are quite
adequate.
In Section 7.7we fit additive spline models simultaneously on several
variables at a time. This could potentially require the selection of degrees
of freedom for each variable. In cases like this we typically adopt a more
pragmatic approach and set the degrees of freedom to a fixed number, say
four, for all terms.
7.4.5 Comparison to Polynomial Regression
Figure7.7compares a natural cubic spline with 15degrees of freedom to a
degree-15polynomial on the Wagedata set. The extra flexibility in the poly-
nomial produces undesirable results at the boundaries, while the natural
cubic spline still provides a reasonable fit to the data. Regression splines
often give superior results to polynomial regression. This is because unlike
polynomials, which must use a high degree (exponent in the highest mono-
mial term, e.g. X15) to produce flexible fits, splines introduce flexibility
by increasing the number of knots but keeping the degree fixed. Generally,
this approach produces more stable estimates. Splines also allow us to place
more knots, and hence flexibility, over regions where the function fseems
to be changing rapidly, and fewer knots where fappears more stable.300 7. Moving Beyond Linearity
20 30 40 50 60 70 8050 100 150 200 250 300AgeWageNatural Cubic SplinePolynomial
FIGURE 7.7. On theWagedata set, a natural cubic spline with 15 degrees
of freedom is compared to a degree- 15polynomial. Polynomials can show wild
behavior, especially near the tails.
7.5 Smoothing Splines
In the last section we discussed regression splines, which we create by spec-
ifying a set of knots, producing a sequence of basis functions, and then
using least squares to estimate the spline coefficients. We now introduce a
somewhat different approach that also produces a spline.
7.5.1 An Overview of Smoothing Splines
In fitting a smooth curve to a set of data, what we really want to do is
find some function, say g(x), that fits the observed data well: that is, we
wantRSS =/summationtextn
i=1(yi−g(xi))2to be small. However, there is a problem
with this approach. If we don’t put any constraints on g(xi), then we can
always make RSS zero simply by choosing gsuch that it interpolates all
of theyi. Such a function would woefully overfit the data—it would be far
too flexible. What we really want is a function gthat makes RSS small,
but that is also smooth.
How might we ensure that gis smooth? There are a number of ways to
do this. A natural approach is to find the function gthat (7.11)
whereλis a nonnegative tuning parameter . The function gthat minimizes
(7.11) is known as a smoothing spline .smoothing
splineWhat does ( 7.11) mean? Equation 7.11takes the “Loss+Penalty” for-
mulation that we encounter in the context of ridge regression and the lasso
in Chapter 6. The term/summationtextn
i=1(yi−g(xi))2is aloss function that encour-loss functionagesgto fit the data well, and the term λ/integraltext
g/prime/prime(t)2dtis apenalty term
that penalizes the variability in g. The notation g/prime/prime(t)indicates the second
derivative of the function g. The first derivative g/prime(t)measures the slope7.5 Smoothing Splines 301
of a function at t, and the second derivative corresponds to the amount by
which the slope is changing. Hence, broadly speaking, the second derivative
of a function is a measure of its roughness : it is large in absolute value if
g(t)is very wiggly near t, and it is close to zero otherwise. (The second
derivative of a straight line is zero; note that a line is perfectly smooth.)
The/integraltext
notation is an integral, which we can think of as a summation over
the range of t. In other words,/integraltext
g/prime/prime(t)2dtis simply a measure of the total
change in the function g/prime(t), over its entire range. If gis very smooth, then
g/prime(t)will be close to constant and/integraltext
g/prime/prime(t)2dtwill take on a small value.
Conversely, if gis jumpy and variable then g/prime(t)will vary significantly and/integraltext
g/prime/prime(t)2dtwill take on a large value. Therefore, in ( gto be smooth. The larger the value of λ, the smoother gwill be.
Whenλ=0, then the penalty term in ( 7.11) has no effect, and so the
function gwill be very jumpy and will exactly interpolate the training
observations. When λ→∞,gwill be perfectly smooth—it will just be
a straight line that passes as closely as possible to the training points.
In fact, in this case, gwill be the linear least squares line, since the loss
function in ( 7.11) amounts to minimizing the residual sum of squares. For
an intermediate value of λ,gwill approximate the training observations
but will be somewhat smooth. We see that λcontrols the bias-variance
trade-off of the smoothing spline.
The function g(x)that minimizes ( 7.11) can be shown to have some spe-
cial properties: it is a piecewise cubic polynomial with knots at the unique
values of x1,...,x n, and continuous first and second derivatives at each
knot. Furthermore, it is linear in the region outside of the extreme knots.
In other words, the function g(x)that minimizes ( 7.11) is a natural cubic
spline with knots at x1,...,x n!However, it is not the same natural cubic
spline that one would get if one applied the basis function approach de-
scribed in Section 7.4.3with knots at x1,...,x n—rather, it is a shrunken
version of such a natural cubic spline, where the value of the tuning pa-
rameterλin (7.11) controls the level of shrinkage.
7.5.2 Choosing the Smoothing Parameter λ
We have seen that a smoothing spline is simply a natural cubic spline
with knots at every unique value of xi. It might seem that a smoothing
spline will have far too many degrees of freedom, since a knot at each data
point allows a great deal of flexibility. But the tuning parameter λcontrols
the roughness of the smoothing spline, and hence the effective degrees of
freedom. It is possible to show that as λincreases from 0to∞, the effectiveeffective
degrees of
freedomdegrees of freedom, which we write dfλ, decrease from nto2.
In the context of smoothing splines, why do we discuss effective degrees
of freedom instead of degrees of freedom? Usually degrees of freedom refer
to the number of free parameters, such as the number of coefficients fit in a
polynomial or cubic spline. Although a smoothing spline has nparameters
and hence nnominal degrees of freedom, these nparameters are heavily
constrained or shrunk down. Hence dfλis a measure of the flexibility of the
smoothing spline—the higher it is, the more flexible (and the lower-bias but
higher-variance) the smoothing spline. The definition of effective degrees of302 7. Moving Beyond Linearity
freedom is somewhat technical. We can write
ˆgλ=Sλy, (7.12)
whereˆgλis the solution to ( 7.11) for a particular choice of λ—that is, it
is ann-vector containing the fitted values of the smoothing spline at the
training points x1,...,x n. Equation 7.12indicates that the vector of fitted
values when applying a smoothing spline to the data can be written as a
n×nmatrixSλ(for which there is a formula) times the response vector
y. Then the effective degrees of freedom is defined to be
dfλ=n/summationdisplay
i=1{Sλ}ii, (7.13)
the sum of the diagonal elements of the matrix Sλ.
In fitting a smoothing spline, we do not need to select the number or
location of the knots—there will be a knot at each training observation,
x1,...,x n. Instead, we have another problem: we need to choose the cross-validation. In other words, we can find the value of λthat makes
the cross-validated RSS as small as possible. It turns out that the leave-
one-outcross-validation error (LOOCV) can be computed very efficiently
for smoothing splines, with essentially the same cost as computing a single
fit, using the following notation ˆg(−i)
λ(xi)indicates the fitted value for this smoothing spline
evaluated at xi, where the fit uses all of the training observations except
for theith observation (xi,yi). In contrast, ˆgλ(xi)indicates the smoothing
spline function fit to all of the training observations and evaluated at xi.
This remarkable formula says that we can compute each of these leave-
one-outfits using only ˆgλ, the original fit to allof the data!5We have
a very similar formula ( 5.2) on page 205in Chapter 5for least squares
linear regression. Using ( 5.2), we can very quickly perform LOOCV for
the regression splines discussed earlier in this chapter, as well as for least
squares regression using arbitrary basis functions.
Figure7.8shows the results from fitting a smoothing spline to the Wage
data. The red curve indicates the fit obtained from pre-specifying that we
would like a smoothing spline with 16effective degrees of freedom. The blue
curve is the smoothing spline obtained when λis chosen using LOOCV; in
this case, the value of λchosen results in 6.8effective degrees of freedom
(computed using ( 7.13)). For this data, there is little discernible difference
between the two smoothing splines, beyond the fact that the one with 16
degrees of freedom seems slightly wigglier. Since there is little difference
between the two fits, the smoothing spline fit with 6.8degrees of freedom
5The exact formulas for computing ˆg(xi)andSλare very technical; however, efficient
algorithms are available for computing these quantities.7.6 Local Regression 303
20 30 40 50 60 70 800 50 100 200 300AgeWageSmoothing Spline16 Degrees of Freedom6.8 Degrees of Freedom (LOOCV)
FIGURE 7.8. Smoothing spline fits to the Wagedata. The red curve results
from specifying 16effective degrees of freedom. For the blue curve, λwas found
automatically by leave-one-out cross-validation, which resulted in 6.8effective
degrees of freedom.
is preferable, since in general simpler models are better unless the data
provides evidence in support of a more complex model.
7.6 Local Regression
Local regression is a different approach for fitting flexible non-linear func-local
regressiontions, which involves computing the fit at a target point x0using only the
nearby training observations. Figure 7.9illustrates the idea on some simu-
lated data, with one target point near 0.4, and another near the boundary
at0.05. In this figure the blue line represents the function f(x)from which
the data were generated, and the light orange line corresponds to the local
regression estimate ˆf(x). Local regression is described in Algorithm 7.1.
Note that in Step 3 of Algorithm 7.1, the weights Ki0will differ for each
value ofx0. In other words, in order to obtain the local regression fit at a
new point, we need to fit a new weighted least squares regression model by
minimizing ( 7.14) for a new set of weights. Local regression is sometimes
referredtoasa memory-based all the training data each time we wish to compute a prediction. We
will avoid getting into the technical details of local regression here—there
are books written on the topic.
In order to perform local regression, there are a number of choices to
be made, such as how to define the weighting function K, and whether
to fit a linear, constant, or quadratic regression in Step 3. (Equation 7.14
corresponds to a linear regression.) While all of these choices make some
difference, the most important choice is the spans, which is the proportion
of points used to compute the local regression at x0, as defined in Step 1
above. The span plays a role like that of the tuning parameter λin smooth-304 7. Moving Beyond Linearity
0.0 0.2 0.4 0.6 0.8 1.0−1.0 −0.5 0.0 0.5 1.0 0.2 0.4 0.6 0.8 1.0−1.0 −0.5 0.0 0.5 1.0 Regression
FIGURE 7.9. Local regression illustrated on some simulated data, where the
blue curve represents f(x)from which the data were generated, and the light
orange curve corresponds to the local regression estimate ˆf(x). The orange colored
points are local to the target point x0, represented by the orange vertical line. The
yellow bell-shape superimposed on the plot indicates weights assigned to each
point, decreasing to zero with distance from the target point. The fit ˆf(x0)atx0
is obtained by fitting a weighted linear regression (orange line segment), and using
the fitted value at x0(orange solid dot) as the estimate ˆf(x0).
ing splines: it controls the flexibility of the non-linear fit. The smaller the
value of s, the more localand wiggly will be our fit; alternatively, a very
large value of swill lead to a global fit to the data using all of the train-
ing observations. We can again use cross-validation to choose s, or we can
specify it directly. Figure 7.10displays local linear regression fits on the
Wagedata, using two values of s:0.7and0.2. As expected, the fit obtained
usings=0.7is smoother than that obtained using s=0.2.
The idea of local regression can be generalized in many different ways.
In a setting with multiple features X1,X2,...,X p, one very useful general-
ization involves fitting a multiple linear regression model that is global in
some variables, but local in another, such as time. Such varying coefficient
modelsare a useful way of adapting a model to the most recently gatheredvarying
coefficient
modeldata. Local regression also generalizes very naturally when we want to fit
models that are local in a pair of variables X1andX2, rather than one.
We can simply use two-dimensional neighborhoods, and fit bivariate linear
regression models using the observations that are near each target point
in two-dimensional space. Theoretically the same approach can be imple-
mented in higher dimensions, using linear regressions fit to p-dimensional
neighborhoods. However, local regression can perform poorly if pis much
larger than about 3 or 4 because there will generally be very few training
observations close to x0. Nearest-neighbors regression, discussed in Chap-
ter3, suffers from a similar problem in high dimensions.7.7 Generalized Additive Models 305
Algorithm 7.1 Local Regression At X=x0
1. Gather the fraction s=k/nof training points whose xiare closest
tox0.
2. Assign a weight Ki0=K(xi,x0)to each point in this neighborhood,
so that the point furthest from x0has weight zero, and the closest
has the highest weight. All but these knearest neighbors get weight
zero.
3. Fit a weighted least squares regression of theyion thexiusing the
aforementioned weights, by finding ˆβ0andˆβ1that (7.14)
4. The fitted value at x0is given by ˆf(x0)=ˆβ0+ˆβ1x0.
20 30 40 50 60 70 800 50 100 200 300AgeWageLocal Linear RegressionSpan is 0.2  (16.4 Degrees of Freedom)Span is 0.7  (5.3 Degrees of Freedom)
FIGURE 7.10. Local linear fits to the Wagedata. The span specifies the fraction
of the data used to compute the fit at each target point.
7.7 Generalized Additive Models
In Sections 7.1–7.6, we present a number of approaches for flexibly predict-
ing a response Yon the basis of a single predictor X. These approaches can
be seen as extensions of simple linear regression. Here we explore the prob-
lem of flexibly predicting Yon the basis of several predictors, X1,...,X p.
This amounts to an extension of multiple linear regression.
Generalized additive models (GAMs) provide a general framework forgeneralized
additive
modelextending a standard linear model by allowing non-linear functions of each
ofthevariables,whilemaintaining additivity .Justlikelinearmodels,GAMs
additivity can be applied with both quantitative and qualitative responses. We first306 7. Moving Beyond Linearity
2003 2005 2007 2009−30 −20 −10 0 10 20 3020 30 40 50 60 70 80−50 −40 −30 −20 −10 0 10 20
−30 −20 −10 0 10 20 30 40<HS HS <Coll Coll 7.11. For theWagedata, plots of the relationship between each feature
and the response, wage, in the fitted model ( 7.16). Each plot displays the fitted
function and pointwise standard errors. The first two functions are natural splines
inyearandage, with four and five degrees of freedom, respectively. The third
function is a step function, fit to the qualitative variable education .
examine GAMs for a quantitative response in Section 7.7.1, and then for a
qualitative response in Section 7.7.2.
7.7.1 GAMs for Regression Problems
A natural way to extend the multiple linear regression order to allow for non-linear relationships between each feature and the
response is to replace each linear component βjxijwith a (smooth) non-
linear function fj(xij). We would then write the model (7.15)
This is an example of a GAM. It is called an additive model because we
calculate a separate fjfor each Xj, and then add together all of their
contributions.
In Sections 7.1–7.6, we discuss many methods for fitting functions to a
single variable. The beauty of GAMs is that we can use these methods
as building blocks for fitting an additive model. In fact, for most of the
methods that we have seen so far in this chapter, this can be done fairly
trivially. Take, for example, natural splines, and consider the task of fitting
the model
wage =β0+f1(year )+f2(age)+f3(education )+/epsilon1 (7.16)
on theWagedata. Here yearandageare quantitative variables, while the
variable education is qualitative with five levels: <HS,HS,<Coll,Coll,>Coll,
referring to the amount of high school or college education that an individ-
ual has completed. We fit the first two functions using natural splines. We7.7 Generalized Additive Models 307
2003 2005 2007 2009−30 −20 −10 0 10 20 3020 30 40 50 60 70 80−50 −40 −30 −20 −10 0 10 20
−30 −20 −10 0 10 20 30 40<HS HS <Coll Coll 7.12. Details are as in Figure 7.11, but now f1andf2are smoothing
splines with four and five degrees of freedom, respectively.
fit the third function using a separate constant for each level, via the usual
dummy variable approach of Section 3.3.1.
Figure7.11shows the results of fitting the model ( 7.16) using least
squares. This is easy to do, since as discussed in Section 7.4, natural splines
can be constructed using an appropriately chosen set of basis functions.
Hence the entire model is just a big regression onto spline basis variables
and dummy variables, all packed into one big regression matrix.
Figure7.11can be easily interpreted. The left-hand panel indicates that
holding ageandeducation fixed,wagetends to increase slightly with year;
this may be due to inflation. The center panel indicates that holding
education andyearfixed,wagetends to be highest for intermediate val-
ues ofage, and lowest for the very young and very old. The right-hand
panel indicates that holding yearandagefixed,wagetends to increase
witheducation : the more educated a person is, the higher their salary, on
average. All of these findings are intuitive.
Figure7.12shows a similar triple of plots, but this time f1andf2are
smoothing splines with four and five degrees of freedom, respectively. Fit-
tingaGAMwithasmoothingsplineis notquiteassimpleasfittinga GAM
with a natural spline, since in the case of smoothing splines, least squares
cannot be used. However, standard software such as the Pythonpackage
pygamcan be used to fit GAMs using smoothing splines, via an approachpygam
known as backfitting . This method fits a model involving multiple predic-backfittingtors by repeatedly updating the fit for each predictor in turn, holding the
others fixed. The beauty of this approach is that each time we update a
function, we simply apply the fitting method for that variable to a partial
residual.6
The fitted functions in Figures 7.11and7.12look rather similar. In most
situations, the differences in the GAMs obtained using smoothing splines
versus natural splines are small.
6A partial residual for X3, for example, has the form ri=yi−f1(xi1)−f2(xi2). If we
knowf1andf2, then we can fit f3by treating this residual as a response in a non-linear
regression on X3.308 7. Moving Beyond Linearity
We do not have to use splines as the building blocks for GAMs: we can
just as well use local regression, polynomial regression, or any combination
of the approaches seen earlier in this chapter in order to create a and Cons of GAMs
Before we move on, let us summarize the advantages and limitations of a
GAM.
LGAMs allow us to fit a non-linear fjto eachXj, so that we can
automatically model non-linear relationships that standard linear re-
gression will miss. This means that we do not need to manually try
out many different transformations on each variable individually.
LThe non-linear fits can potentially make more accurate predictions
for the response Y.
LBecause the model is additive, we can examine the effect of each Xj
onYindividually while holding all of the other variables fixed.
LThe smoothness of the function fjfor the variable Xjcan be sum-
marized via degrees of freedom.
NThe main limitation of GAMs is that the model is restricted to be
additive. With many variables, important interactions can be missed.
However, as with linear regression, we can manually add interaction
terms to the GAM model by including additional predictors of the
formXj×Xk. In addition we can add low-dimensional interaction
functions of the form fjk(Xj,Xk)into the model; such terms can
be fit using two-dimensional smoothers such as local regression, or
two-dimensional splines (not covered here).
For fully general models, we have to look for even more flexible 8.GAMsprovide
a useful compromise between linear and fully nonparametric models.
7.7.2 GAMs for Classification Problems
GAMs can also be used in situations where Yis qualitative. For simplicity,
here we assume Ytakes on values 0or1, and let p(X) = Pr( Y=1|X)be
the conditional probability (given the predictors) that the response equals
one. Recall the logistic regression model ( (7.17)
Theleft-hand side is thelog of the oddsof P(Y=1|X)versusP(Y=0|X),
which (7.17) represents as a linear function of the predictors. A natural way
to extend ( 7.17) to allow for non-linear relationships is to use the (7.18)7.8 Lab: Non-Linear Modeling 309
2003 2005 2007 2009−4 −2 0 2 420 30 40 50 60 70 80−8 −6 −4 −2 0 2
−400 −200 0 200 400<HS HS <Coll Coll 7.13. For theWagedata, the logistic regression GAM given in ( 7.19)
is fit to the binary response I(wage>250) . Each plot displays the fitted function
and pointwise standard errors. The first function is linear in year, the second
function a smoothing spline with five degrees of freedom in age, and the third a
step function for education . There are very wide standard errors for the first
level<HSofeducation .
Equation 7.18is a logistic regression GAM. It has all the same pros and
cons as discussed in the previous section for quantitative responses.
We fit a GAM to the Wagedata in order to predict the probability that
an individual’s income exceeds $250 ,000per year. The GAM that we fit
takes the +f2(age)+f3(education ),(7.19)
where
p(X) = Pr( wage >250|year ,age,education ).
Once again f2is fit using a smoothing spline with five degrees of freedom,
andf3is fit as a step function, by creating dummy variables for each of the
levels of education. The resulting fit is shown in Figure 7.13. The last panel
looks suspicious, with very wide confidence intervals for level <HS. In high school education make more than $250 ,000per year. Hence we refit
the GAM, excluding the individuals with less than a high school education.
The resulting model is shown in Figure 7.14. As in Figures 7.11and7.12,
all three panels have similar vertical scales. This allows us to visually assess
the relative contributions of each of the variables. We observe that ageand
education have a much larger effect than yearon the probability of being
a high earner.
7.8 Lab: Non-Linear Modeling
In this lab, we demonstrate some of the nonlinear models discussed in
this chapter. We use the Wagedata as a running example, and show that
many of the complex non-linear fitting procedures discussed can easily be
implemented in Python.310 7. Moving Beyond Linearity
2003 2005 2007 2009−4 −2 0 2 420 30 40 50 60 70 80−8 −6 −4 −2 0 2
−4 −2 0 2 4HS <Coll Coll 7.14. The same model is fit as in Figure 7.13, this time excluding the
observations for which education is<HS. Now we see that increased education
tends to be associated with higher salaries.
As usual, we start with some of our standard imports.
In[1]: import numpy as np, pandas as pd
from matplotlib.pyplot import subplots
import statsmodels.api as sm
from ISLP import load_data
from ISLP.models import (summarize,
poly,
ModelSpec as MS)
from statsmodels.stats.anova import anova_lm
We again collect the new imports needed for this lab. Many of these are
developed specifically for the ISLPpackage.
In[2]: from pygam import (s as s_gam,
la sl _ g a m ,
fa sf _ g a m ,
LinearGAM,
LogisticGAM)
from ISLP.transforms import (BSpline,
NaturalSpline)
from ISLP.models import bs, ns
from ISLP.pygam import (approx_lam,
degrees_of_freedom,
plot as plot_gam,
anova as anova_gam)
7.8.1 Polynomial Regression and Step Functions
We start by demonstrating how Figure 7.1can be reproduced. Let’s begin
by loading the data.
In[3]: Wage = load_data( 'Wage')
y=W a g e [ 'wage']
age = Wage[ 'age']7.8 Lab: Non-Linear Modeling 311
Throughout most of this lab, our response is Wage['wage'] , which we
have stored as yabove. As in Section 3.6.6, we will use the poly()function
to create a model matrix that will fit a 4th degree polynomial in age.
In[4]: poly_age = MS([poly( 'age',d e g r e e = 4 ) ] ) . f i t ( W a g e )
M=s m . O L S ( y ,p o l y _ a g e . t r a n s f o r m ( W a g e ) ) . f i t ( )
summarize(M)
Out[4]: coef std err t P>|t|
intercept 111.7036 0.729 153.283 0.000
poly(age, degree=4)[0] 447.0679 39.915 11.201 0.000
poly(age, degree=4)[1] -478.3158 39.915 -11.983 0.000
poly(age, degree=4)[2] 125.5217 39.915 3.145 0.002
poly(age, degree=4)[3] -77.9112 39.915 -1.952 0.051
This polynomial is constructed using the function poly(), which cre-
ates a special transformer Poly()(usingsklearnterminology for featuretransformertransformations such as PCA()seen in Section 6.5.3) which allows for easy
evaluation of the polynomial at new data points. Here poly()is referred
to as ahelperfunction, and sets up the transformation; Poly()is the ac-helpertual workhorse that computes the transformation. See also the discussion
of transformations on page 118.
In the code above, the first line executes the fit()method using the
dataframe Wage. This recomputes and stores as attributes any parameters
needed by Poly()on the training data, and these will be used on all sub-
sequent evaluations of the transform() method. For example, it is used on
the second line, as well as in the plotting function developed below.
We now create a grid of values for ageat which we want predictions.
In[5]: age_grid = np.linspace(age.min(),
age.max(),
100)
age_df = pd.DataFrame({ 'age':a g e _ g r i d } )
Finally, we wish to plot the data and add the fit from the fourth-degree
polynomial. As we will make several similar plots below, we first write a
function to create all the ingredients and produce the plot. Our function
takes in a model specification (here a basis specified by a transform), as
well as a grid of agevalues. The function produces a fitted curve as well
as 95% confidence bands. By using an argument for basiswe can produce
and plot the results with several different transforms, such as the splines
we will see shortly.
In[6]: def plot_wage_fit(age_df,
basis,
title):
X=b a s i s . t r a n s f o r m ( W a g e )
Xnew = basis.transform(age_df)
M=s m . O L S ( y ,X ) . f i t ( )
preds = M.get_prediction(Xnew)
bands = preds.conf_int(alpha=0.05)
fig, ax = subplots(figsize=(8,8))
ax.scatter(age,
y,312 7. Moving Beyond Linearity
facecolor= 'gray',
alpha=0.5)
for val, ls in val, ls, linewidth=3)
ax.set_title(title, fontsize=20)
ax.set_xlabel( 'Age',f o n t s i z e = 2 0 )
ax.set_ylabel( 'Wage',f o n t s i z e = 2 0 ) ;
return ax
We include an argument alphatoax.scatter() to add some transparency
to the points. This provides a visual indication of density. Notice the use
of thezip()function in the forloop above (see Section 2.3.8). We have
three lines to plot, each with different colors and line types. Here zip()
conveniently bundles these together as iterators in the loop.7
iteratorWe now plot the fit of the fourth-degree polynomial using this function.
In[7]: plot_wage_fit(age_df,
poly_age,
'Degree-4 Polynomial' );
With polynomial regression we must decide on the degree of the polyno-
mial to use. Sometimes we just wing it, and decide to use second or third
degree polynomials, simply to obtain a nonlinear fit. But we can make such
a decision in a more systematic way. One way to do this is through hypoth-
esis tests, which we demonstrate here. We now fit a series of models ranging
from linear (degree-one) to degree-five polynomials, and look to determine
the simplest model that is sufficient to explain the relationship between
wageandage. We use the anova_lm() function, which performs a series of
ANOVA tests. An analysis of variance or ANOVA tests the null hypothesisanalysis of
variancethat a model M1is sufficient to explain the data against the alternative
hypothesis that a more complex model M2is required. The determination
is based on an F-test. To perform the test, the models M1andM2must
benested: the space spanned by the predictors in M1must be a subspace
of the space spanned by the predictors in M2. In this case, we fit five dif-
ferent polynomial models and sequentially compare the simpler model to
the more complex model.
In[8]: models = [MS([poly( 'age',d e g r e e = d ) ] )
for d in range(1, 6)]
Xs = [model.fit_transform(Wage) for model in models]
anova_lm(*[sm.OLS(y, X_).fit()
for X_ in Xs])
Out[8]: df_resid ssr df_diff ss_diff F Pr(>F)
02 9 9 8 . 0 5 . 0 2 2 e + 0 6 0 . 0 NaN NaN NaN
12 9 9 7 . 0 4 . 7 9 3 e + 0 6 1 . 0 2 2 8 7 8 6 . 0 1 0 1 4 3 . 5 9 3 2 . 3 6 4 e - 3 2
22 9 9 6 . 0 4 . 7 7 8 e + 0 6 1 . 0 1 5 7 5 5 . 6 9 49 . 8 8 9 1 . 6 7 9 e - 0 3
32 9 9 5 . 0 4 . 7 7 2 e + 0 6 1 . 06 0 7 0 . 1 5 23 . 8 1 0 5 . 1 0 5 e - 0 2
7InPython speak, an “iterator” is an object with a finite number of values, that can
be iterated on, as in a loop.7.8 Lab: Non-Linear Modeling 313
42 9 9 4 . 0 4 . 7 7 0 e + 0 6 1 . 01 2 8 2 . 5 6 30 . 8 0 5 3 . 6 9 7 e - 0 1
Notice the *in theanova_lm() line above. This function takes a variable
number of non-keyword arguments, in this case fitted models. When these
models are provided as a list (as is done here), it must be prefixed by *.
The p-value comparing the linear models[0] to the quadratic models[1]
is essentially zero, indicating that a linear fit is not sufficient.8Similarly the
p-value comparing the quadratic models[1] to the cubic models[2] is very
low (0.0017), so the quadratic fit is also insufficient. The p-value comparing
the cubic and degree-four polynomials, models[2] andmodels[3] , is approx-
imately 5%, while the degree-five polynomial models[4] seems unnecessary
because its p-value is 0.37. Hence, either a cubic or a quartic polynomial
appear to provide a reasonable fit to the data, but lower- or higher-order
models are not justified.
Inthiscase,insteadofusingthe anova()function,wecouldhaveobtained
these p-values more succinctly by exploiting the fact that poly()creates
orthogonal polynomials.
In[9]: summarize(M)
Out[9]: coef std err t P>|t|
intercept 111.7036 0.729 153.283 0.000
poly(age, degree=4)[0] 447.0679 39.915 11.201 0.000
poly(age, degree=4)[1] -478.3158 39.915 -11.983 0.000
poly(age, degree=4)[2] 125.5217 39.915 3.145 0.002
poly(age, degree=4)[3] -77.9112 39.915 -1.952 0.051
Notice that the p-values are the same, and in fact the square of the
t-statistics are equal to the F-statistics from the anova_lm() function; for
example:
In[10]: (-11.983)**2
Out[10]: 143.59228
However, the ANOVA method works whether or not we used orthogonal
polynomials, provided the models are nested. For example, we can use
anova_lm() to compare the following three models, which all have a linear
term in education and a polynomial in ageof different degrees:
In[11]: models = [MS([ 'education' ,p o l y ( 'age',d e g r e e = d ) ] )
for d in range(1, 4)]
XEs = [model.fit_transform(Wage)
for model in models]
anova_lm(*[sm.OLS(y, X_).fit() for X_ in XEs])
Out[11]: df_resid ssr df_diff ss_diff F Pr(>F)
02 9 9 7 . 0 3 . 9 0 2 e + 0 6 0 . 0 NaN NaN NaN
12 9 9 6 . 0 3 . 7 5 9 e + 0 6 1 . 0 1 4 2 8 6 2 . 7 0 1 1 1 3 . 9 9 2 3 . 8 3 8 e - 2 6
22 9 9 5 . 0 3 . 7 5 4 e + 0 6 1 . 05 9 2 6 . 2 0 74 . 7 2 9 2 . 9 7 4 e - 0 2
8Indexing starting at zero is confusing for the polynomial degree example, since
models[1] is quadratic rather than linear!314 7. Moving Beyond Linearity
As an alternative to using hypothesis tests and ANOVA, we could choose
the polynomial degree using cross-validation, as discussed in Chapter 5.
Next we consider the task of predicting whether an individual earns more
than $250,000 per year. We proceed much as before, except that first we
create the appropriate response vector, and then apply the glm()function
using the binomial family in order to fit a polynomial logistic regression
model.
In[12]: X=p o l y _ a g e . t r a n s f o r m ( W a g e )
high_earn = Wage[ 'high_earn' ]=y>2 5 0 #s h o r t h a n d
glm = sm.GLM(y > 250,
X,
family=sm.families.Binomial())
B=g l m . f i t ( )
summarize(B)
Out[12]: coef std err z P>|z|
intercept -4.3012 0.345 -12.457 0.000
poly(age, degree=4)[0] 71.9642 26.133 2.754 0.006
poly(age, degree=4)[1] -85.7729 35.929 -2.387 0.017
poly(age, degree=4)[2] 34.1626 19.697 1.734 0.083
poly(age, degree=4)[3] -47.4008 24.105 -1.966 0.049
Once again, we make predictions using the get_prediction() method.
In[13]: newX = poly_age.transform(age_df)
preds = B.get_prediction(newX)
bands = preds.conf_int(alpha=0.05)
We now plot the estimated relationship.
In[14]: fig, ax = subplots(figsize=(8,8))
rng = np.random.default_rng(0)
ax.scatter(age +
0.2 * 0.198, 0.002),
fc='gray',
marker= '|')
for val, ls in val, ls, linewidth=3)
ax.set_title( 'Degree-4 Polynomial' ,f o n t s i z e = 2 0 )
ax.set_xlabel( 'Age',f o n t s i z e = 2 0 )
ax.set_ylim([0,0.2])
ax.set_ylabel( 'P(Wage > 250)' ,f o n t s i z e = 2 0 ) ;
We have drawn the agevalues corresponding to the observations with wage
values above 250 as gray marks on the top of the plot, and those with
wagevalues below 250 are shown as gray marks on the bottom of the plot.
We added a small amount of noise to jitter the agevalues a bit so that
observations with the same agevalue do not cover each other up. This type
of plot is often called a rug plot.rug plotIn order to fit a step function, as discussed in Section 7.2, we first use
thepd.qcut() function to discretize agebased on quantiles. Then we usepd.qcut()7.8 Lab: Non-Linear Modeling 315
pd.get_dummies() to create the columns of the model matrix for this cate-pd.get_
dummies()gorical variable. Note that this function will include allcolumns for a given
categorical, rather than the usual approach which drops one of the levels.
In[15]: cut_age = pd.qcut(age, 4)
summarize(sm.OLS(y, pd.get_dummies(cut_age)).fit())
Out[15]: coef std err t P>|t|
(17.999, 33.75] 94.1584 1.478 63.692 0.0
(33.75, 42.0] 116.6608 1.470 79.385 0.0
(42.0, 51.0] 119.1887 1.416 84.147 0.0
(51.0, 80.0] 116.5717 1.559 74.751 0.0
Herepd.qcut() automatically picked the cutpoints based on the quan-
tiles 25%, 50% and 75%, which results in four regions. We could also have
specified our own quantiles directly instead of the argument 4. For cuts
not based on quantiles we would use the pd.cut() function. The functionpd.cut()pd.qcut() (andpd.cut() ) returns an ordered categorical variable. The re-
gression model then creates a set of dummy variables for use in the regres-
sion. Since ageis the only variable in the model, the value $94,158.40 is the
average salary for those under 33.75 years of age, and the other coefficients
are the average salary for those in the other age groups. We can produce
predictions and plots just as we did in the case of the polynomial fit.
7.8.2 Splines
In order to fit regression splines, we use transforms from the ISLPpackage.
The actual spline evaluation functions are in the scipy.interpolate pack-
age; we have simply wrapped them as transforms similar to Poly()and
PCA().
In Section 7.4, we saw that regression splines can be fit by constructing
an appropriate matrix of basis functions. The BSpline() function generatesBSpline()the entire matrix of basis functions for splines with the specified set of
knots. By default, the B-splines produced are cubic. To change the degree,
use the argument degree.
In[16]: bs_ = BSpline(internal_knots=[25,40,60], intercept=True).fit(age)
bs_age = bs_.transform(age)
bs_age.shape
Out[16]: (3000, basis with 3 interior knots. We can form this same matrix using the
bs()object, which facilitates adding this to a model-matrix builder (as in
poly()versus its workhorse Poly()) described in Section 7.8.1.
We now fit a cubic spline model to the Wagedata.
In[17]: bs_age = MS([bs( 'age',i n t e r n a l _ k n o t s = [ 2 5 , 4 0 , 6 0 ] ) ] )
Xbs = bs_age.fit_transform(Wage)
M=s m . O L S ( y ,X b s ) . f i t ( )
summarize(M)316 7. Moving Beyond LinearityOut[17]:coef std err ...intercept 60.494 9.460 ...bs(age, internal_knots=[25, 40, 60])[0] 3.980 12.538 ...bs(age, internal_knots=[25, 40, 60])[1] 44.631 9.626 ...bs(age, internal_knots=[25, 40, 60])[2] 62.839 10.755 ...bs(age, internal_knots=[25, 40, 60])[3] 55.991 10.706 ...bs(age, internal_knots=[25, 40, 60])[4] 50.688 14.402 ...bs(age, internal_knots=[25, 40, 60])[5] 16.606 19.126 ...The column names are a little cumbersome, and have caused us to trun-cate the printed summary. They can be set on construction using thenameargument as follows.In[18]:bs_age = = bs_age.fit_transform(Wage)M=s m . O L S ( y ,X b s ) . f i t ( )summarize(M)Out[18]:coef std err t P>|t|intercept 60.494 9.460 6.394 0.000bs(age, knots)[0] 3.981 12.538 0.317 0.751bs(age, knots)[1] 44.631 9.626 4.636 0.000bs(age, knots)[2] 62.839 10.755 5.843 0.000bs(age, knots)[3] 55.991 10.706 5.230 0.000bs(age, knots)[4] 50.688 14.402 3.520 0.000bs(age, knots)[5] 16.606 19.126 0.868 0.385Notice that there are 6 spline coefficients rather than 7. This is because, bydefault,bs()assumesintercept=False, since we typically have an overallintercept in the model. So it generates the spline basis with the given knots,and then discards one of the basis functions to account for the intercept.We could also use thedf(degrees of freedom) option to specify the com-plexity of the spline. We see above that with 3 knots, the spline basis has6 columns or degrees of freedom. When we specifydf=6rather than theactual knots,bs()will produce a spline with 3 knots chosen at uniformquantiles of the training data. We can see these chosen knots most 42.0, 51.0])When asking for six degrees of freedom, the transform chooses knots atages 33.75, 42.0, and 51.0, which correspond to the 25th, 50th, and 75thpercentiles ofage.When using B-splines we need not limit ourselves to cubic polynomials(i.e.degree=3). For instance, usingdegree=0results in piecewise constantfunctions, as in our example withpd.qcut()above.In[20]:bs_age0 = MS([bs('age',df=3,degree=0)]).fit(Wage)Xbs0 = bs_age0.transform(Wage)summarize(sm.OLS(y, Xbs0).fit())7.8 Lab: Non-Linear Modeling 317
Out[20]: coef std err t P>|t|
intercept 94.158 1.478 63.687 0.0
bs(age, df=3, degree=0)[0] 22.349 2.152 10.388 0.0
bs(age, df=3, degree=0)[1] 24.808 2.044 12.137 0.0
bs(age, df=3, degree=0)[2] 22.781 2.087 10.917 0.0
This fit should be compared with cell [15] where we use qcut()to create
four bins by cutting at the 25%, 50% and 75% quantiles of age. Since we
specified df=3for degree-zero splines here, there will also be knots at the
same three quantiles. Although the coefficients appear different, we see that
this is a result of the different coding. For example, the first coefficient is
identical in both cases, and is the mean response in the first bin. For the
second coefficient, we have 94.158 + 22 .349 = 116 .507≈116.611, the latter
being the mean in the second bin in cell [15]. Here the intercept is coded by
a column of ones, so the second, third and fourth coefficients are increments
for those bins. Why is the sum not exactly the same? It turns out that the
qcut()uses≤, whilebs()uses<when deciding bin membership.
In order to fit a natural spline, we use the NaturalSpline() transformNatural
Spline() with the corresponding helper ns(). Here we fit a natural spline with five
degrees of freedom (excluding the intercept) and plot the results.
In[21]: ns_age = MS([ns( 'age',d f = 5 ) ] ) . f i t ( W a g e )
M_ns = sm.OLS(y, coef std err tP > | t |
intercept 60.475 4.708 12.844 0.000
ns(age, df=5)[0] 61.527 4.709 13.065 0.000
ns(age, df=5)[1] 55.691 5.717 9.741 0.000
ns(age, df=5)[2] 46.818 4.948 9.463 0.000
ns(age, df=5)[3] 83.204 11.918 6.982 0.000
ns(age, df=5)[4] 6.877 9.484 0.725 0.468
We now plot the natural spline using our plotting function.
In[22]: plot_wage_fit(age_df,
ns_age,
'Natural spline, df=5' );
7.8.3 Smoothing Splines and GAMs
A smoothing spline is a special case of a GAM with squared-error loss
and a single feature. To fit GAMs in Pythonwe will use the pygampackagepygam
which can be installed via pip install pygam . The estimator LinearGAM()LinearGAM()uses squared-error loss. The GAM is specified by associating each column
of a model matrix with a particular smoothing operation: sfor smoothing
spline;lfor linear, and ffor factor or categorical variables. The argument 0
passedto a feature matrix. Below, we pass it a matrix with a single column: X_age.
The argument lamis the penalty parameter λas discussed in Section 7.5.2.
In[23]: X_age = np.asarray(age).reshape((-1,1))
gam = LinearGAM(s_gam(0, lam=0.6))
gam.fit(X_age, y)318 7. Moving Beyond Diffs()], fit_intercept=True,max_iter=100, scale=None, terms=s(0) + intercept, tol=0.0001,verbose=False)Thepygamlibrary generally expects a matrix of features so we reshapeageto be a matrix (a two-dimensional array) instead of a vector (i.e. a one-dimensional array). The-1in the call to thereshape()method tellsnumpyto impute the size of that dimension based on the remaining entries of theshape tuple.Let’s investigate how the fit changes with the smoothing parameterlam.The functionnp.logspace()is similar tonp.linspace()but spaces pointsnp.logspace()evenly on the log-scale. Below we varylamfrom10−2to106.In[24]:fig, ax = subplots(figsize=(8,8))ax.scatter(age, y, facecolor='gray',a l p h a = 0 . 5 )for lam in np.logspace(-2, 6, 5):gam = LinearGAM(s_gam(0, lam=lam)).fit(X_age, o n t s i z e = 2 0 )ax.set_ylabel('Wage',f o n t s i z e = 2 0 ) ;ax.legend(title='$\lambda$');Thepygampackage can perform a search for an optimal smoothing pa-rameter.In[25]:gam_opt = gam.gridsearch(X_age, we can fix the degrees of freedom of the smoothing splineusing a function included in theISLP.pygampackage. Below we find a valueofλthat gives us roughly four degrees of freedom. We note here that thesedegrees of freedom include the unpenalized intercept and linear term of thesmoothing spline, hence there are at least two degrees of freedom.In[26]:age_term = gam.terms[0]lam_4 = approx_lam(X_age, age_term, 4)age_term.lam = lam_4degrees_of_freedom(X_age, of freedom as the desired degrees of freedom plus one to accountfor the fact that these smoothing splines always have an intercept term.Hence, a value of one fordfis just a linear fit.In[27]:fig, ax = subplots(figsize=(8,8))ax.scatter(X_age,y,7.8 Lab: Non-Linear Modeling 319
facecolor= 'gray',
alpha=0.3)
for df in [1,3,4,8,15]:
lam = approx_lam(X_age, age_term, df+1)
age_term.lam = lam
gam.fit(X_age, 'Age',f o n t s i z e = 2 0 )
ax.set_ylabel( 'Wage',f o n t s i z e = 2 0 ) ;
ax.legend(title= 'Degrees of freedom' );
Additive Models with Several Terms
The strength of generalized additive models lies in their ability to fit mul-
tivariate regression models with more flexibility than linear models. We
demonstrate two approaches: the first in a more manual fashion using nat-
ural splines and piecewise constant functions, and the second using the
pygampackage and smoothing splines.
We now fit a GAM by hand to predict wageusing natural spline functions
ofyearandage, treating education as a qualitative predictor, as in ( 7.16).
Since this is just a big linear regression model using an appropriate choice
of basis functions, we can simply do this using the sm.OLS() function.
We will build the model matrix in a more manual fashion here, since we
wish to access the pieces separately when constructing partial dependence
plots.
In[28]: ns_age = NaturalSpline(df=4).fit(age)
ns_year = NaturalSpline(df=5).fit(Wage[ 'year'])
Xs = 'year']),
pd.get_dummies(Wage[ 'education' ]).values]
X_bh = np.hstack(Xs)
gam_bh = sm.OLS(y, X_bh).fit()
Here the function NaturalSpline() is the workhorse supporting the ns()
helper function. We chose to use all columns of the indicator matrix for
the categorical variable education , making an intercept redundant. Finally,
we stacked the three component matrices horizontally to form the model
matrixX_bh.
We now show how to construct partial dependence plots for each of the
terms in our rudimentary GAM. We can do this by hand, given grids for
ageandyear. We simply predict with new Xmatrices, fixing all but one
of the features at a time.
In[29]: age_grid = = X_bh.copy()[:100]
X_age_bh[:] = X_bh[:].mean(0)[None,:]
X_age_bh[:,:4] = ns_age.transform(age_grid)
preds = gam_bh.get_prediction(X_age_bh)
bounds_age = preds.conf_int(alpha=0.05)320 7. Moving Beyond Linearity
partial_age = preds.predicted_mean
center = partial_age.mean()
partial_age -= center
bounds_age -= center
fig, ax = subplots(figsize=(8,8))
ax.plot(age_grid, partial_age, 'b',l i n e w i d t h = 3 )
ax.plot(age_grid, bounds_age[:,0], 'r--',l i n e w i d t h = 3 )
ax.plot(age_grid, bounds_age[:,1], 'r--',l i n e w i d t h = 3 )
ax.set_xlabel( 'Age')
ax.set_ylabel( 'Effect on wage' )
ax.set_title( 'Partial dependence of age on wage' ,f o n t s i z e = 2 0 ) ;
Let’s explain in some detail what we did above. The idea is to create a new
prediction matrix, where all but the columns belonging to ageare constant
(and set to their training-data means). The four columns for ageare filled
in with the natural spline basis evaluated at the 100 values in age_grid .
1. We made a grid of length 100 in age, and created a matrix X_age_bh
with 100 rows and the same number of columns as X_bh.
2. We replaced every row of this matrix with the column means of the
original.
3. We then replace just the first four columns representing agewith the
natural spline basis computed at the values in age_grid .
The remaining steps should by now be familiar.
We also look at the effect of yearonwage; the process is the same.
In[30]: year_grid = np.linspace(2003, 2009, 100)
year_grid = np.linspace(Wage[ = X_bh.copy()[:100]
X_year_bh[:] = X_bh[:].mean(0)[None,:]
X_year_bh[:,4:9] = ns_year.transform(year_grid)
preds = gam_bh.get_prediction(X_year_bh)
bounds_year = preds.conf_int(alpha=0.05)
partial_year = preds.predicted_mean
center = partial_year.mean()
partial_year -= center
bounds_year -= center
fig, ax = subplots(figsize=(8,8))
ax.plot(year_grid, partial_year, 'b',l i n e w i d t h = 3 )
ax.plot(year_grid, bounds_year[:,0], 'r--',l i n e w i d t h = 3 )
ax.plot(year_grid, bounds_year[:,1], 'r--',l i n e w i d t h = 3 )
ax.set_xlabel( 'Year')
ax.set_ylabel( 'Effect on wage' )
ax.set_title( 'Partial dependence of year on wage' ,f o n t s i z e = 2 0 ) ;
We now fit the model ( 7.16) using smoothing splines rather than nat-
ural splines. All of the terms in ( 7.16) are fit simultaneously, taking each
other into account to explain the response. The pygampackage only works
with matrices, so we must convert the categorical series education to its
array representation, which can be found with the cat.codes attribute of
education . Asyearonly has 7 unique values, we use only seven basis func-
tions for it.7.8 Lab: Non-Linear Modeling 321In[31]:gam_full = LinearGAM(s_gam(0) +s_gam(1, n_splines=7) +f_gam(2, lam=0))Xgam = = gam_full.fit(Xgam, y)The twos_gam()terms result in smoothing spline fits, and use a defaultvalue forλ(lam=0.6), which is somewhat arbitrary. For the categorical termeducation, specified using af_gam()term, we specifylam=0to avoid anyshrinkage. We produce the partial dependence plot inageto see the effectof these choices.The values for the plot are generated by thepygampackage. We provideaplot_gam()function for partial-dependence plots inISLP.pygam, whichplot_gam()makes this job easier than in our last example with natural splines.In[32]:fig, ax = subplots(figsize=(8,8))plot_gam(gam_full, 0, on wage')ax.set_title('Partial dependence of age on wage - default lam=0.6',fontsize=20);We see that the function is somewhat wiggly. It is more natural to specifythedfthan a value forlam. We refit a GAM using four degrees of freedomeach forageandyear. Recall that the addition of one below takes intoaccount the intercept of the smoothing spline.In[33]:age_term = gam_full.terms[0]age_term.lam = approx_lam(Xgam, age_term, df=4+1)year_term = gam_full.terms[1]year_term.lam = approx_lam(Xgam, year_term, df=4+1)gam_full = gam_full.fit(Xgam, y)Note that updatingage_term.lamabove updates it ingam_full.terms[0]aswell! Likewise foryear_term.lam.Repeating the plot forage, we see that it is much smoother. We alsoproduce the plot foryear.In[34]:fig, ax = on wage')ax.set_title('Partial dependence of year on wage',f o n t s i z e = 2 0 )Finally we ploteducation, which is categorical. The partial dependenceplot is different, and more suitable for the set of fitted constants for eachlevel of this variable.In[35]:fig, ax = subplots(figsize=(8, 8))ax = plot_gam(gam_full, on wage')322 7. Moving Beyond Linearityax.set_title('Partial dependence of wage on fontsize=8);ANOVA Tests for Additive series of ANOVA tests in order to determine which of these three modelsis best: a GAM that excludesyear(M1), a GAM that uses a linear functionofyear(M2), or a GAM that uses a spline function ofyear(M3).In[36]:gam_0 = LinearGAM(age_term + f_gam(2, lam=0))gam_0.fit(Xgam, y)gam_linear = LinearGAM(age_term +l_gam(1, lam=0) +f_gam(2, lam=0))gam_linear.fit(Xgam, y)Out[36]:LinearGAM(callbacks=[Deviance(), Diffs()], fit_intercept=True,max_iter=100, scale=None, terms=s(0) + l(1) + f(2) + intercept,tol=0.0001, verbose=False)Notice our use ofage_termin the expressions above. We do this becauseearlier we set the value forlamin this term to achieve four degrees offreedom.To directly assess the effect ofyearwe run an ANOVA on the threemodels fit above.In[37]:anova_gam(gam_0, gam_linear, gam_full)Out[37]:deviance df deviance_diff df_diff F pvalue03 7 1 4 3 6 2 . 3 6 6 2 9 9 1 . 0 0 4NaN NaN NaN NaN13 6 9 6 7 4 5 . 8 2 3 2 9 9 0 . 0 0 5 1 7 6 1 6 . 5 4 3 0 . 9 9 9 1 4 . 2 6 50 . 0 0 223 6 9 3 1 4 2 . 9 3 0 2 9 8 7 . 0 0 7 3 6 0 2 . 8 9 4 2 . 9 9 80 . 9 7 20 . 4 3 better than a GAM that does not includeyearat all (p-value=0.002). However, there is no evidence that a non-linear function ofyearis needed (p-value=0.435). In other words, based on the results of thisANOVA,M2is preferred.We can repeat the same process forageas well. We see there is very clearevidence that a non-linear term is required forage.In[38]:gam_0 = LinearGAM(year_term +f_gam(2, lam=0))gam_linear = LinearGAM(l_gam(0, lam=0) +year_term +f_gam(2, lam=0))gam_0.fit(Xgam, y)gam_linear.fit(Xgam, y)anova_gam(gam_0, gam_linear, gam_full)7.8 Lab: Non-Linear Modeling 323Out[38]:deviance df deviance_diff df_diff F pvalue03 9 7 5 4 4 3 . 0 4 5 2 9 9 1 . 0 0 1NaN NaN NaN NaN13 8 5 0 2 4 6 . 9 0 8 2 9 9 0 . 0 0 1 1 2 5 1 9 6 . 1 3 7 1 . 0 0 0 1 0 1 . 2 7 00 . 0 0 023 6 9 3 1 4 2 . 9 3 0 2 9 8 7 . 0 0 7 1 5 7 1 0 3 . 9 7 8 2 . 9 9 34 2 . 4 4 80 . 0 0 0There is a (verbose)summary()method for the GAM fit. (We do notreproduce it for the classgam. Here we make predictions on thetraining set.In[40]:Yhat = gam_full.predict(Xgam)In order to fit a logistic regression GAM, we = LogisticGAM(age_term +l_gam(1, lam=0) +f_gam(2, lam=0))gam_logit.fit(Xgam, Diffs(), Accuracy()],fit_intercept=True, max_iter=100,terms=s(0) + l(1) + f(2) + intercept, tol=0.0001, verbose=False)In[42]:fig, ax = subplots(figsize=(8, 8))ax = plot_gam(gam_logit, on wage')ax.set_title('Partial dependence of wage on fontsize=8);The model seems to be very flat, with especially high error bars for thefirst category. Let’s look at the data a bit more closely.In[43]:pd.crosstab(Wage['high_earn'], Wage['education'])We see that there are no high earners in the first category of education,meaning that the model will have a hard time fitting. We will fit a logisticregression GAM excluding all observations falling into this category. Thisprovides more sensible results.To do so, we could subset the model matrix, though this will not removethe column fromXgam. While we can deduce which column corresponds tothis feature, for reproducibility’s sake we reform the model matrix on thissmaller subset.In[44]:only_hs = Wage['education']= ='1. < HS Grad'Wage_ = Wage.loc[∼only_hs]Xgam_ = = Wage_['high_earn']324 7. Moving Beyond LinearityIn the second-to-last line above, we subtract one from the codes of thecategory, due to a bug inpygam. It just relabels the education values andhence has no effect on the fit.We now fit the model.In[45]:gam_logit_ = LogisticGAM(age_term +year_term +f_gam(2, lam=0))gam_logit_.fit(Xgam_, Diffs(), Accuracy()],fit_intercept=True, max_iter=100,terms=s(0) + s(1) + f(2) + intercept, tol=0.0001, verbose=False)Let’s look at the effect ofeducation,yearandageon high earner statusnow that we’ve removed those observations.In[46]:fig, ax = subplots(figsize=(8, 8))ax = plot_gam(gam_logit_, on wage')ax.set_title('Partial dependence of high earner status on education',f o n t s i z e = 2 0 ) ax = subplots(figsize=(8, 8))ax = plot_gam(gam_logit_, 1)ax.set_xlabel('Year')ax.set_ylabel('Effect on wage')ax.set_title('Partial dependence of high earner status on year',fontsize=20);In[48]:fig, ax = subplots(figsize=(8, 8))ax = plot_gam(gam_logit_, 0)ax.set_xlabel('Age')ax.set_ylabel('Effect on wage')ax.set_title('Partial dependence of high earner status on age',fontsize=20);7.8.4 Local RegressionWe illustrate the use of local regression using thelowess()function fromlowess()sm.nonparametric. Some implementations of GAMs allow terms to be localregression operators; this is not the case inpygam.Here we fit local linear regression models using spans of 0.2 and 0.5;that is, each neighborhood consists of 20% or 50% of the observations. Asexpected, using a span of 0.5 is smoother than 0.2.In[49]:lowess = sm.nonparametric.lowessfig, ax = subplots(figsize=(8,8))ax.scatter(age, y, facecolor='gray',a l p h a = 0 . 5 )for span in [0.2, 0.5]:fitted = lowess(y,7.9 Exercises o n t s i z e = 2 0 )ax.set_ylabel('Wage',f o n t s i z e = 2 0 ) ;ax.legend(title='span',f o n t s i z e = 1 5 ) ;7.9 ExercisesConceptual1. It was mentioned in this chapter that a cubic regression spline withone knot atξcan be obtained using a basis of the formx,x2,x3,
(x−ξ)3+, where(x−ξ)3+=(x−ξ)3ifx>ξand equals 0 otherwise.We will now show that a function of the Find a cubic polynomialf1(x)=a1+b1x+c1x2+d1x3such thatf(x)=f1(x)for allx≤ξ. Expressa1,b1,c1,d1interms ofβ0,β1,β2,β3,β4.(b) Find a cubic polynomialf2(x)=a2+b2x+c2x2+d2x3such thatf(x)=f2(x)for allx>ξ. Expressa2,b2,c2,d2interms ofβ0,β1,β2,β3,β4. We have now established thatf(x)isa piecewise polynomial.(c) Show thatf1(ξ)=f2(ξ). That is,f(x)is continuous atξ.(d) Show thatf/prime1(ξ)=f/prime2(ξ). That is,f/prime(x)is continuous atξ.(e) Show thatf/prime/prime1(ξ)=f/prime/prime2(ξ). That is,f/prime/prime(x)is continuous atξ.Therefore,f(x)is indeed a cubic spline.Hint: Parts (d) and (e) of this problem require knowledge of single-variable calculus. As a reminder, given a cubic polynomialf1(x)=a1+b1x+c1x2+d1x3,the first derivative takes the formf/prime1(x)=b1+2c1x+3d1x2326 7. Moving Beyond Linearityand the second derivative takes the formf/prime/prime1(x)=2c1+6d1x.2. Suppose that a curveˆgis computed to smoothly fit a set ofnpointsusing the following formula:ˆg= arg themth derivative ofg(andg(0)=g). Provideexample sketches ofˆgin each of the following Suppose we fit a curve with basis functionsb1(X)=X,b2(X)=(X−1)2I(X≥1). (Note thatI(X≥1)equals1forX≥1and0otherwise.) We fit the linear regression modelY=β0+β1b1(X)+β2b2(X)+/epsilon1,and obtain coefficient estimatesˆβ0=1,ˆβ1=1,ˆβ2=−2. Sketch theestimated curve betweenX=−2andX=2. Note the intercepts,slopes, and other relevant information.4. Suppose we fit a curve with basis +I(4<X≤5).We fit the linear regression modelY=β0+β1b1(X)+β2b2(X)+/epsilon1,and obtain coefficient estimatesˆβ0=1,ˆβ1=1,ˆβ2=3. Sketch theestimated curve betweenX=−2andX=6. Note the intercepts,slopes, and other relevant information.5. Consider two curves,ˆg1andˆg2, defined byˆg1= arg arg themth derivative ofg.(a) Asλ→∞, willˆg1orˆg2have the smaller training RSS?(b) Asλ→∞, willˆg1orˆg2have the smaller test RSS?(c) Forλ=0, willˆg1orˆg2have the smaller training and test RSS?7.9 Exercises 327Applied6. In this exercise, you will further analyze theWagedata set consideredthroughout this chapter.(a) Perform polynomial regression to predictwageusingage. Usecross-validation to select the optimal degreedfor the polyno-mial. What degree was chosen, and how does this compare tothe results of hypothesis testing using ANOVA? Make a plot ofthe resulting polynomial fit to the data.(b) Fit a step function to predictwageusingage, and perform cross-validation to choose the optimal number of cuts. Make a plot ofthe fit obtained.7. TheWagedata set contains a number of other features not exploredin this chapter, such as marital status (maritl), job class (jobclass),and others. Explore the relationships between some of these otherpredictors andwage, and use non-linear fitting techniques in order tofit flexible models to the data. Create plots of the results obtained,and write a summary of your findings.8. Fit some of the non-linear models investigated in this chapter to theAutodata set. Is there evidence for non-linear relationships in thisdata set? Create some informative plots to justify your answer.9. This question uses the variablesdis(the weighted mean of distancesto five Boston employment centers) andnox(nitrogen oxides concen-tration in parts per 10 million) from theBostondata. We will treatdisas the predictor andnoxas the response.(a) Use thepoly()function from theISLP.modelsmodule to fit acubic polynomial regression to predictnoxusingdis. Report theregression output, and plot the resulting data and polynomialfits.(b) Plot the polynomial fits for a range of different polynomialdegrees (say, from 1 to 10), and report the associated residualsum of squares.(c) Perform cross-validation or another approach to select the opti-mal degree for the polynomial, and explain your results.(d) Use thebs()function from theISLP.modelsmodule to fit a re-gression spline to predictnoxusingdis. Report the output forthe fit using four degrees of freedom. How did you choose theknots? Plot the resulting fit.(e) Now fit a regression spline for a range of degrees of freedom, andplot the resulting fits and report the resulting RSS. Describe theresults obtained.(f) Perform cross-validation or another approach in order to selectthe best degrees of freedom for a regression spline on this data.Describe your results.328 7. Moving Beyond Linearity
10. This question relates to the Collegedata set.
(a) as the response and the other variables as the predictors,
perform forward stepwise selection on the training set in order
to identify a satisfactory model that uses just a subset of the
predictors.
(b) Fit a GAM on the training data, using out-of-state tuition as
the response and the features selected in the previous step as
the predictors. Plot the results, and explain your findings.
(c) Evaluate the model obtained on the test set, and explain the
results obtained.
(d) For which variables, if any, is there evidence of a non-linear
relationship with the response?
11. In Section 7.7, it was mentioned that GAMs are generally fit using
abackfitting approach. The idea behind backfitting is actually quite
simple. We will now explore backfitting in the context of multiple
linear regression.
Suppose that we would like to perform multiple linear regression, but
we do not have software to do so. Instead, we only have software
to perform simple linear regression. Therefore, we take the following
iterative approach: we repeatedly hold all but one coefficient esti-
mate fixed at its current value, and update only that —that is, until the coefficient estimates stop changing.
We now try this out on a toy example.
(a) Generate a response Yand two predictors X1andX2, with
n= 100 .
(b) Write a function simple_reg() that takes two arguments outcome
andfeature, fits a simple linear regression model with this out-
come and feature, and returns the estimated interceptand slope.
(c) Initialize beta1to take on a value of your choice. It does not
matter what value you choose.
(d) Keeping beta1fixed, use your function simple_reg() to fit the
model:
Y−beta1 ·X1=β0+β2X2+/epsilon1.
Store the resulting values as beta0andbeta2.
(e) Keeping beta2fixed, fit the model
Y−beta2 ·X2=β0+β1X1+/epsilon1.
Store the result as beta0andbeta1(overwriting their previous
values).
(f) Write a for loop to repeat (c) and (d) 1,000 times. Report the
estimates of beta0,beta1, andbeta2at each iteration of the for
loop. Create a plot in which each of these values is displayed,
withbeta0,beta1, andbeta2.7.9 Exercises 329(g) Compare your answer in (e) to the results of simply perform-ing multiple linear regression to predictYusingX1andX2.Useaxline()method to overlay those multiple linear regressioncoefficient estimates on the plot obtained in (e).(h) On this data set, how many backfitting iterations were requiredin order to obtain a “good” approximation to the multiple re-gression coefficient estimates?12. This problem is a continuation of the previous exercise. In a toyexample withp= 100, show that one can approximate the regression in a backfitting procedure. How many backfittingiterations are required in order to obtain a “good” approximation tothe multiple regression coefficient estimates? Create a plot to justifyyour answer.8
Tree-Based Methods
In this chapter, we describe tree-based methods for regression and classifi-
cation. These involve stratifying orsegmenting the predictor space into a
number of simple regions. In order to make a prediction for a given ob-
servation, we typically use the mean or the mode response value for the
training observations in the region to which it belongs. Since the set of
splitting rules used to segment the predictor space can be summarized in
a tree, these types of approaches are known as decision tree methods.decision treeTree-based methods are simple and useful for interpretation. However,
they typically are not competitive with the best supervised learning ap-
proaches, such as those seen in Chapters 6and7, in terms of prediction
accuracy. Hence in this chapter we also introduce bagging,random forests ,
boosting, andBayesian additive regression trees . Each of these approaches
involves producing multiple trees which are then combined to yield a single
consensus prediction. We will see that combining a large number of trees
can often result in dramatic improvements in prediction accuracy, at the
expense of some loss in interpretation.
8.1 The Basics of Decision first consider regression problems, and then move on to classification.
8.1.1 Regression Trees
In order to motivate regression trees , we begin with a simple example.regression
tree
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_8  331332 8. Tree-Based Methods|Years < 4.5
Hits < 117.55.116.006.74FIGURE 8.1. For the Hitters data, a regression tree for predicting the log
salary of a baseball player, based on the number of years that he has played in
the major leagues and the number of hits that he made in the previous year. At a
given internal node, the label (of the form Xj<tk) indicates the left-hand branch
emanating from that split, and the right-hand branch corresponds to Xj≥tk.
For instance, the split at the top of the tree results in two large branches. The
left-hand branch corresponds to Years<4.5 , and the right-hand branch corresponds
toYears>=4.5 . The tree has two internal nodes and three terminal nodes, or
leaves. The number in each leaf is the mean of the response for the observations
that fall there.
Predicting Baseball Players’ Salaries Using Regression Trees
We use the Hittersdata set to predict a baseball player’s Salarybased on
Years(the number of years that he has played in the major leagues) that are missing Salaryvalues, and log-transform Salaryso
that its distribution has more of a typical bell-shape. (Recall that Salary
is measured in thousands of dollars.)
Figure8.1shows a regression tree fit to this data. It consists of a series
of splitting rules, starting at the top of the tree. The top split assigns
observations having Years<4.5 to the left branch.1The predicted salary
for these players is given by the mean response value for the players in
the data set with Years<4.5 . For such players, the mean log salary is 5.107,
and so we make a prediction of e5.107thousands of dollars, i.e. $165,174, for
these players. Players with Years>=4.5 are assigned to the right branch, and
then that group is further subdivided by Hits. Overall, the tree stratifies
or segments the players into three regions of predictor space: players who
have played for four or fewer years, players who have played for five or more
years and who made fewer than 118 hits last year, and players who regions can be written as R1={X|Years<4.5 },R2={X|Years>=4.5 ,
Hits<117.5 }, andR3={X|Years>=4.5 ,Hits>=117.5 }. Figure 8.2illustrates
1BothYearsandHitsare integers in these data; the function used to fit this tree
labels the splits at the midpoint between two adjacent values.8.1 The Basics of Decision Trees 333
YearsHits
1117.5238
14.524R1R3R2FIGURE 8.2. The three-region partition for the Hitters data set from the
regression tree illustrated in Figure 8.1.
the regions as a function of YearsandHits. The predicted salaries for these
three groups are $1,000 ×e5.107=$165,174, $1,000 ×e5.999=$402,834, and
$1,000×e6.740=$845,346 respectively.
Inkeepingwiththe treeanalogy,theregions R1,R2,andR3areknownas
terminal nodes orleavesof the tree. As is the case for Figure 8.1, decisionterminal
node
leaftrees are typically drawn upside down , in the sense that the leaves are at
the bottom of the tree. The points along the tree where the predictor space
is split are referred to as internal nodes . In Figure 8.1, the two internalinternal
nodenodes are indicated by the text Years<4.5 andHits<117.5 . We refer to the
segments of the trees that connect the nodes as branches.branchWe might interpret the regression tree displayed in Figure 8.1as follows:
Yearsis the most important factor in determining Salary, and players with
less experience earn lower salaries than more experienced players. Given
that a player is less experienced, the number of hits that he made in the
previous year seems to play little role in his salary. But among players who
have been in the major leagues for five or more years, the number of hits
made in the previous year does affect salary, and players who made more
hits last year tend to have higher salaries. The regression tree shown in
Figure8.1is likely an over-simplification of the true relationship between
Hits,Years, andSalary. However, it has advantages over other types of
regression models (such as those seen in Chapters 3and6): it is easier to
interpret, and has a nice graphical representation.
Prediction via Stratification of the Feature Space
We now discuss the process of building a regression tree. Roughly speaking,
there are two steps.
1. We divide the predictor space — that is, the set of possible values
forX1,X2,...,X p— intoJdistinct and non-overlapping regions,
R1,R2,...,R J.334 8. Tree-Based Methods
2. For every observation that falls into the region Rj, we make the same
prediction, which is simply the mean of the response values for the
training observations in Rj.
For instance, suppose that in Step 1 we obtain two regions, R1andR2,
and that the response mean of the training observations in the first region
is10, while the response mean of the training observations in the second
region is 20. Then for a given observation X=x, ifx∈R1we will predict
a value of 10, and ifx∈R2we will predict a value of 20.
We now elaborate on Step 1 above. How do we construct the regions
R1,...,R J? In theory, the regions could have any shape. However, we
choose to divide the predictor space into high-dimensional rectangles, or
boxes, for simplicity and for ease of interpretation of the resulting predic-
tive model. The goal is to find boxes R1,...,R Jthat minimize the RSS,
given (8.1)
whereˆyRjis the mean response for the training observations within the
jth box. Unfortunately, it is computationally infeasible to consider every
possible partition of the feature space into Jboxes. For this reason, we take
atop-down ,greedyapproachthatisknownas recursive binary splitting .Therecursive
binary
splittingapproachis top-down observations belong to a single region) and then successively splits the
predictor space; each split is indicated via two new branches further down
on the tree. It is greedybecause at each step of the tree-building process,
thebestsplit is made at that particular step, rather than looking ahead
and picking a split that will lead to a better tree in some future step.
In order to perform recursive binary splitting, we first select the pre-
dictorXjand the cutpoint ssuch that splitting the predictor space into
the regions {X|Xj<s}and{X|Xj≥s}leads to the greatest possible
reduction in RSS. (The notation {X|Xj<s}meansthe region of predictor
space in which Xjtakes on a value less than s.) That is, we consider all
predictors X1,...,X p, and all possible values of the cutpoint sfor each of
the predictors, and then choose the predictor and cutpoint such that the
resulting tree has the lowest RSS. In greater detail, for any jands,w e
define the pair of half-planes
R1(j, s)={X|Xj<s}andR2(j, s)={X|Xj≥s}, (8.2)
and we seek the value of jandsthat minimize the (8.3)
whereˆyR1is the mean response for the training observations in R1(j, s),
andˆyR2is the mean response for the training observations in R2(j, s).
Finding the values of jandsthat minimize ( 8.3) can be done quite quickly,
especially when the number of features pis not too large.
Next, we repeat the process, looking for the best predictor and best
cutpoint in order to split the data further so as to minimize the RSS within8.1 The Basics of Decision Trees 8.3. Top Left: A partition of two-dimensional feature space that could
not result from recursive binary splitting. Top Right: The output of recursive
binary splitting on a two-dimensional example. Bottom Left: A tree corresponding
to the partition in the top right panel. Bottom Right: A perspective plot of the
prediction surface corresponding to that tree.
each of the resulting regions. However, this time, instead of splitting the
entire predictor space, we split one of the two previously identified so as to minimize the RSS. The process continues until a stopping
criterion is reached; for instance, we may continue until no region contains
more than five observations.
Once the regions R1,...,R Jhave been created, we predict the response
for a given test observation using the mean of the training observations in
the region to which that test observation belongs.
A five-region example of this approach is shown in Figure 8.3.
Tree Pruning
The process described above may produce good predictions on the training
set, but is likely to overfit the data, leading to poor test set performance.
This is because the resulting tree might be too complex. A smaller tree336 8. Tree-Based Methods
with fewer splits (that is, fewer regions R1,...,R J) might lead to lower
variance and better interpretation at the cost of a little bias. One possible
alternative to the process described above is to build the tree only so long
as the decrease in the RSS due to each split exceeds some (high) threshold.
This strategy will result in smaller trees, but is too short-sighted since a
seemingly worthless split early on in the tree might be followed by a very
good split—that is, a split that leads to a large reduction in RSS later on.
Therefore, a better strategy is to grow a very large tree T0, and then
pruneit back in order to obtain a subtree. How do we determine the bestprune
subtreeway to prune the tree? Intuitively, our goal is to select a subtree that
leads to the lowest test error rate. Given a subtree, we can estimate its
test error using cross-validation or the validation set approach. since there is an extremely large number of possible subtrees.
Instead, we need a way to select a small set of subtrees for consideration.
Cost complexity pruning —also known as weakest link pruning —gives uscost
complexity
pruning
weakest link
pruninga way to do just this. Rather than considering every possible subtree, we
consider a sequence of trees indexed by a nonnegative tuning parameter α.
For each value of αthere corresponds a subtree T⊂T0such (8.4)
is as small as possible. Here |T|indicates the number of terminal nodes
of the tree T,Rmis the rectangle (i.e. the subset of predictor space) cor-
responding to the mth terminal node, and ˆyRmis the predicted response
associated with Rm—that is, the mean of the training observations in Rm.
The tuning parameter αcontrols a trade-off between the subtree’s com-
plexity and its fit to the training data. When α=0, then the subtree T
will simply equal T0, because then ( 8.4) just measures the training error.
However, as αincreases, there is a price to pay for having a tree with
many terminal nodes, and so the quantity ( 8.4) will tend to be minimized
for a smaller subtree. Equation 8.4is reminiscent of the lasso ( 6.7) from
Chapter 6, in which a similar formulation was used in order to control the
complexity of a linear model.
It turns out that as we increase αfrom zero in ( 8.4), branches get pruned
from the tree in a nested and predictable fashion, so obtaining the whole
sequence of subtrees as a function of αis easy. We can select a value of
αusing a validation set or using cross-validation. We then return to the
full data set and obtain the subtree corresponding to α. This process is
summarized in Algorithm 8.1.
Figures8.4and8.5display the results of fitting and pruning a regression
tree on the Hittersdata, using nine of the features. First, we randomly
divided the data set in half, yielding 132 observations in the training set
and 131 observations in the test set. We then built a large regression tree
on the training data and varied αin (8.4) in order to create subtrees with
different numbers of terminal nodes. Finally, we performed six-fold cross-
validation in order to estimate the cross-validated MSE of the trees as8.1 The Basics of Decision Trees 337
Algorithm 8.1 Building a Regression Tree
1. Use recursive binary splitting to grow a large tree on the training
data, stopping only when each terminal node has fewer than some
minimum number of observations.
2. Apply cost complexity pruning to the large tree in order to obtain a
sequence of best subtrees, as a function of α.
3. Use K-fold cross-validation to choose α. That is, divide the training
observations into Kfolds. For each k=1,...,K :
(a) Repeat Steps 1 and 2 on all but the kth fold of the training data.
(b) Evaluate the mean squared prediction error on the data in the
left-outkth fold, as a function of α.
Average the results for each value of α, and pick αto minimize the
average error.
4. Return the subtree from Step 2 that corresponds to the chosen value
ofα.
a function of α. (We chose to perform six-fold cross-validation because
132 is an exact multiple of six.) The unpruned regression tree is shown
in Figure 8.4. The green curve in Figure 8.5shows the CV error as a
function of the number of leaves,2while the orange curve indicates the
test error. Also shown are standard error bars around the estimated errors.
For reference, the training error curve is shown in black. The CV error
is a reasonable approximation of the test error: the CV error takes on its
minimum for a three-node tree, while the test error also dips down at the
three-node tree (though it takes on its lowest value at the ten-node tree).
The pruned tree containing three terminal nodes is shown in Figure 8.1.
8.1.2 Classification Trees
Aclassification tree is very similar to a regression tree, except that it isclassification
treeused to predict a qualitative response rather than a quantitative one. Re-
call that for a regression tree, the predicted response for an observation is
given by the mean response of the training observations that belong to the
same terminal node. In contrast, for a classification tree, we predict that
each observation belongs to the most commonly occurring class of training
observations in the region to which it belongs. In interpreting the results of
a classification tree, we are often interested not only in the class prediction
corresponding to a particular terminal node region, but also in the class
proportions among the training observations that fall into that region.
The task of growing a classification tree is quite similar to the task of
growing a regression tree. Just as in the regression setting, we use recursive
2Although CV error is computed as a function of α, it is convenient to display the
result as a function of |T|, the number of leaves; this is based on the relationship between
αand|T|in the original tree grown to all the training data.338 8. Tree-Based Methods|Years < 4.5
RBI < 60.5Putouts < 82Years < 3.5Years < 3.5Hits < 117.5
Walks < 43.5Runs < 47.5Walks < 52.5RBI < 80.5Years < 6.55.4874.622 5.1835.394 6.1896.015 5.5716.4076.5496.459 7.0077.289FIGURE 8.4.Regression tree analysis for theHittersdata. The unpruned treethat results from top-down greedy splitting on the training data is shown.binary splitting to grow a classification tree. However, in the classificationsetting, RSS cannot be used as a criterion for making the binary splits.A natural alternative to RSS is theclassification error rate. Since we planclassificationerror rateto assign an observation in a given region to themost commonly occurringclassof training observations in that region, the classification error rate issimply the fraction of the training observations in that region that do notbelong to the most common class:E=1−maxk(ˆpmk).(8.5)Hereˆpmkrepresents the proportion of training observations in themthregion that are from thekth class. However, it turns out that classificationerror is not sufficiently sensitive for tree-growing, and in practice two othermeasures are preferable.TheGini indexis defined byGini measure of total variance across theKclasses. It is not hard to seethat the Gini index takes on a small value if all of theˆpmk’s are close tozero or one. For this reason the Gini index is referred to as a measure of8.1 The Basics of Decision Trees 339
2468100.0 0.2 0.4 0.6 0.8 1.0Tree SizeMean Squared ErrorTrainingCross−ValidationTest
FIGURE 8.5. Regression tree analysis for the Hitters data. The training,
cross-validation, and test MSE are shown as a function of the number of terminal
nodes in the pruned tree. Standard error bands are displayed. The minimum
cross-validation error occurs at a tree size of three.
nodepurity—a small value indicates that a node contains predominantly
observations from a single class.
An alternative to the Gini index is entropy, given byentropy
D=−K/summationdisplay
k=1ˆpmklog ˆpmk. (8.7)
Since0≤ˆpmk≤1, it follows that 0≤−ˆpmklog ˆpmk. One can show that
the entropy will take on a value near zero if the ˆpmk’s are all near zero or
near one. Therefore, like the Gini index, the entropy will take on a small
value if the mth node is pure. In fact, it turns out that the Gini index and
the entropy are quite similar numerically.
When building a classification tree, either the Gini index or the entropy
are typically used to evaluate the quality of a particular split, since these
two approaches are more sensitive to node purity than is the classification
error rate. Any of these three approaches might be used when pruningthe
tree, but the classification error rate is preferable if prediction accuracy of
the final pruned tree is the goal.
Figure8.6shows an example on the Heartdata set. These data con-
tain a binary outcome HDfor 303 patients who presented with chest pain.
An outcome value of Yesindicates the presence of heart disease based on
an angiographic test, while Nomeans no heart disease. There are 13 predic-
tors including Age,Sex,Chol(a cholesterol measurement), and other heart
and lung function measurements. Cross-validation results in a tree with six
terminal nodes.
In our discussion thus far, we have assumed that the predictor vari-
ables take on continuous values. However, decision trees can be constructed
even in the presence of qualitative predictor variables. For instance, in the
Heartdata, some of the predictors, such as Sex,Thal(Thallium stress test),340 8. Tree-Based Methods|Thal:a
Ca < 0.5MaxHR < 161.5RestBP < 157Chol < 244MaxHR < 156MaxHR < 145.5ChestPain:bcChol < 244 Sex < 0.5Ca < 0.5Slope < 1.5Age < 52Thal:bChestPain:aOldpeak < 1.1RestECG < 1No YesNoNoYesNoNo NoNo YesYes NoNoNoYesYes YesYes
510150.0 0.1 0.2 0.3 0.4 0.5 0.6Tree < 0.5MaxHR < 161.5ChestPain:bcCa < 0.5
No NoNo YesYes YesFIGURE 8.6. Heartdata.Top:The unpruned tree. Bottom Left: Cross-valida-
tion error, training, and test error, for different sizes of the pruned tree. Bottom
Right:The pruned tree corresponding to the minimal cross-validation error.
andChestPain , are qualitative. Therefore, a split on one of these variables
amounts to assigning some of the qualitative values to one branch and
assigning the remaining to the other branch. In Figure 8.6, some of the in-
ternal nodes correspond to splitting qualitative variables. For instance, the
top internal node corresponds to splitting Thal. The text Thal:aindicates
that the left-hand branch coming out of that node consists of observations
with the first value of the Thalvariable (normal), and the right-hand node
consists of the remaining observations (fixed or reversible defects). The text
ChestPain:bc coming out of that node consists of observations with the second
and third values of the ChestPain variable, where the possible values are
typical angina, atypical angina, non-anginal pain, and asymptomatic.
Figure8.6has a surprising characteristic: some of the splits yield two
terminal nodes that have the same predicted value . For instance, consider
the split RestECG<1 near the bottom right of the unpruned tree. Regardless
of the value of RestECG, a response value of Yesis predicted for those ob-8.1 The Basics of Decision Trees 341
servations. Why, then, is the split performed at all? The split is performed
because it leads to increased node purity . That is, all 9 of the observations
corresponding to the right-hand leaf have a response value of Yes, whereas
7/11of those corresponding to the left-hand leaf have a response value of
Yes. Why is node purity important? Suppose that we have a test obser-
vation that belongs to the region given by that right-hand leaf. Then we
can be pretty certain that its response value is Yes. In contrast, if a test
observation belongs to the region given by the left-hand leaf, then its re-
sponse value is probably Yes, but we are much less certain. Even though
the split RestECG<1 does not reduce the classification error, it improves the
Gini index and the entropy, which are more sensitive to node purity.
8.1.3 Trees Versus Linear 3
and4. In particular, linear regression assumes a model of the form
f(X)=β0+p/summationdisplay
j=1Xjβj, (8.8)
whereas regression trees assume a model of the form
f(X)=M/summationdisplay
m=1cm·1(X∈Rm) (8.9)
whereR1,...,R Mrepresent a partition of feature space, as in Figure 8.3.
Which model is better? It depends on the problem at hand. If the re-
lationship between the features and the response is well approximated by
a linear model as in ( 8.8), then an approach such as linear regression will
likely work well, and will outperform a method such as a regression tree
that does not exploit this linear structure. If instead there is a highly non-
linear and complex relationship between the features and the response as
indicated by model ( 8.9), then decision trees may outperform classical ap-
proaches. An illustrative example is displayed in Figure 8.7. The relative
performances of tree-based and classical approaches can be assessed by es-
timating the test error, using either cross-validation or the validation set
approach (Chapter 5).
Of course, other considerations beyond simply test error may come into
play in selecting a statistical learning method; for instance, in certain set-
tings, prediction using a tree may be preferred for the sake of interpretabil-
ity and visualization.
8.1.4 Advantages and Disadvantages of Trees
Decision trees for regression and classification have a number of advantages
over the more classical approaches seen in Chapters 3and4:
LTrees are very easy to explain to people. In fact, they are even easier
to explain than linear regression!342 8. Tree-Based Methods
−2 −1 0 1 2−2 −1 0 1 2X1X2
−2 −1 0 1 2−2 −1 0 1 2X1X2
−2 −1 0 1 2−2 −1 0 1 2X1X2
−2 −1 0 1 2−2 −1 0 1 2X1X2
FIGURE 8.7.Top Row:A two-dimensional classification example in which thetrue decision boundary is linear, and is indicated by the shaded regions. A classicalapproach that assumes a linear boundary (left) will outperform a decision treethat performs splits parallel to the axes (right).Bottom Row:Here the true de-cision boundary is non-linear. Here a linear model is unable to capture the truedecision boundary (left), whereas a decision tree is successful (right).LSome people believe that decision trees more closely mirror humandecision-making than do the regression and classification approachesseen in previous chapters.LTrees can be displayed graphically, and are easily interpreted even bya non-expert (especially if they are small).LTrees can easily handle qualitative predictors without the need tocreate dummy variables.MUnfortunately, trees generally do not have the same level of predictiveaccuracy as some of the other regression and classification approachesseen in this book.MAdditionally, trees can be very non-robust. In other words, a smallchange in the data can cause a large change in the final forests, andboosting, the predictive performance of trees can besubstantially improved. We introduce these concepts in the next 343
8.2 Bagging, Random Forests, Boosting, and
Bayesian Additive Regression Trees
Anensemble method is an approach that combines many simple “buildingensembleblock” models in order to obtain a single and potentially very powerful
model. These simple building block models are sometimes known as weak
learners, since they may lead to mediocre predictions on their own.weak
learnersWe will now discuss bagging, random forests, boosting, and Bayesian
additive regression trees. These are ensemble methods for which the simple
building block is a regression or a classification tree.
8.2.1 Bagging
The bootstrap, introduced in Chapter 5, is an extremely powerful idea. It is
used in many situations in which it is hard or even impossible to directly
compute the standard deviation of a quantity of interest. We see here that
the bootstrap can be used in a completely different context, in order to
improve statistical learning methods such as decision trees.
The decision trees discussed in Section 8.1suffer from high variance .
This means that if we split the training data into two parts at random,
and fit a decision tree to both halves, the results that we get could be
quite different. In contrast, a procedure with low variance will yield similar
results if applied repeatedly to distinct data sets; linear regression tends
to have low variance, if the ratio of ntopis moderately large. Bootstrap
aggregation , orbagging, is a general-purpose procedure for reducing thebaggingvariance of a statistical learning method; we introduce it here because it is
particularly useful and frequently used in the context of decision trees.
Recall that given a set of nindependent observations Z1,...,Z n, each
with variance σ2, the variance of the mean ¯Zof the observations is given
byσ2/n. In other words, averaging a set of observations reduces variance .
Hence a natural way to reduce the variance and increase the test set ac-
curacy of a statistical learning method is to take many training sets from
the population, build a separate prediction model using each training set,
and average the resulting predictions. In other words, we could calculate
ˆf1(x),ˆf2(x),..., ˆfB(x)usingBseparate training sets, and average them
in order to obtain a single low-variance statistical learning model, given course, this is not practical because we generally do not have access
to multiple training sets. Instead, we can bootstrap, by taking repeated
samples from the (single) training data set. In this approach we generate
Bdifferent bootstrapped training data sets. We then train our method on
thebth bootstrapped training set in order to get ˆf∗b(x), and finally average
all the predictions, to 8. Tree-Based Methods
0 50 100 150 200 250 3000.100.150.200.250.30
Number of TreesError
Test: BaggingTest: RandomForestOOB: BaggingOOB: RandomForestFIGURE 8.8. Bagging and random forest results for the Heartdata. The test
error (black and orange) is shown as a function of B, the number of bootstrapped
training sets used. Random forests were applied with m=√p. The dashed line
indicates the test error resulting from a single classification tree. The green and
blue traces show the OOB error, which in this case is — by chance — considerably
lower.
This is called bagging.
While bagging can improve predictions for many regression methods,
it is particularly useful for decision trees. To apply bagging to regression
trees,wesimplyconstruct Bregressiontreesusing Bbootstrappedtraining
sets, and average the resulting predictions. These trees are grown deep,
and are not pruned. Hence each individual tree has high variance, but
low bias. Averaging these Btrees reduces the variance. Bagging has been
demonstrated to give impressive improvements in accuracy by combining
together hundreds or even thousands of trees into a single procedure.
Thus far, we have described the bagging procedure in the Y.Howcanbaggingbeextended
to a classification problem where Yis qualitative? In that situation, we can record the class predicted by each of the Btrees, and
take amajority vote : the overall prediction is the most commonly occurringmajority
voteclass among the Bpredictions.
Figure8.8shows the results from bagging trees on the Heartdata. The
test error rate is shown as a function of B, the number of trees constructed
using bootstrapped training data sets. We see that the bagging test error
rate is slightly lower in this case than the test error rate obtained from a
single tree. The number of trees Bis not a critical parameter with bagging;
using a very large value of Bwill not lead to overfitting. In practice 345
use a value of Bsufficiently large that the error has settled down. Using
B= 100 is sufficient to achieve good performance in this example.
Out-of-Bag Error Estimation
It turns out that there is a very straightforward way to estimate the test
error of a bagged model, without the need to perform cross-validation or
the validation set approach. Recall that the key to bagging is that trees are
repeatedly fit to bootstrapped subsets of the observations. One can show
that on average, each bagged tree makes use of around two-thirds of the
observations.3The remaining one-third of the observations not used to fit a
given bagged tree are referred to as the out-of-bag (OOB) observations. Weout-of-bagcan predict the response for the ith observation using each of the trees in
which that observation was OOB. This will yield around B/3predictions
for theith observation. In order to obtain a single prediction for the ith
observation, we can average these predicted responses (if regression is the
goal) or can take a majority vote (if classification is the goal). This leads
to a single OOB prediction for the ith observation. An OOB prediction
can be obtained in this way for each of the nobservations, from which the
overall OOB MSE (for a regression problem) or classification error (for of the test error for the bagged model, since the response for each
observation is predicted using only the trees that were not fit using that
observation. Figure 8.8displays the OOB error on the Heartdata. It can
be shown that with Bsufficiently large, OOB error is virtually equivalent
to leave-one-out cross-validation error. The OOB approach for estimating
the test error is particularly convenient when performing bagging on large
data sets for which cross-validation would be computationally onerous.
Variable Importance Measures
As we have discussed, bagging typically results in improved accuracy over
prediction using a single tree. Unfortunately, however, it can be difficult to
interpret the resulting model. Recall that one of the advantages of decision
trees is the attractive and easily interpreted diagram that results, such as
the one displayed in Figure 8.1. However, when we bag a large number of
trees, it is no longer possible to represent the resulting statistical learning
procedure using a single tree, and it is no longer clear which variables
are most important to the procedure. Thus, bagging improves prediction
accuracy at the expense of a single tree, one can obtain an overall summary of the importance bagging classification trees). In the case of bagging regression trees, we
can record the total amount that the RSS ( 8.1) is decreased due to splits
over a given predictor, averaged over all Btrees. A large value indicates
an important predictor. Similarly, in the context of bagging classification
3This relates to Exercise 2of Chapter 5.346 8. Tree-Based 20 40 60 80 100Variable ImportanceFIGURE 8.9. A variable importance plot for the Heartdata. Variable impor-
tance is computed using the mean decrease in Gini index, and expressed relative
to the maximum.
trees, we can add up the total amount that the Gini index ( 8.6) is decreased
by splits over a given predictor, averaged over all Btrees.
A graphical representation of the variable importances in relative to the largest. The variables with the largest mean decrease
in Gini index are Thal,Ca, andChestPain .
8.2.2 Random Forests
Random forests provide an improvement over bagged trees by way of arandom
forestsmall tweak that decorrelates the trees. As in bagging, we build a trees, each time a split in a tree is considered, a random sample of
mpredictors is chosen as split candidates from the full set of ppredictors.
The split is allowed to use only one of those mpredictors. A fresh sample of
mpredictors is taken at each split, and typically we choose m≈√p—that
is, the number of predictors considered at each split is approximately equal
to the square root of the total number of predictors (4 out of the 13 for the
Heartdata).
In other words, in building a random forest, at each split in the tree,
the algorithm is not even allowed to consider a majority of the available
predictors. This may sound crazy, but it has a clever rationale. Suppose
that there is one very strong predictor in the data set, along with a num-
ber of other moderately strong predictors. Then in the collection of bagged
trees, most or all of the trees will use this strong predictor in the top split.
Consequently, all of the bagged trees will look quite similar to each 347
Hence the predictions from the bagged trees will be highly correlated. Un-
fortunately, averaging many highly correlated quantities does not lead to
as large of a reduction in variance as averaging many uncorrelated quan-
tities. In particular, this means that bagging will not lead to a substantial
reduction in variance over a single tree in this setting.
Random forests overcome this problem by forcing each split to consider
only a subset of the predictors. Therefore, on average (p−m)/pof the
splits will not even consider the strong predictor, and so other predictors
will have more of a chance. We can think of this process as decorrelating
the trees, thereby making the average of the resulting trees less variable
and hence more reliable.
The main difference between bagging and random forests is the choice
of predictor subset size m. For instance, if a random forest is built using
m=p, then this amounts simply to bagging. On the Heartdata, random
forests using m=√pleads to a reduction in both test error and OOB error
over bagging (Figure 8.8).
Using a small value of min building a random forest will typically be
helpful when we have a large number of correlated predictors. We applied
random forests to a high-dimensional biological data set consisting of ex-
pression measurements of 4,718 genes measured on tissue samples from 349
patients. There are around 20,000 genes in humans, and individual genes
have different levels of activity, or expression, in particular cells, tissues,
and biological conditions. In this data set, each of the patient samples has
a qualitative label with 15 different levels: either normal or 1 of 14 different
types of cancer. Our goal was to use random forests to predict cancer type
based on the 500genes that have the largest variance in the training set.
We randomly divided the observations into a training and a test set, and
applied random forests to the training set for three different values of the
number of splitting variables m. The results are shown in Figure 8.10. The
error rate of a single tree is 45.7%, and the null rate is 75.4%.4We see that
using400trees is sufficient to give good performance, and that the choice
m=√pgave a small improvement in test error over bagging ( m=p) in
this example. As with bagging, random forests will not overfit if we increase
B, so in practice we use a value of Bsufficiently large for the error rate to
have settled down.
8.2.3 Boosting
We now discuss boosting, yet another approach for improving the predic-boostingtions resulting from a decision tree. Like bagging, boosting is a general
approach that can be applied to many statistical learning methods for re-
gression or classification. Here we restrict our discussion of boosting to the
context of decision data set using the bootstrap, fitting a separate decision tree to each
copy, and then combining all of the trees in order to create a single predic-
4The null rate results from simply classifying each observation to the dominant class
overall, which is in this case the normal class.348 8. Tree-Based Methods
0 100 200 300 400 5000.2 0.3 0.4 0.5Number of TreesTest Classification Errorm=pm=p/2m=p
FIGURE 8.10. Results from random forests for the 15-class gene expression
data set with p= 500 predictors. The test error is displayed as a function of
the number of trees. Each colored line corresponds to a different value of m, the
number of predictors available for splitting at each interior tree node. Random
forests ( m<p ) lead to a slight improvement over bagging ( m=p). A single
classification tree has an error rate of 45.7%.
tive model. Notably, each tree is built on a bootstrap data set, independent
of the other trees. Boosting works in a similar way, except that the trees are
grownsequentially : each tree is grown using information from previously
grown trees. Boosting does not involve bootstrap sampling; instead each
tree is fit on a modified version of the original data a large number of decision trees, ˆf1,..., ˆfB. Boosting is described
in Algorithm 8.2.
What is the idea behind this procedure? Unlike fitting a single large deci-
sion tree to the data, which amounts to fitting the data hard and potentially
overfitting, the boosting approach instead learns slowly . Given the current
model, we fit a decision tree to the residuals from the model. That is, we
fit a tree using the current residuals, rather than the outcome Y, as the re-
sponse. We then add this new decision tree into the fitted function in order
to update the residuals. Each of these trees can be rather small, with just
a few terminal nodes, determined by the parameter din the algorithm. By
fitting small trees to the residuals, we slowly improve ˆfin areas where it
does not perform well. The shrinkage parameter λslows the process down
even further, allowing more and different shaped trees to attack the resid-
uals. In general, statistical learning approaches that learn slowly tend to
perform well. Note that in boosting, unlike in bagging, the construction of
each tree depends strongly on the trees that have already been grown.
We have just described the process of boosting regression trees. Boosting
classification trees proceeds in a similar but slightly more complex way, and
the details are omitted 349
Algorithm 8.2 Boosting for Regression Trees
1. Setˆf(x)=0 andri=yifor alliin the training set.
2. Forb=1,2,...,B , repeat:
(a) Fit a tree ˆfbwithdsplits (d+1terminal nodes) to the training
data(X,r).
(b) Update ˆfby adding in a shrunken version of the new tree:
ˆf(x)←ˆf(x)+λˆfb(x). (8.10)
(c) Update the residuals,
ri←ri−λˆfb(xi). (8.11)
3. Output the boosted model,
ˆf(x)=B/summationdisplay
b=1λˆfb(x). (8.12)
Boosting has three tuning parameters:
1. The number of trees B. Unlike bagging and random forests, boosting
can overfit if Bis too large, although this overfitting tends to occur
slowly if at all. We use cross-validation to select B.
2. The shrinkage parameter λ, a small positive number. This 0.01or0.001,and
the right choice can depend on the problem. Very small λcan require
using a very large value of Bin order to achieve good performance.
3. The number dof splits in each tree, which controls the complexity
of the boosted ensemble. Often d=1works well, in which case each
tree is a stump, consisting of a single split. In this case, the boostedstumpensemble is fitting an additive model, since each term involves only a
single variable. More generally dis theinteraction depth , and controlsinteraction
depththe interaction order of the boosted model, since dsplits can involve
at mostdvariables.
InFigure set, in order to develop a classifier that can distinguish the normal
class from the 14 cancer classes. We display the test error as a function of
the total number of trees and the interaction depth d. We see that simple
stumps with an interaction depth of one perform well if enough of them
are included. This model outperforms the depth-two model, and both out-
perform a random forest. This highlights one difference between boosting
and random forests: in boosting, because the growth of a particular tree
takes into account the other trees that have already been grown, smaller350 8. Tree-Based Methods
0 1000 2000 3000 4000 50000.05 0.10 0.15 0.20 0.25Number of TreesTest Classification ErrorBoosting: depth=1Boosting: depth=2RandomForest: m=p
FIGURE 8.11.Results from performing boosting and random forests on the15-class gene expressiondata set in order to predictcancerversusnormal. The testerror is displayed as a function of the number of trees. For the two boosted models,λ=0.01. Depth-1 trees slightly outperform depth-2 trees, and both outperformthe random forest, although the standard errors are around 0.02, making none ofthese differences significant. The test error rate for a single tree is 24%.trees are typically sufficient. Using smaller trees can aid in interpretabilityas well; for instance, using stumps leads to an additive model.8.2.4 Bayesian Additive Regression TreesFinally, we discussBayesian additive regression trees(BART), another present BART for regression (as opposed to classification).Recall that bagging and random forests make predictions from an aver-age of regression trees, each of which is built using a random sample of dataand/or predictors. Each tree is built separately from the others. By con-trast, boosting uses a weighted sum of trees, each of which is constructedby fitting a tree to the residual of the current fit. Thus, each new tree at-tempts to capture signal that is not yet accounted for by the current setof trees. BART is related to both approaches: each tree is constructed ina random manner as in bagging and random forests, and each tree tries tocapture signal not yet accounted for by the current model, as in boosting.The main novelty in BART is the way in which new trees are generated.Before we introduce the BART algorithm, we define some notation. WeletKdenote the number of regression trees, andBthe number of iterationsfor which the BART algorithm will be run. The notationˆfbk(x)representsthe prediction atxfor thekth regression tree used in thebth iteration. Atthe end of each iteration, theKtrees from that iteration will be the first iteration of the BART algorithm, all trees are initialized 351
(a):ˆfb−1
k(X) (b): Possibility #1 for ˆfb
k(X)|X < 169.17X < 114.305X < 140.35−0.5031 0.2667 −0.2470 0.4079|X < 169.17X < 114.305X < 140.35−0.5110 0.2693 −0.2649 0.4221(c): Possibility #2 for ˆfb
k(X) (d): Possibility #3 for ˆfb
k(X)|X < 169.17
−0.1218 0.4079|X < 169.17X < 114.305X < 106.755X < 140.35−0.05089 −1.03100 0.26670 −0.24700 0.40790FIGURE 8.12. A schematic of perturbed trees from the BART algorithm. (a):
Thekth tree at the (b−1)st iteration, ˆfb−1
k(X), is displayed. Panels (b)–(d)
display three of many possibilities for ˆfb
k(X), given the form of ˆfb−1
k(X).(b):One
possibility is that ˆfb
k(X)has the same structure as ˆfb−1
k(X), but with different
predictions at the terminal nodes. (c):Another possibility is that ˆfb
k(X)results
from pruning ˆfb−1
k(X).(d):Alternatively, ˆfb
k(X)may have more terminal nodes
thanˆfb−1
k(X).
values divided by the total number of trees. Thus, subsequent iterations, BART updates each of the Ktrees, one at a
time. In the bth iteration, to update the kth tree, we subtract from each
response value the predictions from all but the kth tree, in order to obtain
apartial theith observation, i=1,...,n . Rather than fitting a fresh tree to this
partial residual, BART randomly chooses a perturbation to the tree from
the previous iteration ( ˆfb−1
k) from a set of possible perturbations, favoring
ones that improve the fit to the partial residual. There are two components
to this perturbation:
1. We may change the prediction in each terminal node of the tree.
Figure8.12illustrates examples of possible perturbations to a tree.
The output of BART is a collection of prediction 8. Tree-Based Methods
Algorithm 8.3 Bayesian Additive Regression Trees
1. Compute Forb=2,...,B :
(a) Fork=1,2,...,K :
i. Fori=1,...,n , compute the current partial Fit a new tree, ˆfb
k(x), tori, by randomly perturbing the
kth tree from the previous iteration, ˆfb−1
k(x). Perturbations
that improve the fit are favored.
(b) Compute ˆfb(x)=/summationtextK
k=1ˆfb
k(x).
4. Compute the mean after Lburn-in typically throw away the first few of these prediction models, since
models obtained in the earlier iterations — known as the burn-inperiodburn-in— tend not to provide very good results. We can let Ldenote the num-
ber of burn-in iterations; for instance, we might take L= 200 . Then, to
obtain a single prediction, we simply take the average after the burn-in
iterations, ˆf(x)=1
B−L/summationtextB
b=L+1ˆfb(x). However, it is also possible to com-
pute quantities other than the average: for instance, the percentiles of
ˆfL+1(x),..., ˆfB(x)provide a measure of uncertainty in the final predic-
tion. The overall BART procedure is summarized in Algorithm 8.3.
A key element of the BART approach is that in Step 3(a)ii., we do notfit
a fresh tree to the current partial residual: instead, we try to improve the fit
to the current partial residual by slightly modifying the tree obtained in the
previous iteration (see Figure 8.12). Roughly speaking, this guards against
overfitting since it limits how “hard” we fit the data in each iteration.
Furthermore, the individual trees are typically quite small. We limit the
tree size in order to avoid overfitting the data, which would be more likely
to occur if we grew very large trees.
Figure8.13shows the result of applying BART to the Heartdata, using
K= 200 trees, as the number of iterations is increased to 10,000. During
the initial iterations, the test and training errors jump around a bit. After
this initial burn-in period, the error rates settle down. We note that there
is only a small difference between the training error and the test error,
indicating that the tree perturbation process largely avoids 353
5 10 50 100 50050000.0 0.1 0.2 0.3 0.4 0.5Number of IterationsErrorBART Training ErrorBART Test ErrorBoosting Training ErrorBoosting Test Error
FIGURE 8.13. BART and boosting results for the Heartdata. Both training
and test errors are displayed. After a burn-in period of 100iterations (shown in
gray), the error rates for BART settle down. Boosting begins to overfit after a
few hundred 8.13.
We see that the test error for boosting approaches that of BART, but then
begins to increase as the number of iterations increases. Furthermore, the
training error for boosting decreases as the number of iterations increases,
indicating that boosting has overfit the data.
Though the details are outside of the scope of this book, it turns out
that the BART method can be viewed as a Bayesian approach to fitting an
ensemble of trees: each time we randomly perturb a tree in order to fit the
residuals, we are in fact drawing a new tree from a posterior distribution.
(Of course, this Bayesian connection is the motivation for BART’s name.)
Furthermore, Algorithm 8.3can be viewed as a Markov chain Monte CarloMarkov
chain Monte
Carloalgorithm for fitting the BART K,thenumber
ofiterations B,andthenumberofburn-initerations L.Wetypicallychoose
largevaluesfor BandK,andamoderatevaluefor L:forinstance, K= 200 ,
B=1,000, andL= 100 is a reasonable choice. BART has been shown to
have very impressive out-of-box performance — that is, it performs well
with minimal tuning.
8.2.5 Summary of Tree Ensemble Methods
Trees are an attractive choice of weak learner for an ensemble method
for a number of reasons, including their flexibility and ability to handle354 8. Tree-Based Methodspredictors of mixed types (i.e. qualitative as well as quantitative). We havenow seen four approaches for fitting an ensemble of trees: bagging, randomforests, boosting, and BART.• Inbagging, the trees are grown independently on random samples ofthe observations. Consequently, the trees tend to be quite similar toeach other. Thus, bagging can get caught in local optima and can failto thoroughly explore the model space.• Inrandom forests, the trees are once again grown independently onrandom samples of the observations. However, each split on each treeis performed using a random subset of the features, thereby decorre-lating the trees, and leading to a more thorough exploration of modelspace relative to bagging.• Inboosting, we only use the original data, and do not draw any ran-dom samples. The trees are grown successively, using a “slow” learn-ing approach: each new tree is fit to the signal that is left over fromthe earlier trees, and shrunken down before it is used.• InBART, we once again only make use of the original data, and wegrow the trees successively. However, each tree is perturbed in orderto avoid local minima and achieve a more thorough exploration ofthe model space.8.3 Lab: Tree-Based MethodsWe import some of our usual libraries at this top level.In[1]:import numpy as npimport pandas as pdfrom matplotlib.pyplot import subplotsfrom statsmodels.datasets import get_rdatasetimport sklearn.model_selection as skmfrom ISLP import load_data, confusion_tablefrom ISLP.models import ModelSpec as MSWe also collect the new imports needed for this lab.In[2]:from sklearn.tree import (DecisionTreeClassifier as DTC,DecisionTreeRegressor as DTR,plot_tree,export_text)from sklearn.metrics import (accuracy_score,log_loss)from sklearn.ensemble import \(RandomForestRegressor as RF,GradientBoostingRegressor as GBR)from ISLP.bart import BART8.3 Lab: Tree-Based Methods 355
8.3.1 Fitting Classification Trees
We first use classification trees to analyze the Carseats data set. In these
data,Salesis a continuous variable, and so we begin by recoding it as a
binary variable. We use the where()function to create a variable, calledwhere()High, which takes on a value of Yesif theSalesvariable exceeds 8, and
takes on a value of Nootherwise.
In[3]: Carseats = load_data( 'Carseats' )
High = np.where(Carseats.Sales > 8,
"Yes",
"No")
We now use DecisionTreeClassifier() to fit a classification tree in orderDecisionTree
Classifier() to predict Highusing all variables but Sales. To do so, we must form a
model matrix as we did when fitting regression models.
In[4]: model = MS(Carseats.columns.drop( 'Sales' ), intercept=False)
D=m o d e l . f i t _ t r a n s f o r m ( C a r s e a t s )
feature_names = list(D.columns)
X=n p . a s a r r a y ( D )
We have converted Dfrom a data frame to an array X, which is needed in
some of the analysis below. We also need the feature_names for annotating
our plots max_depth
(how deep to grow the tree), min_samples_split (minimum number of ob-
servations in a node to be eligible for splitting) and criterion (whether to
use Gini or cross-entropy as the split criterion). We also set random_state
for reproducibility; ties in the split criterion are broken at random.
In[5]: clf = DTC(criterion= 'entropy' ,
max_depth=3,
random_state=0)
clf.fit(X, High)
Out[5]: DecisionTreeClassifier(criterion= 'entropy' ,m a x _ d e p t h = 3 )
In our discussion of qualitative features in Section 3.3, we noted that for
a linear regression model such a feature could be represented by including a
matrix of dummy variables (one-hot-encoding) in the model matrix, using
the formula notation of statsmodels . As mentioned in Section 8.1, there is
a more natural way to handle qualitative features when building a decision
tree, that does not require such dummy variables; each split amounts to
partitioning the levels into two groups. However, the sklearnimplementa-
tion of decision trees does not take advantage of this approach; instead it
simply treats the one-hot-encoded levels as separate variables.
In[6]: accuracy_score(High, clf.predict(X))
Out[6]: 0.7275
With only the default arguments, the training error rate is 21%. For clas-
sification trees, we can access the value of the deviance using log_loss() ,log_loss()356 8. Tree-Based ˆpmk,
wherenmkis the number of observations in the mth terminal node that
belong to the kth class.
In[7]: resid_dev = np.sum(log_loss(High, clf.predict_proba(X)))
resid_dev
Out[7]: 0.4711
This is closely related to the entropy, defined in ( 8.7). A small deviance
indicates a tree that provides a good fit to the (training) data.
One of the most attractive properties of trees is that they can be graphi-
callydisplayed.Hereweusethe plot()functiontodisplaythetreestructure
(not shown here).
In[8]: ax = most important indicator of Salesappears to be ShelveLoc .
We can see a text representation of the tree using export_text() , whichexport_text()displays the split criterion (e.g. Price <= 92.5 ) for each branch. For leaf
nodesitshowstheoverallprediction( YesorNo).Wecanalsoseethenumber
of observations in that leaf that take on values of YesandNoby specifying
show_weights=True .
In[9]: |--- ShelveLoc[Good] <= 0.50
|| - - - P r i c e < = 9 2 . 5 0
||| - - - I n c o m e < = 5 7 . 0 0
|||| - - - w e i g h t s : [ 7 . 0 0 , 3 . 0 0 ] c l a s s : N o
||| - - - I n c o m e > 5 7 . 0 0
|||| - - - w e i g h t s : [ 7 . 0 0 , 2 9 . 0 0 ] c l a s s : Y e s
|| - - - P r i c e > 9 2 . 5 0
||| - - - A d v e r t i s i n g < = 1 3 . 5 0
|||| - - - w e i g h t s : [ 1 8 3 . 0 0 , 4 1 . 0 0 ] c l a s s : N o
||| - - - A d v e r t i s i n g > 1 3 . 5 0
|||| - - - w e i g h t s : [ 2 0 . 0 0 , 2 5 . 0 0 ] c l a s s : Y e s
|--- ShelveLoc[Good] > 0.50
|| - - - P r i c e < = 1 3 5 . 0 0
||| - - - U S [ Y e s ] < = 0 . 5 0
|||| - - - w e i g h t s : [ 6 . 0 0 , 1 1 . 0 0 ] c l a s s : Y e s
||| - - - U S [ Y e s ] > 0 . 5 0
|||| - - - w e i g h t s : [ 2 . 0 0 , 4 9 . 0 0 ] c l a s s : Y e s
|| - - - P r i c e > 1 3 5 . 0 0
||| - - - I n c o m e < = 4 6 . 0 0
|||| - - - w e i g h t s : [ 6 . 0 0 , 0 . 0 0 ] c l a s s : N o
||| - - - I n c o m e > 4 6 . 0 0
|||| - - - w e i g h t s : [ 5 . 0 0 , 6 . 0 0 ] c l a s s : Y e s8.3 Lab: Tree-Based Methods 357
In order to properly evaluate the performance of a classification tree on
these data, we must estimate the test error rather than simply computing
the training error. We split the observations into a training set and a test
set, build the tree using the training set, and evaluate its performance
on the test data. This pattern is similar to that in Chapter 6, with the
linear models replaced here by decision trees — the code for validation is
almost identical. This approach leads to correct predictions for 68.5% of
the locations in the test data set.
In[10]: validation = = 'test_score' ]
Out[10]: array([0.685])
Next, we consider whether pruning the tree might lead to improved clas-
sification performance. We first split the data into a training and test set.
We will use cross-validation to prune the tree on the training set, and then
evaluate the performance of the pruned tree on the test set.
In[11]: (X_train,
X_test,
High_train,
High_test) = first refit the full tree on the training set; here we do not set a max_depth
parameter, since we will learn that through cross-validation.
In[12]: clf = DTC(criterion= 'entropy' ,r a n d o m _ s t a t e = 0 )
clf.fit(X_train, High_train)
accuracy_score(High_test, clf.predict(X_test))
Out[12]: 0.735
Next we use the cost_complexity_pruning_path() method of clfto values.
In[13]: ccp_path = clf.cost_complexity_pruning_path(X_train, High_train)
kfold = yields a set of impurities and αvalues from which we can extract an
optimal one by cross-validation.
In[14]: grid = skm.GridSearchCV(clf,
{'ccp_alpha' :c c p _ p a t h . c c p _ a l p h a s } ,
refit=True,358 8. Tree-Based High_train)grid.best_score_Out[14]:0.685Let’s take a look at the pruned true.In[15]:ax = subplots(figsize=(12, 12))[1]best_ = tree with 30 terminal nodes results in the lowest cross-validation errorrate, with an accuracy of 68.5%. How well does this pruned tree performon the test data set? Once again, we apply = No YesPredictedNo 108 61Yes 10 21Now 72.0% of the test observations are correctly classified, which isslightly worse than the error for the full tree (with 35 leaves). So cross-validation has not helped us much here; it only pruned off 5 leaves, ata cost of a slightly worse error. These results would change if we were tochange the random number seeds above; even though cross-validation givesan unbiased approach to model selection, it does have variance.8.3.2 Fitting Regression TreesHere we fit a regression tree to theBostondata set. The steps are similarto those for classification trees.In[18]:Boston = load_data("Boston")model = MS(Boston.columns.drop('medv'), intercept=False)D=m o d e l . f i t _ t r a n s f o r m ( B o s t o n )feature_names = list(D.columns)X=n p . a s a r r a y ( D )8.3 Lab: Tree-Based Methods 359First, we split the data into training and test sets, and fit the tree to thetraining data. Here we use 30% of the data for the test set.In[19]:(X_train,X_test,y_train,y_test) = formed our training and test data sets, we fit the regression tree.In[20]:reg = DTR(max_depth=3)reg.fit(X_train, y_train)ax = variablelstatmeasures the percentage of individuals with lowersocioeconomic status. The tree indicates that lower values oflstatcorre-spond to more expensive houses. The tree predicts a median house priceof $12,042 for small-sized homes (rm < 6.8), in suburbs in which residentshave low socioeconomic status (lstat > 14.4) and the crime-rate is mod-erate (crim > 5.8).Now we use the cross-validation function to see whether pruning the treewill improve performance.In[21]:ccp_path = reg.cost_complexity_pruning_path(X_train, y_train)kfold = skm.KFold(5,shuffle=True,random_state=10)grid = skm.GridSearchCV(reg,{'ccp_alpha':c c p _ p a t h . c c p _ a l p h a s } r i d . f i t ( X _ t r a i n ,y _ t r a i n )In keeping with the cross-validation results, we use the pruned tree tomake predictions on the test set.In[22]:best_ = grid.best_estimator_np.mean((y_test - best_.predict(X_test))**2)Out[22]:28.07In other words, the test set MSE associated with the regression tree is28.07. The square root of the MSE is therefore around 5.30, indicating thatthis model leads to test predictions that are within around $5300 of thetrue median home value for the suburb.Let’s plot the best tree to see how interpretable it is.In[23]:ax = 8. Tree-Based Methods8.3.3 Bagging and Random ForestsHere we apply bagging and random forests to theBostondata, using theRandomForestRegressor()from thesklearn.ensemblepackage. Recall is simply a special case of a random forest withm=p. Therefore,theRandomForestRegressor()function can be used to perform both baggingand random forests. We start with bagging.In[24]:bag_boston = RF(max_features=X_train.shape[1], random_state=0)bag_boston.fit(X_train, random_state=0)The argumentmax_featuresindicates that all 12 predictors should beconsidered for each split of the tree — in other words, that bagging shouldbe done. How well does this bagged model perform on the test set?In[25]:ax = subplots(figsize=(8,8))[1]y_hat_bag = y_test)np.mean((y_test - y_hat_bag)**2)Out[25]:14.63The test set MSE associated with the bagged regression tree is 14.63, abouthalf that obtained using an optimally-pruned single tree. We could = y_train)y_hat_bag = bag_boston.predict(X_test)np.mean((y_test - y_hat_bag)**2)Out[26]:14.61There is not much change. Bagging and random forests cannot overfit byincreasing the number of trees, but can underfit if the number is too small.Growing a random forest proceeds in exactly the same way, exceptthat we use a smaller value of themax_featuresargument. By default,RandomForestRegressor()usespvariables when building a random forest ofregression trees (i.e. it defaults to bagging), usemax_features=6.In[27]:RF_boston = y_train)y_hat_RF = RF_boston.predict(X_test)np.mean((y_test - y_hat_RF)**2)Out[27]:20.04The test set MSE is 20.04; this indicates that random forests did some-what worse than bagging in this case. Extracting thefeature_importances_values from the fitted model, we can view the importance of each variable.8.3 Lab: Tree-Based Methods 361
In[28]: feature_imp = pd.DataFrame(
{'importance' 'importance' ,a s c e n d i n g = F a l s e )
Out[28]: importance
lstat 0.368683
rm 0.333842
ptratio 0.057306
indus 0.053303
crim 0.052426
dis 0.042493
nox 0.034410
age 0.024327
tax 0.022368
rad 0.005048
zn 0.003238
chas 0.002557
Thisisarelativemeasure ofthetotaldecrease innodeimpuritythat results
from splits over that variable, averaged over all trees (this was plotted in
Figure8.9for a model fit to the Heartdata).
The results indicate that across all of the trees considered in the random
forest, the wealth level of the community ( lstat) and the house size ( rm)
are by far the two most important variables.
8.3.4 Boosting
Here we use GradientBoostingRegressor() fromsklearn.ensemble to fitGradient
Boosting
Regressor()boosted regression trees to the Bostondata set. For classification we would
useGradientBoostingClassifier() . The argument n_estimators=5000 indi-
Gradient
Boosting
Classifier()cates that we want 5000 trees, and the option max_depth=3 limits the depth
of each tree. The argument learning_rate is theλmentioned earlier in the
description of boosting.
In[29]: boost_boston = y_train)
We can see how the training error decreases with the train_score_ at-
tribute. To get an idea of how the test error decreases we can use the
staged_predict() method to get the predicted values along the path.
In[30]: test_error = np.zeros_like(boost_boston.train_score_)
for idx, y_ in = np.mean((y_test - y_)**2)
plot_idx = = )362 8. Tree-Based now use the boosted model to predict medvon the test set:
In[31]: y_hat_boost = boost_boston.predict(X_test);
np.mean((y_test - y_hat_boost)**2)
Out[31]: 14.48
The test MSE obtained is 14.48, similar to the test MSE for bagging. If we
want to, we can perform boosting with a different value of the shrinkage
parameter we take λ=0.2.
In[32]: boost_boston = = boost_boston.predict(X_test);
np.mean((y_test - y_hat_boost)**2)
Out[32]: 14.50
In this case, using λ=0.2leads to a almost the same test MSE as when
usingλ=0.001.
8.3.5 Bayesian Additive Regression Trees
In this section we demonstrate a Pythonimplementation of BART found in
theISLP.bart package. We fit a model to the Bostonhousing data set. This
BART()estimator is designed for quantitative outcome variables, thoughBART()other implementations are available for fitting logistic and probit models
to categorical outcomes.
In[33]: bart_boston = BART(random_state=0, burnin=5, ndraw=15)
bart_boston.fit(X_train, y_train)
Out[33]: BART(burnin=5, ndraw=15, random_state=0)
On this data set, with this split into test and training, we see that the
test error of BART is similar to that of random forest.
In[34]: yhat_test = - yhat_test)**2)
Out[34]: 20.92
We can check how many times each variable appeared in the collection
of trees. This gives a summary similar to the variable importance plot for
boosting and random forests.8.4 Exercises 363
In[35]: var_inclusion = crim 25.333333
zn 27.000000
indus 21.266667
chas 20.466667
nox 25.400000
rm 32.400000
age 26.133333
dis 25.666667
rad 24.666667
tax 23.933333
ptratio 25.000000
lstat 31.866667
dtype: float64
8.4 Exercises
Conceptual
1. Draw an example (of your own invention) of a partition of two-
dimensional feature space that could result from recursive binary
splitting. Your example should contain at least six regions. Draw a
decision tree corresponding to this partition. Be sure to label all as-
pects of your figures, including the regions R1,R2,..., the cutpoints
t1,t2,..., and so forth.
Hint: Your result should look something like Figures 8.1and8.2.
2. It is mentioned in Section 8.2.3that boosting using depth-one trees
(orstumps) leads to an additivemodel: that is, a model of the why this is the case. You can begin with ( 8.12) in
Algorithm 8.2.
3. Consider the Gini index, classification error, and entropy in a simple
classification setting with two classes. Create a single plot that dis-
plays each of these quantities as a function of ˆpm1. Thex-axis should
displayˆpm1, ranging from 0to1, and the y-axis should display the
value of the Gini index, classification error, and entropy.
Hint: In a setting with two classes, ˆpm1=1−ˆpm2. You could make
this plot by hand, but it will be much easier to make in R.
4. This question relates to the plots in Figure 8.14.364 8. Tree-Based Methods| X2 < 1 
X1 < 1 X1 < 0 X2 < 2 -1.80 -1.06  0.21  0.63  2.49  
 
5 
15 
10 
0 
3 
0 
1 
X2 
X1 
0 
1 
FIGURE 8.14. Left: A partition of the predictor space corresponding to Exer-
cise4a.Right: A tree corresponding to Exercise 4b.
(a) Sketch the tree corresponding to the partition of the predictor
space illustrated in the left-hand panel of Figure 8.14. The num-
bers inside the boxes indicate the mean of Ywithin each region.
(b) Create a diagram similar to the left-hand panel of Figure 8.14,
using the tree illustrated in the right-hand panel of the same
figure. You should divide up the predictor space into the correct
regions, and indicate the mean for each region.
5. Suppose we produce ten bootstrapped samples from a data set
containing red and green classes. We then apply a classification tree
to each bootstrapped sample and, for a specific value of X, produce
10estimates of P(Class is Red are two common ways to combine these results together into a
single class prediction. One is the majority vote approach discussed in
this chapter. The second approach is to classify based on the these two approaches?
6. Provide a detailed explanation of the algorithm that is used to fit a
regression tree.
Applied
7. In Section 8.3.3, we applied random forests to the Bostondata using
max_features = 6 and using n_estimators = 100 andn_estimators =
500. Create a plot displaying the test error resulting from random
forests on this data set for a more comprehensive range of values
formax_features andn_estimators . You can model your plot after
Figure8.10. Describe the results obtained.
8. Inthelab,aclassificationtreewasappliedtothe Carseats datasetaf-
ter converting Salesinto a qualitative response variable. Now we will
seek to predict Salesusing regression trees and related approaches,
treating the response as a quantitative variable.8.4 Exercises 365(a) Split the data set into a training set and a test set.(b) Fit a regression tree to the training set. Plot the tree, and inter-pret the results. What test MSE do you obtain?(c) Use cross-validation in order to determine the optimal level oftree complexity. Does pruning the tree improve the test MSE?(d) Use the bagging approach in order to analyze this data. Whattest MSE do you obtain? Use thefeature_importance_values todetermine which variables are most important.(e) Use random forests to analyze this data. What test MSE doyou obtain? Use thefeature_importance_values to of variables considered at each split, on the error rateobtained.(f) Now analyze the data using BART, and report your results.9. This problem involves theOJdata set which is part of theISLPpackage.(a) Create a training set containing a random sample of800obser-vations, and a test set containing the remaining observations.(b) Fit a tree to the training data, withPurchaseas the responseand the other variables as predictors. What is the training errorrate?(c) Create a plot of the tree, and interpret the results. How manyterminal nodes does the tree have?(d) Use theexport_tree()function to produce a text summary ofthe fitted tree. Pick one of the terminal nodes, and interpret theinformation displayed.(e) Predict the response on the test data, and produce a confusionmatrix comparing the test labels to the predicted test labels.What is the test error rate?(f) Use cross-validation on the training set in order to determinethe optimal tree size.(g) Produce a plot with tree size on thex-axis and cross-validatedclassification error rate on they-axis.(h) Which tree size corresponds to the lowest cross-validated classi-fication error rate?(i) Produce a pruned tree corresponding to the optimal tree sizeobtained using cross-validation. If cross-validation does not leadto selection of a pruned tree, then create a pruned tree with fiveterminal nodes.(j) Compare the training error rates between the pruned and un-pruned trees. Which is higher?(k) Compare the test error rates between the pruned and unprunedtrees. Which is higher?366 8. Tree-Based Methods
10. We now use boosting to predict Salaryin theHittersdata set.
(a) Remove the observations for whom the salary information is
unknown, and then log-transform the salaries.
(b) Create a training set consisting of the first 200 observations, and
a test set consisting of the remaining observations.
(c) Perform boosting on the training set with 1,000 trees for a range
of values of the shrinkage parameter λ. Produce a plot with
different shrinkage values on the x-axis and the corresponding
training set MSE on the y-axis.
(d) Produce a plot with different shrinkage values on the x-axis and
the corresponding test set MSE on the y-axis.
(e) Compare the test MSE of boosting to the test MSE that results
from applying two of the regression approaches seen in
Chapters 3and6.
(f) Which variables appear to be the most important predictors in
the boosted model?
(g) Now apply bagging to the training set. What is the test set MSE
for this approach?
11. This question uses the Caravandata set.
(a) Create a training set consisting of the first 1,000 observations,
and a test set consisting of the remaining observations.
(b) Fit a boosting model to the training set with Purchase as the
response and the other variables as predictors. Use 1,000 trees,
and a shrinkage value of 0.01. Which predictors appear to be
the most important?
(c) Use the boosting model to predict the response on the test of purchase is greater than 20 % . Form a confusion ma-
trix. What fraction of the people predicted to make a purchase
do in fact make one? How does this compare with the results
obtained from applying KNN or logistic regression to this data
set?
12. Apply boosting, bagging, random forests, and BART to a data set
of your choice. Be sure to fit the models on a training set and to
evaluate their performance on a test set. How accurate are the results
compared to simple methods like linear or logistic regression? Which
of these approaches yields the best performance?9
Support Vector Machines
In this chapter, we discuss the support vector machine (SVM), an approach
for classification that was developed in the computer science community in
the 1990s and that has grown in popularity since then. SVMs have been
shown to perform well in a variety of settings, and are often considered one
of the best “out of the box” classifiers.
The support vector machine is a generalization of a simple and intu-
itive classifier called the maximal margin classifier , which we introduce in
Section9.1. Though it is elegant and simple, we will see that this classifier
unfortunately cannot be applied to most data sets, since it requires that
the classes be separable by a linear boundary. In Section 9.2, we introduce
thesupport vector classifier , an extension of the maximal margin classifier
that can be applied in a broader range of cases. Section 9.3introduces the
support vector machine , which is a further extension of the support vec-
tor classifier in order to accommodate non-linear class boundaries. Support
vector machines are intended for the binary classification setting in which
there are two classes; in Section 9.4we discuss extensions of support vector
machines to the case of more than two classes. In Section 9.5we such as logistic regression.
People often loosely refer to the maximal margin classifier, the support
vector classifier, and the support vector machine as “support vector
machines”. To avoid confusion, we will carefully distinguish between these
three notions in this chapter.
9.1 Maximal Margin Classifier
In this section, we define a hyperplane and introduce the concept of an
optimal separating hyperplane.
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_9  367368 9. Support Vector Machines
9.1.1 What Is a Hyperplane?
In ap-dimensional space, a hyperplane is a flat affine subspace ofhyperplanedimension p−1.1For instance, in two dimensions, a hyperplane is a flat
one-dimensional subspace—in other words, a line. In three dimensions, a
hyperplane is a flat two-dimensional subspace—that is, a plane. In p>3
dimensions, it can be hard to visualize a hyperplane, but the notion of a
(p−1)-dimensional flat subspace still applies.
The mathematical definition of a hyperplane is quite simple. In two di-
mensions, a hyperplane is defined by the equation
β0+β1X1+β2X2=0 (9.1)
for parameters β0,β1, andβ2. When we say that ( 9.1) “defines” the hyper-
plane, we mean that any X=(X1,X2)Tfor which ( 9.1) holds is a point
on the hyperplane. Note that ( 9.1) is simply the equation of a line, since
indeed in two dimensions a hyperplane is a line.
Equation 9.1can be easily extended to the p-dimensional setting:
β0+β1X1+β2X2+···+βpXp=0 (9.2)
defines a p-dimensional hyperplane, again in the sense that if a point X=
(X1,X2,...,X p)Tinp-dimensional space (i.e. a vector of length p) satisfies
(9.2), thenXlies on the hyperplane.
Now, suppose that Xdoes not satisfy ( 9.2); rather,
β0+β1X1+β2X2+···+βpXp>0. (9.3)
Then this tells us that Xlies to one side of the hyperplane. On the other
hand, if
β0+β1X1+β2X2+···+βpXp<0, (9.4)
thenXlies on the other side of the hyperplane. So we can think of the
hyperplane as dividing p-dimensional space into two halves. One can sign of the left-hand side of ( 9.2). A hyperplane in two-dimensional
space is shown in Figure 9.1.
9.1.2 Classification Using a Separating Hyperplane
Now suppose that we have an n×pdata matrix Xthat consists of n
training observations in p-dimensional space,
x1=
x11
...
x1p
,...,x n=
xn1
...
xnp
, (9.5)
and that these observations fall into two classes—that is, y1,...,y n∈
{−1,1}where−1represents one class and 1the other class. We also have a
1The word affineindicates that the subspace need not pass through the origin.9.1 Maximal Margin Classifier 369
−1.5 −1.0 −0.5 0.0 0.5 1.0 1.5−1.5 −1.0 −0.5 0.0 0.5 1.0 1.5X1X2
FIGURE 9.1. The hyperplane 1+2 X1+3X2=0is shown. The blue region is
the set of points for which 1+2 X1+3X2>0, and the purple region is the set of
points for which 1+2 X1+3X2<0.
test observation, a p-vector of observed features x∗=/parenleftbigx∗
1... x∗
p/parenrightbigT. Our
goal is to develop a classifier based on the training data that will correctly
classify the test observation using its feature measurements. We have seen
a number of approaches for this task, such as linear discriminant analysis
and logistic regression in Chapter 4, and classification trees, bagging, and
boosting in Chapter 8. We will now see a new approach that is based upon
the concept of a separating hyperplane .separating
hyperplaneSuppose that it is possible to construct a hyperplane that separates the
training observations perfectly according to their class labels. Examples
of three such separating hyperplanes are shown in the left-hand panel of
Figure9.2. We can label the observations from the blue class as yi=1and
those from the purple class as yi=−1. Then a separating hyperplane has
the property that
β0+β1xi1+β2xi2+···+βpxip>0 ifyi=1, (9.6)
and
β0+β1xi1+β2xi2+···+βpxip<0 ifyi=−1. (9.7)
Equivalently, a separating hyperplane has the property that
yi(β0+β1xi1+β2xi2+···+βpxip)>0 (9.8)
for alli=1,...,n a test observation is assigned a class depending on which side of
the hyperplane it is located. The right-hand panel of Figure 9.2shows
an example of such a classifier. That is, we classify the test observation x∗
basedonthesignof we assign the test observation to class 1, and iff(x∗)is negative, then
we assign it to class −1. We can also make use of the magnitude off(x∗). If370 9. Support Vector Machines
−1 0 1 2 3−1 0 1 2 3−1 0 1 2 3−1 0 1 2 3X1X1
X2X2
FIGURE 9.2. Left:There are two classes of observations, shown in blue and
in purple, each of which has measurements on two variables. Three separating
hyperplanes, out of many possible, are shown in black. Right:A separating hy-
perplane is shown in black. The blue and purple grid indicates the decision rule
made by a classifier based on this separating hyperplane: a test observation that
falls in the blue portion of the grid will be assigned to the blue class, and a test
observation that falls into the purple portion of the grid will be assigned to the
purple class.
f(x∗)is far from zero, then this means that x∗lies far from the hyperplane,
and so we can be confident about our class assignment for x∗. On the other
hand,iff(x∗)isclosetozero,then x∗islocatednearthehyperplane,andso
we are less certain about the class assignment for x∗. Not surprisingly, and
as we see in Figure 9.2, a classifier that is based on a separating hyperplane
leads to a linear decision boundary.
9.1.3 The Maximal Margin Classifier
In general, if our data can be perfectly separated using a hyperplane, then
there will in fact exist an infinite number of such hyperplanes. This possible separating hyperplanes are shown in the left-hand panel
of Figure 9.2. In order to construct a classifier based upon a separating
hyperplane, we must have a reasonable way to decide which of the infinite
possible separating hyperplanes to use.
A natural choice is the maximal margin hyperplane (also known as themaximal
margin
hyperplaneoptimal separating hyperplane ), which is the separating hyperplane that
optimal
separating
hyperplaneis farthest from the training observations. That is, we can compute the
(perpendicular) distance from each training observation to a given separat-
ing hyperplane; the smallest such distance is the minimal distance from the
observations to the hyperplane, and is known as the margin. The maximal
margin margin hyperplane is the separating hyperplane for which the margin is
largest—that is, it is the hyperplane that has the farthest minimum dis-
tance to the training observations. We can then classify a test Maximal Margin Classifier 371
−10123−10123
X1X2
FIGURE 9.3. There are two classes of observations, shown in blue and in
purple. The maximal margin hyperplane is shown as a solid line. The margin
is the distance from the solid line to either of the dashed lines. The two blue
points and the purple point that lie on the dashed lines are the support vectors,
and the distance from those points to the hyperplane is indicated by arrows. The
purple and blue grid indicates the decision rule made by a classifier based on this
separating hyperplane.
as themaximal margin classifier . We hope that a classifier that has a largemaximal
margin
classifiermargin on the training data will also have a large margin on the test data,
and hence will classify the test observations correctly. Although the maxi-
mal margin classifier is often successful, it can also lead to overfitting when
pis large.
Ifβ0,β1,...,βpare the coefficients of the maximal margin hyperplane,
then the maximal margin classifier classifies the test observation x∗based
on the sign of the maximal margin hyperplane on the data set of
Figure9.2. Comparing the right-hand panel of Figure 9.2to Figure 9.3,
we see that the maximal margin hyperplane shown in Figure 9.3does in-
deed result in a greater minimal distance between the observations and the
separating hyperplane—that is, a larger margin. In a sense, the maximal
margin hyperplane represents the mid-line of the widest “slab” that we can
insert between the two classes.
ExaminingFigure from the maximal margin hyperplane and lie along the dashed lines
indicating the width of the margin. These three observations are known as
support vectors ,sincetheyarevectorsin p-dimensionalspace(inFigure 9.3,support
vector p=2) and they “support” the maximal margin hyperplane in the sense
that if these points were moved slightly then the maximal margin hyper-
plane would move as well. Interestingly, the maximal margin hyperplane
depends directly on the support vectors, but not on the other provided that the observation’s movement does not cause it to372 9. Support Vector Machines
cross the boundary set by the margin. The fact that the maximal margin
hyperplane depends directly on only a small subset of the observations is
an important property that will arise later in this chapter when we discuss
the support vector classifier and support vector machines.
9.1.4 Construction of the Maximal Margin Classifier
We now consider the task of constructing the maximal margin hyperplane
based on a set of ntraining observations x1,...,x n∈Rpand associated
class labels y1,...,y n∈{−1,1}. Briefly, the maximal margin hyperplane
is the solution to the optimization problem
maximize
β0,β1,...,βp,MM (9.9)
subject top/summationdisplay
j=1β2
j=1, (9.10)
yi(β0+β1xi1+β2xi2+···+βpxip)≥M∀i=1, . . . , n. (9.11)
This optimization problem ( 9.9)–(9.11) is actually simpler than it looks.
First of all, the constraint in ( 9.11) that each observation will be on the correct side of the hyper-
plane, provided that Mis positive. (Actually, for each observation to be
on the correct side of the hyperplane we would simply need yi(β0+β1xi1+
β2xi2+···+βpxip)>0, so the constraint in ( 9.11) in fact requires that each
observation be on the correct side of the hyperplane, with some cushion,
provided that Mis positive.)
Second,notethat( a hyperplane, then so does
k(β0+β1xi1+β2xi2+···+βpxip)=0 for anyk/negationslash=0. However, ( 9.10) adds
meaningto( from the ith observation to the hyperplane is given by
yi(β0+β1xi1+β2xi2+···+βpxip).
Therefore, the constraints ( 9.10) and (9.11) ensure that each observation
is on the correct side of the hyperplane and at least a distance Mfrom the
hyperplane. Hence, Mrepresents the margin of our hyperplane, and the
optimization problem chooses β0,β1,...,βpto maximize M. This is exactly
the definition of the maximal margin hyperplane! The problem ( 9.9)–(9.11)
can be solved efficiently, but details of this optimization are outside of the
scope of this book.
9.1.5 The Non-separable Case
The maximal margin classifier is a very natural way to perform classifi-
cation,if a separating hyperplane exists . However, as we have hinted, in
many cases no separating hyperplane exists, and so there is no maximal9.2 Support Vector Classifiers 373
0123−1.0 −0.5 0.0 0.5 1.0 1.5 2.0X1X2
FIGURE 9.4. There are two classes of observations, shown in blue and in
purple. In this case, the two classes are not separable by a hyperplane, and so the
maximal margin classifier cannot be used.
margin classifier. In this case, the optimization problem ( 9.9)–(9.11) has no
solution with M> 0. An example is shown in Figure 9.4. In this case, we
cannotexactlyseparate the two classes. However, as we will see in the next
section, we can extend the concept of a separating hyperplane in order to
develop a hyperplane that almostseparates the classes, using a so-called
soft margin . The generalization of the maximal margin classifier to the
non-separable case is known as the support vector classifier .
9.2 Support Vector Classifiers
9.2.1 Overview of the Support Vector Classifier
In Figure 9.4, we see that observations that belong to two classes are not
necessarily separable by a hyperplane. In fact, even if a separating hyper-
plane does exist, then there are instances in which a classifier based on
a separating hyperplane might not be desirable. A classifier based on a
separating hyperplane will necessarily perfectly classify all of the training
observations; this can lead to sensitivity to individual observations. An ex-
ample is shown in Figure 9.5. The addition of a single observation in the
right-hand panel of Figure 9.5leads to a dramatic change in the maxi-
mal margin hyperplane. The resulting maximal margin hyperplane is not
satisfactory—for one thing, it has only a tiny margin. This is problematic
because as discussed previously, the distance of an observation from the
hyperplane can be seen as a measure of our confidence that the obser-
vation was correctly classified. Moreover, the fact that the maximal mar-
gin hyperplane is extremely sensitive to a change in a single observation
suggests that it may have overfit the training data.
In this case, we might be willing to consider a classifier based on a hy-
perplane that does notperfectly separate the two classes, in the interest of374 9. Support Vector Machines
−1 0 1 2 3−1 0 1 2 3−1 0 1 2 3−1 0 1 2 3X1X1X2X2
FIGURE 9.5. Left:Two classes of observations are shown in blue and in
purple, along with the maximal margin hyperplane. Right:An additional blue
observation has been added, leading to a dramatic shift in the maximal margin
hyperplane shown as a solid line. The dashed line indicates the maximal margin
hyperplane that was obtained in the absence of this additional point.
• Greater robustness to individual observations, and
• Better classification of mostof the training observations.
That is, it could be worthwhile to misclassify a few training observations
in order to do a better job in classifying the remaining observations.
Thesupport vector classifier , sometimes called a soft margin classifier ,support
vector
classifier
soft margin
classifierdoes exactly this. Rather than seeking the largest possible margin so that
every observation is not only on the correct side of the hyperplane but
also on the correct side of the margin, we instead allow some observations
to be on the incorrect side of the margin, or even the incorrect side of
the hyperplane. (The margin is softbecause it can be violated by some
of the training observations.) An example is shown in the left-hand panel
ofFigure a small subset of the observations are on the wrong side of the
margin.
An observation can be not only on the wrong side of the margin, but also
on the wrong side of the hyperplane. In fact, when there is no support vector classifier. The right-hand panel of Figure 9.6illustrates
such a scenario.
9.2.2 Details of the Support Vector Classifier
The support vector classifier classifies a test observation depending on
which side of a hyperplane it lies. The hyperplane is chosen to correctly
separate most of the training observations into the two classes, but may9.2 Support Vector Classifiers 375
−0.50.0 0.5 1.0 1.5 2.0 2.5−1 0 1 2 3 412345678910
−0.50.0 0.5 1.0 1.5 2.0 2.5−1 0 1 2 3 4123456789101112X1X1
X2X2
FIGURE 9.6. Left:A support vector classifier was fit to a small data set. The
hyperplane is shown as a solid line and the margins are shown as dashed lines.
Purple observations: Observations 3,4,5, and6are on the correct side of the
margin, observation 2is on the margin, and observation 1 is on the wrong side of
the margin. Blue observations: Observations 7and10are on the correct side of
the margin, observation 9is on the margin, and observation 8is on the wrong side
of the margin. No observations are on the wrong side of the hyperplane. Right:
Same as left panel with two additional points, 11and12. These two observations
are on the wrong side of the hyperplane and the wrong side of the (9.12)
subject top/summationdisplay
j=1β2
j=1, (9.15)
whereCis a nonnegative tuning parameter. As in ( 9.11),Mis the width
of the margin; we seek to make this quantity as large as possible. In ( 9.14),
/epsilon11,...,/epsilon1nareslack variables that allow individual observations to be onslack
variablethe wrong side of the margin or the hyperplane; we will explain them in
greater detail momentarily. Once we have solved ( 9.12)–(9.15), we classify
a test observation x∗as before, by simply determining on which side of the
hyperplane it lies. That is, we classify the test observation based on the
sign off(x∗)=β0+β1x∗
1+···+βpx∗
p.
The problem ( 9.12)–(9.15) seems complex, but insight into its behavior
can be made through a series of simple observations presented below. First
of all, the slack variable /epsilon1itells us where the ith observation is located,
relative to the hyperplane and relative to the margin. If /epsilon1i=0then the ith
observation is on the correct side of the margin, as we saw in Section 9.1.4.
If/epsilon1i>0then the ith observation is on the wrong side of the margin, and
we say that the ith observation has violatedthe margin. If /epsilon1i>1then it is
on the wrong side of the hyperplane.376 9. Support Vector Machines
We now consider the role of the tuning parameter C. In (9.15),Cbounds
the sum of the /epsilon1i’s, and so it determines the number and severity of the vio-
lations to the margin (and to the hyperplane) that we will tolerate. We can
think of Cas abudgetfor the amount that the margin can be violated
by thenobservations. If C=0 then there is no budget for violations to
the margin, and it must be the case that /epsilon11=···=/epsilon1n=0, in which case
(9.12)–(9.15) simply amounts to the maximal margin hyperplane optimiza-
tion problem ( 9.9)–(9.11). (Of course, a maximal margin hyperplane exists
only if the two classes are separable.) For C>0no more than Cobserva-
tions can be on the wrong side of the hyperplane, because if an observation
is on the wrong side of the hyperplane then /epsilon1i>1, and (9.15) requires
that/summationtextn
i=1/epsilon1i≤C. As the budget Cincreases, we become more tolerant of
violations to the margin, and so the margin will widen. Conversely, as C
decreases, we become less tolerant of violations to the margin and so the
margin narrows. An example is shown in Figure 9.7.
Inpractice, As with the tuning parameters that we have seen through-
out this book, Ccontrols the bias-variance trade-off of the statistical learn-
ing technique. When Cis small, we seek narrow margins that are rarely
violated; this amounts to a classifier that is highly fit to the data, which
may have low bias but high variance. On the other hand, when Cis larger,
the margin is wider and we allow more violations to it; this amounts to
fitting the data less hard and obtaining a classifier that is potentially more
biased but may have lower variance.
The optimization problem ( 9.12)–(9.15) has a very interesting property:
it turns out that only observations that either lie on the margin or that
violate the margin will affect the hyperplane, and hence the classifier ob-
tained. In other words, an observation that lies strictly on the correct side
of the margin does not affect the support vector classifier! Changing the
position of that observation would not change the classifier at all, provided
that its position remains on the correct side of the margin. Observations
that lie directly on the margin, or on the wrong side of the margin for
their class, are known as support vectors . These observations do affect the
support vector classifier.
The fact that only support vectors affect the classifier is in line with our
previous assertion that Ccontrols the bias-variance trade-off of the support
vector classifier. When the tuning parameter Cis large, then the margin is
wide, many observations violate the margin, and so there are many support
vectors. In this case, many observations are involved in determining the
hyperplane. The top left panel in Figure 9.7illustrates this setting: this
classifier has low variance (since many observations are support vectors)
but potentially high bias. In contrast, if Cis small, then there will be fewer
support vectors and hence the resulting classifier will have low bias but
high variance. The bottom right panel in Figure 9.7illustrates this setting,
with only eight support vectors.
The fact that the support vector classifier’s decision rule is based only
on a potentially small subset of the training observations (the support vec-
tors) means that it is quite robust to the behavior of observations that
are far away from the hyperplane. This property is distinct from some of9.3 Support Vector Machines 377
−1012−3 −2 −1 0 1 2 3−1012−3 −2 −1 0 1 2 3
−1012−3 −2 −1 0 1 2 3−1012−3 −2 −1 0 1 2 3X1X1X1X1X2X2
X2X2
FIGURE 9.7. A support vector classifier was fit using four different values
of the tuning parameter Cin (9.12)–(9.15). The largest value of Cwas used
in the top left panel, and smaller values were used in the top right, bottom left,
and bottom right panels. When Cis large, then there is a high tolerance for
observations being on the wrong side of the margin, and so the margin will be
large. As Cdecreases, the tolerance for observations being on the wrong side of
the margin decreases, and the margin narrows.
the other classification methods that we have seen in preceding chapters,
such as linear discriminant analysis. Recall that the LDA classification rule
depends on the mean of allof the observations within each class, as well as
the within-class covariance matrix computed using allof the observations.
In contrast, logistic regression, unlike LDA, has very low sensitivity to ob-
servations far from the decision boundary. In fact we will see in Section 9.5
that the support vector classifier and logistic regression are closely related.
9.3 Support Vector Machines
We first discuss a general mechanism for converting a linear classifier into
one that produces non-linear decision boundaries. We then introduce the
support vector machine, which does this in an automatic way.378 9. Support Vector Machines
−4 −2 0 2 4−4 −2 0 2 4−4 −2 0 2 4−4 −2 0 2 4X1X1X2X2
FIGURE 9.8. Left:The observations fall into two classes, with a non-lin-
ear boundary between them. Right:The support vector classifier seeks a linear
boundary, and consequently performs very poorly.
9.3.1 Classification with Non-Linear Decision Boundaries
The support vector classifier is a natural approach for classification in the
two-class setting, if the boundary between the two classes is linear. How-
ever, in practice we are sometimes faced with non-linear class boundaries.
For instance, consider the data in the left-hand panel of Figure 9.8. It is
clear that a support vector classifier or any linear classifier will perform
poorly here. Indeed, the support vector classifier shown in the right-hand
panel of Figure 9.8is useless here.
In Chapter 7, we are faced with an analogous situation. We see there
that the performance of linear regression can suffer when there is a non-
linear relationship between the predictors and the outcome. In that case,
we consider enlarging the feature space using functions of the predictors,
such as quadratic and cubic terms, in order to address this non-linearity.
In the case of the support vector classifier, we could address the prob-
lem of possibly non-linear boundaries between classes in a similar way, by
enlarging the feature space using quadratic, cubic, and even higher-order
polynomial functions of the predictors. For instance, rather than fitting a
support vector classifier using pfeatures
X1,X2,...,X p,
we could instead fit a support vector classifier using 2pfeatures
X1,X2
1,X2,X2
2,...,X p,X2
p.9.3 Support Vector Machines 379
Then (9.12)–(9.15) would (9.16)
subject to does this lead to a non-linear decision boundary? In the enlarged
feature space, the decision boundary that results from ( 9.16) is in fact lin-
ear. But in the original feature space, the decision boundary is of the form
q(x)=0 , whereqis a quadratic polynomial, and its solutions are gener-
ally non-linear. One might additionally want to enlarge the feature space
with higher-order polynomial terms, or with interaction terms of the form
XjXj/primeforj/negationslash=j/prime. Alternatively, other functions of the predictors could
be considered rather than polynomials. It is not hard to see that there
are many possible ways to enlarge the feature space, and that unless we
are careful, we could end up with a huge number of features. Then compu-
tations would become unmanageable. The support vector machine, which
we present next, allows us to enlarge the feature space used by the support
vector classifier in a way that leads to efficient computations.
9.3.2 The Support Vector Machine
Thesupport vector machine (SVM) is an extension of the support vectorsupport
vector
machineclassifier that results from enlarging the feature space in a specific way,
usingkernels. We will now discuss this extension, the details of which are
kernel somewhat complex and beyond the scope of this book. However, the main
idea is described in Section 9.3.1: we may want to enlarge our feature space
in order to accommodate a non-linear boundary between the classes. The
kernel approach that we describe here is simply an efficient computational
approach for enacting this idea.
We have not discussed exactly how the support vector classifier is com-
puted because the details become somewhat technical. However, it turns
out that the solution to the support vector classifier problem ( 9.12)–(9.15)
involves only the inner products of the observations (as opposed to the
observations themselves). The inner product of two r-vectors aandbis
defined as /angbracketlefta, b/angbracketright=/summationtextr
i=1aibi. Thus the inner product of two observations
xi,xi/primeis given (9.17)
It can be shown that
• The linear support vector classifier can be represented x i/angbracketright, (9.18)380 9. Support Vector Machines
where there are nparameters αi,i=1,...,n , one per training
observation.
• To estimate the parameters α1,...,αnandβ0, all we need are the/parenleftbign
2/parenrightbig
inner products all pairs of training observations.
(The and gives the number of pairs
among a set of nitems.)
Notice that in ( 9.18), in order to evaluate the function f(x), we need to
computetheinnerproductbetweenthenewpoint xandeachofthetraining
pointsxi. However, it turns out that αiis nonzero only for the support
vectors in the solution—that is, if a training observation is not a support
vector, then its αiequals zero. So if Sis the collection of indices of these
support points, we can rewrite any solution function of the form ( 9.18) x i/angbracketright, (9.19)
which typically involves far fewer terms than in ( f(x),andincomputing
its coefficients, all we need are inner products.
Now suppose that every time the inner product ( 9.17) appears in the
representation ( 9.18), or in a calculation of the solution for the support
vector classifier, we replace it with a generalization of the inner product of
the form
K(xi,xi/prime), (9.20)
whereKis some function that we will refer to as a kernel. A kernel is akernelfunction that quantifies the similarity of two observations. For instance, we
could simply (9.21)
which would just give us back the support vector classifier. Equation 9.21
is known as a linearkernel because the support vector classifier is linear
in the features; the linear kernel essentially quantifies the similarity of a
pair of observations using Pearson (standard) correlation. But one could
instead choose another form for ( 9.20). For instance, one could replace
every instance of/summationtextp
j=1xijxi/primejwith the quantity
K(xi,xi/prime) = (1 +p/summationdisplay
j=1xijxi/primej)d. (9.22)
This is known as a polynomial kernel of degree d, wheredis a positivepolynomial
kernelinteger. Using such a kernel with d> 1, instead of the standard boundary.Itessentiallyamountstofitting a support vector
2By expanding each of the inner products in ( 9.19), it is easy to see that f(x)is
a linear function of the coordinates of x. Doing so also establishes the correspondence
between the αiand the original parameters βj.9.3 Support Vector Machines 381
−4 −2 0 2 4−4 −2 0 2 4      
      
−4 −2 0 2 4−4 −2 0 2 4    
    
X1X1X2X2
FIGURE 9.9. Left:An SVM with a polynomial kernel of degree 3 is applied to
the non-linear data from Figure 9.8, resulting in a far more appropriate decision
rule.Right:An SVM with a radial kernel is applied. In this example, either kernel
is capable of capturing the decision boundary.
classifier in a higher-dimensional space involving polynomials of degree d,
rather than in the original feature space. When the support vector 9.22),theresultingclassifieris
known as a support vector machine. Note that in this case the (non-linear)
function has the form
f(x)=β0+/summationdisplay
i∈SαiK(x, x i). (9.23)
The left-hand panel of Figure 9.9shows an example of an SVM with a
polynomial kernel applied to the non-linear data from Figure 9.8. The fit is
a substantial improvement over the linear support vector classifier. When
d=1, then the SVM reduces to the support vector classifier seen earlier in
this chapter.
The polynomial kernel shown in ( 9.22) is one example of a possible
non-linear kernel, but alternatives abound. Another popular choice is the
radial kernel , which takes the formradial kernel
K(xi,xi/prime) = exp( −γp/summationdisplay
j=1(xij−xi/primej)2). (9.24)
In (9.24),γis a positive constant. The right-hand panel of Figure 9.9shows
an example of an SVM with a radial kernel on this non-linear data; it also
does a good job in separating the two classes.
How does the radial kernel ( 9.24) actually work? If a given test obser-
vationx∗=(x∗
1,...,x∗
p)Tis far from a training observation xiin terms of
Euclidean distance, then/summationtextp
j=1(x∗
j−xij)2will be large, and so be tiny. This means that in ( 9.23),xiwill
play virtually no role in f(x∗). Recall that the predicted class label for the
test observation x∗is based on the sign of f(x∗). In other words, training
observations that are far from x∗will play essentially no role in the pre-
dicted class label for x∗. This means that the radial kernel has very local382 9. Support Vector Machines
False positive rateTrue positive rate0.0 0.2 0.4 0.6 0.8 1.00.0 0.2 0.4 0.6 0.8 1.0Support Vector ClassifierLDAFalse positive rateTrue positive rate0.0 0.2 0.4 0.6 0.8 1.00.0 0.2 0.4 0.6 0.8 1.0Support Vector ClassifierSVM: γ=10−3SVM: γ=10−2SVM: γ=10−1FIGURE 9.10. ROC curves for the Heartdata training set. Left:The support
vector classifier and LDA are compared. Right:The support vector classifier is
compared to an SVM using a radial basis kernel with γ= 10−3,10−2, and10−1.
behavior, in the sense that only nearby training observations have an effect
on the class label of a test observation.
What is the advantage of using a kernel rather than simply enlarging
the feature space using functions of the original features, as in ( 9.16)? One
advantage is computational, and it amounts to the fact that using kernels,
one need only compute K(xi,x/prime
i)for all/parenleftbign
2/parenrightbig
distinct pairs i, i/prime. This can be
done without explicitly working in the enlarged feature space. This is im-
portant because in many applications of SVMs, the enlarged feature space
is so large that computations are intractable. For some kernels, such as the
radial kernel ( 9.24), the feature space is implicitand infinite-dimensional,
so we could never do the computations there anyway!
9.3.3 An Application to the Heart Disease Data
InChapter 8weapplydecisiontreesandrelatedmethodstothe Heartdata.
Theaim isto use 13predictorssuchas Age,Sex,andCholinorderto predict
whether an individual has heart disease. We now investigate how an SVM
compares to LDA on this data. After removing 6 missing observations, the
data consist of 297 subjects, which we randomly split into 207 training and
90 test observations.
We first fit LDA and the support vector classifier to the training kernel of degree d=1. The left-hand panel of Figure 9.10displays
ROC curves (described in Section 4.4.2) for the training set predictions for
both LDA and the support vector classifier. Both classifiers compute scores
of the form ˆf(X)=ˆβ0+ˆβ1X1+ˆβ2X2+···+ˆβpXpfor each observation.
For any given cutoff t, we classify observations into the heart disease or
no heart disease categories depending on whether ˆf(X)<torˆf(X)≥t.
The ROC curve is obtained by forming these predictions and computing
the false positive and true positive rates for a range of values of t. An opti-
mal classifier will hug the top left corner of the ROC plot. In this instance9.4 SVMs with More than Two Classes 383
False positive rateTrue positive rate0.0 0.2 0.4 0.6 0.8 1.00.0 0.2 0.4 0.6 0.8 1.0Support Vector ClassifierLDAFalse positive rateTrue positive rate0.0 0.2 0.4 0.6 0.8 1.00.0 0.2 0.4 0.6 0.8 1.0Support Vector ClassifierSVM: γ=10−3SVM: γ=10−2SVM: γ=10−1FIGURE 9.11. ROC curves for the test set of the Heartdata.Left:The support
vector classifier and LDA are compared. Right:The support vector classifier is
compared to an SVM using a radial basis kernel with γ= 10−3,10−2, and10−1.
LDA and the support vector classifier both perform well, though there is a
suggestion that the support vector classifier may be slightly superior.
The right-hand panel of Figure 9.10displays ROC curves for SVMs using
a radial kernel, with various values of γ. Asγincreases and the fit becomes
more non-linear, the ROC curves improve. Using γ= 10−1appears to give
an almost perfect ROC curve. However, these curves represent training
error rates, which can be misleading in terms of performance on new test
data. Figure 9.11displays ROC curves computed on the 90test observa-
tions. We observe some differences from the training ROC curves. In the
left-hand panel of Figure 9.11, the support vector classifier appears to have
a small advantage over LDA (although these differences are not statisti-
cally significant). In the right-hand panel, the SVM using γ= 10−1, which
showed the best results on the training data, produces the worst estimates
on the test data. This is once again evidence that while a more flexible
method will often produce lower training error rates, this does not neces-
sarily lead to improved performance on test data. The SVMs with γ= 10−2
andγ= 10−3perform comparably to the support vector classifier, and all
three outperform the SVM with γ= 10−1.
9.4 SVMs with More than Two Classes
So far, our discussion has been limited to the case of binary classification:
that is, classification in the two-class setting. How can we extend SVMs
to the more general case where we have some arbitrary number of classes?
It turns out that the concept of separating hyperplanes upon which SVMs
are based does not lend itself naturally to more than two classes. Though
a number of proposals for extending SVMs to the K-class case have been
made, the two most popular are the one-versus-one andone-versus-all
approaches. We briefly discuss those two approaches here.384 9. Support Vector Machines
9.4.1 One-Versus-One Classification
Suppose that we would like to perform classification using SVMs, and there
areK> 2classes. A one-versus-one orall-pairs approach SVMs, each of which compares a pair of classes. For example, one such
SVM might compare the kth class, coded as +1, to thek/primeth class, coded
as−1. We classify a test observation using each of and
we tally the number of times that the test observation is assigned to each
of theKclasses. The final classification is performed by assigning the test
observation to the class to which it was most frequently assigned in these/parenleftbigK
2/parenrightbig
pairwise classifications.
9.4.2 One-Versus-All Classification
Theone-versus-all approach (also referred to as one-versus-rest ) is an al-one-versus-
all
one-versus-
restternative procedure for applying SVMs in the case of K> 2classes. We
fitKSVMs, each time comparing one of the Kclasses to the remaining
K−1classes. Let β0k,β1k,...,βpkdenote the parameters that result from
fitting an SVM comparing the kth class (coded as +1) to the others (coded
as−1). Letx∗denote a test observation. We assign the observation to the
class for which β0k+β1kx∗
1+β2kx∗
2+···+βpkx∗
pis largest, as this amounts
to a high level of confidence that the test observation belongs to the kth
class rather than to any of the other classes.
9.5 Relationship to Logistic Regression
When SVMs were first introduced in the mid-1990s, they made quite a
splash in the statistical and machine learning communities. This was due
in part to their good performance, good marketing, and also to the fact
that the underlying approach seemed both novel and mysterious. The idea
of finding a hyperplane that separates the data as well as possible, while al-
lowing some violations to this separation, seemed distinctly different from
classical approaches for classification, such as logistic regression and lin-
ear discriminant analysis. Moreover, the idea of using a kernel to expand
the feature space in order to accommodate non-linear class boundaries ap-
peared to be a unique and valuable characteristic.
However, since that time, deep connections between SVMs and other
more classical statistical methods have emerged. It turns out that one can
rewrite the criterion ( 9.12)–(9.15) for fitting the support vector [0 ,1−yif(xi)] +λp/summationdisplay
j=1β2
j

, (9.25)
whereλis a nonnegative tuning parameter. When λis large then β1,...,βp
are small, more violations to the margin are tolerated, and a low-variance
but high-bias classifier will result. When λis small then few violations
to the margin will occur; this amounts to a high-variance but low-bias9.5 Relationship to Logistic Regression 385
classifier. Thus, a small value of λin (9.25) amounts to a small value of C
in (9.15). Note that the λ/summationtextp
j=1β2
jterm in ( 9.25) is the ridge penalty term
from Section 6.2.1, and plays a similar role in controlling the bias-variance
trade-off for the support vector this book:
minimize
β0,β1,...,βp{L(X,y,β)+λP(β)}. (9.26)
In (9.26),L(X,y,β)is some loss function quantifying the extent to which
the model, parametrized by β, fits the data (X,y), andP(β)is a penalty
function on the parameter vector βwhose effect is controlled by a nonneg-
ative tuning parameter λ. For instance, ridge regression and the lasso both
take this form with P(β)=/summationtextp
j=1β2
jfor ridge regression and P(β)=/summationtextp
j=1|βj|for
the lasso. In the case of ( 9.25) the loss function instead takes the form
L(X,y,β)=n/summationdisplay
i=1max [0 ,1−yi(β0+β1xi1+···+βpxip)].
This is known as hinge loss , and is depicted in Figure 9.12. However, ithinge lossturns out that the hinge loss function is closely related to the loss function
used in logistic regression, also shown in Figure 9.12.
An interesting characteristic of the support vector classifier is that only
support vectors play a role in the classifier obtained; observations on the
correct side of the margin do not affect it. This is due to the fact that the
loss function shown in Figure 9.12is exactly zero for observations for which
yi(β0+β1xi1+···+βpxip)≥1; these correspond to observations that are
on the correct side of the margin.3In contrast, the loss function for logistic
regression shown in Figure 9.12is not exactly zero anywhere. But it is very
small for observations that are far from the decision boundary. Due to the
similarities between their loss functions, logistic regression and the support
vector classifier often give very similar results. When the classes are well
separated, SVMs tend to behave better than logistic regression; in more
overlapping regimes, logistic regression is often preferred.
When the support vector classifier and SVM were first introduced, it was
thought that the tuning parameter Cin (9.15) was an unimportant “nui-
sance” parameter that could be set to some default value, like 1. However,
the “Loss + Penalty” formulation ( 9.25) for the support vector classifier
indicates that this is not the case. The choice of tuning parameter is very
important and determines the extent to which the model underfits or over-
fits the data, as illustrated, for example, in Figure 9.7.
3With this hinge-loss + penalty representation, the margin corresponds to the value
one, and the width of the margin is determined by/summationtextβ2
j.386 9. Support Vector Machines
−6 −4 −2 0 202468LossSVM LossLogistic Regression Loss
yi(β0+β1xi1+...+βpxip)FIGURE 9.12. The SVM and logistic regression loss functions are compared,
as a function of yi(β0+β1xi1+···+βpxip). Whenyi(β0+β1xi1+···+βpxip)is
greater than 1, then the SVM loss is zero, since this corresponds to an observation
that is on the correct side of the margin. Overall, the two loss functions have quite
similar behavior.
We have established that the support vector classifier is closely related
to logistic regression and other preexisting statistical methods. Is the SVM
unique in its use of kernels to enlarge the feature space to accommodate
non-linear class boundaries? The answer to this question is “no”. We could
just as well perform logistic regression or many of the other classification
methods seen in this book using non-linear kernels; this is closely related
to some of the non-linear approaches seen in Chapter 7. However, for his-
torical reasons, the use of non-linear kernels is much more widespread in
the context of SVMs than in the context of logistic regression or other
methods.
Though we have not addressed it here, there is in fact an extension
of the SVM for regression (i.e. for a quantitative rather than a qualita-
tive response), called support vector regression . In Chapter 3, we saw thatsupport
vector
regressionleast squares regression seeks coefficients β0,β1,...,βpsuch that the sum
of squared residuals is as small as possible. (Recall from Chapter 3that
residuals are defined as yi−β0−β1xi1−···−βpxip.) Support vector
regression instead seeks coefficients that minimize a different type of loss,
where only residuals larger in absolute value than some positive constant
contribute to the loss function. This is an extension of the margin used in
support vector classifiers to the regression setting.9.6 Lab: Support Vector Machines 3879.6 Lab: Support Vector MachinesIn this lab, we use thesklearn.svmlibrary to demonstrate the supportvector classifier and the support vector machine.We import some of our usual libraries.In[1]:import numpy as npfrom matplotlib.pyplot import subplots, cmimport sklearn.model_selection as skmfrom ISLP import load_data, confusion_tableWe also collect the new imports needed for this lab.In[2]:from sklearn.svm import SVCfrom ISLP.svm import plot as plot_svmfrom sklearn.metrics import RocCurveDisplayWe will use the functionRocCurveDisplay.from_estimator()to ROC plots, using a shorthandroc_curve.In[3]:roc_curve = RocCurveDisplay.from_estimator#s h o r t h a n d9.6.1 Support Vector ClassifierWe now use theSupportVectorClassifier()function fit the support vector classifier for a given value of theparameterC. TheCargument allows us to specify the cost of a violationto the margin. When thecostargument is small, then the margins will bewide and many support vectors will be on the margin or will violate themargin. When theCargument is large, then the margins will be narrow andthere will be few support vectors on the margin or violating the margin.Here we demonstrate the use ofSVC()on a two-dimensional example, sothat we can plot the resulting decision boundary. We begin by generatingthe observations, which belong to two classes, and checking whether theclasses are linearly separable.In[4]:rng = np.random.default_rng(1)X=r n g . s t a n d a r d _ n o r m a l ( ( 5 0 ,2 ) )y=n p . a r r a y ( [ - 1 ] * 2 5 + [ 1 ] * 2 5 )X[y==1] += 1fig, ax = are not. We now fit the classifier.In[5]:svm_linear = SVC(C=10, kernel='linear')svm_linear.fit(X, y)Out[5]:SVC(C=10, kernel='linear')The support vector classifier with two features can be visualized by plot-ting values of itsdecision function. We have included a function for this indecisionfunctiontheISLPpackage (inspired by a similar example in thesklearndocs).388 9. Support Vector MachinesIn[6]:fig, ax = decision boundary between the two classes is linear (because weused the argumentkernel='linear'). The support vectors are marked with+and the remaining observations are plotted as circles.What if we instead used a smaller value of the cost parameter?In[7]:svm_linear_small = SVC(C=0.1, kernel='linear')svm_linear_small.fit(X, y)fig, ax = a smaller value of the cost parameter, we obtain a larger number ofsupport vectors, because the margin is now wider. For linear kernels, wecan extract the coefficients of the linear decision boundary as , 0.7734]])Since the support vector machine is an estimator insklearn, we can usethe usual machinery to tune it.In[9]:kfold = skm.KFold(5,random_state=0,shuffle=True)grid = y)grid.best_params_Out[9]:{'C':1 This prints out a lot of detail, so we extract the accuracyresults 0.46, 0.72, 0.74, 0.74, 0.74, 0.74])We see thatC=1results in the highest cross-validation accuracy of 0.74,though the accuracy is the same for several values ofC. The classifiergrid.best_estimator_can be used to predict the class label on a set oftest observations. Let’s generate a test data set.9.6 Lab: Support Vector Machines 389In[11]:X_test = rng.standard_normal((20, 2))y_test = np.array([-1]*10+[1]*10)X_test[y_test==1] += model selected by cross-validation in order to make the predictions.In[12]:best_ = grid.best_estimator_y_test_hat = y_test)Out[12]:Truth -1 1Predicted-1 8 4126Thus, with this value ofC, 70% of the test observations are correctly clas-sified. What if we had instead usedC=0.001?In[13]:svm_ = SVC(C=0.001,kernel='linear').fit(X, y)y_test_hat = y_test)Out[13]:Truth -1 1Predicted-1 2 018 1 0In this case 60% of test observations are correctly classified.We now consider a situation in which the two classes are linearly sepa-rable. Then we can find an optimal separating hyperplane using theSVC()estimator. We first further separate the two classes in our simulated dataso that they are linearly separable:In[14]:X[y==1] += 1.9;fig, ax = subplots(figsize=(8,8))ax.scatter(X[:,0], X[:,1], c=y, cmap=cm.coolwarm);Now the observations are just barely linearly separable.In[15]:svm_ = SVC(C=1e5, kernel='linear').fit(X, y)y_hat = svm_.predict(X)confusion_table(y_hat, y)Out[15]:Truth -1 1Predicted-1 25 010 2 5We fit the support vector classifier and plot the resulting hyperplane, usinga very large value ofCso that no observations are misclassified.In[16]:fig, ax = 9. Support Vector Machines
Indeed no training errors were made and only three support vectors were
used. In fact, the large value of Calso means that these three support points
areon the margin , and define it. One may wonder how good the classifier
could be on test data that depends on only three data points! We now try
a smaller value of C.
In[17]: svm_ = SVC(C=0.1, kernel= 'linear' ).fit(X, y)
y_hat = svm_.predict(X)
confusion_table(y_hat, y)
Out[17]: Truth -1 1
Predicted
-1 25 0
10 2 5
UsingC=0.1, we again do not misclassify any training observations, but we
also obtain a much wider margin and make use of twelve support vectors.
These jointly define the orientation of the decision boundary, and since
there are more of them, it is more stable. It seems possible that this model
will perform better on test data than the model with C=1e5(and indeed, a
simple experiment with a large test set would bear this out).
In[18]: fig, ax = Support Vector Machine
In order to fit an SVM using a non-linear kernel, we once again use the
SVC()estimator. However, now we use a different value of the parameter
kernel. To fit an SVM with a polynomial kernel we use kernel="poly" , and
to fit an SVM with a radial kernel we use kernel="rbf" . In the former case
we also use the degreeargument to specify a degree for the polynomial
kernel (this is din (9.22)), and in the latter case we use gammato specify a
value ofγfor the radial basis kernel ( 9.24).
We first generate some data with a non-linear class boundary, as follows:
In[19]: X=r n g . s t a n d a r d _ n o r m a l ( ( 2 0 0 ,2 ) )
X[:100] += 2
X[100:150] -= 2
y=n p . a r r a y ( [ 1 ] * 1 5 0 + [ 2 ] * 5 0 )
Plotting the data makes it clear that the class boundary is indeed non-
linear.
In[20]: fig, ax = <matplotlib.collections.PathCollection at 0x7faa9ba52eb0>9.6 Lab: Support Vector Machines 391The data is randomly split into training and testing groups. We then fitthe training data using theSVC()estimator with a radial kernel andγ=1:In[21]:(X_train,X_test,y_train,y_test) = = SVC(kernel="rbf",g a m m a = 1 ,C = 1 )svm_rbf.fit(X_train, ax = can see from the figure that there are a fair number of training errorsin this SVM fit. If we increase the value ofC, we can reduce the numberof training errors. However, this comes at the price of a more irregulardecision boundary that seems to be at risk of overfitting the data.In[23]:svm_rbf = SVC(kernel="rbf",g a m m a = 1 ,C = 1 e 5 )svm_rbf.fit(X_train, y_train)fig, ax = can perform cross-validation usingskm.GridSearchCV()to select thebest choice ofγandCfor an SVM with a radial kernel:In[24]:kfold = skm.KFold(5,random_state=0,shuffle=True)grid = y_train)grid.best_params_Out[24]:{'C':1 0 0 ,'gamma':1 }The best choice of parameters under five-fold CV is achieved atC=1andgamma=0.5, though several other values also achieve the same value.In[25]:best_svm = grid.best_estimator_fig, ax = subplots(figsize=(8,8))plot_svm(X_train,392 9. Support Vector Machines
y_train,
best_svm,
ax=ax)
y_hat_test = y_test)
Out[25]: Truth 1 2
Predicted
16 9 6
26 1 9
With these parameters, 12% of test observations are misclassified by this
SVM.
9.6.3 ROC it is also possible to obtain fitted values for each observation,
which are the numerical scores used to obtain the class labels. For instance,
in the case of a support vector classifier, the fitted value for an observation
X=(X1,X2,...,X p)Ttakes the form ˆβ0+ˆβ1X1+ˆβ2X2+...+ˆβpXp. For
an SVM with a non-linear kernel, the equation that yields the fitted value
is given in ( 9.23). The sign of the fitted value determines on which side
of the decision boundary the observation lies. Therefore, the relationship
between the fitted value and the class prediction for a given observation
is simple: if the fitted value exceeds zero then the observation is assigned
to one class, and if it is less than zero then it is assigned to the other.
By changing this threshold from zero to some positive value, we skew the
classifications in favor of one class versus the other. By considering a range
of these thresholds, positive and negative, we produce the ingredients for a
ROC plot. We can access these values by calling the decision_function().function_
decision() method of a fitted SVM estimator.
The function ROCCurveDisplay.from_estimator() (which we have abbre-
viated to roc_curve() ) will produce a plot of a ROC curve. It takes a fittedroc_curve()estimator as its first argument, followed by a model matrix Xand labels y.
The argument nameis used in the legend, while coloris used for the color
of the line. Results are plotted on our axis object ax.
In[26]: fig, ax = ,
color='r',
ax=ax);
In this example, the SVM appears to provide accurate predictions. By
increasing γwe can produce a more flexible fit and generate further im-
provements in accuracy.
In[27]: svm_flex = SVC(kernel= "rbf",
gamma=50,9.6 Lab: Support Vector Machines 393
C=1)
svm_flex.fit(X_train, y_train)
fig, ax = $\gamma=50$' ,
color='r',
ax=ax);
However, these ROC curves are all on the training data. We are really
more interested in the level of prediction accuracy on the test data. When
we compute the ROC curves on the test data, the model with γ=0.5
appears to provide the most accurate results.
In[28]: $\gamma=50$' ,
color='b',
ax=ax)
fig;
Let’s look at our tuned SVM.
In[29]: fig, ax = subplots(figsize=(8,8))
for (X_, y_, c, name) in zip(
(X_train, X_test),
(y_train, y_test),
('r','b'),
('CV tuned on training' ,
'CV tuned on test' SVM with Multiple Classes
If the response is a factor containing more than two levels, then the SVC()
function will perform multi-class classification using either the one-versus-
one approach (when decision_function_shape=='ovo' ) or ). We explore that setting briefly
here by generating a third class of observations.
In[30]: rng = np.random.default_rng(123)
X=n p . v s t a c k ( [ X ,r n g . s t a n d a r d _ n o r m a l ( ( 5 0 ,2 ) ) ] )
y=n p . h s t a c k ( [ y ,[ 0 ] * 5 0 ] )
X[y==0,1] += 2
fig, ax = subplots(figsize=(8,8))
ax.scatter(X[:,0], X[:,1], c=y, cmap=cm.coolwarm);
4One-versus-rest is also known as one-versus-all.394 9. Support Vector MachinesWe now fit an SVM to the data:In[31]:svm_rbf_3 = y)fig, ax = can also be used to perform support vector re-gression with a numerical response using the Application to Gene Expression DataWe now examine theKhandata set, which consists of a number of tissuesamples corresponding to four distinct types of small round blue cell tu-mors. For each tissue sample, gene expression measurements are available.The data set consists of training data,xtrainandytrain, and testing data,xtestandytest.We examine the dimension of the data:In[32]:Khan = load_data('Khan')Khan['xtrain'].shape, Khan['xtest'].shapeOut[32]:((63, 2308), (20, 2308))This data set consists of expression measurements for 2,308 genes. Thetraining and test sets consist of 63 and 20 observations, respectively.We will use a support vector approach to predict cancer subtype features relative to the number of observations. This suggests that weshould use a linear kernel, because the additional flexibility that will resultfrom using a polynomial or radial kernel is unnecessary.In[33]:khan_linear = SVC(kernel='linear',C = 1 0 )khan_linear.fit(Khan['xtrain'], 1 2 3 4Predicted18 0 0 020 2 3 0 030 0 1 2 040 0 0 2 0We see that there arenotraining errors. In fact, this is not that it is easy to find hyperplanes that fully separate the classes.9.7 Exercises 395We are more interested in the support vector classifier’s performance onthe test 1 2 3 4Predicted13 0 0 020 6 2 030 0 4 040 0 0 5We see that usingC=10yields two test set errors on these data.9.7 ExercisesConceptual1. This problem involves hyperplanes in two dimensions.(a) Sketch the hyperplane1+3X1−X2=0. Indicate the set ofpoints for which1+3X1−X2>0, as well as the set of pointsfor which1+3X1−X2<0.(b) On the same plot, sketch the hyperplane−2+X1+2X2=0.Indicate the set of points for which−2+X1+2X2>0, as wellas the set of points for which−2+X1+2X2<0.2. We have seen that inp=2dimensions, a linear decision boundarytakes the formβ0+β1X1+β2X2=0. We now investigate a non-lineardecision boundary.(a) Sketch the curve(1 +X1)2+ (2−X2)2=4.(b) On your sketch, indicate the set of points for which(1 +X1)2+ (2−X2)2>4,as well as the set of points for which(1 +X1)2+ (2−X2)2≤4.(c) Suppose that a classifier assigns an observation to the blue classif(1 +X1)2+ (2−X2)2>4,and to the red class otherwise. To what class is the Argue that while the decision boundary in (c) is not linear interms ofX1andX2, it is linear in terms ofX1,X21,X2, andX22.396 9. Support Vector Machines
3. Here we explore the maximal margin classifier on a toy data set.
(a) We are given n=7observations in p=2dimensions. For each
observation, there is an associated class label.
Obs.X1X2 Y
1 3 4 Red
2 2 2 Red
3 4 4 Red
4 1 4 Red
5 2 1 Blue
6 4 3 Blue
7 4 1 Blue
Sketch the observations.
(b) for this hyperplane (of the form ( 9.1)).
(c) Describe the classification rule for the maximal margin classifier.
It should be something along the lines of “Classify to Red if
β0+β1X1+β2X2>0, and classify to Blue otherwise.” Provide
the values for β0,β1, andβ2.
(d) On your sketch, indicate the margin for the maximal margin
hyperplane.
(e) Indicate the support vectors for the maximal margin classifier.
(f) Argue that a slight movement of the seventh observation would
not affect the maximal margin hyperplane.
(g) Sketch a hyperplane that is notthe optimal separating hyper-
plane, and provide the equation for this hyperplane.
(h) Draw an additional observation on the plot so that the two
classes are no longer separable by a hyperplane.
Applied
4. Generate a simulated two-class data set with 100 observations and
two features in which there is a visible but non-linear separation be-
tween the two classes. Show that in this setting, a support vector
machine with a polynomial kernel (with degree greater than 1) or a
radial kernel will outperform a support vector classifier on the train-
ing data. Which technique performs best on the test data? Make
plots and report training and test error rates in order to back up
your assertions.
5. see that we can also obtain a non-linear decision boundary by
performing logistic regression using non-linear transformations of the
features.9.7 Exercises 397
(a) Generateadatasetwith n= 500 andp=2,suchthattheobser-
vationsbelong totwoclasses witha quadratic decision boundary
between them. For instance, you can do this as follows:
rng = np.random.default_rng(5)
x1 = rng.uniform(size=500) - 0.5
x2 = rng.uniform(size=500) - 0.5
y=x 1 * * 2-x 2 * * 2>0
(b) Plot the observations, colored according to their class labels.
Your plot should display X1on thex-axis, and X2on they-
axis.
(c) Fit a logistic regression model to the data, using X1andX2as
predictors.
(d) Apply this model to the training data in order to obtain a pre-
dicted class label for each training observation. Plot the ob-
servations, colored according to the predicted class labels. The
decision boundary should be linear.
(e) Now fit a logistic regression model to the data using non-linear
functions of X1andX2as predictors (e.g. X2
1,X1×X2,log(X2),
and so forth).
(f) Apply this model to the training data in order to obtain a pre-
dicted class label for each training observation. Plot the ob-
servations, colored according to the predicted class labels. The
decision boundary should be obviously non-linear. If it is not,
then repeat (a)–(e) until you come up with an example in which
the predicted class labels are obviously non-linear.
(g) Fit a support vector classifier to the data with X1andX2as
predictors. Obtain a class prediction for each training observa-
tion. Plot the observations, colored according to the predicted
class labels .
(h) Fit a SVM using a non-linear kernel to the data. Obtain a class
prediction for each training observation. Plot the observations,
colored according to the predicted class labels .
(i) Comment on your results.
6. AttheendofSection barely linearly separable, a support vector classifier with a small
value of Cthat misclassifies a couple of training observations may
perform better on test data than one with a huge value of Cthat does
not misclassify any training observations. You will now investigate
this claim.
(a) Generatetwo-classdatawith p=2insuchawaythattheclasses
are just barely linearly separable.
(b) Compute the cross-validation error rates for support vector
classifiers with a range of Cvalues. How many training obser-
vations are misclassified for each value of Cconsidered, and how
does this relate to the cross-validation errors obtained?398 9. Support Vector Machines(c) Generate an appropriate test data set, and compute the ofCleads to the fewest test errors, and how does thiscompare to the values ofCthat yield the fewest training errorsand the fewest cross-validation errors?(d) Discuss your results.7. In this problem, you will use support vector approaches in order topredict whether a given car gets high or low gas mileage based on theAutodata set.(a) Create a binary variable that takes on a1for cars with gasmileage above the median, and a0for cars with gas mileagebelow the median.(b) Fit a support vector classifier to the data with various values ofC, in order to predict whether a car gets high or low gas mileage.Report the cross-validation errors associated with different val-ues of this parameter. Comment on your results. Note you willneed to fit the classifier without the gas mileage variable to pro-duce sensible results.(c) Now repeat (b), this time using SVMs with radial and polyno-mial basis kernels, with different values ofgammaanddegreeandC. Comment on your results.(d) Make some plots to back up your assertions in (b) and (c).Hint: In the lab, we used theplot_svm()function for fitted SVMs.Whenp>2, you can use the keyword argumentfeaturestocreate plots displaying pairs of variables at a time.8. This problem involves theOJdata set which is part of theISLPpackage.(a) Create a training set containing a random sample of800observations, and a test set containing the remainingobservations.(b) Fit a support vector classifier to the training data usingC = 0.01, withPurchaseas the response and the other variablesas predictors. How many support points are there?(c) What are the training and test error rates?(d) Use cross-validation to select an optimalC. Consider values inthe range0.01to10.(e) Compute the training and test error rates using this new valueforC.(f) Repeat parts (b) through (e) using a support vector machinewith a radial kernel. Use the default value forgamma.(g) Repeat parts (b) through (e) using a support vector machinewith a polynomial kernel. Setdegree = 2.(h) Overall, which approach seems to give the best results on thisdata?10
Deep Learning
This chapter covers the important topic of deep learning . At the time and artificial intelligence communities. The cornerstone of deep
learning is the neural network .neural
networkNeural networks rose to fame in the late 1980s. There was a lot of excite-
ment and a certain amount of hype associated with this approach, and they
were the impetus for the popular Neural Information Processing Systems
meetings (NeurIPS, formerly NIPS) held every year, typically in exotic
places like ski resorts. This was followed by a synthesis stage, where the
properties of neural networks were analyzed by machine learners, math-
ematicians and statisticians; algorithms were improved, and the method-
ology stabilized. Then along came SVMs, boosting, and random forests,
and neural networks fell somewhat from favor. Part of the reason was that
neural networks required a lot of tinkering, while the new methods were
more automatic. Also, on many problems the new methods outperformed
poorly-trained neural networks. This was the status quo for the first decade
in the new millennium.
All the while, though, a core group of neural-network enthusiasts sets. Neural networks resurfaced after 2010 with the new name deep
learning, with new architectures, additional bells and whistles, and a string
of success stories on some niche problems such as image and video classifi-
cation, speech and text modeling. Many in the field believe that the major
reason for these successes is the availability of ever-larger training datasets,
made possible by the wide-scale use of digitization in science and industry.
In this chapter we discuss the basics of neural networks and deep learn-
ing, and then go into some of the specializations for specific problems, such
as convolutional neural networks (CNNs) for image classification, and re-
current neural networks (RNNs) for time series and other sequences. We
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_10 399400 10. Deep 10.1. Neural network with a single hidden layer. The hidden layer
computes activations Ak=hk(X)that are nonlinear transformations of linear
combinations of the inputs X1,X2,...,X p. Hence these Akare not directly ob-
served. The functions hk(·)are not fixed in advance, but are learned during the
training of the network. The output layer is a linear model that uses these acti-
vationsAkas inputs, resulting in a function f(X).
will also demonstrate these models using the Python torch package, along
with a number of helper packages.
The material in this chapter is slightly more challenging than elsewhere
in this book.
10.1 Single Layer Neural Networks
A neural network takes an input vector of pvariables X=(X1,X2,...,X p)
and builds a nonlinear function f(X)to predict the response Y. We have
built nonlinear prediction models in earlier chapters, using trees, boosting
and generalized additive models. What distinguishes neural networks from
these methods is the particular structure of the model. Figure 10.1shows
a simple feed-forward neural network for modeling a quantitative In the terminology of neural networks, the four fea-
turesX1,...,X 4make up the units in the input layer . The arrows indicate
input layer that each of the inputs from the input layer feeds into each of the Khidden
units(we get to pick K; here we chose 5). The neural network model hashidden unitsthe form
f(X)= is built up here in two steps. First the Kactivations Ak,k=1,...,K , X1,...,X p,
Ak=hk(X)=g(wk0+/summationtextp
j=1wkjXj), (10.2)10.1 Single Layer Neural Networks 401
−4 −2 0240.0 0.2 0.4 0.6 0.8 1.0zg(z)sigmoidReLU
FIGURE 10.2. Activation functions. The piecewise-linear ReLUfunction is pop-
ular for its efficiency and computability. We have scaled it down by a factor of
five for ease of comparison.
whereg(z)is a nonlinear activation function that is specified in advance.activation
functionWe can think of each Akas a different transformation hk(X)of the original
features, much like the basis functions of Chapter 7. These Kactivations
from the hidden layer then feed into the output layer, resulting in
f(X)=β0+K/summationdisplay
k=1βkAk, (10.3)
a linear regression model in the K=5 activations. All the parameters
β0,...,βKandw10,...,w Kpneed to be estimated from data. In the early
instances of neural networks, the sigmoidactivation function was favored,sigmoid
g(z)=ez
1+ez=1
1+e−z, (10.4)
which is the same function used in logistic regression to convert a linear
function into probabilities between zero and one (see Figure 10.2). The
preferred choice in modern neural networks is the ReLU(rectified linearReLUunit) activation function, which takes the formrectified
linear unit
g(z)=( z)+=/braceleftbigg0ifz<0
zotherwise .(10.5)
A ReLU activation can be computed and stored more efficiently than a
sigmoid activation. Although it thresholds at zero, because we apply it to a
linear function ( 10.2) the constant term wk0will shift this inflection point.
So in words, the model depicted in Figure 10.1derives five new features
by computing five different linear combinations of X, and then squashes
each through an activation function g(·)to transform it. The final model
is linear in these derived variables.
Thename neuralnetwork as analogous to neurons in the brain — values of the activations
Ak=hk(X)close to one are firing, while those close to zero are silent
(using the sigmoid activation function).
The nonlinearity in the activation function g(·)is essential, since without
it the model f(X)in (10.1) would collapse into a simple linear model in402 10. Deep Learning
X1,...,X p. Moreover, having a nonlinear activation function allows the
model to capture complex nonlinearities and interaction effects. Consider
a very simple example with p=2 input variables X=(X1,X2), and
K=2hidden units h1(X)andh2(X)withg(z)=z2. We specify the other
parameters as
β0=0,β1=1
4,β2=−1
4,
w10=0,w 11=1,w 12=1 ,
w20=0,w 21=1,w 22=−1.(10.6)
From (10.2), this means that
h1(X) = (0 + X1+X2)2,
h2(X) = (0 + X1−X2)2.(10.7)
Then plugging ( 10.7) into (10.1), we get
f(X)=0 +1
4·(0 + X1+X2)2−1
4·(0 + the sum of two nonlinear transformations of linear functions can give
us an interaction! In practice we would not use a quadratic function for
g(z), since we would always get a second-degree polynomial in the original
coordinates X1,...,X p. The sigmoid or ReLU activations do not have such
a limitation.
Fitting a neural network requires estimating the unknown parameters in
(10.1). For a quantitative response, typically squared-error loss is used, so
that the parameters are chosen to minimize
n/summationdisplay
i=1(yi−f(xi))2. 10.7.
10.2 Multilayer Neural Networks
Modern neural networks typically have more than one hidden layer, and
often many units per layer. In theory a single hidden layer with a large
number of units has the ability to approximate most functions. However,
the learning task of discovering a good solution is made much easier with
multiple layers each of modest size.
We will illustrate a large dense network on the famous and publicly
available MNISThandwritten digit dataset.1Figure10.3shows examples of
these digits. The idea is to build a model to classify the images into their
correct digit class 0–9. Every image has p= 28 ×28 = 784 pixels, each
of which is an eight-bit grayscale value between 0 and 255 representing
1See LeCun, Cortes, and Burges (2010) “The MNIST database of handwritten digits”,
available at http://yann.lecun.com/exdb/mnist .10.2 Multilayer Neural Networks 403
FIGURE 10.3. Examples of handwritten digits from the MNISTcorpus. Each
grayscale image has 28×28pixels, each of which is an eight-bit number (0–255)
which represents how dark that pixel is. The first 3, 5, and 8 are enlarged to show
their 784 individual pixel values.
the relative amount of the written digit in that tiny square.2These pixels
are stored in the input vector X(in, say, column order). The output is
the class label, represented by a vector Y=(Y0,Y1,...,Y 9)of 10 dummy
variables, with a one in the position corresponding to the label, and zeros
elsewhere. In the machine learning community, this is known as one-hot
encoding. There are 60,000 training images, and 10,000 test images.one-hot
encodingOn a historical note, digit recognition problems were the catalyst that
accelerated the development of neural network technology in the late 1980s
at AT&T Bell Laboratories and elsewhere. Pattern recognition tasks of this
kind are relatively simple for humans. Our visual system occupies a large
fraction of our brains, and good recognition is an evolutionary force for
survival. These tasks are not so simple for machines, and it has taken more
than 30 years to refine the neural-network architectures to match human
performance.
Figure10.4shows a multilayer network architecture that works well for
solving the digit-classification task. It differs from Figure 10.1in several
ways:
• It has two hidden layers L1(256 units) and L2(128 units) rather
than one. Later we will see a network with seven hidden layers.
• It has ten output variables, rather than one. In this case the ten vari-
ables really represent a single qualitative variable and so are quite
dependent. (We have indexed them by the digit class 0–9 rather than
1–10, for clarity.) More generally, in multi-task learning one can pre-multi-task
learningdict different responses simultaneously with a single network; they
all have a say in the formation of the hidden layers.
• The loss function used for training the network is tailored for the
multiclass classification task.
2In the analog-to-digital conversion process, only part of the written numeral may
fall in the square representing a particular pixel.404 10. Deep 10.4. Neural network diagram with two hidden layers and multiple
outputs, suitable for the MNISThandwritten-digit problem. The input layer has
p= 784 units, the two hidden layers K1= 256 andK2= 128 units respectively,
and the output layer 10units. Along with intercepts (referred to as biasesin the
deep-learning community) this network has 235,146 parameters (referred to as
weights).
The first hidden layer is as in ( 10.2), 1. The second hidden layer treats the activations A(1)
kof
the first hidden layer as inputs and computes new 2.Notice that each of the activations in the second layer
A(2)
/lscript=h(2)
/lscript(X)is a function of the input vector X. This is the case because
while they are explicitly a function of the activations A(1)
kfrom layer L1,
these in turn are functions of X. This would also be the case with more
hidden layers. Thus, through a chain of transformations, the network is
able to build up fairly complex transformations of Xthat ultimately feed
into the output layer as features.
We have introduced additional superscript notation such as h(2)
/lscript(X)and
w(2)
/lscriptjin (10.10) and (10.11) to indicate to which layer the activations and
weights(coefficients) belong, in this case layer 2. The notation W1in Fig-weights10.2 Multilayer Neural Networks 405
ure10.4represents the entire matrix of weights that feed from the input
layer to the first hidden layer L1. This matrix will have 785×256 = 200 ,960
elements; there are 785 rather than 784 because we must account for the
intercept or biasterm.3
biasEach element A(1)
kfeeds to the second hidden layer L2via the matrix of
weightsW2of dimension 257×128 = 32 ,896.
We now get to the output layer, where we now have ten responses rather
than one. The first step is to compute ten different linear models similar
to our single model ( The matrix Bstores all 129×10 = 1 ,290of these
weights.
If these were all separate quantitative responses, we would simply set
eachfm(X)=Zmand be done. However, we would like our estimates to
represent class probabilities fm(X) = Pr( Y=m|X), just like in multi-
nomial logistic regression in Section 4.3.5. So we use the special softmaxsoftmaxactivation function (see ( 4.13) on page 145),
fm(X) = Pr( (10.13)
form=0,1,...,9. This ensures that the 10 numbers behave like proba-
bilities (non-negative and sum to one). Even though the goal is to build
a classifier, our model actually estimates a probability for each of the 10
classes. The classifier then assigns the image to the class with the highest
probability.
To train this network, since the response is qualitative, we look for coef-
ficient estimates that minimize the negative multinomial (10.14)
also known as the cross-entropy . This is a generalization of the crite-cross-
entropy rion (4.5) for two-class logistic regression. Details on how to minimize this
objective are given in Section 10.7. If the response were quantitative, we
would instead minimize squared-error loss as in ( 10.9).
Table10.1compares the test performance of the neural network with
two simple models presented in Chapter 4that make use of linear improvement of neural networks over both of these linear methods 2% on the 10,000test images. (We describe dropout regularization in
Section10.7.3.) In Section 10.9.2of the lab, we present the code for fitting
this model, which runs in just over two minutes on a laptop computer.
3The use of “weights” for coefficients and “bias” for the intercepts wk0in (10.2) is
popular in the machine learning community; this use of bias is not to be confused with
the “bias-variance” usage elsewhere in this book.406 10. Deep Learning
Method Test Error
Neural Network + Ridge Regularization 2.3%
Neural Network + Dropout Regularization 1.8%
Multinomial Logistic Regression 7.2%
Linear Discriminant Analysis 12.7%
TABLE 10.1. Test error rate on the MNISTdata, for neural networks with two
forms of regularization, as well as multinomial logistic regression and linear dis-
criminant analysis. In this example, the extra complexity of the neural network
leads to a marked improvement in test error.
FIGURE 10.5. A sample of images from the CIFAR100 database: a collection of
natural images from everyday life, with 100 different classes represented.
Adding the number of coefficients in W1,W2andB, we get235,146in
all, more than 33 times the number 785×9=7,065needed for multinomial
logistic regression. Recall that there are 60,000images in the training set.
While this might seem like a large training set, there are almost four training set! To avoid overfitting, some regularization is needed. In this
example, we used two forms of regularization: ridge regularization, which
is similar to ridge regression from Chapter 6, anddropoutregularization.dropoutWe discuss both forms of regularization in Section 10.7.
10.3 Convolutional Neural Networks
Neural networks rebounded around 2010 with big successes in image classi-
fication. Around that time, massive databases of labeled images were being
accumulated, with ever-increasing numbers of classes. Figure 10.5shows
75 images drawn from the CIFAR100 database.4This database consists of
60,000 images labeled according to 20 superclasses (e.g. aquatic mammals),
with five classes per superclass (beaver, dolphin, otter, seal, whale). Each
image has a resolution of 32×32pixels, with three eight-bit numbers per
pixel representing red, green and blue. The numbers for each image are
organized in a three-dimensional array called a feature map . The first twofeature map
4See Chapter 3 of Krizhevsky (2009) “Learning multiple layers of fea-
tures from tiny images”, available at .10.3 Convolutional Neural Networks 407
FIGURE 10.6. Schematic showing how a convolutional neural network classifies
an image of a tiger. The network takes in the image and identifies local features.
It then combines the local features in order to create compound features, which in
this example include eyes and ears. These compound features are used to output
the label “tiger”.
axes are spatial (both are 32-dimensional), and the third is the channelchannelaxis,5representing the three colors. There is a designated training set of
50,000 images, and a test set of 10,000.
A special family of convolutional neural networks (CNNs) has evolved forconvolutional
neural
networksclassifying images such as these, and has shown spectacular success on a
wide range of problems. CNNs mimic to some degree how humans classify
images, by recognizing specific features or patterns anywhere in the image
that distinguish each particular object class. In this section we give a brief
overview of how they work.
Figure10.6illustrates the idea behind a convolutional neural network on
a cartoon image of a tiger.6
The network first identifies low-level features in the input image, such
as small edges, patches of color, and the like. These low-level features are
then combined to form higher-level features, such as parts of ears, eyes,
and so on. Eventually, the presence or absence of these higher-level features
contributes to the probability of any given output two specialized types of hidden layers, called convolution layers and
poolinglayers. Convolution layers search for instances of small patterns in
the image, whereas pooling layers downsample these to select a prominent
subset. In order to achieve state-of-the-art results, contemporary neural-
network architectures make use of many convolution and pooling layers.
We describe convolution and pooling layers next.
10.3.1 Convolution Layers
Aconvolution layer is made up of a large number of convolution filters , eachconvolution
layer
convolution
filter5The term channel is taken from the signal-processing literature. Each channel is a
distinct source of information.
6Thanks to Elena Tuzhilina for producing the diagram and https://www.
cartooning4kids.com/ for permission to use the cartoon tiger.408 10. Deep Learning
of which is a template that determines whether a particular local feature is
present in an image. A convolution filter relies on a very simple operation,
called a convolution , which basically amounts to repeatedly multiplying
matrix elements and then adding the results.
To understand how a convolution filter works, consider a very simple
example of a 4×3image:
Original Image =
abc
def
ghi
jkl
.
Now consider a 2×2filter of the form
Convolution Filter we convolve the image with the filter, we get the result7
Convolved Image instance, the top-left element comes from multiplying each element in
the2×2filter by the corresponding element in the top left 2×2portion
of the image, and adding the results. The other elements are obtained in a
similar way: the convolution filter is applied to every 2×2submatrix of the
original image in order to obtain the convolved image. If a 2×2submatrix
of the original image resembles the convolution filter, then it will have a
largevalue in the convolved image; otherwise, it will have a smallvalue.
Thus,the convolved image highlights regions of the original image that
resemble the convolution filter. We have used 2×2as an example; in
general convolution filters are small /lscript1×/lscript2arrays, with /lscript1and/lscript2small
positive integers that are not necessarily 192×
179image of a tiger, shown on the left-hand side.8Each convolution filter
is a15×15image containing mostly zeros (black), with a narrow strip
of ones (white) oriented either vertically or horizontally within the image.
When each filter is convolved with the image of the tiger, areas of the tiger
that resemble the filter (i.e. that have either horizontal or vertical stripes or
edges) are givenlarge values,and areas of the tiger that do not resemble the
feature are given small values. The convolved images are displayed on the
right-hand side. We see that the horizontal stripe filter picks out horizontal
stripes and edges in the original image, whereas the vertical stripe filter
picks out vertical stripes and edges in the original image.
7The convolved image is smaller than the original image because its dimension is
given by the number of 2×2submatrices in the original image. Note that 2×2is the
dimension of the convolution filter. If we want the convolved image to have the same
dimension as the original image, then padding can be applied.
8The tiger image used in Figures 10.7–10.9was obtained from the public domain
image resource https://www.needpix.com/ .10.3 Convolutional Neural Networks 409
FIGURE 10.7. Convolution filters find local features in an image, such as edges
and small shapes. We begin with the image of the tiger shown on the left, and
apply the two small convolution filters in the middle. The convolved images high-
light areas in the original image where details similar to the filters are found.
Specifically, the top convolved image highlights the tiger’s vertical stripes, whereas
the bottom convolved image highlights the tiger’s horizontal stripes. We can think
of the original image as the input layer in a convolutional neural network, and
the convolved images as the units in the first hidden layer.
We have used a large image and two large filters in Figure 10.7for illus-
tration. For the CIFAR100 database there are 32×32color pixels per image,
and we use 3×3convolution filters.
In a convolution layer, we use a whole bank of filters to pick out a variety
of differently-oriented edges and shapes in the image. Using predefined
filters in this way is standard practice in image processing. By contrast,
with CNNs the filters are learnedfor the specific classification task. We can
think of the filter weights as the parameters going from an input layer to a
hidden layer, with one hidden unit for each pixel in the convolved image.
This is in fact the case, though the parameters are highly structured and
constrained (see Exercise 4for more details). They operate on localized
patches in the input image (so there are many structural zeros), and the
sameweightsina givenfilter are reusedfor allpossible patchesin the image
(so the weights are constrained).9
We now give some additional details.
• Since the input image is in color, it has three channels represented
by a three-dimensional feature map (array). Each channel is a two-
dimensional ( 32×32) feature map — one for red, one for green, and
one for blue. A single convolution filter will also have three channels,
one per color, each of dimension 3×3, with potentially different filter
weights. The results of the three convolutions are summed to form
a two-dimensional output feature map. Note that at this point the
color information has been used, and is not passed on to subsequent
layers except through its role in the convolution.
9This used to be called weight sharing in the early years of neural networks.410 10. Deep Learning
• If we use Kdifferent convolution filters at this first hidden layer,
we getKtwo-dimensional output feature maps, which together are
treated as a single three-dimensional feature map. We view each of
theKoutput feature maps as a separate channel of information, so
now we have Kchannels in contrast to the three color channels of
the original input feature map. The three-dimensional feature map is
just like the activations in a hidden layer of a simple neural network,
except organized and produced in a spatially structured way.
• We typically apply the ReLU activation function ( 10.5) to the con-
volved image. This step is sometimes viewed as a separate layer in
the convolutional neural network, in which case it is referred to as a
detector layer .detector
layer
10.3.2 Pooling Layers
Apoolinglayer provides a way to condense a large image into a smallerpoolingsummary image. While there are a number of possible ways to perform
pooling, the max pooling operation summarizes each non-overlapping 2×2
block of pixels in an image using the maximum value in the block. This
reduces the size of the image by a factor of two in each direction, and it
also provides some location invariance : i.e. as long as there is a large value
in one of the four pixels in the block, the whole block registers as a large
value in the reduced image.
Here is a simple example of max pooling:
Max Architecture of a Convolutional Neural Network
So far we have defined a single convolution layer — each filter produces a
new two-dimensional feature map. The number of convolution filters in a
convolution layer is akin to the number of units at a particular hidden layer
in a fully-connected neural network of the type we saw in Section 10.2.
This number also defines the number of channels in the resulting three-
dimensional feature map. We have also described a pooling layer, which
reduces the first two dimensions of each three-dimensional feature map.
Deep CNNs havemanysuchlayers.Figure 10.8showsa typicalarchitecture
for a CNN for the CIFAR100 image classification task.
At the input layer, we see the three-dimensional feature map of a color
image, where the channel axis represents each color by a 32×32two-
dimensional feature map of pixels. Each convolution filter produces a new
channel at the first hidden layer, each of which is a 32×32feature map
(after some padding at the edges). After this first round of convolutions, we
now have a new “image”; a feature map with considerably more channels
than the three color input channels (six in the figure, since we used six
convolution 10.8. Architecture of a deep CNN for the CIFAR100 classification task.
Convolution layers are interspersed with 2×2max-pool layers, which reduce the
size by a factor of 2 in both dimensions.
This is followed by a max-pool layer, which reduces the size of the feature
map in each channel by a factor of four: two in each details are as follows:
• Each subsequent convolve layer is similar to the first. It takes as input
the three-dimensional feature map from the previous layer and treats
it like a single multi-channel image. Each convolution filter learned
has as many channels as this feature map.
• Since the channel feature maps are reduced in size after each pool
layer, we usually increase the number of filters in the next convolve
layer to compensate.
• Sometimes we repeat several convolve layers before a pool layer. This
effectively increases the dimension of the filter.
These operations are repeated until the pooling has reduced each channel
feature map down to just a few pixels in each dimension. At this point the
three-dimensional feature maps are flattened — the pixels are treated as
separate units — and fed into one or more fully-connected layers before
reaching the output layer, which is a softmax activation for the 100 classes
(as in (10.13)).
There are many tuning parameters to be selected in constructing such a
network, apart from the number, nature, and sizes of each layer. Dropout
learning can be used at each layer, as well as lasso or ridge regularization
(see Section 10.7). The details of constructing a convolutional neural net-
work can seem daunting. Fortunately, terrific software is available, with
extensive examples and vignettes that provide guidance on sensible choices
for the parameters. For the CIFAR100 official test set, the best accuracy as
of this writing is just above 75%, but undoubtedly this performance will
continue to improve.
10.3.4 Data Augmentation
An additional important trick used with image modeling is data augment-data aug-
mentationation. Essentially, each training image is replicated many times, with each
replicate randomly distorted in a natural way such that human recognition
is unaffected. Figure 10.9shows some examples. Typical distortions are10.3 Convolutional Neural Networks 411412 10. Deep Learning
FIGURE 10.9. Data augmentation. The original image (leftmost) is distorted
in natural ways to produce different images with the same class label. These
distortions do not fool humans, and act as a form of regularization when fitting
the CNN.
zoom, horizontal and vertical shift, shear, small rotations, and in this case
horizontal flips. At face value this is a way of increasing the training set
considerably with somewhat different examples, and thus protects against
overfitting. In fact we can see this as a form of regularization: we build a
cloud of images around each original image, all with the same label. This
kind of fattening of the data is similar in spirit to ridge regularization.
We will see in Section 10.7.2that the stochastic gradient descent al-
gorithms for fitting deep learning models repeatedly process randomly-
selected batches of, say, 128 training images at a time. This works hand-in-
glove with augmentation, because we can distort each image in the batch
on the fly, and hence do not have to store all the new images.
10.3.5 Results Using a Pretrained Classifier
Here we use an industry-level pretrained classifier to predict the class of
some new images. The resnet50 classifier is a convolutional neural network
that was trained using the imagenet data set, which consists of millions of
images that belong to an ever-growing number of categories.10Figure10.10
demonstrates the performance of resnet50 on six photographs (private col-
lection of one of the authors).11The CNN does a reasonable job classifying
the hawk in the second image. If we zoom out as in the third image, it
gets confused and chooses the fountain rather than the hawk. In the final
image a “jacamar” is a tropical bird from South and Central America with
similar coloring to the South African Cape Weaver. We give more details
on this example in Section 10.9.4.
Much of the work in fitting a CNN is in learning the convolution filters
at the hidden layers; these are the coefficients of a CNN. For models fit to
massive corpora such as imagenet with many classes, the output of these
filters can serve as features for general natural-image classification prob-
lems. One can use these pretrained hidden layers for new problems with
much smaller training sets (a process referred to as weight freezing ), andweight
freezingjust train the last few layers of the network, which requires much less data.
10For more information about resnet50 , see He, Zhang, Ren, and Sun (2015) “Deep
residual learning for image recognition”, https://arxiv.org/abs/1512.03385 . For de-
tails about imagenet , see Russakovsky, Deng, et al. (2015) “ImageNet Large Scale
Visual Recognition Challenge”, in International Journal of Computer Vision .
11Theseresnet results can change with time, since the publicly-trained model gets
updated periodically.10.4 Document Classification 413
flamingo Cooper’s hawk Cooper’s hawk
flamingo 0.83 kite 0.60fountain 0.35
spoonbill 0.17 great grey owl 0.09 nail 0.12
white stork 0.00 robin 0.06hook 0.07
Lhasa Apso cat Cape weaver
Tibetan terrier 0.56 Old English sheepdog 0.82 jacamar 0.28
Lhasa 0.32Shih-Tzu 0.04macaw 0.12
cocker spaniel 0.03 Persian cat 0.04robin 0.12
FIGURE 10.10. Classification of six photographs using the resnet50 CNN
trained on the imagenet corpus. The table below the images displays the true
(intended) label at the top of each panel, and the top three choices of the classifier
(out of 100). The numbers are the estimated probabilities for each choice. (A kite
is a raptor, but not a hawk.)
The vignettes and book12that accompany the keraspackage give more
details on such applications.
10.4 Document Classification
In this section we introduce a new type of example that has important
applications in industry and science: predicting attributes of documents.
Examples of documents include articles in medical journals, Reuters news
feeds, emails, tweets, and so on. Our example will be IMDb(Internet Movie
Database) ratings — short documents where viewers have written critiques
of movies.13The response in this case is the sentiment of the review, which
will bepositiveornegative.
12Deep Learning with R by F. Chollet and J.J. Allaire, 2018, Manning Publications.
13For details, see Maas et al. (2011) “Learning word vectors for sentiment analysis”,
inProceedings of the 49th Annual Meeting of the Association for Computational Lin-
guistics: Human Language Technologies , pages 142–150.414 10. Deep Learning
Here is the beginning of a rather amusing negative review:
This has to be one of the worst films of the 1990s. When my
friends & I were watching this film (being the target audience it
was aimed at) we just sat & watched the first half an hour with
our jaws touching the floor at how bad it really was. The rest
of the time, everyone else in the theater just started talking to
each other, leaving or generally crying into their popcorn ...
Each review can be a different length, include slang or non-words, have
spelling errors, etc. We need to find a way to featurize such a document.featurizeThis is modern parlance for defining a set of predictors.
The simplest and most common featurization is the bag-of-words model.bag-of-wordsWe score each document for the presence or absence of each of the words in
a language dictionary — in this case an English dictionary. If the dictionary
contains of length M, and score a 1for every word present, and 0otherwise.
That can be a very wide feature vector, so we limit the dictionary — in
this case to the 10,000 most frequently occurring words in the training
corpus of 25,000 reviews. Fortunately there are nice tools for doing this
automatically. Here is the beginning of a positive review that has been
redacted in this way:
/angbracketleftSTART/angbracketrightthis film was just brilliant casting location scenery
story direction everyone’s really suited the part they played and
you could just imagine being there robert /angbracketleftUNK/angbracketrightis an amazing
actor and now the same being director /angbracketleftUNK/angbracketrightfather came from
the same scottish island as myself so i loved ...
Here we can see many words have been omitted, and some unknown words
(UNK) have been marked as such. With this reduction the binary feature
vector has length 10,000, and consists mostly of 0’s and a smattering of 1’s
in the positions corresponding to words that are present in the document.
We have a training set and test set, each with 25,000 examples, and each
balanced with regard to sentiment . The resulting training feature matrix X
has dimension 25,000×10,000, but only 1.3% of the binary entries are non-
zero. We call such a matrix sparse, because most of the values are the same
(zero in this case); it can be stored efficiently in sparse matrix format .14
sparse
matrix
formatThere are a variety of ways to account for the document length; here we
only score a word as in or out of the document, but for example one could
instead record the relative frequency of words. We split off a validation set
of size 2,000 from the 25,000 training observations (for model tuning), and
fit two model sequences:
• A lasso logistic regression using the glmnetpackage;
• A two-class neural network with two hidden layers, each with 16
ReLU units.
14Rather than store the whole matrix, we can store instead the location and values for
the nonzero entries. In this case, since the nonzero entries are all 1, just the locations
are stored.10.4 Document Classification 415
FIGURE 10.11. Accuracy of the lasso and a two-hidden-layer neural network
on theIMDbdata. For the lasso, the x-axis displays −log(λ), while for the neural
network it displays epochs (number of times the fitting algorithm passes through
the training set). Both show a tendency to overfit, and achieve approximately the
same test accuracy.
Both methods produce a sequence of solutions. The lasso sequence is in-
dexed by the regularization parameter λ. The neural-net sequence is in-
dexed by the number of gradient-descent iterations used in the fitting,
as measured by training epochs or passes through the training set (Sec-
tion10.7). Notice that the training accuracy in Figure 10.11(black points)
increases monotonically in both cases. We can use the validation error to
pick a good solution from each sequence (blue points in the plots), which
would then be used to make predictions on the test data set.
Note that a two-class neural network amounts to a nonlinear logistic
regression model. From ( 10.12) and (10.13) we can see (10.15)
=( shows the redundancy in the softmax function; for Kclasses we
really only need to estimate K−1sets of coefficients. See Section 4.3.5.) In
Figure10.11we show accuracy (fraction correct) rather than classificationaccuracy
error (fraction incorrect), the former being more popular in the machine
learning community. Both models achieve a test-set accuracy of about 88%.
The bag-of-words model summarizes a document by the words present,
and ignores their context. There are at least two popular ways to take the
context into account:
• Thebag-of-n-gramsmodel. For example, a bag of 2-grams 1 0 1 20.6 0.7 0.8 0.9 0 1 5 2 00.6 0.7 0.8 0.9 1.0Neural 10. Deep Learningthe consecutive co-occurrence of every distinct pair of words. “Bliss-fully long” can be seen as a positive phrase in a movie review, while“blissfully short” a negative.• Treat the document as a sequence, taking account of all the words inthe context of those that preceded and those that follow.In the next section we explore models for sequences of data, which haveapplications in weather forecasting, speech recognition, language transla-tion, and time-series prediction, to name a few. We continue with thisIMDbexample there.10.5 Recurrent Neural NetworksMany data sources are sequential in nature, and call for special treatmentwhen building predictive models. Examples include:• Documents such as book and movie reviews, newspaper articles, andtweets. The sequence and relative positions of words in a documentcapture the narrative, theme and tone, and can be exploited in taskssuch as topic classification, sentiment analysis, and language transla-tion.• Time series of temperature, rainfall, wind speed, air quality, and soon. We may want to forecast the weather several days ahead, or cli-mate several decades ahead.• and bond prices, and exchange rates. Here prediction is oftendifficult, but as we will see, certain indices can be predicted withreasonable accuracy.• Recorded speech, musical recordings, and other sound recordings. Wemay want to give a text transcription of a speech, or perhaps a lan-guage translation. We may want to assess the quality of a piece ofmusic, or assign certain attributes.• Handwriting, such as doctor’s notes, and handwritten digits such aszip codes. Here we want to turn the handwriting into digital text, orread the digits (optical character recognition).In arecurrent neural network(RNN), the input objectXis asequence.recurrentneuralnetworkConsider a corpus of documents, such as the collection ofIMDbmovie re-views. Each document can be represented as a sequence ofLwords, soX={X1,X2,...,XL}, where eachX/lscriptrepresents a word. The order ofthe words, and closeness of certain words in a sentence, convey semanticmeaning. RNNs are designed to accommodate and take advantage of thesequential nature of such input objects, much like convolutional neural net-works accommodate the spatial structure of image inputs. The outputYcan also be a sequence (such as in language translation), but often is ascalar, like the binary sentiment label of a movie review document.10.5 Recurrent Neural Networks 10.12. Schematic of a simple recurrent neural network. The input is a
sequence of vectors {X/lscript}L
1, and here the target is a single response. The network
processes the input sequence Xsequentially; each X/lscriptfeeds into the hidden layer,
which also has as input the activation vector A/lscript−1from the previous element in
the sequence, and produces the current activation vector A/lscript. The same collections
of weights W,UandBare used as each element of the sequence is processed. The
output layer produces a sequence of predictions O/lscriptfrom the current activation
A/lscript, but typically only the last of these, OL, is of relevance. To the left of the equal
sign is a concise representation of the network, which is unrolled into a more
explicit version on the L}as input, a simple output Y, and a hidden-layer
sequence {A/lscript}L
1={A1,A2,...,A L}. EachX/lscriptis a vector; in the document
example X/lscriptcould represent a one-hot encoding for the /lscriptth word based on
the language dictionary for the corpus (see the top panel in Figure 10.13
for a simple example). As the sequence is processed one vector X/lscriptat a
time, the network updates the activations A/lscriptin the hidden layer, taking
as input the vector X/lscriptand the activation vector A/lscript−1from the previous
step in the sequence. Each A/lscriptfeeds into the output layer and produces a
prediction O/lscriptforY.OL, the last of these, is the most relevant.
In detail, suppose each vector X/lscriptof the input sequence has /lscriptp), and the hidden layer consists of /lscriptK). As in Figure 10.4, we represent the collection of K×
(p+1) shared weights wkjfor the input layer by a matrix W, and similarly
Uis aK×Kmatrix of the weights uksfor the hidden-to-hidden layers,
andBis aK+1vector of weights βkfor the output layer. (10.16)
and the output O/lscriptis computed (10.17)
for a quantitative response, or with an additional sigmoid activation func-
tion for a binary response, for example. Here g(·)is an activation function
such as ReLU. Notice that the same weights W,UandBare used as we418 10. Deep Learning
process each element in the sequence, i.e. they are not functions of /lscript. This
is a form of weight sharing used by RNNs, and similar to the use of filtersweight
sharingin convolutional neural networks (Section 10.3.1.) As we proceed from be-
ginning to end, the activations A/lscriptaccumulate a history of what has been
seen before, so that the learned context can be used for prediction.
For regression problems the loss function for an observation (X,Y)is
(Y−OL)2, (10.18)
whichonlyreferencesthefinaloutput L−1arenotused.Whenwefitthemodel,eachelement X/lscriptoftheinput
sequence Xcontributes to OLvia the chain ( 10.16), and hence contributes
indirectly to learning the shared parameters W,UandBvia the loss
(10.18). Withninput sequence/response pairs (xi,yi),the parameters are
found by minimizing the sum of we use lowercase letters for the observed yiand vector sequences
xi={xi1,xi2,...,x iL},15as well as the derived activations.
Since the intermediate outputs O/lscriptare not used, one may well ask why
they are there at all. First of all, they come for free, since they use the same
outputweights Bneededtoproduce OL,andprovideanevolvingprediction
for the output. Furthermore, for some learning tasks the response is also a
sequence, and so the output sequence {O1,O2,...,O L}is explicitly needed.
When used at full strength, recurrent neural networks can be quite com-
plex. We illustrate their use in two simple applications. In the first, we
continue with the IMDbsentiment analysis of the previous section, where
we process the words in the reviews sequentially. In the second application,
we illustrate their use in a financial time series forecasting problem.
10.5.1 Sequential Models for Document Classification
Here we return to our classification task with the IMDbreviews. Our ap-
proach in Section 10.4was to use the bag-of-words model. Here the plan
is to use instead the sequence of words occurring in a document to make
predictions about the label for the entire document.
We have, however, a dimensionality problem: each word in our document
is represented by a one-hot-encoded vector (dummy variable) with 10,000
elements (one per word in the dictionary)! An approach that has become
popular is to represent each word in a much lower-dimensional embeddingembeddingspace. This means that rather than representing each word by a binary
vector with 9,999 zeros and a single one in some position, we will represent
it instead by a set of mreal numbers, none of which are typically zero. Here
mis the embedding dimension, and can be in the low 100s, or even less.
This means (in our case) that we need a matrix Eof dimension m×10,000,
15This is a sequence of vectors; each element xi/lscriptis ap-vector.10.5 Recurrent Neural Networks 10.13. Depiction of a sequence of 20words representing a single doc-
ument: one-hot encoded using a dictionary of 16words (top panel) and embedded
in anm-dimensional space with m=5(bottom panel).
where each column is indexed by one of the 10,000 words in our dictionary,
and the values in that column give the mcoordinates for that word in the
embedding space.
Figure10.13illustrates the idea (with a dictionary of 16 rather than
10,000, and m=5). Where does Ecome from? If we have a large corpus
of labeled documents, we can have the neural network learnEas part
of the optimization. In this case Eis referred to as an embedding layer,embedding
layerand a specialized Eis learned for the task at hand. Otherwise we can
insert a precomputed matrix Ein the embedding layer, a process known
asweight freezing . Two pretrained embeddings, word2vec andGloVe, areweight
freezing
word2vec
GloVewidely used.16These are built from a very large corpus of documents by
a variant of principal components analysis (Section 12.2). The idea is that
the positions of words in the embedding space preserve semantic meaning;
e.g. synonyms should appear near each other.
So far, so good. Each document is now represented as a sequence of m-
vectors that represents the sequence of words. The next step is to limit
each document to the last Lwords. Documents that are shorter than L
get padded with zeros upfront. So now each document is represented by a
series consisting of LvectorsX={X1,X2,...,X L}, and each X/lscriptin the
sequence has mcomponents.
We now use the RNN structure in Figure 10.12. The training corpus
consists of nseparate series (documents) of length L, each of which gets
processed sequentially from left to right. In the process, a parallel series of
hidden activation vectors A/lscript,/lscript=1,...,L is created as in ( 10.16) for each
document. We use the final value OLto predict the response: the sentiment of the
review.
16word2vec is described in Mikolov, Chen, Corrado, and Dean (2013), .GloVeis described in Pennington,
Socher, and Manning (2014), available at https://nlp.stanford.edu/projects/glove .420 10. Deep Learning
This is a simple RNN, and has relatively few parameters. If there are K
hidden units, the common weight matrix WhasK×(m+ 1) parameters,
the matrix UhasK×Kparameters, and Bhas2(K+ 1) for the two-class
logistic regression as in ( 10.15). These are used repeatedly as we process
the sequence X={X/lscript}L
1from left to right, much like we use a single
convolution filter to process each patch in an image (Section 10.3.1). If the
embedding layer Eis learned, that adds an additional m×Dparameters
(D= 10 ,000here), and is by far the biggest cost.
We fit the RNN as described in Figure 10.12and the accompaying text to
theIMDbdata. The model had an embedding matrix Ewithm= 32 (which
was learned in training as opposed to precomputed), followed by a single
recurrent layer with K= 32 hidden units. The model was trained with
dropout regularization on the 25,000 reviews in the designated training
set, and achieved a disappointing 76% accuracy on the IMDbtest data. A
network using the GloVepretrained embedding matrix Eperformed slightly
worse.
For ease of exposition we have presented a very simple RNN. More elab-
orate versions use long term andshort term memory (LSTM). Two tracks
of hidden-layer activations are maintained, so that when the activation A/lscript
is computed, it gets input from hidden units both further back in time,
and closer in time — a so-called LSTM RNN . With long sequences, thisLSTM RNNovercomes the problem of early signals being washed out by the time they
get propagated through the chain to the final activation vector AL.
When we refit our model using the LSTM architecture for the hidden
layer, the performance improved to 87% on the IMDbtest data. This is com-
parable with the 88% achieved by the bag-of-words model in Section 10.4.
We give details on fitting these models in Section 10.9.6.
Despite this added LSTM complexity, our RNN is still somewhat “entry
level”. We could probably achieve slightly better results by changing the
size of the model, changing the regularization, and including additional
hidden layers. However, LSTM models take a long time to train, which
makes exploring many architectures and parameter optimization tedious.
RNNs provide a rich framework for modeling data sequences, and they
continue to evolve. There have been many advances in the development
of RNNs — in architecture, data augmentation, and in the learning algo-
rithms. At the time of this writing (early 2020) the leading RNN configura-
tions report accuracy above 95% on the IMDbdata. The details are beyond
the scope of this book.17
10.5.2 Time Series Forecasting
Figure10.14shows historical trading statistics from the New York Stock
Exchange. Shown are three daily time series covering the period December
3, 1962 to December 31, 1986:18
17AnIMDbleaderboard can be found at .
18These data were assembled by LeBaron and Weigend (1998) IEEE Transactions on
Neural Networks , 9(1): 213–220.10.5 Recurrent Neural Networks 421Log(Trading Volume)−1.0 0.0 0.5 1.0Dow Jones Return−0.04 0.00 0.04
19651970197519801985−13 −11 −9 −8Log(Volatility)FIGURE 10.14. Historical trading statistics from the New York Stock Exchange.
Daily values of the normalized log trading volume, DJIA return, and log volatility
are shown for a 24-year period from 1962–1986. We wish to predict trading volume
on any day, given the history on all earlier days. To the left of the red bar (January
2, 1980) is training data, and to the right test data.
•Log trading volume traded on that day, relative to a 100-day moving average of past
turnover, on the log scale.
•Dow Jones return . This is the difference between the log of the Dow
Jones Industrial Index on consecutive trading days.
•Log volatility . This is based on the absolute values of daily price
movements.
Predicting stock prices is a notoriously hard problem, but it turns out that
predicting trading volume based on recent past history is more manageable
(and is useful for planning trading strategies).
An observation here consists of the measurements (vt,rt,zt)on dayt, in
this case the values for log_volume ,DJ_return andlog_volatility . There
areatotalof Figure 10.14. One feature that strikes us immediately is that the day-
to-day observations are not independent of each other. The series exhibit
auto-correlation — in this case values nearby in time tend to be similarauto-
correlation to each other. This distinguishes time series from other data sets we have
encountered, in which observations can be assumed to be independent of422 10. Deep Learning
0 5 10 15 20 25 30 350.0 0.4 0.8Log( Trading Volume)
LagAutocorrelation FunctionFIGURE 10.15. The autocorrelation function for log_volume . We see that
nearby values are fairly strongly correlated, with correlations above 0.2as far as
20 days apart.
each other. To be clear, consider pairs of observations (vt,vt−/lscript),alagof/lscriptlagdays apart. If we take all such pairs in the vtseries and compute their corre-
lation coefficient, this gives the autocorrelation at lag /lscript. Figure10.15shows
the autocorrelation function for all lags up to 37, and we see considerable
correlation.
Another interesting characteristic of this forecasting problem is that the
response variable vt—log_volume — is also a predictor! In particular, we
will use the past values of log_volume to predict values in the future.
RNN forecaster
We wish to predict a value vtfrom past values vt−1,vt−2,..., and also to
make use of past values of the other series rt−1,rt−2,...andzt−1,zt−2,....
Although our combined data is quite a long series with 6,051 trading
days, the structure of the problem is different from the previous document-
classification example.
• We only have one series of data, not 25,000.
• We have an entire seriesof targets vt, and the inputs include past
values of this series.
How do we represent this problem in terms of the structure displayed in
Figure10.12? The idea is to extract many short mini-series of input se-
quencesX={X1,X2,...,X L}with a predefined length L(called the laglagin this context), and a corresponding target Y. They have the here the target Yis the value of log_volume vtat a single timepoint t,
and the input sequence Xis the series of 3-vectors {X/lscript}L
1each consisting
of the three measurements log_volume ,DJ_return andlog_volatility from
dayt−L,t−L+1, up tot−1. Each value of tmakes a separate (X,Y)
pair, for trunning from L+1toT. For the NYSEdata we will use the past10.5 Recurrent Neural Networks 423
1980198219841986−1.0 0.0 0.5 1.0Test Period: Observed and Predicted
Yearlog(Trading Volume)FIGURE 10.16. RNN forecast of log_volume on theNYSEtest data. The black
lines are the true volumes, and the superimposed orange the forecasts. The fore-
casted series accounts for 42% of the variance of log_volume .
five trading days to predict the next day’s trading volume. Hence, we use
L=5. SinceT=6,051, we can create 6,046 such (X,Y)pairs. Clearly L
is a parameter that should be chosen with care, perhaps using validation
data.
We fit this model with K= 12 hidden units using the 4,281 training
sequences derived from the data before January 2, 1980 (see Figure 10.14),
and then used it to forecast the 1,770 values of log_volume after this date.
We achieve an R2=0.42on the test data. Details are given in Sec-
tion10.9.6. As astraw man ,19using yesterday’s value for log_volume as
the prediction for today has R2=0.18. Figure 10.16shows the forecast
results. We have plotted the observed values of the daily log_volume for the
test period 1980–1986 in black, and superimposed the predicted series in
orange. The correspondence seems rather good.
In forecasting the value of log_volume in the test period, we have to use
the test data itself in forming the input sequences X. This may feel like
cheating, but in fact it is not; we are always using past data to predict the
future.
Autoregression
The RNN we just fit has much in common with a traditional autoregressionauto-
regression (AR) linear model, which we present now for comparison. We first consider
the response sequence vtalone, and construct a response vector yand a
matrixMof predictors for least squares regression as vLvL−1··· v1
1vL+1 vL··· v2
1vL+2vL+1··· have T−Lrows, one per observation. We see that the
predictors for any given response vton daytare the previous Lvalues
19A straw man here refers to a simple and sensible prediction that can be used as a
baseline for comparison.424 10. Deep Learning
of the same series. Fitting a regression of yonMamounts to fitting (10.22)
and is called an order- Lautoregressive model, or simply AR( L). For the
NYSEdata we can include lagged versions of DJ_return andlog_volatility ,
rtandzt, in the predictor matrix M, resulting in 3L+1columns. An AR
model with L=5 achieves a test R2of0.41, slightly inferior to the 0.42
achieved by the RNN.
Of course the RNN and AR models are very similar. They both use
the same response Yand input sequences Xof length L=5 and dimen-
sionp=3 in this case. The RNN processes this sequence from left to
right with the same weights W(for the input layer), while the AR model
simply treats all Lelements of the sequence equally as a vector of L×p
predictors — a process called flattening in the neural network literature.flatteningOf course the RNN also includes the hidden layer activations A/lscriptwhich
transfer information along the sequence, and introduces additional nonlin-
earity. From ( 10.19) withK= 12 hidden units, we see that the RNN has
13 + 12 ×(1 + 3 + 12) = 205 parameters, compared to the 16 for the AR( 5)
model.
An obvious extension of the AR model is to use the set of lagged predic-
tors as the input vector to an ordinary feedforward neural network ( 10.1),
and hence add more flexibility. This achieved a test R2=0.42, slightly
better than the linear AR, and the same as the RNN.
All the models can be improved by including the variable day_of_week
corresponding to the day tof the target vt(which can be learned from the
calendar dates supplied with the data); trading volume is often higher on
Mondays and Fridays. Since there are five trading days, this one-hot en-
codes to five binary variables. The performance of the AR model improved
toR2=0.46as did the RNN, and the nonlinear AR model improved to
R2=0.47.
We used the most simple version of the RNN in our examples typically of up to 1% in R2in these examples.
We give details of how we fit all three models in Section 10.9.6.
10.5.3 Summary of RNNs
We have illustrated RNNs through two simple use cases, and have only
scratched the surface.
There are many variations and enhancements of the simple RNN we
used for sequence modeling. One approach we did not discuss uses a one-
dimensional convolutional neural network, treating the sequence of vectors
(say words, as represented in the embedding space) as an image. The con-
volution filter slides along the sequence in a one-dimensional fashion, with
the potential to learn particular phrases or short subsequences relevant to
the learning task.
One can also have additional hidden layers in an RNN. For example,
with two hidden layers, the sequence A/lscriptis treated as an input sequence to
the next hidden layer in an obvious fashion.10.6 When to Use Deep Learning 425
The RNN we used scanned the document from beginning to end; alter-
nativebidirectional RNNs scan the sequences in both directions.bidirectionalIn language translation the target is also a sequence of words, in a
language different from that of the input sequence. Both the input se-
quence and the target sequence are represented by a structure similar to
Figure10.12, and they share the hidden units. In this so-called Seq2SeqSeq2Seqlearning, the hidden units are thought to capture the semantic meaning
of the sentences. Some of the big breakthroughs in language modeling and
translation resulted from the relatively recent improvements in such RNNs.
Algorithms used to fit RNNs can be complex and computationally costly.
Fortunately, good software protects users somewhat from these the models that we enjoy in daily life (like Google Translate ) use state-
of-the-art architectures developed by teams of highly skilled engineers, and
have been trained using massive computational and data resources.
10.6 When to Use Deep Learning
The performance of deep learning in this chapter has been rather impres-
sive. It nailed the digit classification problem, and deep CNNs have really
revolutionized image classification. We see daily reports of new success sto-
ries for deep learning. Many of these are related to image classification
tasks, such as machine diagnosis of mammograms or digital X-ray images,
ophthalmology eye scans, annotations of MRI scans, and so on. Likewise
there are numerous successes of RNNs in speech and language translation,
forecasting, and document modeling. The question that then begs an an-
swer is:should we discard all our older tools, and use deep learning on every
problem with data? To address this question, we revisit our Hittersdataset
from Chapter 6.
This is a regression problem, where the goal is to predict the Salaryof
a baseball player in 1987 using his performance statistics from 1986. After
removing players with missing responses, we are left with 263 players and
19 variables. We randomly split the data into a training set of 176 fitting a regression model to these data.
• the test data. The model has 20 parameters.
• The same linear model was fit with lasso regularization. The tuning
parameter was selected by 10-fold cross-validation on the A neural network with one hidden layer consisting of 64 ReLUunits
was fit to the data. This model has 1,345 parameters.20
20The model was fit by stochastic gradient descent with a batch size of 32 for 1,000
epochs, and 10% dropout regularization. The test error performance flattened out and
started to slowly increase after 1,000 epochs. These fitting details are discussed in Sec-
tion10.7.426 10. Deep Learning
Model # Parameters Mean Abs. Error Test Set R2
Linear Regression 20 254.7 0.56
Lasso 12 252.3 0.51
Neural Network 1345 257.4 0.54
TABLE 10.2. Prediction results on the Hitters test data for linear models fit
by ordinary least squares and lasso, compared to a neural network fit by stochastic
gradient descent with dropout regularization.
Coefficient Std. error t-statistic p-value
Intercept -226.67 86.26 -2.63 0.0103
Hits 3.06 1.02 3.00 0.0036
Walks 0.181 2.04 0.09 0.9294
CRuns 0.859 0.12 7.09 <0.0001
PutOuts 0.465 0.13 3.60 0.0005
TABLE 10.3. Least squares coefficient estimates associated with the regres-
sion ofSalaryon four variables chosen by lasso on the Hitters data set. This
model achieved the best performance on the test data, with a mean absolute error
of 224.8. The results reported here were obtained from a regression on the test
data, which was not used in fitting the lasso model.
Table10.2compares the results. We see similar performance for all three
models. We report the mean absolute error on the test data, as well as
the test R2for each method, which are all respectable (see Exercise 5).
We spent a fair bit of time fiddling with the configuration parameters of
the neural network to achieve these results. It is possible that if we were to
spend more time, and got the form and amount of regularization just right,
that we might be able to match or even outperform linear regression and
the lasso. But with great ease we obtained linear models that work well.
Linear models are much easier to present and understand than the neural
network, which is essentially a black box. The lasso selected 12 of the 19
variables in making its prediction. So in cases like this we are much better
off following the Occam’s razor principle: when faced with several methodsOccam’s
razorthat give roughly equivalent performance, pick the simplest.
After a bit more exploration with the lasso model, we identified an even
simpler model with four variables. We then refit the linear model with relaxed lasso ),andachieved
a test mean absolute error of 224.8, the overall winner! It is tempting to
present the summary table from this fit, so we can see coefficients and p-
values; however, since the model was selected on the training data, there
would be selection bias . Instead, we refit the model on the test data, which
was not used in the selection. Table 10.3shows the random forests and boosting, support vector machines and gen-
eralized additive models, to name a few. And then we have linear models,
and simple variants of these. When faced with new data modeling and pre-
diction problems, it’s tempting to always go for the trendy new methods.
Often they give extremely impressive results, especially when the datasets
are very large and can support the fitting of high-dimensional nonlinear
models. However, ifwe can produce models with the simpler tools that10.7 Fitting a Neural Network 427
perform as well, they are likely to be easier to fit and understand, and po-
tentially less fragile than the more complex approaches. Wherever possible,
it makes sense to try the simpler models as well, and then make a choice
based on the performance/complexity tradeoff.
Typically we expect deep learning to be an attractive choice when the
sample size of the training set is extremely large, and when interpretability
of the model is not a high priority.
10.7 Fitting a Neural Network
Fitting neural networks is somewhat complex, and we give a brief overview
here. The ideas generalize to much more complex networks. Readers who
find this material challenging can safely skip it. Fortunately, as we see in
the lab at the end of this chapter, good software is available to fit neural
network models in a relatively automated way, without worrying about the
technical details of the model-fitting procedure.
We start with the simple network depicted in Figure 10.1in Section 10.1.
In model ( 10.1) the parameters are β=(β0,β1,...,βK), as well as each of
thewk=(wk0,wk1,...,w kp),k=1,...,K . Givenobservations (xi,yi),i=
1, . . . , n, (10.24)
The objective in ( 10.23) looks simple enough, but because of the nested
arrangement of the parameters and the symmetry of the hidden units, it is
not straightforward to minimize. The problem is nonconvex in the param-
eters, and hence there are multiple solutions. As an example, Figure 10.17
shows a simple nonconvex function of a single variable θ; there are two
solutions: one is a local minimum and the other is a global minimum . Fur-local
minimum
global
minimumthermore, ( 10.1) is the very simplest of neural networks; in this chapter we
have presented much more complex ones where these problems are com-
pounded. To overcome some of these issues and to protect from overfitting,
two general strategies are employed when fitting neural networks.
•Slow Learning: the model is fit in a somewhat slow iterative fash-
ion, using gradient descent . The fitting process is then stopped whengradient
descentoverfitting is detected.
•Regularization: ridge as discussed in Section 6.2.
Suppose we represent all the parameters in one long vector θ. Then we
can rewrite the objective in ( 10.23) (10.25)428 10. Deep Learning
FIGURE 10.17. Illustration of gradient descent for one-dimensional θ. The
objective function R(θ)is not convex, and has two minima, one at θ=−0.46
(local), the other at θ=1.02(global). Starting at some value θ0(typically ran-
domly chosen), each step in θmoves downhill — against the gradient — until it
cannot go down any further. Here gradient descent reached the global minimum
in7steps.
where we make explicit the dependence of fon the parameters. The idea
of gradient descent is very simple.
1. Start with a guess θ0for all the parameters in θ, and set t=0.
2. Iterate until the objective ( 10.25) fails to decrease:
(a) Findavector δthatreflectsasmallchangein θ,suchthat θt+1=
θt+δreducesthe objective; i.e. such that R(θt+1)<R(θt).
(b) Sett←t+1.
One can visualize (Figure 10.17) standing in a mountainous terrain, and
the goal is to get to the bottom through a series of steps. As long as each
step goes downhill, we must eventually get to the bottom. In this case we
were lucky, because with our starting guess θ0we end up at the global
minimum. In general we can hope to end up at a (good) local minimum.
10.7.1 θsoastodecreasetheobjective R(θ)
in (10.25)? Thegradient ofR(θ), evaluated at some current value θ=θm,gradientis the vector of partial derivatives at that (10.26)
The subscript θ=θmmeans that after computing the vector of derivatives,
we evaluate it at the current guess, θm. This gives the direction in θ-space
in which R(θ)increases most rapidly. The idea of gradient descent is to
moveθa little in the opposite direction (since we wish to go downhill):
θm+1←θm−ρ∇R(θm). (10.27)−1.0 −0.5 0.0 0.5 Fitting a Neural Network 429
For a small enough value of the learning rate ρ, this step will decrease thelearning rateobjective R(θ); i.e.R(θm+1)≤R(θm). If the gradient vector is zero, then
we may have arrived at a minimum of the objective.
How complicated is the calculation ( 10.26)? It turns out that it is quite
simple here, and remains simple even for much more complex networks,
because of the chain rule of differentiation.chain a sum, its gradient
is also a sum over the nobservations, so we will just examine one of (10.28)
To simplify the expressions to follow, we write zik=wk0+/summationtextp
j=1wkjxij.
First we take the derivative with respect to (10.29)
And now we take the derivative with respect to (10.30)
Notice that both these expressions contain the residual yi−fθ(xi). In
(10.29) we see that a fraction of that residual gets attributed to each of
the hidden units according to the value of g(zik). Then in ( 10.30) we see
a similar attribution to input jvia hidden unit k. So the act of differen-
tiation assigns a fraction of the residual to each of the parameters via the
chain rule — a process known as backpropagation in the neural networkbackprop-
agationliterature. Although these calculations are straightforward, it takes careful
bookkeeping to keep track of all the pieces.
10.7.2 Regularization and Stochastic Gradient Descent
Gradient descent usually takes many steps to reach a local minimum. In
practice, there are a number of approaches for accelerating the process.
Also, when nis large, instead of summing ( 10.29)–(10.30) over all nob-
servations, we can sample a small fraction or minibatch of them each timeminibatchwe compute a gradient step. This process is known as stochastic gradient
descent(SGD) and is the state of the art for learning deep neural there is very good software for setting up deep learning mod-
els, and for fitting them to data, so most of the technicalities are hidden
from the user.
We now turn to the multilayer network (Figure 10.4) used in the times the number of training examples. Regularization is essential here430 10. Deep Learning
0 5 10 15 20 25 300.1 0.2 0.3 0.4EpochsValue of Objective FunctionTraining SetValidation Set
0 5 10 15 20 25 300.00 0.02 0.04 0.06 0.08 0.10 0.12EpochsClassification ErrorFIGURE 10.18. Evolution of training and validation errors for the MNISTneural
network depicted in Figure 10.4, as a function of training epochs. The objective
refers to the log-likelihood ( 10.14).
to avoid overfitting. The first row in Table 10.1uses ridge regularization on
the weights. This is achieved by augmenting the objective function ( 10.14)
with a penalty + λ/summationdisplay
jθ2
j. (10.31)
The parameter λis often preset at a small value, or else it is found using the
validation-set approach of Section 5.3.1. We can also use different values of
λfor the groups of weights from different layers; in this case W1andW2
were penalized, while the relatively few weights Bof the output layer were
not penalized at all. Lasso regularization is also popular as an additional
form of regularization, or as an alternative to ridge.
Figure10.18shows some metrics that evolve during the training of the
network on the MNISTdata. It turns out that SGD naturally enforces its
own form of approximately quadratic regularization.21Here the epochslabelingtheepochshorizontal axis in Figure 10.18counts the number of times an equivalent of
the full training set has been processed. For this network, 20% of the 60,000
training observations were used as a validation set in order to determine
when training should stop. So in fact 48,000 observations were used for
training, and hence there are 48,000/128≈375minibatch gradient updates
per epoch. We see that the value of the validation objective actually starts
to increase by 30 epochs, so early stopping can also be used as an additionalearly
stoppingform of regularization.
21This and other properties of SGD for deep learning are the subject of much research
in the machine learning literature at the time of writing.10.7 Fitting a Neural Network 431
FIGURE 10.19. Dropout Learning. Left: a fully connected network. Right: net-
work with dropout in the input and hidden layer. The nodes in grey are selected
at random, and ignored in an instance of training.
10.7.3 Dropout Learning
The second row in Table 10.1is labeled dropout. This is a relatively newdropoutand efficient form of regularization, similar in some respects to ridge reg-
ularization. Inspired by random forests (Section 8.2), the idea is to ran-
domly remove a fraction φof the units in a layer when fitting the model.
Figure10.19illustrates this. This is done separately each time a training
observation is processed. The surviving units stand in for those missing,
and their weights are scaled up by a factor of 1/(1−φ)to compensate.
This prevents nodes from becoming over-specialized, and can be seen as
a form of regularization. In practice dropout is achieved by randomly set-
ting the activations for the “dropped out” units to zero, while keeping the
architecture intact.
10.7.4 Network Tuning
The network in Figure 10.4is considered to be relatively straightforward;
it nevertheless requires a number of choices that all have an effect on the
performance:
•The number of hidden layers, and the number of units per layer.
Modern thinking is that the number of units per hidden layer can
be large, and overfitting can be controlled via the various forms of
regularization.
•Regularization tuning parameters. These include the dropout rate φ
and the strength λof lasso and ridge regularization, and are typically
set separately at each layer.
•Details of stochastic gradient descent. These include the batch size,
the number of epochs, and if used, details of data augmentation (Sec-
tion10.3.4.)
Choices such as these can make a difference. In preparing this MNISTexam-
ple, we achieved a respectable 1.8%misclassification error after some trial
and error. Finer tuning and training of a similar network can get under
1%error on these data, but the tinkering process can be tedious, and can
result in overfitting if done carelessly.432 10. Deep Learning
251020500.0 0.5 1.0 1.5 2.0Degrees of FreedomErrorTraining ErrorTest Error
FIGURE 10.20. Double descent phenomenon, illustrated using error plots for a
one-dimensional natural spline example. The horizontal axis refers to the number
of spline basis functions on the log scale. The training error hits zero when the
degrees of freedom coincides with the sample size n= 20 , the “interpolation
threshold”, and remains zero thereafter. The test error increases dramatically
at this threshold, but then descends again to a reasonable value before finally
increasing again.
10.8 Interpolation and Double first presented in Section 2.2.2. This trade-off indicates that statistical
learning methods tend to perform the best, in terms of test-set error, for an
intermediate level of model complexity. In particular, if we plot “flexibil-
ity” on the x-axis and error on the y-axis, then we generally expect to see
that test error has a U-shape, whereas training error decreases monotoni-
cally. Two “typical” examples of this behavior can be seen in the right-hand
panel of Figure 2.9on page29, and in Figure 2.17on page39. One implica-
tion of the bias-variance trade-off is that it is generally not a good idea to
interpolate the training data — that is, to get zero training error — sinceinterpolatethat will often result in very high test statistical learning method that interpolates the training data to perform
well — or at least, better than a slightly less complex model that does not
quite interpolate the data. This phenomenon is known as double descent ,
and is displayed in Figure 10.20. “Double descent” gets its name from the
fact that the test error has a U-shape before the interpolation threshold is
reached, and then it descends again (for a while, at least) as an increasingly
flexible model is fit.
We now describe the set-up that resulted in Figure 10.20. We simulated
n= 20 observations from the model
Y= sin( X)+/epsilon1,
whereX∼U[−5,5](uniform distribution), and /epsilon1∼N(0,σ2)withσ=0.3.
We then fit a natural spline to the data, as described in Section 7.4, withd10.8 Interpolation and Double Descent 433
−4 −2 0 2 4−3 −2 −1 0 1 2 38 Degrees of Freedom
seq(−5, 5, len = 1000)−4 −2 0 2 4−3 −2 −1 0 1 2 320 Degrees of Freedom
seq(−5, 5, len = 1000)f(seq(−5, 5, len = 1000))
−4 −2 0 2 4−3 −2 −1 0 1 2 342 Degrees of Freedom
−4 −2 0 2 4−3 −2 −1 0 1 2 380 Degrees of Freedomf(seq(−5, 5, len = 1000))FIGURE 10.21. Fitted functions ˆfd(X)(orange), true function f(X)(black)
and the observed 20training data points. A different value of d(degrees of freedom)
is used in each panel. For d≥20the orange curves all interpolate the training
points, and hence the training error is zero.
degrees of freedom.22Recall from Section 7.4that fitting a natural spline
withddegrees of freedom amounts to fitting a least-squares regression
of the response onto a set of dbasis functions. The upper-left panel of
Figure10.21shows the data, the true function f(X), andˆf8(X), the fitted
natural spline with d=8degrees of freedom.
Next,wefitanaturalsplinewith d= 20 degreesoffreedom.Since n= 20 ,
this means that n=d, and we have zero training error; in other words, we
have interpolated the training data! We can see from the top-right panel of
Figure10.21thatˆf20(X)makes wild excursions, and hence the test error
will be large.
We now continue to fit natural splines to the data, with increasing values
ofd. Ford>20, the least squares regression of Yontodbasis functions
is not unique: there are an infinite number of least squares coefficient es-
timates that achieve zero error. To select among them, we choose the one
with the smallest sum of squared coefficients,/summationtextd
j=1ˆβ2
j. This is known as
theminimum-norm solution.
The two lower panels of Figure 10.21show the minimum-norm natural
spline fits with d= 42 andd= 80 degrees of freedom. Incredibly, ˆf42(X)
is quite a bit lessless wild than ˆf20(X),even though it makes use of more
degrees of freedom . Andˆf80(X)is not much different. How can this be?
Essentially, 20 observations using d= 20 basis functions, and that single way
results in a somewhat extreme fitted function. By contrast, there are an
22This implies the choice of dknots, here chosen at dequi-probability quantiles of the
training data. When d>n , the quantiles are found by interpolation.434 10. Deep Learning
infinite number of ways to interpolate n= 20 observations using d= 42 or
d= 80 basis functions, and the smoothest of them — that is, the minimum
norm solution — is much less wild than ˆf20(X)!
In Figure 10.20, we display the training error and test error associated
withˆfd(X), for a range of values of the degrees of freedom d. We see that
the training error drops to zero once d= 20 and beyond; i.e. once the
interpolation threshold is reached. By contrast, the test error shows a U-
shape for d≤20, grows extremely large around d= 20 , and then shows a
second region of descent for d>20. For this example the signal-to-noise
ratio — Var(f(X))/σ2— is5.9, which is quite high (the data points are
close to the true curve). So an estimate that interpolates the data and does
not wander too far inbetween the observed data points will likely do well.
In Figures 10.20and10.21, we have illustrated the double descent phe-
nomenon in a simple one-dimensional setting using natural splines. How-
ever, it turns out that the same phenomenon can arise for deep learning.
Basically, when we fit neural networks with a huge number of parameters,
we are sometimes able to get good results with zero training error. This recognition and language translation, for example. This is because
the techniques used to fit neural networks, including stochastic gradient
descent, naturally lend themselves to selecting a “smooth” interpolating
model that has good test-set performance on these kinds of problems.
Some points are worth emphasizing:
•The double-descent phenomenon does not contradict the bias-variance
trade-off, as presented in Section 2.2.2.Rather, the double-descent
curve seen in the right-hand side of Figure 10.20is a consequence of
the fact that the x-axis displays the number of spline basis functions
used, which does not properly capture the true “flexibility” of models
that interpolate the training data. Stated another way, in this exam-
ple, the minimum-norm natural spline with d= 42 has lower variance
than the natural spline with d= 20 .
•Most of the statistical learning methods seen in this book do not exhibit
double descent. For instance, regularization approaches typically do
not interpolate the training data, and thus double descent does not
occur. This is not a drawback of regularized methods: they can give
great results without interpolating the data !
In particular, in the examples here, if we had fit the natural splines
using ridge regression with an appropriately-chosen penalty rather
than least squares, then we would not have seen double descent, and
in fact would have obtained better test error results.
•In Chapter 9, we saw that maximal margin classifiers and SVMs that
have zero training error nonetheless often achieve very good test error.
This is in part because those methods seek smooth minimum norm
solutions. This is similar to the fact that the minimum-norm natural
spline can give good results with zero training error.
•The double-descent phenomenon has been used by the machine learn-
ing community to explain the successful practice of using an over-10.9 Lab: Deep Learning 435
parametrized neural network (many layers, and many hidden units),
and then fitting all the way to zero training error. However, fitting
to zero error is not always optimal, and whether it is advisable de-
pends on the signal-to-noise ratio. For instance, we may use ridge
regularization to avoid overfitting a neural network, as in ( 10.31). In
this case, provided that we use an appropriate choice for the tuning
parameter λ, we will never interpolate the training data, and thus
will not see the double descent phenomenon. Nonetheless we can get
very good test-set performance, likely much better than we would
have achieved had we interpolated the training data. Early stopping
during stochastic gradient descent can also serve as a form of regular-
ization that prevents us from interpolating the training data, while
still getting very good results on test data.
To summarize: though double descent can sometimes occur in neural net-
works, we typically do not want to rely on this behavior. Moreover, it
is important to remember that the bias-variance trade-off always holds
(though it is possible that test error as a function of flexibility may not
exhibit a U-shape, depending on how we have parametrized the notion of
“flexibility” on the x-axis).
10.9 Lab: Deep Learning
In this section we demonstrate how to fit the examples discussed in the
text. We use the Python torch package, along with the which provides utilities to simplify fitting and evaluating mod-
els. This code can be impressively fast with certain special processors,
such as Apple’s new M1 chip. The package is well-structured, flexible, and
will feel comfortable to Pythonusers. A good companion is the site py-
torch.org/tutorials . Much of our code is adapted from there, as well as the
pytorch_lightning documentation.23
We start with several standard imports that we have seen before.
In[1]: import numpy as np, pandas as pd
from matplotlib.pyplot import subplots
from sklearn.linear_model import sklearn.preprocessing import StandardScaler
from sklearn.model_selection import KFold
from sklearn.pipeline import Pipeline
from ISLP import load_data
from ISLP.models import ModelSpec as MS
from sklearn.model_selection import \
(train_test_split,
GridSearchCV)
23The precise URLs at the time of writing are 10. Deep Learning
Torch-Specific Imports
There are a number of imports for torch. (These are not included with
ISLP, so must be installed separately.) First we import the main library
and essential tools used to specify sequentially-structured networks.
In[2]: import torch
from torch import nn
from torch.optim import RMSprop
from torch.utils.data import TensorDataset
There are several other helper packages for torch. For instance, the
torchmetrics package has utilities to compute various metrics to evalu-torchmetricsate performance when fitting a model. The torchinfo package provides atorchinfouseful summary of the layers of a model. We use the read_image() functionread_image()when loading test images in Section 10.9.4.
In[3]: from torchmetrics import (MeanAbsoluteError,
R2Score)
from torchinfo import summary
from torchvision.io import read_image
The package pytorch_lightning is a somewhat higher-level interface to
torchthat simplifies the specification and fitting of models by reducing the
amount of boilerplate code needed (compared to using torchalone).
In[4]: from pytorch_lightning import Trainer
from pytorch_lightning.loggers import CSVLogger
In order to reproduce results we use seed_everything() . We will alsoseed_
everything() instruct torchto use deterministic algorithms where possible.
In[5]: from pytorch_lightning.utilities.seed import seed_everything
seed_everything(0, warn_only=True)
We will use several datasets shipped with torchvision for our examples:torchvisiona pretrained network for image classification, as well as some transforms
used for preprocessing.
In[6]: from torchvision.datasets import MNIST, CIFAR100
from torchvision.models import (resnet50,
ResNet50_Weights)
from torchvision.transforms import (Resize,
Normalize,
CenterCrop,
ToTensor)
We have provided a few utilities in ISLPspecifically for this lab. The
SimpleDataModule andSimpleModule are simple versions of objects used
inpytorch_lightning , the high-level module for fitting torchmodels. Al-
though more advanced uses such as computing on graphical processing
units (GPUs) and parallel data processing are possible in this module, we
will not be focusing much on these in this lab. The ErrorTracker handles
collections of targets and predictions over each mini-batch in the validation
or test stage, allowing computation of the metric over the entire validation
or test data set.10.9 Lab: Deep Learning 437
In[7]: from ISLP.torch import addition we have included some helper functions to load the IMDb
database, as well as a lookup that maps integers to particular keys in the
database. We’ve included a slightly modified copy of the preprocessed IMDb
data from keras, a separate package for fitting deep learning models. Thiskerassaves us significant preprocessing and allows us to focus on specifying and
fitting the models themselves.
In[8]: from ISLP.torch.imdb import we introduce some utility imports not directly related to torch.
Theglob()function from the globmodule is used to find all files ResNet50
model to some of our own images. The jsonmodule will be used to load ajsonJSON file for looking up classes to identify the labels of the pictures in the
ResNet50 example.
In[9]: from glob import glob
import json
10.9.1 Single Layer Network on Hitters Data
We start by fitting the models in Section 10.6on theHittersdata.
In[10]: Hitters = load_data( 'Hitters' ).dropna()
n=H i t t e r s . s h a p e [ 0 ]
We will fit two linear models (least squares and lasso) and compare their
performance to that of a neural network. For this comparison we will use
mean absolute error on a validation set up the model matrix and the response.
In[11]: model = MS(Hitters.columns.drop( 'Salary' ), intercept=False)
X=m o d e l . f i t _ t r a n s f o r m ( H i t t e r s ) . t o _ n u m p y ( )
Y=H i t t e r s [ 'Salary' ].to_numpy()
Theto_numpy() method above converts pandasdata frames or series toto_numpy()numpyarrays. We do this because we will need to use sklearnto fit the
lasso model, and it requires this conversion. We also use a linear regres-
sion method from sklearn, rather than the method in Chapter 3 from
statsmodels , to facilitate the comparisons.
We now split the data into test and training, fixing the random state
used by sklearnto do the split.438 10. Deep Learning
In[12]: (X_train,
X_test,
Y_train,
Y_test) = Models
We fit the linear model and evaluate the test error directly.
In[13]: hit_lm = LinearRegression().fit(X_train, Y_train)
Yhat_test = hit_lm.predict(X_test)
np.abs(Yhat_test - Y_test).mean()
Out[13]: 259.7153
Next we fit the lasso using sklearn. We are using mean absolute error
to select and evaluate a model, rather than mean squared error. The spe-
cialized solver we used in Section 6.5.2uses only mean squared error. So
here, with a bit more work, we cre atea cross-validation grid and perform
the cross-validation directly.
We encode a pipeline with two steps: we first normalize the features
using a StandardScaler() transform, and then fit the lasso without further
normalization.
In[14]: scaler = StandardScaler(with_mean=True, with_std=True)
lasso = Lasso(warm_start=True, max_iter=30000)
standard_lasso = Pipeline(steps=[( 'scaler' ,s c a l e r ) ,
('lasso' ,l a s s o ) ] )
We need to create a grid of values for λ. As is common practice, we
choose a grid of 100 values of λ, uniform on the log scale from lam_max
down to 0.01*lam_max . Herelam_maxis the smallest value of λwith an all-
zero solution. This value equals the largest absolute inner-product between
any predictor and the (centered) response.24
In[15]: X_s = scaler.fit_transform(X_train)
n=X _ s . s h a p e [ 0 ]
lam_max = np.fabs(X_s.T.dot(Y_train - Y_train.mean())).max() / n
param_grid = { 'alpha' :n p . e x p ( n p . l i n s p a c e ( 0 ,n p . l o g ( 0 . 0 1 ) ,1 0 0 ) )
*l a m _ m a x }
Note that we had to transform the data first, since the scale of the vari-
ables impacts the choice of λ. We now perform cross-validation using this
sequence of λvalues.
In[16]: cv = KFold(10,
shuffle=True,
random_state=1)
grid = GridSearchCV(lasso,
24The derivation of this result is beyond the scope of this book.10.9 Lab: Deep Learning evaluate its performance onX_testandY_test, which were not usedin cross-validation.In[17]:trained_lasso = grid.best_estimator_Yhat_test = - Y_test).mean()Out[17]:257.2382This is similar to the results we got for the linear model fit by least squares.However, these results can vary a lot for different train/test splits; we en-courage the reader to try a different seed in code block 12 and rerun thesubsequent code up to this point.Specifying a Network: Classes and InheritanceTo fit the neural network, we first set up a model structure that describesthe network. Doing so requires us to define new classes specific to the modelwe wish to fit. Typically this is done inpytorchby sub-classing a genericrepresentation of a network, which is the approach we take here. Althoughthis example is simple, we will go through the steps in some detail, since itwill serve us well for the more complex examples to follow.In[18]:class HittersModel(nn.Module):def __init__(self, input_size):super(HittersModel, self).__init__()self.flatten = nn.Flatten()self.sequential = nn.Sequential(nn.Linear(input_size, 50),nn.ReLU(),nn.Dropout(0.4),nn.Linear(50, 1))def forward(self, x):x=s e l f . f l a t t e n ( x )return identifies the code chunk as a declaration for a classHittersModelthat inherits from the base classnn.Module. This base class isubiquitous intorchand represents the mappings in the neural networks.Indented beneath theclassstatement are the methods of this class: inthis case__init__andforward. The__init__method is called when aninstance of the class is created as in the cell below. In the methods,selfalways refers to an instance of the class. In the__init__method, we haveattached two objects toselfas attributes:flattenandsequential. Theseare used in theforwardmethod to describe the map that this moduleimplements.440 10. Deep LearningThere is one additional line in the__init__method, which is a call tosuper(). This function allows subclasses (i.e.HittersModel) to access meth-super()ods of the class they inherit from. For example, the classnn.Modulehas itsown__init__method, which is different from theHittersModel.__init__()method we’ve written above. Usingsuper()allows us to call the methodof the base class. Fortorchmodels, we will always be making thissuper()call as it is necessary for the model to be properly interpreted methods are directly accessible toHittersModelinstances because ofthis inheritance. One such method we will see shortly is theeval()method,used to disable dropout for when we want to evaluate the model on testdata.In[19]:hit_model = HittersModel(X.shape[1])The objectself.sequentialis a composition of four maps. The firstmaps the 19 features ofHittersto 50 dimensions, introducing50×19 + 50parameters for the weights andinterceptof the map (often called finally a linear map down to 1 dimension, again with a bias. The totalnumber of trainable parameters is therefore50×19 + 50 + 50 + 1 = 1051.The packagetorchinfoprovides asummary()function that neatly sum-marizes this information. We specify the size of the input and see the sizeof each tensor as it passes through layers of the (type:depth-idx) Input Shape Output Shape 19] [175]--Flatten: 1-1[175, 19] [175, 19] --Sequential: 1-2[175, 19] [175, 1] --Linear: 2-1[175, 19] [175, 50] 1,000ReLU: 2-2[175, 50] [175, 50] --Dropout: 2-3[175, 50][175, 50]--Linear: 2-4[175, 50] [175, 1] params: 1,051Trainable params: 1,051We have truncated the end of the output slightly, here and in subsequentuses.We now need to transform our training data into a form accessible totorch. The basic datatype intorchis atensor, which is very similar toanndarrayfrom early chapters. We also note here thattorchtypicallyworks with 32-bit (single precision) rather than 64-bit (double precision)floating point numbers. We therefore convert our data tonp.float32beforeforming the tensor. TheXandYtensors are then arranged into aDatasetDataset10.9 Lab: Deep Learning 441
recognized by torchusingTensorDataset() .Tensor
Dataset()In[21]: X_train_t = = = TensorDataset(X_train_t, Y_train_t)
We do the same for the test data.
In[22]: X_test_t = = = TensorDataset(X_test_t, Y_test_t)
Finally, this dataset is passed to a DataLoader() which ultimately passes
data into our network. While this may seem like a lot of overhead, this
structure is helpful for more complex tasks where data may live on different
machines, or where data must be passed to a GPU. We provide a helper
function SimpleDataModule() inISLPto make this task easier for standardSimpleData
Module() usage. One of its arguments is num_workers , which indicates how many
processes we will use for loading the data. For small data like Hitters
this will have little effect, but it does provide an advantage for the MNIST
andCIFAR100 examples below. The torchpackage will inspect the process
running and determine a maximum number of workers.25We’ve included a
function rec_num_workers() to compute this so we know how many workers
might be reasonable (here the max was 16).
In[23]: max_num_workers = rec_num_workers()
The general training setup in pytorch_lightning involves training, vali-
dation and test data. These are each represented by different data loaders.
During each epoch, we run a training step to learn the model and a vali-
dation step to track the error. The test data is typically used at the end of
training to evaluate the model.
In this case, as we had split only into test and training, we’ll use the
test data as validation data with the argument validation=hit_test . The
validation argument can be a float between 0 and 1, an integer, or a
Dataset. If a float (respectively, integer), it is interpreted as a percentage
(respectively number) of the trainingobservations to be used for validation.
If it is a Dataset, it is passed directly to a data loader.
In[24]: hit_dm = max_num_workers),
validation=hit_test)
Next we must provide a pytorch_lightning module that controls the
steps performed during the training process. We provide methods for our
SimpleModule() that simply record the value of the loss function and the methods , though
we will not be modifying these in our examples.
25This depends on the computing hardware and the number of cores available.442 10. Deep Learning
In[25]: hit_module = SimpleModule.regression(hit_model,
metrics={ 'mae':MeanAbsoluteError()})
By using the SimpleModule.regression() method, we indicate that weSimpleModule.
regression() will use squared-error loss as in ( 10.23). We have also asked for mean ab-
solute error to be tracked as well in the metrics that are logged.
We log our results via CSVLogger() , which in this case stores the results
in a CSV file within a directory logs/hitters . After the fitting is complete,
this allows us to load the results as a pd.DataFrame() and visualize them
below. There are several ways to log the results within pytorch_lightning ,
though we will not cover those here in detail.
In[26]: hit_logger = CSVLogger( 'logs',n a m e = 'hitters' )
Finally we are ready to train our model and log the results. We use
theTrainer() object from pytorch_lightning to do this work. The argu-
mentdatamodule=hit_dm tells the trainer how training/validation/test logs
are produced, while the first argument hit_module specifies the network
architecture as well as the training/validation/test steps. The callbacks
argument allows for several tasks to be carried out at various points while
training a model. Here our ErrorTracker() callback will enable us to com-
pute validation error while training and, finally, the test error. We now fit
the model for 50 epochs.
In[27]: hit_trainer = datamodule=hit_dm)
At each step of SGD, the algorithm randomly selects 32 training observa-
tions for the computation of the gradient. Recall from Section 10.7that an
epoch amounts to the number of SGD steps required to process nobserva-
tions. Since the training set has n= 175, and we specified a batch_size of
32 in the construction of hit_dm, an epoch is 175/32 = 5.5SGD steps.
After having fit the model, we can evaluate performance on our test data
using the test()method of our trainer.
In[28]: hit_trainer.test(hit_module, datamodule=hit_dm)
Out[28]: [{'test_loss' :1 0 4 0 9 8 . 5 4 6 9 , 'test_mae' :2 2 9 . 5 0 1 2 } ]
The results of the fit have been logged into a CSV file. We can find the
results specific to this run in the experiment.metrics_file_path attribute
of our logger. Note that each time the model is fit, the logger will output
results into a new subdirectory of our directory logs/hitters .
We now create a plot of the MAE (mean absolute error) as a function of
the number of epochs. First we retrieve the logged summaries.
hit_results = we will produce similar plots in later examples, we write a simple
generic function to produce this plot.10.9 Lab: Deep Learning 443In[29]:def (column,color,label) in axWe now set up our axes, and use our function to produce the MAE plot.In[30]:fig, ax = subplots(1, 1, figsize=(6, 6))ax = (=Test)')ax.set_ylim([0, 400])ax.set_xticks(np.linspace(0, 50, 11).astype(int));We can predict directly from the final model, and evaluate its per-formance on the test data. Before fitting, we call theeval()method ofhit_model. This tellstorchto effectively consider this model to be is that the dropout layers will be turned off, i.e. no weights will berandomly dropped in predicting on new data.In[31]:hit_model.eval()preds = hit_module(X_test_t)torch.abs(Y_test_t - preds).mean()Out[31]:tensor(229.5012, grad_fn=<MeanBackward0>)CleanupIn setting up our data module, we had initiated several worker processesthat will remain running. We delete all references to the torch objects toensure these processes will be killed.444 10. Deep Learning
In[32]: del(Hitters,
hit_model, hit_dm,
hit_logger,
hit_test, hit_train,
X, Y,
X_test, X_train,
Y_test, Y_train,
X_test_t, Y_test_t,
hit_trainer, hit_module)
10.9.2 Multilayer Network on the MNIST Digit Data
Thetorchvision the MNISTdigit data. Our first step is to retrieve the training and test
data sets; the MNIST()function within torchvision.datasets is provided forMNIST()this purpose. The data will be downloaded the first time this function is
executed, and stored in the directory data/MNIST .
In[33]: (mnist_train,
mnist_test) = [MNIST(root= train in [True, False]]
mnist_train
Out[33]: Dataset MNIST
Number of datapoints: 60000
Root location: data
Split: Train
StandardTransform
Transform: ToTensor()
There are 60,000 images in the training data and 10,000 in the test data.
The images are 28×28, and stored as a matrix of pixels. We need to
transform each one into a vector.
Neural networks are somewhat sensitive to the scale of the inputs, much
as ridge and lasso regularization are affected by scaling. Here the inputs
are eight-bit grayscale values between 0 and 255, so we rescale to the unit
interval.26This transformation, along with some reordering of the axes, is
performed by the ToTensor() transform from the torchvision.transforms
package.
As in our Hittersexample, we form a data module from the training and
test datasets, setting aside 20% of the training images for validation.
In[34]: mnist_dm = eight bits means 28, which equals 256. Since the convention is to start at 0,
the possible values range from 0to255.10.9 Lab: Deep Learning 445Let’s take a look at the data that will get fed into our network. We loopthrough the first few chunks of the test dataset, breaking after 2 batches:In[35]:for idx, (X_ ,Y_) in ',X _ . s h a p e )print('Y: ',Y _ . s h a p e )if idx >= 1:breakX: torch.Size([256, 1, 28, 28])Y: torch.Size([256])X: torch.Size([256, 1, 28, 28])Y: torch.Size([256])We see that theXfor each batch consists of 256 images of size1x28x28.Here the1indicates a single channel (greyscale). For RGB images such asCIFAR100below, we will see that the1in the size will be replaced by3forthe three RGB channels.Now we are ready to specify our neural network.In[36]:class MNISTModel(nn.Module):def __init__(self):super(MNISTModel, self).__init__()self.layer1 = nn.Sequential(nn.Flatten(),nn.Linear(28*28, 256),nn.ReLU(),nn.Dropout(0.4))self.layer2 = nn.Sequential(nn.Linear(256, 128),nn.ReLU(),nn.Dropout(0.3))self._forward = 10))def forward(self, x):return self._forward(x)We see that in the first layer, each1x28x28image is flattened, thenmapped to 256 dimensions where we apply a ReLU activation with 40%dropout. A second layer maps the first layer’s output down to 128 di-mensions, applying a ReLU activation with 30% dropout. Finally, the 128dimensions are mapped down to 10, the number of classes in theMNISTdata.In[37]:mnist_model = MNISTModel()We can check that the model produces output of expected size based onour existing 10])Let’s take a look at the summary of the model. Instead of aninput_sizewe can pass a tensor of correct shape. In this case, we pass through thefinal batchedX_from above.446 10. Deep (type:depth-idx) Input Shape Output Shape 1, 28, 28] [256, 10] --Sequential: 1-1[256, 1, 28, 28] [256, 10] --Sequential: 2-1 [256, 1, 28, 28] [256, 256] --Flatten: 3-1 [256, 1, 28, 28] [256, 784] --Linear: 3-2 [256, 784] [256, 256] 200,960ReLU: 3-3 [256, 256] [256, 256] --Dropout: 3-4 [256, 256] [256, 256] --Sequential: 2-2 [256, 256] [256, 128] --Linear: 3-5 [256, 256] [256, 128] 32,896ReLU: 3-6 [256, 128] [256, 128] --Dropout: 3-7 [256, 128] [256, 128] --Linear: 2-3[256, 128] [256, 10] params: 235,146Trainable params: 235,146Having set up both the model and the data module, fitting this model isnow almost identical to theHittersexample. In contrast to our regressionmodel, here we will use theSimpleModule.classification()method whichSimpleModule.classifi-cation()uses the cross-entropy loss function instead of mean squared error.In[40]:mnist_module = = CSVLogger('logs',n a m e ='MNIST')Now we are ready to go. The final step is to supply training data, andfit the model.In[41]:mnist_trainer = have suppressed the output here, which is a progress report on thefitting of the model, grouped by epoch. This is very useful, since on largedatasets fitting can take time. Fitting this model took 245 seconds on aMacBook Pro with an Apple M1 Pro chip with 10 cores and 16 GB ofRAM. Here we specified a validation split of 20%, so training is actuallyperformed on 80% of the 60,000 observations in the training set. This is SGD uses batches of 256 observations in computing the gradient, anddoing the arithmetic, we see that an epoch corresponds to 188 an accuracy metric by default.Other classification metrics can be added fromtorchmetrics. We will useoursummary_plot()function to display accuracy across epochs.10.9 Lab: Deep Learning 447
In[42]: mnist_results = ax = subplots(1, 1, figsize=(6, ,
ylabel= 'Accuracy' )
ax.set_ylim([0.5, 1])
ax.set_ylabel( 'Accuracy' )
ax.set_xticks(np.linspace(0, 30, 7).astype(int));
Once again we evaluate the accuracy using the test()method of our
trainer. This model achieves 97% accuracy on the test data.
In[43]: [{'test_loss' :0 . 1 4 7 1 , 'test_accuracy' :0 . 9 6 8 1 } ]
Table10.1also reports the error rates resulting from LDA (Chapter 4) and
multiclass logistic regression. For LDA we refer the reader to Section 4.7.3.
Although we could use the sklearnfunction LogisticRegression() to fit
multiclass logistic regression, we are set up here to fit such a model class MNIST_MLR(nn.Module):
def __init__(self):
super(MNIST_MLR, self).__init__()
self.linear = nn.Sequential(nn.Flatten(),
nn.Linear(784, 10))
def forward(self, x):
return self.linear(x)
mlr_model = MNIST_MLR()
mlr_module = = CSVLogger( 'logs',n a m e = 'MNIST_MLR' )
In[45]: mlr_trainer = datamodule=mnist_dm)
We fit the model just as before and compute the test results.
In[46]: [{'test_loss' :0 . 3 1 8 7 , 'test_accuracy' :0 . 9 2 4 1 } ]
The accuracy is above 90% even for this pretty simple model.
As in the Hitters example, we delete some of the objects we created
above.
In[47]: del(mnist_test,
mnist_train,448 10. Deep Convolutional Neural NetworksIn this section we fit a CNN to theCIFAR100data, which is available in thetorchvisionpackage. It is arranged in a similar fashion as theMNISTdata.In[48]:(cifar_train,cifar_test) = train in [True, False]]In[49]:transform = ToTensor()cifar_train_X = torch.stack([transform(x) for x incifar_train.data])cifar_test_X = torch.stack([transform(x) for x incifar_test.data])cifar_train = = a three-dimensional tensor: each three-color image is represented as aset of three channels, each of which consists of32×32eight-bit pixels. Westandardize as we did for the digits, but keep the array structure. This isaccomplished with theToTensor()transform.Creating the data module is similar to theMNISTexample.In[50]:cifar_dm = again look at the shape of typical batches in our data loaders.In[51]:for idx, (X_ ,Y_) in ',X _ . s h a p e )print('Y: ',Y _ . s h a p e )if idx >= 1:breakX: torch.Size([128, 3, 32, 32])Y: torch.Size([128])X: torch.Size([128, 3, 32, 32])Y: torch.Size([128])10.9 Lab: Deep Learning 449
Before we start, we look at some of the training images; similar code
produced Figure 10.5on page406. The example below also illustrates that
TensorDataset objects can be indexed with integers — we are choosing ran-
domimagesfromthetrainingdatabyindexing cifar_train .Inordertodis-
play correctly, we must reorder the dimensions by a call to np.transpose() .
In[52]: fig, axes = subplots(5, 5, figsize=(10,10))
rng = np.random.default_rng(4)
indices = rng.choice(np.arange(len(cifar_train)), 25,
replace=False).reshape((5,5))
for i in range(5):
for j in range(5):
idx = the imshow() method recognizes from the shape of its argument that.imshow()it is a 3-dimensional array, with the last dimension indexing the three RGB
color channels.
We specify a moderately-sized CNN for demonstration purposes, simi-
lar in structure to Figure 10.8. We use several layers, each consisting of
convolution, ReLU, and max-pooling steps. We first define a module that
defines one of these layers. As in our previous examples, we overwrite the
__init__() andforward() methods of nn.Module . This user-defined module
can now be used in ways just like nn.Linear() ornn.Dropout() .
In[53]: class BuildingBlock(nn.Module):
def self).__init__()
self.conv = 'same')
self.activation = nn.ReLU()
self.pool = nn.MaxPool2d(kernel_size=(2,2))
def forward(self, x):
return that we used the padding = "same" argument to nn.Conv2d() ,
which ensures that the output channels have the same dimension as the
input channels. There are 32 channels in the first hidden layer, in contrast
to the three channels in the input layer. We use a 3×3convolution fil-
ter for each channel in all the layers. Each convolution is followed by a
max-pooling layer over 2×2blocks.
In forming our deep learning model for the CIFAR100 data, we use several
of ourBuildingBlock() modules sequentially. This simple example illus-
trates some of the power of torch. Users can define modules of their own,450 10. Deep Learningwhich can be combined in other modules. Ultimately, everything is fit bya generic trainer.In[54]:class CIFARModel(nn.Module):def __init__(self):super(CIFARModel, self).__init__()sizes = [(3,32),(32,64),(64,128),(128,256)]self.conv = nn.Sequential(*[BuildingBlock(in_, out_)for in_, out_ in sizes])self.output = 512),nn.ReLU(),nn.Linear(512, 100))def forward(self, x):val = self.conv(x)val = torch.flatten(val, start_dim=1)return self.output(val)We build the model and look at the summary. (We had created examplesofX_earlier.)In[55]:cifar_model = (type:depth-idx) Input Shape Output Shape 3, 32, 32] [128, 100]--Sequential: 1-1 [128, 3, 32, 32] [128, 256, 2, 2] --BuildingBlock: 2-1 [128, 3, 32, 32] [128, 32, 16, 16] --Conv2d: 3-1 [128, 3, 32, 32] [128, 32, 32, 32] 896ReLU: 3-2 [128, 32, 32, 32] [128, 32, 32, 32] --MaxPool2d: 3-3 [128, 32, 32, 32] [128, 32, 16, 16] --BuildingBlock: 2-2 [128, 32, 16, 16] [128, 64, 8, 8] --Conv2d: 3-4 [128, 32, 16, 16] [128, 64, 16, 16] 18,496ReLU: 3-5 [128, 64, 16, 16] [128, 64, 16, 16] --MaxPool2d: 3-6 [128, 64, 16, 16] [128, 64, 8, 8] --BuildingBlock: 2-3 [128, 64, 8, 8] [128, 128, 4, 4] --Conv2d: 3-7 [128, 64, 8, 8] [128, 128, 8, 8] 73,856ReLU: 3-8 [128, 128, 8, 8] [128, 128, 8, 8] --MaxPool2d: 3-9 [128, 128, 8, 8] [128, 128, 4, 4] --BuildingBlock: 2-4 [128, 128, 4, 4] [128, 256, 2, 2] --Conv2d: 3-10 [128, 128, 4, 4] [128, 256, 4, 4] 295,168ReLU: 3-11 [128, 256, 4, 4] [128, 256, 4, 4] --MaxPool2d: 3-12 [128, 256, 4, 4] [128, 256, 2, 2] --Sequential: 1-2 [128, 1024] [128, 100]--Dropout: 2-5 [128, 1024] [128, 1024] --Linear: 2-6 [128, 1024] [128, 512]524,80010.9 Lab: Deep Learning 451ReLU: 2-7 [128, 512][128, 512]--Linear: 2-8 [128, 512][128, params: 964,516Trainable params: 964,516The total number of trainable parameters is 964,516. By studying the sizeof the parameters, we can see that the channels halve in both dimensionsafter each of these max-pooling operations. After the last of these we havea layer with 256 channels of dimension2×2. These are then flattened toa dense layer of size 1,024; in other words, each of the2×2matrices isturned into a4-vector, and put side-by-side in one layer. This is followedby a dropout regularization layer, then another dense layer of size 512, andfinally, the output data, experiments show that a smaller learning rate performs betterthan the default 0.01. We use a custom optimizer here with a learning rateof 0.001. Besides this, the logging and training follow a similar patternto our previous examples. The optimizer takes an argumentparamsthatinforms the optimizer which parameters are involved in SGD (stochasticgradient descent).We saw earlier that entries of a module’s parameters are tensors. Inpassing the parameters to the optimizer we are doing more than simplypassing arrays; part of the structure of the graph is encoded in the tensorsthemselves.In[56]:cifar_optimizer = RMSprop(cifar_model.parameters(), lr=0.001)cifar_module = = CSVLogger('logs',n a m e ='CIFAR100')In[57]:cifar_trainer = model takes 10 minutes or more to run and achieves about 42%accuracy on the test data. Although this is not terrible for 100-class data(a random classifier gets 1% accuracy), searching the web we see resultsaround 75%. Typically it takes a lot of architecture carpentry, fiddling withregularization, and time, to achieve such results.Let’s take a look at the validation and training accuracy across epochs.In[58]:log_path = = pd.read_csv(log_path)fig, ax = subplots(1, 1, figsize=(6, 10, 1]);452 10. Deep Learning
Finally, we evaluate our model on our test data.
In[59]: [{'test_loss' :2 . 4 2 3 8 'test_accuracy' :0 . 4 2 0 6 } ]
Hardware Acceleration
As deep learning has become ubiquitous in machine learning, hardware
manufacturers have produced special libraries that can often speed up the
gradient-descent steps.
For instance, Mac OS devices with the M1 chip may have the Metalpro-
gramming framework enabled, which can speed up the torchcomputations.
We present an example of how to use this acceleration.
The main changes are to the Trainer() call as well as to the metrics that
will be evaluated on the data. These metrics must be told where the data
will be located at evaluation time. This is accomplished with a call to the
to()method of the metrics.
In[60]: try:
for name, metric in = metric.to( 'mps')
cifar_trainer_mps = Trainer(accelerator= yields approximately two- or three-fold acceleration for each epoch.
We have protected this code block using try:andexcept: clauses; if it
works, we get the speedup, if it fails, nothing happens.
10.9.4 Using Pretrained CNN Models
We now show how to use a CNN pretrained on the imagenet database to
classify natural images, and demonstrate how we produced Figure 10.10.
We copied six JPEG images from a digital photo album into the direc-
torybook_images . These images are available from the data section of www.
statlearning.com , the ISLP book website. Download book_images.zip ;
when clicked it creates the book_images directory.
The pretrained network we use is called resnet50 ; specification details
can be found on the web. We will read in the images, and convert them into
the array format expected by the torchsoftware to match the specifications
inresnet50 . The conversion involves a resize, a crop and then a predefined
standardization for each of the three channels. We now read in the images
and preprocess them.10.9 Lab: Deep Learning 453
In[61]: resize = Resize((232,232))
crop = CenterCrop(224)
normalize = = sorted([f for f in glob( 'book_images/*' )])
imgs = 255)
for f in imgfiles])
imgs = normalize(imgs)
imgs.size()
Out[61]: torch.Size([6, 3, 224, 224])
We now set up the trained network with the weights we read in code
block 6. The model has 50 layers, with a fair bit of complexity.
In[62]: resnet_model = 'input_size' ,
'output_size' ,
'num_params' ])
We set the mode to eval()to ensure that the model is ready to predict on
new data.
In[63]: resnet_model.eval()
Inspecting the output above, we see that when setting up the resnet_model ,
the authors defined a Bottleneck , much like our BuildingBlock module.
We now feed our six images through the fitted network.
In[64]: img_preds = resnet_model(imgs)
Let’s look at the predicted probabilities for each of the top 3 choices.
First we compute the probabilities by applying the softmax to the logits
inimg_preds . Note that we have had to call the detach() method on the
tensorimg_preds in order to convert it to our a more familiar ndarray.
In[65]: img_probs = /= .27
In[66]: labs = json.load(open( 'imagenet_class_index.json' ))
class_labels = pd.DataFrame([(int(k), v[1]) for k, v in
labs.items()],
columns=[ 'idx','label' ])
class_labels = class_labels.set_index( 'idx')
class_labels = class_labels.sort_index()
We’ll now construct a data frame for each image file with the labels with
the three highest probabilities as estimated by the model above.
27This is avalable from the book website and .454 10. Deep Learning
In[67]: for i, imgfile in enumerate(imgfiles):
img_df = class_labels.copy()
img_df[ 'prob']=i m g _ p r o b s [ i ]
img_df = img_df.sort_values(by= 'prob',a s c e n d i n g = F a l s e ) [ : 3 ]
print(f 'Image: {imgfile}' )
print(img_df.reset_index().drop(columns=[ 'idx']))
Image: book_images/Cape_Weaver.jpg
label prob
0j a c a m a r 0 . 2 8 7 2 8 3
1b e e _ e a t e r0 . 0 4 6 7 6 8
2b u l b u l 0 . 0 3 7 5 0 7
Image: book_images/Flamingo.jpg
label prob
0f l a m i n g o 0 . 5 9 1 7 6 1
1s p o o n b i l l 0 . 0 1 2 3 8 6
2A m e r i c a n _ e g r e t0 . 0 0 2 1 0 5
Image: book_images/Hawk_Fountain.jpg
label prob
0g r e a t _ g r e y _ o w l0 . 2 8 7 9 5 9
1 kite 0.039478
2f o u n t a i n 0 . 0 2 9 3 8 4
Image: book_images/Hawk_cropped.jpg
label prob
0k i t e 0 . 3 0 1 8 3 0
1j a y 0 . 1 2 1 6 7 4
2m a g p i e0 . 0 1 5 5 1 3
Image: book_images/Lhasa_Apso.jpg
label prob
0 Lhasa 0.151143
1 Shih-Tzu 0.129850
2T i b e t a n _ t e r r i e r0 . 1 0 2 3 5 8
Image: book_images/Sleeping_Cat.jpg
label prob
0t a b b y 0 . 1 7 3 6 2 7
1t i g e r _ c a t0 . 1 1 0 4 1 4
2d o o r m a t 0 . 0 9 3 4 4 7
We see that the model is quite confident about Flamingo.jpg , but a little
less so for the other images.
We end this section with our usual cleanup.
In[68]: IMDB Document Classification
We now implement models for sentiment classification (Section 10.4) on
theIMDBdataset. As mentioned above code block 8, we are using a prepro-
cessed version of the IMDBdataset found in the keraspackage. As kerasuses10.9 Lab: Deep Learning 455tensorflow, a different tensor and deep learning library, we have convertedthe data to be suitable fortorch. The code used to convert fromkerasis available in the moduleISLP.torch._make_imdb. It requires some of thekeraspackages to run. These data use a dictionary of size 10,000.We have stored three different representations of the review data for thislab:•load_tensor(), a sparse tensor version usable bytorch;•load_sparse(), a sparse matrix version usable bysklearn, since wewill compare with a lasso fit;•load_sequential(), a padded version of the original sequence repre-sentation, limited to the last 500 words of each review.In[69]:(imdb_seq_train,imdb_seq_test) = = = padded_sample[padded_sample > 0][:12]sample_review[:12]Out[69]:array([ 1, 14, 22, 16, 43, 530, 973, 1622, 1385,65, 458, 4468], dtype=int32)The datasetsimdb_seq_trainandimdb_seq_testare both instances of theclassTensorDataset. The tensors used to construct them can be found inthetensorsattribute, with the first tensor the featuresXand the secondthe outcomeY. We have taken the first row of features and stored it aspadded_sample. In the preprocessing used to form these data, sequenceswere padded with 0s in the beginning if they were not long enough, hencewe remove this padding by restricting to entries wherepadded_sample > 0.We then provide the first 12 words of the sample = for i in sample_review)Out[70]:"<START> this film was just brilliant casting location scenerystory direction everyone's"For our first model, we have created a binary feature for each of the10,000 possible words in the dataset, with an entry of one in thei, has over 98% zeros. These data are accessed usingload_tensor()from = load_tensor(root='data/IMDB')imdb_dm = max_num_workers),batch_size=512)456 10. Deep Learning
We’ll use a two-layer model for our first model.
In[72]: class IMDBModel(nn.Module):
def __init__(self, input_size):
super(IMDBModel, self).__init__()
self.dense1 = nn.Linear(input_size, 16)
self.activation = nn.ReLU()
self.dense2 = nn.Linear(16, 16)
self.output = nn.Linear(16, 1)
def forward(self, x):
val = x
for _map in = _map(val)
return torch.flatten(val)
We now instantiate our model and look at a summary (not shown).
In[73]: imdb_model = 'input_size' ,
'output_size' ,
'num_params' ])
We’ll again use a smaller learning rate for these data, hence we pass an
optimizer to theSimpleModule . Since the reviews are classified into positive
or negative sentiment, we use SimpleModule.binary_classification() .28
In[74]: imdb_optimizer = RMSprop(imdb_model.parameters(), lr=0.001)
imdb_module = SimpleModule ,
the remaining steps are familiar.
In[75]: imdb_logger = CSVLogger( 'logs',n a m e = 'IMDB')
imdb_trainer = the test error yields roughly 86% accuracy.
In[76]: test_results = imdb_trainer.test(imdb_module, datamodule=imdb_dm)
test_results
28Our use of binary_classification() instead of classification() is due to
some subtlety in how torchmetrics.Accuracy() works, as well as the data type of
the targets.10.9 Lab: Deep Learning 457
Out[76]: [{'test_loss' :1 . 0 8 6 3 , 'test_accuracy' :0 . 8 5 5 0 } ]
Comparison to Lasso
We now fit a lasso logistic regression model using LogisticRegression()
fromsklearn. Sincesklearndoes not recognize the sparse tensors of torch,
we use a sparse matrix that is recognized by sklearn.
In[77]: ((X_train, Y_train),
(X_valid, Y_valid),
(X_test, Y_test)) = )
Similar to what we did in Section 10.9.1, we construct a series of 50
values for the lasso reguralization parameter λ.
In[78]: lam_max = np.abs(X_train.T * (Y_train - Y_train.mean())).max()
lam_val = lam_max * np.exp(np.linspace(np.log(1),
np.log(1e-4), 50))
WithLogisticRegression() the regularization parameter Cis specified as
the inverse of λ. There are several solvers for logistic regression; here we
useliblinear which works well with the sparse input format.
In[79]: logit = LogisticRegression(penalty= 'l1',
C=1/lam_max,
solver= 'liblinear' ,
warm_start=True,
fit_intercept=True)
The path of 50 values takes approximately 40 seconds to run.
In[80]: coefs = []
intercepts = []
for l in lam_val:
logit.C = 1/l
logit.fit(X_train, coefficient and intercepts have an extraneous dimension which can
be removed by the np.squeeze() function.
In[81]: coefs = np.squeeze(coefs)
intercepts = np.squeeze(intercepts)
We’ll now make a plot to compare our neural network results with the
lasso.
In[82]: %%capture
fig, axes = subplots(1, 2, figsize=(16, 8), sharey=True)
for ((X_, Y_),
data_,
color) in zip([(X_train, Y_train),
(X_valid, Y_valid),
(X_test, Y_test)],458 10. Deep Learning
['Training' ,'Validation' ,'Test'],
['black' ,'red','blue']):
linpred_ = X_ * coefs.T + intercepts[None,:]
label_ = np.array(linpred_ > 0)
accuracy_ = np.array([np.mean(Y_ == l) for l in label_.T])
axes[0].plot(-np.log(lam_val / r'$-\log(\lambda)$' ,f o n t s i z e = 2 0 )
axes[0].set_ylabel( 'Accuracy' ,f o n t s i z e = 2 0 )
Noticethe useof %%capture ,whichsuppressesthe displayingof thepartially%%capturecompleted figure. This is useful when making a complex figure, since the
steps can be spread across two or more cells. We now add a plot of the lasso
accuracy, and display the composed figure by simply entering its name at
the end of the cell.
In[83]: imdb_results = ,
ylabel= 'Accuracy' )
axes[1].set_xticks(np.linspace(0, 30, 7).astype(int))
axes[1].set_ylabel( 'Accuracy' ,f o n t s i z e = 2 0 )
axes[1].set_xlabel( 'Epoch' ,f o n t s i z e = 2 0 )
axes[1].set_ylim([0.5, 1]);
axes[1].axhline(test_results[0][ 'test_accuracy' ],
color='blue',
linestyle= '--',
linewidth=3)
fig
From the graphs we see that the accuracy of the lasso logistic regression
peaks at about 0.88, as it does for the neural network.
Once again, we end with a cleanup.
In[84]: Recurrent Neural Networks
In this lab we fit the models illustrated in Section 10.5.
Sequential Models for Document Classification
Here we fit a simple LSTM RNN for sentiment prediction to the IMDb
movie-review data, as discussed in Section 10.5.1. For an RNN we use10.9 Lab: Deep Learning 459
the sequence of words in a document, taking their order into account. We
loaded the preprocessed data at the beginning of Section 10.9.5. A script
that details the preprocessing can be found in the ISLPlibrary. Notably,
since more than 90% of the documents had fewer than 500 words, we set
the document length to 500. For longer documents, we used the last 500
words, and for shorter documents, we padded the front with blanks.
In[85]: imdb_seq_dm = max_num_workers)
)
The first layer of the RNN is an embedding layer of size 32, which will
be learned during training. This layer one-hot encodes each document as a
matrix of dimension 500×10,003, and then maps these by the creation of an embedding matrix of size 10,003×32; each
of the 500 integers in the document are then mapped to the appropriate
32 real numbers by indexing the appropriate rows of this matrix.
The second layer is an LSTM with 32 units, and the output layer is forward()
method below, we take the last 32-dimensional output of the LSTM and
map it to our response.
In[86]: class LSTMModel(nn.Module):
def __init__(self, input_size):
super(LSTMModel, self).__init__()
self.embedding = nn.Embedding(input_size, 32)
self.lstm = = nn.Linear(32, 1)
def forward(self, x):
val, (h_n, c_n) = self.lstm(self.embedding(x))
return torch.flatten(self.dense(val[:,-1]))
We instantiate and take a look at the summary of the model, using the
first 10 documents in the corpus.
In[87]: lstm_model = 'input_size' ,
'output_size' ,
'num_params' ])
Out[87]: (type:depth-idx) Input Shape Output Shape Param [10, 500] [10] --
29The extra 3 dimensions correspond to commonly occurring non-word entries in the
reviews.460 10. Deep Learning
Embedding: 1-1 [10, 500] [10, 500, 32] 320,096
LSTM: 1-2 [10, 500, 32] [10, 500, 32] 8,448
Linear: 1-3 [10, 32] [10, 1] params: 328,577
Trainable params: 328,577
The 10,003 is suppressed in the summary, but we see it in the parameter
count, since 10,003×32 = 320 ,096.
In[88]: lstm_module = = CSVLogger( 'logs',n a m e = 'IMDB_LSTM' )
In[89]: lstm_trainer = rest is now similar to other networks we have fit. We track the test
performance as the network is fit, and see that it attains 85% accuracy.
In[90]: lstm_trainer.test(lstm_module, datamodule=imdb_seq_dm)
Out[90]: [{'test_loss' :0 . 8 1 7 8 , 'test_accuracy' :0 . 8 4 7 6 } ]
We once again show the learning progress, followed by cleanup.
In[91]: lstm_results = ax = subplots(1, 1, figsize=(6, ,
ylabel= 'Accuracy' )
ax.set_xticks(np.linspace(0, 20, 5).astype(int))
ax.set_ylabel( 'Accuracy' )
ax.set_ylim([0.5, 1])
In[92]: Series Prediction
We now show how to fit the models in Section 10.5.2for time series pre-
diction. We first load and standardize the data.
In[93]: NYSE = load_data( 'NYSE')
cols = [ 'DJ_return' ,'log_volume' ,'log_volatility' ]
X=p d . D a t a F r a m e ( S t a n d a r d S c a l e r Lab: Deep Learning 461Next we set up the lagged versions of the data, dropping any rows withmissing values using thedropna()method.In[94]:for lag in range(1, 6):for col in cols:newcol = np.zeros(X.shape[0]) * np.nannewcol[lag:] = lag), newcol)X.insert(len(X.columns),'train',N Y S E ['train'])X=X . d r o p n a ( )Finally, we extract the response, training indicator, and drop the currentday’sDJ_returnandlog_volatilityto predict only from previous day’sdata.In[95]:Y, train = X['log_volume'], X['train']X=X . d r o p ( c o l u m n s = ['train']+c o l s first fit a simple linear model and compute theR2on the test datausing thescore()method.In[96]:M=L i n e a r R e g r e s s i o n ( )M.fit(X[train], Y[train])M.score(X[∼train], Y[∼train])Out[96]:0.4129We refit this model, including the factor variableday_of_week. For a cate-gorical series inpandas, we can form the indicators using theget_dummies()method.In[97]:X_day = that we do not have to reinstantiate the linear regression model as itsfit()method accepts a design matrix and a response directly.In[98]:M.fit(X_day[train], Y[train])M.score(X_day[∼train], Y[∼train])Out[98]:0.4595This model achieves anR2of about 46%.To fit the RNN, we must reshape the data, as it will expect 5 laggedversions of each feature as indicated by theinput_shapeargument to thelayernn.RNN()below. We first ensure the columns of our data frame aresuch that a reshaped matrix will have the variables correctly lagged. Weuse thereindex()method to do this.462 10. Deep LearningFor an input shape(5,3), each row represents a lagged version of thethree variables. Thenn.RNN()layer also expects the first row of each obser-vation to be earliest in time, so we must reverse the current order. Hencewe loop overrange(5,0,-1)below, which is an example of using aslice()to index iterable objects. The general notation isstart:end:step.In[99]:ordered_cols = []for lag in range(5,0,-1):for col in lag))X=X . r e i n d e x ( c o l u m n s = o r d e r e d _ c o l s now reshape the data.In[100]:X_rnn = 5, 3)By specifying the first size as -1,numpy.reshape()deduces its size based onthe remaining arguments.Now we are ready to proceed with the RNN, which uses 12 hidden units,and 10% dropout. After passing through the RNN, we extract the finaltime point asval[:,-1]inforward()below. This gets passed through a10% dropout and then flattened through a linear layer.In[101]:class NYSEModel(nn.Module):def __init__(self):super(NYSEModel, self).__init__()self.rnn = nn.RNN(3,12,batch_first=True)self.dense = nn.Linear(12, 1)self.dropout = nn.Dropout(0.1)def forward(self, x):val, h_n = self.rnn(x)val = self.dense(self.dropout(val[:,-1]))return torch.flatten(val)nyse_model = NYSEModel()We fit the model in a similar fashion to previous networks. We supplythefitfunction with test data as validation data, so that when we monitorits progress and plot the history function we can see the progress on thetest data. Of course we should not use this as a basis for early stopping,since then the test performance would be biased.We form the training dataset similar to ourHittersexample.10.9 Lab: Deep Learning 463In[102]:datasets = []for mask in [train,∼train]:X_rnn_t = = Y_t))nyse_train, nyse_test = datasetsFollowing our usual pattern, we inspect the (type:depth-idx) Input Shape Output Shape 5, 3] [1770]--RNN: 1-1[1770, 5, 3] [1770, 5, 12] 204Dropout: 1-2[1770, 12] [1770, 12] --Linear: 1-3[1770, 12] [1770, 1] params: 217Trainable params: 217We again put the two datasets into a data module, with a batch size of 64.In[104]:nyse_dm = run some data through our model to be sure the sizes match up cor-rectly.In[105]:for idx, (x, y) in enumerate(nyse_dm.train_dataloader()):out = nyse_model(x)print(y.size(), out.size())if idx >= 2:breaktorch.Size([64]) torch.Size([64])torch.Size([64]) torch.Size([64])torch.Size([64]) torch.Size([64])We follow our previous example for setting up a trainer for a regressionproblem, requesting theR2metric to be be computed at each epoch.In[106]:nyse_optimizer = = the model should by now be familiar. The results on the test dataare very similar to the linear AR model.464 10. Deep LearningIn[107]:nyse_trainer = . 6 1 4 1 ,'test_r2':0 . 4 1 7 2 } ]We could also fit a model without thenn.RNN()layer by just using ann.Flatten()layer instead. This would be a nonlinear AR model. If inaddition we excluded the hidden layer, this would be equivalent to ourearlier linear AR model.Instead we will fit a nonlinear AR model using the feature setX_daythatincludes theday_of_weekindicators. To do so, we must first create our testand training datasets and a corresponding data module. This may seem alittle burdensome, but is part of the general pipeline fortorch.In[108]:datasets = []for mask in [train,∼train]:X_day_t = = Y_t))day_train, day_test = datasetsCreating a data module follows a familiar pattern.In[109]:day_dm = build aNonLinearARModel()that takes as input the 20 features anda hidden layer with 32 units. The remaining steps are familiar.In[110]:class NonLinearARModel(nn.Module):def __init__(self):super(NonLinearARModel, self).__init__()self._forward = nn.Sequential(nn.Flatten(),nn.Linear(20, 32),nn.ReLU(),nn.Dropout(0.5),nn.Linear(32, 1))def forward(self, x):return = NonLinearARModel()nl_optimizer = = Exercises 465
We continue with the usual training steps, fit the model, and evaluate
the test error. We see the test R2is a slight improvement over the linear
AR model that also includes day_of_week .
In[112]: nl_trainer = datamodule=day_dm)
nl_trainer.test(nl_module, datamodule=day_dm)
Out[112]: [{'test_loss' :0 . 5 6 2 5 , 'test_r2' :0 . 4 6 6 2 } ]
10.10 Exercises
Conceptual
1. Consider a neural network with two hidden layers: p=4input units,
2units in the first hidden layer, 3units in the second hidden layer,
and a single output.
(a) Draw a picture of the network, similar to Figures 10.1or10.4.
(b) Write out an expression for f(X), assuming ReLU activation
functions. Be as explicit as you can!
(c) Now plug in some values for the coefficients and write out the
value off(X).
(d) How many parameters are there?
2. Consider the softmaxfunction in ( 10.13) (see also ( 4.13) on page 145)
for modeling multinomial probabilities.
(a) In (10.13), show that if we add a constant cto each of the z/lscript,
then the probability is unchanged.
(b) In (4.13), show that if we add constants cj,j=0,1,...,p, predictions at any new point xare unchanged.
This shows that the softmax function is over-parametrized . However,over-
parametrized regularization and SGD typically constrain the solutions so that this
is not a problem.
3. Show that the negative multinomial log-likelihood ( 10.14) is equiva-
lent to the negative log of the likelihood expression ( 4.5) when there
areM=2classes.
4. Consider a CNN that takes in 32×32grayscale images and has a
single convolution layer with three 5×5convolution filters (without
boundary padding).
(a) Draw a sketch of the input and first hidden layer similar to
Figure10.8.466 10. Deep Learning
(b) How many parameters are in this model?
(c) Explain how this model can be thought of as an ordinary feed-
forward neural network with the individual pixels as inputs, and
with constraints on the weights in the hidden units. What are
the constraints?
(d) If there were no constraints, then how many weights would there
be in the ordinary feed-forward neural network in (c)?
5. In Table 10.2on page 426, we see that the ordering of the three
methods with respect to mean absolute error is different from the
ordering with respect to test set R2. How can this be?
Applied
6. Consider the simple function R(β) = sin( β)+β/10.
(a) Draw a graph of this function over the range β∈[−6,6].
(b) What is the derivative of this function?
(c) Given β0=2.3, run gradient descent to find a local minimum
ofR(β)using a learning rate of ρ=0.1. Show each of β0,β1,...
in your plot, as well as the final answer.
(d) Repeat with β0=1.4.
7. Fit a neural network to the Defaultdata. Use a single hidden 10.9.1–
10.9.2for guidance. Compare the classification performance of your
model with that of linear logistic regression.
8. From your collection of personal photographs, pick 10 images of an-
imals (such as dogs, cats, birds, farm animals, etc.). If the subject
does not occupy a reasonable part of the image, then crop the image.
Now use a pretrained image classification CNN as in Lab 10.9.4to
predict the class of each of your images, and report the probabilities
for the top five predicted classes for each image.
9. Fit a lag-5 autoregressive model to the NYSEdata, as described in
the text and Lab 10.9.6. Refit the model with a 12-level factor repre-
senting the month. Does this factor improve the performance of the
model?
10. In Section 10.9.6, we showed how to fit a linear AR model to the
NYSEdata using the LinearRegression() function. However, we also
mentioned that we can “flatten” the short sequences produced for
the RNN model in order to fit a linear AR model. Use this latter
approach to fit a linear AR model to the NYSEdata. Compare the test
R2of this linear AR model to that of the linear AR model that we fit
in the lab. What are the advantages/disadvantages of each approach?
11. Repeat the previous exercise, but now fit a nonlinear AR model by
“flattening” the short sequences produced for the RNN model.10.10 Exercises 467
12. Consider the RNN fit to the NYSEdata in Section 10.9.6. Modify the
code to allow inclusion of the variable day_of_week , and fit the RNN.
Compute the test R2.
13. Repeat the analysis of Lab 10.9.5on theIMDbdata using a similarly
structured neural network. We used 16 hidden units at each of two
hidden layers. Explore the effect of increasing this to 32 and 64 units
per layer, with and without 30% dropout regularization.11
Survival Analysis and Censored Data
In this chapter, we will consider the topics of survival analysis andcensoredsurvival
analysisdata. These arise in the analysis of a unique kind of outcome variable: the
censored
datatime until an event occurs .
For example, suppose that we have conducted a five-year medical study,
in which patients have been treated for cancer. We would like to fit a model
to predict patient survival time, using features such as baseline health mea-
surements or type of treatment. At first pass, this may sound like a regres-
sion problem of the kind discussed in Chapter 3. But there is an important
complication: hopefully some or many of the patients have survived censored:w e
know that it is at least five years, but we do not know its true value. We do
not want to discard this subset of surviving patients, as the fact that they
survived at least five years amounts to valuable information. However, it is
not clear how to make use of this information using the techniques covered
thus far in this textbook.
Though the phrase “survival analysis” evokes a medical study, the ap-
plications of survival analysis extend far beyond medicine. For example,
consider a company that wishes to model churn, the process by which cus-
tomers cancel subscription to a service. The company might collect data on
customers over some time period, in order to model each customer’s time
to cancellation as a function of demographics or other predictors. However,
presumably not all customers will have canceled their subscription by the
end of this time period; for such customers, the time to cancellation is
censored.
In fact, survival analysis is relevant even in application areas that a function of some covariates, using a dataset with measurements for a
large number of people. Unfortunately, the scale used to weigh those people
is unable to report weights above a certain number. Then, any weights that
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_11 469470 11. Survival Analysis and Censored Data
exceed that number are censored. The survival analysis methods presented
in this chapter could be used to analyze this dataset.
Survival analysis is a very well-studied topic within statistics, due to its
critical importance in a variety of applications, both in and out of medicine.
However, it has received relatively little attention in the machine learning
community.
11.1 Survival and Censoring Times
For each individual, we suppose that there is a true survival time ,T, as wellsurvival timeas a true censoring time ,C. (The survival time is also known as the failurecensoring
timetimeor theevent time .) The survival time represents the time at which the
failure time
event timeevent of interest occurs: for instance, the time at which the patient dies,
or the customer cancels his or her subscription. By contrast, the censoring
time is the time at which censoring occurs: for example, the time at which
the patient drops out of the study or the study ends.
We observe either the survival time Tor else the censoring time C.
Specifically, we observe the random variable
Y=min(T,C). (11.1)
In other words, if the event occurs before censoring (i.e. T<C ) then we
observe the true survival time T; however, if censoring occurs before the
event (T>C ) then we observe the censoring time. We also observe a .
Thus,δ=1 if we observe the true survival time, and δ=0 if we instead
observe the censoring time.
Now, suppose we observe n(Y,δ)pairs, which we denote as (y1,δ1),...,
(yn,δn). Figure 11.1displays an example from a (fictitious) medical study
in which we observe n=4 patients for a 365-day follow-up period. For
patients 1 and 3, we observe the time to event (such as death or disease
relapse) T=ti. Patient 2 was alive when the study ended, and patient 4
dropped out of the study, or was “lost to follow-up”; for these patients we
observeC=ci. Therefore, A Closer Look at Censoring
In order to analyze survival data, we need to make some assumptions not take into consideration the reason why the patients dropped out
will likely overestimate the true average survival time. Similarly, suppose
that males who are very sick are more likely to drop out of the study than11.2 A Closer Look at Censoring 471
01002003001234Time in DaysPatient
FIGURE 11.1. Illustration of censored survival data. For patients 1 and 3, the
event was observed. Patient 2 was alive when the study ended. Patient 4 dropped
out of the study.
females who are very sick. Then a comparison of male and female survival
times may wrongly suggest that males survive longer than females.
In general, we need to assume that the censoring mechanism is indepen-
dent: conditional on the features, the event time Tis independent of the
censoring time C. The two examples above violate the assumption of inde-
pendent censoring. Typically, it is not possible to determine from the data
itself whether the censoring mechanism is independent. Instead, one has to
carefully consider the data collection process in order to determine whether
independent censoring is a reasonable assumption. In the remainder of this
chapter, we will assume that the censoring mechanism is independent.1
In this chapter, we focus on right censoring , which occurs when T≥Y,
i.e. the true event time Tis at least as large as the observed time Y.
(Notice that T≥Yis a consequence of ( 11.1). Right censoring derives its
name from the fact that time is typically displayed from left to right, as in
Figure11.1.) However, other types of censoring are possible. For instance,
inleft censoring , the true event time Tis less than or equal to the observed
timeY. For example, in a study of pregnancy duration, suppose that we
survey patients 250 days after conception, when some have already had
their babies. Then we know that for those patients, pregnancy duration is
less than 250 days. More generally, interval censoring refers to the setting
in which we do not know the exact event time, but we know that it falls
in some interval. For instance, this setting arises if we survey patients once
per week in order to determine whether the event has occurred. While left
censoring and interval censoring can be accommodated using variants of
the ideas presented in this chapter, in what follows we focus specifically on
right censoring.
1The assumption of independent censoring can be relaxed somewhat using the notion
ofnon-informative censoring ; however, the definition of non-informative censoring is too
technical for this book.472 11. Survival Analysis and Censored Data
11.3 The Kaplan–Meier Survival Curve
Thesurvival curve , orsurvival function , is defined assurvival
curve
survival
functionS(t) = Pr( T>t ). (11.2)
This decreasing function quantifies the probability of surviving past time
t. For example, suppose that a company is interested in modeling customer
churn. Let Trepresent the time that a customer cancels a subscription to
thecompany’sservice.Then later than time t. The larger the value of S(t), the less likely that
the customer will cancel before time t.
In this section, we will consider the task of estimating the survival
curve. Our investigation is motivated by the BrainCancer dataset, which
contains the survival times for patients with primary brain tumors un-
dergoing treatment with stereotactic radiation methods.2The predictors
aregtv(gross tumor volume, in cubic centimeters); sex(male or female);
diagnosis (meningioma, LG glioma, HG glioma, or other); loc(the tumor
location: either infratentorial or supratentorial); ki(Karnofsky index); and
stereo(stereotactic method: either stereotactic radiosurgery or fraction-
ated stereotactic radiotherapy, abbreviated as SRS and SRT, respectively).
Only 53 of the 88 patients were still alive at the end of the study.
Now, we consider the task of estimating the survival curve ( 11.2) for
these data. To estimate S(20) = Pr( T>20), the probability that a patient
survives for at least t= 20 months, it is tempting to simply compute the
proportion of patients who are known to have survived past 20 months, i.e.
the proportion of patients for whom Y>20. This turns out to be 48/88,
or approximately 55%. However, this does not seem quite right, since Y
andTrepresent different quantities. In particular, 17 of the 40 patients
who did not survive to 20months were actually censored, and this analysis
implicitly assumes that T<20for all of those censored patients; of course,
we do not know whether that is true.
Alternatively, to estimate S(20), we could consider computing the pro-
portion of patients for whom Y>20, out of the 71patients who were not
censored by time t= 20 ; this comes out to 48/71, or approximately 68%.
However, this is not quite right either, since it amounts to completely ig-
noring the patients who were censored before time t= 20 , even though the
timeat which they are censored is potentially informative. For instance, a
patient who was censored at time t= 19 .9likely would have survived past
t= 20 had he or she not been censored.
We have seen that estimating S(t)is complicated by the presence of
censoring. We now present an approach to overcome these challenges. We
letd1<d 2<···<d Kdenote the Kunique death times among the non-
censored patients, and we let qkdenote the number of patients who died
at timedk. Fork=1,...,K , we letrkdenote the number of patients alive
2This dataset is described in the following paper: Selingerová et al. (2016) Survival
of patients with primary brain tumors: Comparison of two statistical approaches. PLoS
One, 11(2):e0148733.11.3 The Kaplan–Meier Survival Curve 473
and in the study just before dk; these are the at riskpatients. The set of
patients that are at risk at a given time are referred to as the risk set.risk setBy the law of total probability,3
Pr(T>d k) = Pr( T>d k|T>d k−1) Pr( T>d k−1)
+ Pr( T>d k|T≤dk−1) Pr( T≤dk−1).
The fact that dk−1<d kimplies that Pr(T>d k|T≤dk−1)=0 (it is
impossible for a patient to survive past time dkif he or she did not survive
until an earlier time dk−1). Therefore,
S(dk) = Pr( T>d k) = Pr( T>d k|T>d k−1) Pr( T>d k−1).
Plugging in ( 11.2) again, we see that
S(dk) = Pr( T>d k|T>d k−1)S(dk−1).
This implies that
S(dk) = Pr( T>d k|T>d k−1)×···×Pr(T>d 2|T>d 1) Pr( T>d 1).
We now must simply plug in estimates of each of the terms on the right-
hand side of the previous equation. It is natural to use the estimator
/hatwiderPr(T>d j|T>d j−1)=( rj−qj)/rj,
which is the fraction of the risk set at time djwho survived past time dj.
This leads to the Kaplan–Meier estimator of the survival (11.3)
For times tbetween dkanddk+1, we set /hatwideS(t)=/hatwideS(dk). Consequently, the
Kaplan–Meier survival curve has a step-like shape.
The Kaplan–Meier survival curve for the BrainCancer data is displayed
in Figure 11.2. Each point in the solid step-like curve shows the estimated
probability of surviving past the time indicated on the horizontal axis. The
estimated probability of survival past 20 months is 71%, which is quite a
bit higher than the naive estimates of 55% and 68% presented earlier.
The sequential construction of the Kaplan–Meier estimator — starting
at time zero and mapping out the observed events as they unfold in time —
is fundamental to many of the key techniques in survival analysis. These
include the log-rank test of Section 11.4, and Cox’s proportional hazard
model of Section 11.5.2.
3The law of total probability states that for any two events AandB,Pr(A)=
Pr(A|B) Pr( B) + Pr( A|Bc) Pr( Bc), where Bcis the complement of the event B, i.e. it
is the event that Bdoes not hold.474 11. Survival Analysis and Censored Data
0204060800.0 0.2 0.4 0.6 0.8 1.0MonthsEstimated Probability of SurvivalFIGURE 11.2. For theBrainCancer data, we display the Kaplan–Meier survival
curve (solid curve), along with standard error bands (dashed curves).
0204060800.0 0.2 0.4 0.6 0.8 1.0MonthsEstimated Probability of SurvivalFemaleMaleFIGURE 11.3. For the BrainCancer data, Kaplan–Meier survival curves for
males and females are displayed.
11.4 The Log-Rank Test
We now continue our analysis of the BrainCancer data introduced in Sec-
tion11.3. We wish to compare the survival of males to that of females.
Figure11.3shows the Kaplan–Meier survival curves for the two groups.
Females seem to fare a little better up to about 50 months, but then the
two curves both level off to about 50%. How can we carry out a formal test
of equality of the two survival curves?
At first glance, a two-sample t-test seems like an obvious choice: we could
test whether the mean survival time among the females equals the mean
survival time among the males. But the presence of censoring again log-rank test ,4
log-rank test11.4 The Log-Rank Test 475
Group 1 Group 2 Total
Died q1k q2k qk
Survived r1k−q1kr2k−q2krk−qk
Total r1k r2k rk
TABLE 11.1. Among the set of patients at risk at time dk, the number of patients
who died and survived in each of two groups is reported.
which examines how the events in each group unfold sequentially in time.
Recall from Section 11.3thatd1<d 2<···<d Kare the unique death
times among the non-censored patients, rkis the number of patients at
risk at time dk, andqkis the number of patients who died at time dk.W e
further define r1kandr2kto be the number of patients in groups 1 and 2,
respectively, who are at risk at time dk. Similarly, we define q1kandq2kto
be the number of patients in groups 1 and 2, respectively, who died at time
dk. Note that r1k+r2k=rkandq1k+q2k=qk.
At each death time dk, we construct a 2×2table of counts of the form
shown in Table 11.1. Note that if the death times are unique (i.e. no two
individuals die at the same time), then one of q1kandq2kequals one, and
the other equals zero.
The main idea behind the log-rank test statistic is as follows. In order
to testH0: E(X)= µfor some random variable X, one approach is to
construct a test statistic of the form
W=X−µ/radicalbig
Var(X). (11.4)
To construct the log-rank test statistic, we compute a quantity that takes
exactly the form ( 11.4), withX=/summationtextK
k=1q1k, whereq1kis given in the top
left of Table 11.1.
In greater detail, if there is no difference in survival between the two
groups, and conditioning on the row and column totals in Table 11.1, the
expected value of q1kis
µk=r1k
rkqk. (11.5)
So the expected value of Furthermore,
it can be shown5that the variance of q1kis
Var ( q1k)=qk(r1k/rk)(1−r1k/rk)(rk−qk)
rk−1. (11.6)
Thoughq11,...,q 1Kmay be correlated, we nonetheless ( log-rank test is also known as the Mantel–Haenszel test orCochran–Mantel–
Haenszel test .
5For details, see Exercise 7at the end of this chapter.476 11. Survival Analysis and Censored Data
Therefore, to compute the log-rank test statistic, we simply proceed as
in (11.4), withX=/summationtextK
k=1q1k, making use of ( 11.5) and (11.7). That is, ( the sample size is large, the log-rank test statistic Whas ap-
proximately a standard normal distribution; this can be used to compute
ap-value for the null hypothesis that there is no difference between the
survival curves in the two groups.6
Comparing the survival times of females and males on the BrainCancer
data gives a log-rank test statistic of W=1.2, which corresponds to a two-
sidedp-value of 0.2using the theoretical null distribution, and a p-value
of0.25using the permutation null distribution with 1,000 females and males.
The log-rank test is closely related to Cox’s proportional hazards model,
which we discuss in Section 11.5.2.
11.5 Regression Models With a Survival Response
We now consider the task of fitting a regression model to survival data.
As in Section 11.1, the observations are of the form (Y,δ), where Y=
min( T,C)is the (possibly censored) survival time, and δis an indicator
variable that equals 1ifT≤C. Furthermore, X∈Rpis a vector of p
features. We wish to predict the true survival time T.
Since the observed quantity Yis positive and may have a long right
tail, we might be tempted to fit a linear regression of log(Y)onX. But
as the reader will surely guess, censoring again creates a problem since
we are actually interested in predicting Tand not Y. To overcome this
difficulty, we instead make use of a sequential construction, similar to the
constructions of the Kaplan–Meier survival curve in Section 11.3and the
log-rank test in Section 11.4.
11.5.1 The Hazard Function
Thehazard function orhazard rate — also known as the force of mortalityhazard
function— is formally defined as
h(t) = lim
∆t→0Pr(t<T ≤t+∆t|T>t )
∆t, (11.9)
6Alternatively, we can estimate the p-value via permutations, using ideas that will
be presented in Section 13.5. The permutation distribution is obtained by randomly
swapping the labels for the observations in the two groups.11.5 Regression Models With a Survival Response 477
whereTis the (unobserved) survival time. It is the death rate in the instant
after time t, given survival past that time.7In (11.9), we take the limit as
∆tapproaches zero, so we can think of ∆tas being an extremely tiny
number. Thus, more informally, ( 11.9) implies that
h(t)≈Pr(t<T ≤t+∆t|T>t )
∆t
for some arbitrarily small ∆t.
Why should we care about the hazard function? First of all, it is closely
related to the survival curve ( 11.2), as we will see next. Second, it turns out
that a key approach for modeling survival data as a function of covariates
relies heavily on the hazard function; we will introduce this approach —
Cox’s proportional hazards model — in Section 11.5.2.
We now consider the hazard function h(t)in a bit more detail. Recall
that for two events AandB, the probability of AgivenBcan be expressed
asPr(A|B) = Pr( A∩B)/Pr(B), i.e. the probability that AandBboth
occur divided by the probability that Boccurs. Furthermore, recall from
(11.2) thatS(t) = Pr( T>t ). Thus,
h(t) = lim
∆t→0Pr (( t<T ≤t+∆t)∩(T>t ))/∆t
Pr(T>t )
= lim
∆t→0Pr(t<T ≤t+∆t)/∆t
Pr(T>t )
=f(t)
S(t), (11.10)
where
f(t) = lim
∆t→0Pr(t<T ≤t+∆t)
∆t(11.11)
is theprobability density function associated with T, i.e. it is the instanta-probability
density
functionneous rate of death at time t. The second equality in ( 11.10) made use of
the fact that if t<T ≤t+∆t, then it must be the case that T>t .
Equation 11.10implies a relationship between the hazard function h(t),
the survival function S(t), and the probability density function f(t). In
fact, these are three equivalent ways8of describing the distribution of T.
The likelihood associated with the ith observation is
Li=/braceleftBigg
f(yi)if theith observation is not censored
S(yi)if theith observation is censored
=f(yi)δiS(yi)1−δi. (11.12)
The intuition behind ( 11.12) is as follows: if Y=yiand theith observation
is not censored, then the likelihood is the probability of dying in a tiny in-
terval around time yi. If theith observation is censored, then the likelihood
7Due to the ∆tin the denominator of ( 11.9), the hazard function is a rate of death,
rather than a probability of death. However, higher values of h(t)directly correspond
to a higher probability of death, just as higher values of a probability density function
correspond to more likely outcomes for a random variable. In fact, h(t)is the probability
density function for Tconditional on T>t .
8See Exercise 8.478 11. Survival Analysis and Censored Data
is the probability of surviving at least until time yi. Assuming that the n
observations are independent, the likelihood for the data takes the (11.13)
where the second equality follows from ( survival, i.e. that the probability density function of the survival
timeTtakes the form f(t)=λexp(−λt), then estimating the parameter λ
by maximizing the likelihood in ( 11.13) is straightforward.9Alternatively,
we could assume that the survival times are drawn from a more flexible
family of distributions, such as the Gamma or Weibull family. Another
possibility is to model the survival times non-parametrically, as was done
in Section 11.3using the Kaplan–Meier estimator.
However, what we would really like to do is model the survival time as
a function of the covariates . To do this, it is convenient to work directly
with the hazard function, instead of the probability density function.10
One possible approach is to assume a functional form for the hazard func-
tionh(t|xi), such as h(t|xi) = where the exponent
function guarantees that the hazard function is non-negative. Note that
the exponential hazard function is special, in that it does not vary with
time.11Givenh(t|xi), we could calculate S(t|xi). Plugging these equations
into (11.13), we could then maximize the likelihood in order to estimate the
parameter β=(β0,β1,...,βp)T. However, this approach is quite restric-
tive, in the sense that it requires us to make a very stringent assumption
on the form of the hazard function h(t|xi). In the next section, we will
consider a much more flexible approach.
11.5.2 Proportional Hazards
The Proportional Hazards Assumption
Theproportional hazards assumption states exp
p/summationdisplay
j=1xijβj
, (11.14)
whereh0(t)≥0is an unspecified function, known as the baseline hazard .baseline
hazardIt is the hazard function for an individual with features xi1=···=xip=
0. The name “proportional hazards” arises from the fact that the hazard
function for an individual with feature vector xiis some unknown function
9See Exercise 9.
10Given the close relationship between the hazard function h(t)and the density func-
tionf(t)explored in Exercise 8, posing an assumption about the form of the hazard
function is closely related to posing an assumption about the form of the density func-
tion, as was done in the previous paragraph.
11The notation h(t|xi)indicates that we are now considering the hazard function for
theith observation conditional on the values of the covariates, xi.11.5 Regression Models With a Survival Response 479
0.5 1.0 1.5 2.0−3 −2 −1 0TimeLog Hazard0.5 1.0 1.5 2.00.0 0.2 0.4 0.6 0.8 1.0TimeSurvival Probability
0.5 1.0 1.5 2.0−4 −2 0 1 2TimeLog Hazard0.5 1.0 1.5 2.00.0 0.2 0.4 0.6 0.8 1.0TimeSurvival ProbabilityFIGURE 11.4. Top:In a simple example with p=1 and a binary covariate
xi∈{0,1}, the log hazard and the survival function under the model (11.14)
are shown (green for xi=0 and black for xi=1). Because of the proportional
hazards assumption (11.14), the log hazard functions differ by a constant, and the
survival functions do not cross. Bottom: Again we have a single binary covariate
xi∈{0,1}. However, the proportional hazards assumption (11.14)does not hold.
The log hazard functions cross, as do the survival functions.
h0(t)times the factor The quantity called the relative risk for the feature vector xi=(xi1,...,x ip)T, relative
to that for the feature vector xi= (0,...,0)T.
What does it mean that the baseline hazard function h0(t)in (11.14) is
unspecified? Basically, we make no assumptions about its functional form.
We allow the instantaneous probability of death at time t, given that one
has survived at least until time t, to take any form. This means that the
hazard function is very flexible and can model a wide range of relationships
between the covariates and survival time. Our only assumption is that a
one-unit increase in xijcorresponds to an increase in h(t|xi)by a factor of
exp(βj).
An illustration of the proportional hazards assumption ( 11.14) is given in
Figure11.4, in a simple setting with a single binary covariate xi∈{0,1}(so
thatp=1). In the top row, the proportional hazards assumption ( 11.14)
holds. Thus, the hazard functions of the two groups are a constant multiple
of each other, so that on the log scale, the gap between them is constant.
Furthermore, the survival curves never cross, and in fact the gap between
the survival curves tends to (initially) increase over time. By contrast, in
the bottom row, ( 11.14) does not hold. We see that the log hazard functions
for the two groups cross, as do the survival curves.480 11. Survival Analysis and Censored Data
Cox’s Proportional Hazards Model
Because the form of h0(t)in the proportional hazards assumption ( 11.14)
is unknown, we cannot simply plug h(t|xi)into the likelihood ( 11.13) and
then estimate β=(β1,...,βp)Tby maximum likelihood. The magic of
Cox’s proportional hazards model lies in the fact that it is in fact possibleCox’s
proportional
hazards
modelto estimate βwithout having to specify the form of h0(t).
To accomplish this, we make use of the same “sequential in time” logic
that we used to derive the Kaplan–Meier survival curve and the log-rank
test. For simplicity, assume that there are no ties among the failure, or
death, times: i.e. each failure occurs at a distinct time. Assume that δi=
1, i.e. the ith observation is uncensored, and thus yiis its failure time.
Then the hazard function for the ith observation at time yiish(yi|xi)=
h0(yi) and the total hazard at time yifor the at the probability that the ith observation is the one to fail at time
yi(as opposed to one of the other observations in the risk set) is
h0(yi) that the unspecified baseline hazard function h0(yi)cancels out of
the numerator and denominator!
Thepartial likelihood is simply the product of these probabilities over allpartial
likelihoodof the uncensored (11.16)
Critically, the partial likelihood is valid regardless of the true value of h0(t),
making the model very flexible and robust.13
To estimate β, we simply maximize the partial likelihood ( 11.16) with
respect to β. As was the case for logistic regression in Chapter 4, no closed-
form solution is available, and so iterative algorithms are required.
In addition to estimating β, we can also obtain other model outputs that
we saw in the context of least squares regression in Chapter 3and logistic
regression in Chapter 4. For example, we can obtain p-values corresponding
12Recall that the “at risk” observations at time yiare those that are still at risk of
failure, i.e. those that have not yet failed or been censored before time yi.
13In general, the partial likelihood is used in settings where it is difficult to compute
the full likelihood for all of the parameters. Instead, we compute a likelihood for just the
parameters of primary interest: in this case, β1,...,βp. It can be shown that maximizing
(11.16) provides good estimates for these parameters.11.5 Regression Models With a Survival Response 481
to particular null hypotheses (e.g. H0:βj=0), as well as confidence
intervals associated with the coefficients.
Connection With The Log-Rank Test
Suppose we have just a single predictor ( p=1), which we assume to be
binary, i.e. xi∈{0,1}. In order to determine whether there is a difference
between the survival times of the observations in the group {i:xi=0}
and those in the group {i:xi=1}, we can consider taking two possible
approaches:
Approach #1: Fit a Cox proportional hazards model, and test the
null hypothesis H0:β=0. (Sincep=1,βis a scalar.)
Approach #2: Perform a log-rank test to compare the two groups, as
in Section 11.4.
Which one should we prefer?
In fact, there is a close relationship between these two approaches. In
particular, when taking Approach #1, there are a number of possible ways
to testH0. One way is known as a score test. It turns out that in the case of
a single binary covariate, the score test for H0:β=0in Cox’s proportional
hazards model is exactly equal to the log-rank test. In other words, it does
not matter whether we take Approach #1 or Approach #2!
Additional Details
The discussion of Cox’s proportional hazards model glossed over a few
subtleties:
• There is no intercept in ( 11.14) nor in the equations that follow,
because an intercept can be absorbed into the baseline hazard h0(t).
• We have assumed that there are no tied failure times. In the case
of ties, the exact form of the partial likelihood ( 11.16) is a bit more
complicated, and a number of computational approximations must
be used.
•(11.16) is known as the partiallikelihood because it is not exactly a
likelihood. That is, it does not correspond exactly to the probability
of the data under the assumption ( 11.14). However, it is a very good
approximation.
• β=(β1,...,βp)T.
However, at times we may also wish to estimate the baseline S(t|x)for
an individual with feature vector x. The details are beyond the scope
of this book. Estimation of h0(t)is implemented in the lifelines
package in Python, which we will see in Section 11.8.482 11. Survival Analysis and Censored Data
11.5.3 Example: Brain Cancer Data
Table11.2shows the result of fitting the proportional hazards model to
theBrainCancer data, which was originally described in Section 11.3. The
coefficient column displays ˆβj. The results indicate, for instance, that the
estimated hazard for a male patient is e0.18=1.2times greater than for
a female patient: in other words, with all other features held fixed, males
have a 1.2 times greater chance of dying than females, at any point in time.
However, the p-value is 0.61, which indicates that this difference between
males and females is not significant.
As another example, we also see that each one-unit increase in the
Karnofsky index corresponds to a multiplier of exp(−0.05) = 0 .95in the
instantaneous chance of dying. In other words, the higher the Karnofsky
index, the lower the chance of dying at any given point in time. This effect
is highly significant, with a p-value of 0.0027 .
Coefficient Std. error z-statistic p-value
sex[Male] 0.18 0.36 0.51 0.61
diagnosis[LG Glioma] 0.92 0.64 1.43 0.15
diagnosis[HG Glioma] 2.15 0.45 4.78 0.00
diagnosis[Other] 0.89 0.66 1.35 0.18
loc[Supratentorial] 0.44 0.70 0.63 0.53
ki -0.05 0.02 -3.00 <0.01
gtv 0.03 0.02 1.54 0.12
stereo[SRT] 0.18 0.60 0.30 0.77
TABLE 11.2. Results for Cox’s proportional hazards model fit to the
BrainCancer data, which was first described in Section 11.3. The variable
diagnosis is qualitative with four levels: meningioma, LG glioma, HG glioma,
or other. The variables sex,loc, andstereoare binary.
11.5.4 Example: Publication Data
Next, we consider the dataset Publication involving the time to publica-
tion of journal papers reporting the results of clinical trials funded by the
National Heart, Lung, and Blood Institute.14For 244 trials, the time in
months until publication is recorded. Of the 244 trials, only 156 were pub-
lished during the study period; the remaining studies were censored. clinend),
whether the trial involved multiple centers ( multi), the funding mech),trialsamplesize( sampsize ),
budget ( budget), impact ( impact, related to the number of citations), and
whether the trial produced a positive (significant) result ( posres). The last
covariate is particularly interesting, as a number of studies have suggested
that positive trials have a higher publication rate.
14This dataset is described in the following paper: Gordon et al. (2013) Publication of
trials funded by the National Heart, Lung, and Blood Institute. New England Journal
of Medicine, 369(20):1926–1934.11.5 Regression Models With a Survival Response 483
0 20 40 60 80 100 1200.0 0.2 0.4 0.6 0.8 1.0MonthsProbability of Not Being PublishedNegative ResultPositive Result
FIGURE 11.5. Survival curves for time until publication for the Publication
data described in Section 11.5.4, stratified by whether or not the study produced
a positive by whether or not the study produced a positive result. We p-valueof 0.36.
We now consider a more careful analysis that makes use of all of all of the available features are shown in Table 11.3. We find that the
chance of publication of a study with a positive result is e0.55=1.74times
higher than the chance of publication of a study with a negative result
at any point in time, holding all other covariates fixed. The very small
p-value associated with posresin Table 11.3indicates that this result is
highly significant. This is striking, especially in light of our earlier finding
that a log-rank test comparing time to publication for studies with positive
versus negative results yielded a p-value of 0.36. How can we explain this
discrepancy? The answer stems from the fact that the log-rank test did not
consider any other covariates, whereas the results in Table 11.3are based
on a Cox model using all of the available covariates. In other words, after
we adjust for all of the other covariates, then whether or not the study
yielded a positive result is highly predictive of the time to publication.
In order to gain more insight into this result, in Figure 11.6we display
estimates of the survival curves associated with positive and negative re-
sults, adjusting for the other predictors. To produce these survival curves,
we estimated the underlying baseline hazard h0(t). We also needed to se-
lect representative values for the other predictors; we used the mean value
for each predictor, except for the categorical predictor mech, for which we
used the most prevalent category ( R01). Adjusting for the other predictors,
we now see a clear difference in the survival curves between studies with
positive versus negative results.
Other interesting insights can be gleaned from Table 11.3. For example,
studies with a clinical endpoint are more likely to be published at any
given point in time than those with a non-clinical endpoint. The funding484 11. Survival Analysis and Censored Data
Coefficient Std. error z-statistic p-value
posres[Yes] 0.55 0.18 3.02 0.00
multi[Yes] 0.15 0.31 0.47 0.64
clinend[Yes] 0.51 0.27 1.89 0.06
mech[K01] 1.05 1.06 1.00 0.32
mech[K23] -0.48 1.05 -0.45 0.65
mech[P01] -0.31 0.78 -0.40 0.69
mech[P50] 0.60 1.06 0.57 0.57
mech[R01] 0.10 0.32 0.30 0.76
mech[R18] 1.05 1.05 0.99 0.32
mech[R21] -0.05 1.06 -0.04 0.97
mech[R24,K24] 0.81 1.05 0.77 0.44
mech[R42] -14.78 3414.38 -0.00 1.00
mech[R44] -0.57 0.77 -0.73 0.46
mech[RC2] -14.92 2243.60 -0.01 0.99
mech[U01] -0.22 0.32 -0.70 0.48
mech[U54] 0.47 1.07 0.44 0.66
sampsize 0.00 0.00 0.19 0.85
budget 0.00 0.00 1.67 0.09
impact 0.06 0.01 8.23 0.00
TABLE 11.3. Results for Cox’s proportional hazards model fit to the
Publication data, using all of the available features. The features posres,multi,
andclinend are binary. The feature mechis qualitative with 14 levels; it is coded
so that the baseline level is Contract .
mechanism did not appear to be significantly associated with time until
publication.
11.6 Shrinkage for the Cox Model
In this section, we illustrate that the shrinkage methods of Section 6.2
can be applied to the survival data setting. In particular, motivated by
the “loss+penalty” formulation of Section 6.2, we consider minimizing a
penalized version of the negative log partial likelihood in ( (11.17)
with respect to β=(β1,...,βp)T. We might take P(β)=/summationtextp
j=1β2
j, which
corresponds to a ridge penalty, or P(β)=/summationtextp
j=1|βj|, which corresponds to
a lasso penalty.
In (11.17),λis a non-negative tuning parameter; typically we will mini-
mize it over a range of values of λ. Whenλ=0, then minimizing ( 11.17) is
equivalent to simply maximizing the usual Cox partial likelihood ( 11.16).
However, when λ>0, then minimizing ( 11.17) yields a shrunken version of
the coefficient estimates. When λis large, then using a ridge penalty will
give small coefficients that are not exactly equal to zero. By contrast, for a11.6 Shrinkage for the Cox Model 485
0 20 40 60 80 100 1200.0 0.2 0.4 0.6 0.8 1.0MonthsProbability of Not Being PublishedNegative ResultPositive Result
FIGURE 11.6. For thePublication data, we display survival curves for time
until publication, stratified by whether or not the study produced a positive result,
after adjusting for all other covariates.
sufficiently large value of λ, using a lasso penalty will give some coefficients
that are exactly equal to Publication data,de-
scribed in Section 11.5.4. We first randomly split the 244 trials into equally-
sized training and test sets. The cross-validation results from the training
set are shown in Figure 11.7. The “partial likelihood deviance”, shown on
they-axis, is twice the cross-validated negative log partial likelihood; it
plays the role of the cross-validation error.15Note the “U-shape” of the
partial likelihood deviance: just as we saw in previous chapters, the cross-
validation error is minimized for an intermediate level of model complexity.
Specifically, this occurs when just two predictors, budgetandimpact, have
non-zero estimated coefficients.
Now, how do we apply this model to the test set? This brings up an
important conceptual point: in essence, there is no simple way to compare
predicted survival times and true survival times on the test set. The first
problem is that some of the observations are censored, and so the true sur-
vival times for those observations are unobserved. The second issue arises
from the fact that in the Cox model, rather than predicting a single sur-
vival time given a covariate vector x, we instead estimate an entire survival
curve,S(t|x), as a function of t.
Therefore, to assess the model fit, we must take a different approach,
which involves stratifying the observations using the coefficient estimates.
In particular, for each test observation, we compute the “risk” score
budget i·ˆβbudget +impact i·ˆβimpact ,
whereˆβbudget andˆβimpact are the coefficient estimates for these two features
from the training set. We then use these risk scores to categorize the obser-
vations based on their “risk”. For instance, the high risk group consists of
the observations for which budget i·ˆβbudget +impact i·ˆβimpact is largest; by
15Cross-validation for the Cox model is more involved than for linear or logistic re-
gression, because the objective function is not a sum over the observations.486 11. Survival Analysis and Censored Data
2e−04 5e−04 1e−03 2e−03 5e−03 1e−02 2e−02 5e−02 1e−01 2e−019.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7Partial Likelihood 11.7. For thePublication data described in Section 11.5.4, cross-val-
idation results for the lasso-penalized Cox model are shown. The y-axis displays
the partial likelihood deviance, which plays the role of the cross-validation error.
Thex-axis displays the /lscript1norm (that is, the sum of the absolute values) of the
coefficients of the lasso-penalized Cox model with tuning parameter λ, divided by
the/lscript1norm of the coefficients of the unpenalized Cox model. The dashed line
indicates the minimum cross-validation error.
(11.14), we see that these are the observations for which the instantaneous
probability of being published at any moment in time is largest. In other
words, the high risk group consists of the trials that are likely to be pub-
lished sooner. On the Publication data, we stratify the observations into
tertiles of low, medium, and high risk. The resulting survival curves for
each of the three strata are displayed in Figure 11.8. We see that there is
clear separation between the three strata, and that the strata are correctly
ordered in terms of low, medium, and high risk of publication.
11.7 Additional Topics
11.7.1 Area Under the Curve for Survival Analysis
InChapter Define the scorefor theith observation to be the classifier’s estimate
ofPr(Y=1|X=xi). It turns out that if we consider all pairs consisting of
one observation in Class 1 and one observation in Class 2, then the AUC
is the fraction of pairs for which the score for the observation in Class 1
exceeds the score for the observation in Class 2.
This suggests a way to generalize the notion of AUC to survival anal-
ysis. We calculate an estimated risk score, ˆηi=ˆβ1xi1+···+ˆβpxip, for
i=1,...,n , using the Cox model coefficients. If ˆηi/prime>ˆηi, then the model
predicts that the i/primeth observation has a larger hazard than the ith obser-
vation, and thus that the survival time tiwill begreaterthanti/prime. Thus, it
is tempting to try to generalize AUC by computing the proportion of ob-
servations for which ti>ti/primeandˆηi/prime>ˆηi. However, things are not quite so
easy, because recall that we do not observe t1,...,t n; instead, we observe11.7 Additional Topics 487
0 20 40 60 80 100 1200.0 0.2 0.4 0.6 0.8 1.0MonthsProbability of Not Being PublishedLow RiskMedium RiskHigh Risk
FIGURE 11.8. For the Publication data introduced in Section 11.5.4, we
compute tertiles of “risk” in the test set using coefficients estimated on the training
set. There is clear separation between the resulting survival curves.
the (possibly-censored) times y1,...,y n, as well as the censoring indicators
δ1,...,δn.
Therefore, Harrell’s concordance index (orC-index) computes the pro-Harrell’s
concordance
indexportion of observation pairs for which the indicator variable I(ˆηi/prime>ˆηi)equals one if ˆηi/prime>ˆηi, and equals
zero otherwise. The numerator and denominator are multiplied by the sta-
tus indicator δi/prime, since if the i/primeth observation is uncensored (i.e. if δi/prime=1),
thenyi>y i/primeimplies that ti>ti/prime. By contrast, if δi/prime=0, thenyi>y i/prime
does not imply that ti>ti/prime.
We fit a Cox proportional hazards model on the training set of the
Publication data, and computed the C-index on the test set. This yielded
C=0.733. Roughly speaking, given two random papers from the test set,
the model can predict with 73.3% accuracy which will be published first.
11.7.2 Choice of Time Scale
In the examples considered thus far in this chapter, it has been fairly clear
how to define time. For example, in the Publication example, time zero for
each paper was defined to be the calendar time at the end of the study,
and the failure time was defined to be the number of months that elapsed
from the end of the study until the paper was published.
However, in other settings, the definitions of time zero and failure time
may be more subtle. For example, when examining the association between
risk factors and disease occurrence in an epidemiological study, one might
use the patient’s age to define time, so that time zero is the patient’s date
of birth. With this choice, the association between age and survival cannot
be measured; however, there is no need to adjust for age in the analysis.
When examining covariates associated with disease-free survival (i.e. the488 11. Survival Analysis and Censored Data
amount of time elapsed between treatment and disease recurrence), one
might use the date of treatment as time zero.
11.7.3 Time-Dependent Covariates
A powerfulfeature of the proportional hazards model is its abilityto handle
time-dependent covariates , predictors whose value may change over time.
For example, suppose we measure a patient’s blood pressure every week
over the course of a medical study. In this case, we can think of the blood
pressure for the ith observation not as xi, but rather as xi(t)at timet.
Because the partial likelihood in ( 11.16) is constructed sequentially in
time, dealing with time-dependent covariates is straightforward. In partic-
ular, we simply replace xijandxi/primejin (11.16) withxij(yi)andxi/primej(yi),
respectively; these are the current values of the predictors at time yi. By
contrast, time-dependent covariates would pose a much greater challenge
within the context of a traditional parametric approach, such as ( the Stanford Heart Transplant Program. Patients in need of a heart
transplant were put on a waiting list. Some patients received a transplant,
but others died while still on the waiting list. The primary objective of the
analysis was to determine whether a transplant was associated with longer
patient survival.
A naïve approach would use a fixed covariate to represent transplant
status: that is, xi=1if theith patient ever received a transplant, and xi=
0otherwise. But this approach overlooks the fact that patients had to live
long enough to get a transplant, and hence, on average, healthier for transplant: xi(t)=1 if the patient received a transplant by
timet, andxi(t)=0 otherwise.
11.7.4 Checking the Proportional Hazards Assumption
We have seen that Cox’s proportional hazards model relies on the propor-
tional hazards assumption ( 11.14). While results from the Cox model tend
to be fairly robust to violations of this assumption, it is still a good idea to
check whether it holds. In the case of a qualitative feature, we can plot the
log hazard function for each level of the feature. If ( 11.14) holds, then the
log hazard functions should just differ by a constant, as seen in the top-left
panel of Figure 11.4. In the case of a quantitative feature, we can take a
similar approach by stratifying the feature.
11.7.5 Survival Trees
InChapter classification settings. Most of these approaches can be generalized to
the survival analysis setting. For example, survival trees are a Lab: Survival Analysis 489
the difference between the survival curves in the resulting daughter nodes.
Survival trees can then be used to create random survival forests.
11.8 Lab: Survival Analysis
In this lab, we perform survival analyses on three separate data sets. In
Section11.8.1we analyze the BrainCancer data that was first described
in Section 11.3. In Section 11.8.2, we examine the Publication data from
Section11.5.4. Finally, Section 11.8.3explores a simulated call-center data
set.
We begin by importing some of our libraries at this top level. This makes
the code more readable, as scanning the first few lines of the notebook tell
us what libraries are used in this notebook.
In[1]: from matplotlib.pyplot import subplots
import numpy as np
import pandas as pd
from ISLP.models import ModelSpec as MS
from ISLP import load_data
We also collect the new imports needed for this lab.
In[2]: from lifelines import \
(KaplanMeierFitter,
CoxPHFitter)
from lifelines.statistics import ISLP.survival import sim_time
11.8.1 Brain Cancer Data
We begin with the BrainCancer data set, contained in the ISLPpackage.
In[3]: BrainCancer = load_data( 'BrainCancer' )
BrainCancer.columns
Out[3]: Index([ 'sex','diagnosis' ,'loc','ki','gtv','stereo' ,
'status' ,'time'],
dtype='object' )
The rows index the 88 patients, while the 8 columns contain the predictors
and outcome variables. We first briefly examine the data.
In[4]: BrainCancer[ 'sex'].value_counts()
Out[4]: Female 45
Male 43
Name: sex, dtype: int64
In[5]: BrainCancer[ 'diagnosis' ].value_counts()490 11. Survival Analysis and Censored Data
Out[5]: Meningioma 42
HG glioma 22
Other 14
LG glioma 9
Name: diagnosis, dtype: int64
In[6]: BrainCancer[ 'status' ].value_counts()
Out[6]: 05 3
13 5
Name: status, dtype: int64
Before beginning an analysis, it is important to know how the status
variable has been coded. Most software uses the convention that a status
of 1 indicates an uncensored observation (often death), and a statusof For the BrainCancer data set 35 patients died before the end of the
study, so we are using the conventional coding.
To begin the analysis, we re-create the Kaplan-Meier survival curve
shown in Figure 11.2. The main package we will use for survival analy-
sis islifelines . The variable timecorresponds to yi, the time to the ithlifelinesevent (either censoring or death). The first argument to km.fitis the event
time, and the second argument is the censoring variable, with a 1 indicat-
ing an observed failure time. The plot()method produces a survival curve.plot()with pointwise confidence intervals. By default, these are 90% confidence
intervals, but this can be changed by setting the alphaargument to one
minus the desired confidence level.
In[7]: fig, ax = subplots(figsize=(8,8))
km = KaplanMeierFitter()
km_brain = km.fit(BrainCancer[ 'time'], BrainCancer[ 'status' ])
km_brain.plot(label= 'Kaplan Meier estimate' ,a x = a x )
Next we create Kaplan-Meier survival curves that are stratified by sex, in
order to reproduce Figure 11.3. We do this using the groupby() method of.groupby()a dataframe. This method returns a generator that can be iterated over in
theforloop. In this case, the items in the forloop are 2-tuples representing
the groups: the first entry is the value of the grouping column sexwhile
the second value is the dataframe consisting of all rows in the dataframe
matching that value of sex. We will want to use this data below in the log-
rank test, hence we store this information in the dictionary by_sex. Finally,
we have also used the notion of string interpolation to automatically labelstring
interpolationthe different lines in the plot. String interpolation is a powerful technique
to format strings — Pythonhas many ways to facilitate such operations.
In[8]: fig, ax = subplots(figsize=(8,8))
by_sex = {}
for sex, df in BrainCancer.groupby( 'sex'):
by_sex[sex] = df
km_sex = km.fit(df[ 'time'], df['status' ])
km_sex.plot(label= 'Sex=%s' %s e x ,a x = a x )
As discussed in Section 11.4, we can perform a log-rank test to compare
the survival of males to females. We use the logrank_test() function fromlogrank_
test()11.8 Lab: Survival Analysis 491thelifelines.statisticsmodule. The first two arguments are the eventtimes, with the second denoting the corresponding (optional) chi squareddegrees_of_freedom1test_name logrank_testtest_statistic p -log2(p)1.44 0.23 2.12The resultingp-value is0.23, indicating no evidence of a difference insurvival between the two sexes.Next, we use theCoxPHFitter()estimator fromlifelinesto fit CoxCoxPHFitter()proportional hazards models. To begin, we consider a model that usessexas the only predictor.In[10]:coxph = CoxPHFitter#s h o r t h a n dsex_df = BrainCancer[['time','status','sex']]model_df = = se(coef)pcovariatesex[Male] 0.407667 0.342004 0.233263The first argument tofitshould be a data frame containing at least theevent time (the second argumenttimein this case), as well as an op-tional censoring variable (the argumentstatusin this case). Note also thatthe Cox model does not include an intercept, which is why we used theintercept=Falseargument toModelSpecabove. Thesummary()method de-livers many columns; we chose to abbreviate its output here. It is possibleto obtain the likelihood ratio test comparing this model to the one with nofeatures as squareddegrees_freedom1test_name log-likelihood ratio testtest_statistic p -log2(p)1.44 0.23 2.12492 11. Survival Analysis and Censored DataRegardless of which test we use, we see that there is no clear evidence fora difference in survival between males and females. As we learned in thischapter, the score test from the Cox model is exactly equal to the log ranktest statistic!Now we fit a model that makes use of additional predictors. We first notethat one of ourdiagnosisvalues is missing, hence we drop that observationbefore continuing.In[12]:cleaned = BrainCancer.dropna()all_MS = MS(cleaned.columns, intercept=False)all_df = all_MS.fit_transform(cleaned)fit_all = se(coef)pcovariatesex[Male] 0.183748 0.360358 0.610119diagnosis[LG glioma] -1.239541 0.579557 0.032454diagnosis[Meningioma] -2.154566 0.450524 0.000002diagnosis[Other] -1.268870 0.617672 0.039949loc[Supratentorial] 0.441195 0.703669 0.530664ki -0.054955 0.018314 0.002693gtv 0.034293 0.022333 0.124660stereo[SRT] 0.177778 0.601578 0.767597Thediagnosisvariable has been coded so that the baseline corresponds toHG glioma. The results indicate that the risk associated with HG gliomais more than eight times (i.e.e2.15=8.62) the risk associated with menin-gioma. In other words, after adjusting for the other predictors, patientswith HG glioma have much worse survival compared to those with menin-gioma. In addition, larger values of the Karnofsky index,ki, are associatedwith lower risk, i.e. longer survival.Finally, we plot estimated survival curves for each diagnosis category,adjusting for the other predictors. To make these plots, we set the values ofthe other predictors equal to the mean for quantitative variables and equalto the mode for categorical. To do this, we use theapply()method acrossrows (i.e.axis=0) with a functionrepresentativethat checks if a columnis categorical or not.In[13]:levels = cleaned['diagnosis'].unique()def representative(series):if hasattr(series.dtype,'categories'):return pd.Series.mode(series)else:return series.mean()modal_data = cleaned.apply(representative, axis=0)We make four copies of the column means and assign thediagnosiscolumn to be the four different diagnoses.In[14]:modal_df = pd.DataFrame([modal_data.iloc[0] for _ in range(len(levels))])modal_df['diagnosis']=l e v e l smodal_df11.8 Lab: Survival Analysis 493
Out[14]: sex diagnosis loc ki gtv stereo ...
Female Meningioma Supratentorial 80.920 8.687 SRT ...
Female HG glioma Supratentorial 80.920 8.687 SRT ...
Female LG glioma Supratentorial 80.920 8.687 SRT ...
Female Other Supratentorial 80.920 8.687 SRT ...
We then construct the model matrix based on the model specification
all_MSused to fit the model, and name the rows according to the levels of
diagnosis .
In[15]: modal_X = all_MS.transform(modal_df)
modal_X.index = levels
modal_X
We can use the predict_survival_function() method to obtain the esti-.predict_
survival_
function()mated survival function.
In[16]: predicted_survival = Meningioma HG glioma LG glioma Other
0.070 0.998 0.982 0.995 0.995
1.180 0.998 0.982 0.995 0.995
1.410 0.996 0.963 0.989 0.990
1.540 0.996 0.963 0.989 0.990
... ... ... ... ...
67.380 0.689 0.040 0.394 0.405
73.740 0.689 0.040 0.394 0.405
78.750 0.689 0.040 0.394 0.405
82.560 0.689 0.040 0.394 0.405
85 rows × 4 columns
This returns a data frame, whose plot methods yields the different survival
curves. To avoid clutter in the plots, we do not display confidence intervals.
In[17]: fig, ax = subplots(figsize=(8, 8))
predicted_survival.plot(ax=ax);
11.8.2 Publication Data
ThePublication data presented in Section 11.5.4can be found in the
ISLPpackage. We first reproduce Figure 11.5by plotting the Kaplan-Meier
curves stratified on the posresvariable, which records whether the study
had a positive or negative result.
In[18]: fig, ax = subplots(figsize=(8,8))
Publication = load_data( 'Publication' )
by_result = {}
for result, df in Publication.groupby( 'posres' ):
by_result[result] = df
km_result = km.fit(df[ 'time'], df['status' ])
km_result.plot(label= 'Result=%d' %r e s u l t ,a x = a x )
As discussed previously, the p-values from fitting Cox’s proportional haz-
ards model to the posresvariable are quite large, providing no evidence
of a difference in time-to-publication between studies with positive versus
negative results.494 11. Survival Analysis and Censored Data
In[19]: posres_df = MS([ 'posres' ,
'time',
'status' = coxph().fit(posres_df,
'time',
'status' )
posres_fit.summary[[ 'coef','se(coef)' ,'p']]
Out[19]: coef se(coef) p
covariate
posres 0.148076 0.161625 0.359578
However, the results change dramatically when we include other predic-
tors in the model. Here we exclude the funding mechanism variable.
In[20]: model = MS(Publication.columns.drop( ).summary[[ 'coef','se(coef)' ,'p']]
Out[20]: coef se(coef) p
covariate
posres 0.570774 0.175960 1.179606e-03
multi -0.040863 0.251194 8.707727e-01
clinend 0.546180 0.262001 3.710099e-02
sampsize 0.000005 0.000015 7.506978e-01
budget 0.004386 0.002464 7.511276e-02
impact 0.058318 0.006676 2.426779e-18
We see that there are a number of statistically significant variables, in-
cluding whether the trial focused on a clinical endpoint, the impact of the
study, and whether the study had positive or negative results.
11.8.3 Call Center hazard and the survival function explored in Exercise 8. Our
simulated data will represent the observed wait times (in seconds) for 2,000
customers who have phoned a call center. In this context, censoring occurs
if a customer hangs up before his or her call is answered.
Therearethreecovariates: Operators (thenumberofcallcenteroperators
available at the time of the call, which can range from 5to15),Center
(either A, B, or C), and Timeof day (Morning, Afternoon, or Evening). We
generate data for these covariates so that all possibilities are equally likely:
for instance, morning, afternoon and evening calls are equally likely, and
any number of operators from 5to15is equally likely.
In[21]: rng = np.random.default_rng(10)
N=2 0 0 0
Operators = rng.choice(np.arange(5, 16),
N,
replace=True)11.8 Lab: Survival Analysis 495
Center = rng.choice([ 'A','B','C'],
N,
replace=True)
Time = rng.choice([ 'Morn.' ,'After.' ,'Even.' ],
N,
replace=True)
D=p d . D a t a F r a m e ( { 'Operators' :O p e r a t o r s ,
'Center' :p d . C a t e g o r i c a l ( C e n t e r ) ,
'Time':p d . C a t e g o r i c a l ( T i m e ) } )
We then build a model matrix (omitting the intercept)
In[22]: model = MS([ 'Operators' ,
'Center' ,
'Time'],
intercept=False)
X=m o d e l . f i t _ t r a n s f o r m ( D )
It is worthwhile to take a peek at the model matrix X, so that we can be
sure that we understand how the variables have been coded. By default,
the levels of categorical variables are sorted and, as usual, the first column
of the one-hot encoding of the variable is dropped.
In[23]: X[:5]
Out[23]: Operators Center[B] Center[C] Time[Even.] Time[Morn.]
0 13 0.0 1.0 0.0 0.0
1 15 0.0 0.0 1.0 0.0
2 71 . 00 . 0 0.0 1.0
3 70 . 01 . 0 0.0 1.0
4 13 0.0 1.0 1.0 0.0
Next, we specify the coefficients and the hazard function.
In[24]: true_beta = np.array([0.04, -0.3, 0, 0.2, -0.2])
true_linpred = X.dot(true_beta)
hazard = lambda t: 1e-5 * t
Here, we have set the coefficient associated with Operators to equal 0.04;
in other words, each additional operator leads to a e0.04=1.041-fold in-
crease in the “risk” that the call will be answered, given the Centerand
Timecovariates. This makes sense: the greater the number of operators at
hand, the shorter the wait time! The coefficient associated with Center ==
Bis−0.3, andCenter == A is treated as the baseline. This means that the
risk of a call being answered at Center B is 0.74 times the risk that it will
be answered at Center A; in other words, the wait times are a bit longer
at Center B.
Recall from Section 2.3.7the use of lambdafor creating short functions
on the fly. We use the function sim_time() from the ISLP.survival pack-sim_time()age. This function uses the relationship between the survival function and
cumulative hazard S(t) = exp(−H(t))and the specific form of the cumu-
lative hazard function in the Cox model to simulate data based on values
of the linear predictor true_linpred and the cumulative hazard. We need
to provide the cumulative hazard function, which we do here.
In[25]: cum_hazard = lambda t: 1e-5 * t**2 / 2496 11. Survival Analysis and Censored DataWe are now ready to generate data under the Cox proportional hazardsmodel. We truncate the maximum time to 1000 seconds to keep simulatedwait times reasonable. The functionsim_time()takes a linear predictor, acumulative hazard function and a random number generator.In[26]:W=n p . a r r a y ( [ s i m _ t i m e ( l ,c u m _ h a z a r d ,r n g )for l in true_linpred])D['Wait time']=n p . c l i p ( W ,0 ,1 0 0 0 )We now simulate our censoring variable, for which we assume 90% ofcalls were answered (Failed==1) before the customer hung up (Failed==0).In[27]:D['Failed']=r n g . c h o i c e ( [ 1 ,0 ] ,N,p=[0.9, 0.1])D[:5]Out[27]:Operators Center Time Wait time Failed013 C After. 525.064979 1115 A Even. 254.677835 127B M o r n . 4 8 7 . 7 3 9 2 2 4 137C M o r n . 3 0 8 . 5 8 0 2 9 2 1413 C Even. 154.174608 1In[28]:D['Failed'].mean()Out[28]:0.8985We now plot Kaplan-Meier survival curves. First, we stratify byCenter.In[29]:fig, ax = subplots(figsize=(8,8))by_center = {}for center, df in D.groupby('Center'):by_center[center] = dfkm_center = km.fit(df['Wait time'], e n t e r ,a x = a x )ax.set_title("Probability of Still Being on Hold")Next, we stratify byTime.In[30]:fig, ax = subplots(figsize=(8,8))by_time = {}for time, df in D.groupby('Time'):by_time[time] = dfkm_time = km.fit(df['Wait time'], df['Failed'])km_time.plot(label='Time=%s'%t i m e ,a x = a x )ax.set_title("Probability of Still Being on Hold")It seems that calls at Call Center B take longer to be answered than callsat Centers A and C. Similarly, it appears that wait times are longest in themorning and shortest in the evening hours. We can use a log-rank test todetermine whether these differences are statistically significant using time'],D['Center'],D['Failed'])11.8 Lab: Survival Analysis 497Out[31]:t_0-1null_distributionchi squareddegrees_of_freedom2test_name multivariate_logrank_testtest_statistic p -log2(p)20.30 <0.005 14.65Next, we consider the effect squareddegrees_of_freedom2test_name multivariate_logrank_testtest_statistic p -log2(p)49.90 <0.005 35.99As in the case of a categorical variable with 2 levels, these results we look at the results forCenter.In[33]:X=M S ( ['Wait o x p h ( ) . f i t ( X ,'Wait squareddegrees_freedom2test_name log-likelihood ratio testtest_statistic p -log2(p)20.58 <0.005 14.85Next, we look at the results forTime.In[34]:X=M S ( ['Wait o x p h ( ) . f i t ( X ,'Wait squareddegrees_freedom2test_name log-likelihood ratio testtest_statistic p -log2(p)48.12 <0.005 34.71We find that differences between centers are highly significant, as aredifferences between times of day.Finally, we fit Cox’s proportional hazards model to the data.498 11. Survival Analysis and Censored DataIn[35]:X=M S ( D . c o l u m n s ,intercept=False).fit_transform(D)fit_queuing = coxph().fit(X,'Wait se(coef)pcovariateOperators 0.043934 0.007520 5.143677e-09Center[B] -0.236059 0.058113 4.864734e-05Center[C] 0.012231 0.057518 8.316083e-01Time[Even.] 0.268845 0.057797 3.294914e-06Time[Morn.] -0.148215 0.057334 9.734378e-03Thep-values for Center B and evening time are very small. It is alsoclear that the hazard — that is, the instantaneous risk that a call will beanswered — increases with the number of operators. Since we generatedthe data ourselves, we know that the true coefficients forOperators,Center=B,Center = C,Time = Even.andTime = Morn.are0.04,−0.3,0,0.2, and−0.2, respectively. The coefficient estimates from the fitted Cox model arefairly accurate.11.9 ExercisesConceptual1. For each example, state whether or not the censoring mechanism isindependent. Justify your answer.(a) In a study of disease relapse, due to a careless research scientist,all patients whose phone numbers begin with the number “2”are lost to follow up.(b) In a study of longevity, a formatting error causes all patient agesthat exceed 99 years to be lost (i.e. we know that those patientsare more than 99 years old, but we do not know their exactages).(c) Hospital A conducts a study of longevity. However, very sickpatients tend to be transferred to Hospital B, and are lost tofollow up.(d) In a study of unemployment duration, the people who find workearlier are less motivated to stay in touch with study investiga-tors, and therefore are more likely to be lost to follow up.(e) In a study of pregnancy duration, women who deliver their ba-bies pre-term are more likely to do so away from their usualhospital, and thus are more likely to be censored, relative towomen who deliver full-term babies.11.9 Exercises 499
(f) A researcher wishes to model the number of years of education
of the residents of a small town. Residents who enroll in college
out of town are more likely to be lost to follow up, and are
also more likely to attend graduate school, relative to those who
attend college in town.
(g) Researchers conduct a study of disease-free survival (i.e. time
until disease relapse following treatment). Patients who have
not relapsed within five years are considered to be cured, and
thus their survival time is censored at five years.
(h) component can be manufactured in Iowa or in Pittsburgh,
with no difference in quality. The Iowa factory opened five years
ago, and so components manufactured in Iowa are censored are censored at two years.
(i) We wish to model the failure time of an electrical component
made in two different factories, one of which opened before the
other. We have reason to believe that the components manufac-
tured in the factory that opened earlier are of higher quality.
2. We conduct a study with n=4participants who have just purchased
cell phones, in order to model the time until phone replacement. The
first participant replaces her phone after 1.2 years. The second par-
ticipant still has not replaced her phone at the end of the two-year
study period. The third participant changes her phone number and is
lost to follow up (but has not yet replaced her phone) 1.5 years into
the study. The fourth participant replaces her phone after 0.2 years.
For each of the four participants ( i=1,...,4), answer the following
questions using the notation introduced in Section 11.1:
(a) Is the participant’s cell phone replacement time censored?
(b) Is the value of ciknown, and if so, then what is it?
(c) Is the value of tiknown, and if so, then what is it?
(d) Is the value of yiknown, and if so, then what is it?
(e) Is the value of δiknown, and if so, then what is it?
3. For the example in Exercise 2, report the values of K,d1,...,d K,
r1,...,r K, andq1,...,q K, where this notation was defined in Sec-
tion11.3.
4. This problem makes use of the Kaplan-Meier survival curve displayed
in Figure 11.9. The raw data that went into plotting this survival
curve is given in Table 11.4. The covariate column of that table is
not needed for this problem.
(a) What is the estimated probability of survival past 50 days?500 11. Survival Analysis and Censored Data
Observation ( Y) Censoring Indicator ( δ) Covariate ( X)
26.5 1 0.1
37.2 1 11
57.3 1 -0.3
90.8 0 2.8
20.2 0 1.8
89.8 0 0.4
TABLE 11.4. Data used in Exercise 4.
(b) Write out an analytical expression for the estimated survival
function. For instance, your answer might be something along
the lines of
/hatwideS(t)=

0.8 ift<31
0.5 if31≤t<77
0.22 if77≤t.
(The previous equation is for illustration only: it is not the cor-
rect answer!)
5. Sketch the survival function given by the equation
/hatwideS(t)=

0.8 ift<31
0.5 if31≤t<77
0.22 if77≤t.
Your answer should look something like Figure 11.9.
0204060800.0 0.2 0.4 0.6 0.8 1.0Time in DaysEstimated Probability of SurvivalFIGURE 11.9. A Kaplan-Meier survival curve used in Exercise 4.
6. This problem makes use of the data displayed in Figure 11.1. In
completing this problem, you can refer to the observation times as
y1,...,y 4. The ordering of these observation times can be seen from
Figure11.1; their exact values are not required.
(a) Report the values of δ1,...,δ4,K,d1,...,d K,r1,...,r K, and
q1,...,q K. The relevant notation is defined in Sections 11.1and
11.3.11.9 Exercises 501
(b) Sketch the Kaplan-Meier survival curve corresponding to this
data set. (You do not need to use any software to do this — you
can sketch it by hand using the results obtained in (a).)
(c) Based on the survival curve estimated in (b), what is the proba-
bility that the event occurs within 200days? What is the prob-
ability that the event does not occur within 310 days?
(d) Write out an expression for the estimated survival curve from
(b).
7. In this problem, we will derive ( 11.5) and (11.6), which are needed
for the construction of the log-rank test statistic ( 11.8). Recall the
notation in Table 11.1.
(a) the two groups. Then we can think of q1kas the number of
failures if we draw r1kobservations, without replacement, from
a risk set of rkobservations that contains a total of qkfailures.
Argue that q1kfollows a hypergeometric distribution . Write thehyper-
geometric
distributionparameters of this distribution in terms of r1k,rk, andqk.
(b) Given your previous answer, and the properties of the hyper-
geometric distribution, what are the mean and variance of q1k?
Compare your answer to ( 11.5) and (11.6).
8. Recall that the survival function S(t), the hazard function h(t), and
the density function f(t)are defined in ( 11.2), (11.9), and (11.11),
respectively. Furthermore, define F(t)=1 −S(t). Show that the
following relationships hold:
f(t)= dF(t)/dt
S(t) = In this exercise, we will explore the consequences of assuming that
the survival times follow an exponential distribution.
(a) Suppose that a survival time follows an Exp (λ)distribution,
so that its density function is f(t)= λexp(−λt). Using the
relationships provided in Exercise 8, show that S(t) = exp( −λt).
(b) Now suppose that each of nindependent survival times follows
an Exp(λ)distribution. Write out an expression for the likeli-
hood function ( 11.13).
(c) Show that the maximum likelihood estimator for Use your answer to (c) to derive an estimator of the mean sur-
vival time.
Hint: For (d), recall that the mean of an Exp( λ)random variable is
1/λ.502 11. Survival Analysis and Censored Data
Applied
10. This exercise focuses on the brain tumor data, which is included in
theISLPlibrary.
(a) Plot the Kaplan-Meier survival curve with ±1standard error
bands,usingthe KaplanMeierFitter() estimatorinthe lifelines
package.
(b) Draw a bootstrap sample of size n= 88 from the pairs (yi,δi),
and compute the resulting Kaplan-Meier survival curve. Repeat
thisprocess B= 200 times.Usetheresultstoobtainanestimate
of the standard error of the Kaplan-Meier survival curve at each
timepoint. Compare this to the standard errors obtained in (a).
(c) Fit a Cox proportional hazards model that uses all of the pre-
dictors to predict survival. Summarize the main findings.
(d) Stratify the data by the value of ki. (Since only one that have ki==60.) Plot Kaplan-Meier survival curves
for each of the five strata, adjusted for the other predictors.
11. This exercise makes use of the data in Table 11.4.
(a) Create two groups of observations. In Group 1, X<2, whereas
in Group 2, X≥2. Plot the Kaplan-Meier survival curves corre-
sponding to the two groups. Be sure to label the curves so that
it is clear which curve corresponds to which group. By eye, does
there appear to be a difference between the two groups’ survival
curves?
(b) Fit Cox’s proportional hazards model, using the group indicator
as a covariate. What is the estimated coefficient? Write a sen-
tence providing the interpretation of this coefficient, in terms
of the hazard or the instantaneous probability of the event. Is
there evidence that the true coefficient value is non-zero?
(c) Recall from Section 11.5.2that in the case of a single binary
covariate, the log-ran k test statistic should be identical to the
score statistic for the Cox model. Conduct a log-rank test to de-
termine whether there is a difference between the survival curves
for the two groups. How does the p-value for the log-rank test
statistic compare to the p-value for the score statistic for the
Cox model from (b)?12
Unsupervised Learning
Most of this book concerns supervised learning methods such access to a set of pfeatures X1,X2,...,X p, measured on nobser-
vations, and a response Yalso measured on those same nobservations.
The goal is then to predict YusingX1,X2,...,X p.
This chapter will instead focus on unsupervised learning , a set of sta-
tistical tools intended for the setting in which we have only a set of fea-
turesX1,X2,...,X pmeasured on nobservations. We are not interested
in prediction, because we do not have an associated response variable Y.
Rather, the goal is to discover interesting things about the measurements
onX1,X2,...,X p. Is there an informative way to visualize the data? Can
we discover subgroups among the variables or among the observations?
Unsupervised learning refers to a diverse set of techniques for answering
questions such as these. In this chapter, we will focus on two particu-
lar types of unsupervised learning: principal components analysis , a tool
used for data visualization or data pre-processing before supervised tech-
niques are applied, and clustering , a broad class of methods for discovering
unknown subgroups in data.
12.1 The Challenge of Unsupervised Learning
Supervised learning is a well-understood area. In fact, if you have read
the preceding chapters in this book, then you should by now have a good
grasp of supervised learning. For instance, if you are asked to predict a
binary outcome from a data set, you have a very well developed set of tools
at your disposal (such as logistic regression, linear discriminant analysis,
classification trees, support vector machines, and more) as well as a clear
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_12 503504 12. Unsupervised Learning
understanding of how to assess the quality of the results obtained (using
cross-validation, validation on an independent test set, and so forth).
In contrast, unsupervised learning is often much more challenging. The
exercise tends to be more subjective, and there is no simple goal for the
analysis, such as prediction of a response. Unsupervised learning is often
performed as part of an exploratory data analysis . Furthermore, it can beexploratory
data
analysishard to assess the results obtained from unsupervised learning methods,
since there is no universally accepted mechanism for performing cross-
validation or validating results on an independent data set. The reason
for this difference is simple. If we fit a predictive model using a supervised
learning technique, then it is possible to check our work by seeing how
well our model predicts the response Yon observations not used in fitting
the model. However, in unsupervised learning, there is no way to check our
workbecause wedon’t knowthe trueanswer—theproblemis unsupervised.
Techniques for unsupervised learning are of growing importance in a
number of fields. A cancer researcher might assay gene expression levels in
100 patients with breast cancer. He or she might then look for subgroups
among the breast cancer samples, or among the genes, in order to obtain
a better understanding of the disease. An online shopping site might try
to identify groups of shoppers with similar browsing and purchase histo-
ries, as well as items that are of particular interest to the shoppers within
each group. Then an individual shopper can be preferentially shown the
items in which he or she is particularly likely to be interested, based on
the purchase histories of similar shoppers. A search engine might choose
which search results to display to a particular individual based on the click
histories of other individuals with similar search patterns. These statistical
learningtasks,and manymore, canbeperformed viaunsupervised learning
techniques.
12.2 Principal Components Analysis
Principal components are discussed in Section 6.3.1in the context of
principal components regression. When faced with a large set of corre-
lated variables, principal components allow us to summarize this set with
a smaller number of representative variables that collectively explain most
of the variability in the original set. The principal component directions
are presented in Section 6.3.1as directions in feature space along which
the original data are highly variable . These directions also define lines and
subspaces that are as close as possible to the data cloud. To perform
principal components regression, we simply use principal components as
predictors in a regression model in place of the original larger set of vari-
ables.
Principal components analysis components are computed, and the subsequent use of these compo-
nents in understanding the data. PCA is an unsupervised approach, since
it involves only a set of features X1,X2,...,X p, and no associated response
Y. Apart from producing derived variables for use in supervised learning
problems, PCA also serves as a tool for data visualization (visualization of12.2 Principal Components Analysis 505the observations or visualization of the variables). It can also be used as atool for data imputation — that is, for filling in missing values in a datamatrix.We now discuss PCA in greater detail, focusing on the use of PCA asa tool for unsupervised data exploration, in keeping with the topic of thischapter.12.2.1 What Are Principal Components?Suppose that we wish to visualizenobservations with measurements on aset ofpfeatures,X1,X2,...,Xp, as part of an exploratory data analysis.We could do this by examining two-dimensional scatterplots of the data,each of which contains thenobservations’ measurements on two of thefeatures.However,there for example,withp= 10there are 45 plots! Ifpis large, then it will certainly not bepossible to look at all of them; moreover, most likely none of them willbe informative since they each contain just a small fraction of the totalinformation present in the data set. Clearly, a better method is required tovisualize thenobservations whenpis large. In particular, we would like tofind a low-dimensional representation of the data that captures as much of the data that captures most of the information, then wecan plot the observations in this low-dimensional space.PCA provides a tool to do just this. It finds a low-dimensional represen-tation of a data set that contains as much as possible of the variation. Theidea is that each of thenobservations lives inp-dimensional space, but notall of these dimensions are equally interesting. PCA seeks a small numberof dimensions that are as interesting as possible, where the concept ofin-terestingis measured by the amount that the observations vary along eachdimension. Each of the dimensions found by PCA is a linear combinationof thepfeatures. We now explain the manner in which these dimensions,orprincipal components, are found.Thefirst principal componentof a set of featuresX1,X2,...,Xpis thenormalized linear combination of the featuresZ1=φ11X1+φ21X2+···+φp1Xp(12.1)that has the largest variance. Bynormalized, we mean that/summationtextpj=1φ2j1=1.We refer to the elementsφ11,...,φp1as theloadingsof the first principalloadingcomponent; together, the loadings make up the principal component load-ing vector,φ1=(φ11φ21...φp1)T. We constrain the loadings so thattheir sum of squares is equal to one, since otherwise setting these elementsto be arbitrarily large in absolute value could result in an arbitrarily largevariance.Given ann×pdata setX, how do we compute the first principal com-ponent? Since we are only interested in variance, we assume that each ofthe variables inXhas been centered to have mean zero (that is, the col-umn means ofXare zero). We then look for the linear combination of thesample feature values of the formzi1=φ11xi1+φ21xi2+···+φp1xip(12.2)506 12. Unsupervised other words, the first principal component loading vector solves the op-
timization top/summationdisplay
j=1φ2
j1=1. (12.3)
From (12.2) we can write the objective in ( 12.3) as1
n/summationtextn
i=1z2
i1. Since
1
n/summationtextn
i=1xij=0, the average of the z11,...,z n1will be zero as well. Hence
the objective that we are maximizing in ( 12.3) is just the sample variance of
thenvalues of zi1. We refer to z11,...,z n1as thescoresof the first princi-score
pal component. Problem ( 12.3) can be solved via an eigen decomposition ,eigen decom-
positiona standard technique in linear algebra, but the details are outside of the
scope of this book.1
There is a nice geometric interpretation of the first principal component.
The loading vector φ1with elements φ11,φ21,...,φp1defines a direction in
feature space along which the data vary the most. If we project the ndata
pointsx1,...,x nonto this direction, the projected values are the princi-
pal component scores z11,...,z n1themselves. For instance, Figure 6.14on
page254displays the first principal component loading vector (green solid
line) on an advertising data set. In these data, there are only two features,
and so the observations as well as the first principal component loading
vector can be easily displayed. As can be seen from ( 6.19), in that data set
φ11=0.839andφ21=0.544.
After the first principal component Z1of the features has been deter-
mined, we can find the second principal component Z2. The second princi-
pal component is the linear combination of X1,...,X pthat has maximal
variance out of all linear combinations that are uncorrelated withZ1. The
second principal component scores z12,z22,...,z n2take the form
zi2=φ12xi1+φ22xi2+···+φp2xip, (12.4)
whereφ2is the second principal component loading vector, with elements
φ12,φ22,...,φp2. It turns out that constraining Z2to be uncorrelated with
Z1is equivalent to constraining the direction φ2to be orthogonal (perpen-
dicular) to the direction φ1. In the example in Figure 6.14, the observations
lie in two-dimensional space (since p=2), and so once we have found φ1,
there is only one possibility for φ2, which is shown as a blue dashed line.
(From Section 6.3.1, we know that φ12=0.544andφ22=−0.839.) But in
a larger data set with p>2variables, there are multiple distinct principal
components, and they are defined in a similar manner. To find φ2, we solve
a problem similar to ( 12.3) withφ2replacing φ1, and with the additional
constraint that φ2is orthogonal to φ1.2
1As an alternative to the eigen decomposition, a related technique called the singular
value decomposition can be used. This will be explored in the lab at the end of this
chapter.
2On a technical note, the principal component directions φ1,φ2,φ3,...are given
by the ordered sequence of eigenvectors of the matrix XTX, and the variances of the
components are the eigenvalues. There are at most min( n−1,p)principal components.12.2 Principal Components Analysis 507
−3 −2 −1 0123−3 −2 −1 0123
First Principal ComponentSecond Principal HampshireNew Jersey
New MexicoNew York
North CarolinaNorth DakotaOhioOklahomaOregonPennsylvaniaRhode Island
South CarolinaSouth 12.1.The first two principal components for theUSArrestsdata. Theblue state names represent the scores for the first two principal components. Theorange arrows indicate the first two principal component loading vectors (with axeson the top and right). For example, the loading forRapeon the first componentis0.54, and its loading on the second principal component0.17(the wordRapeis centered at the point(0.54,0.17)). This figure is known as a biplot, because itdisplays both the principal component scores and the principal component loadings.Once we have computed the principal components, we can plot themagainst each other in order to produce low-dimensional views of the data.For instance, we can plot the score vectorZ1againstZ2,Z1againstZ3,Z2againstZ3, and so forth. Geometrically, this amounts to projecting theoriginal data down onto the subspace spanned byφ1,φ2, andφ3, andplotting the projected points.We illustrate the use of PCA on theUSArrestsdata set. For each of the50 states in the United States, the data set contains the number of arrestsper100,000residents for each of three crimes:Assault,Murder, andRape.We also recordUrbanPop(the percent of the population in each state livingin urban areas). The principal component score vectors have lengthn= 50,and the principal component loading vectors have lengthp=4. PCA 12. Unsupervised Learning
PC1 PC2
Murder 0.5358995 −0.4181809
Assault 0.5831836 −0.1879856
UrbanPop 0.2781909 0.8728062
Rape 0.5434321 0.1673186
TABLE 12.1. The principal component loading vectors, φ1andφ2, for the
USArrests data. These are also displayed in Figure 12.1.
deviation one. Figure 12.1plots the first two principal components of these
data. The figure represents both the principal component scores and the
loading vectors in a single biplotdisplay. The loadings are also given inbiplotTable12.2.1.
In Figure 12.1, we see that the first loading vector places approximately
equal weight on Assault,Murder, andRape, but with much less weight on
UrbanPop of serious crimes. The second loading vector places most of its weight
onUrbanPop and much less weight on the other three features. Hence, this
component roughly corresponds to the level of urbanization of the state.
Overall, we see that the crime-related variables ( Murder,Assault, UrbanPop variableisfarfromthe
other three. This indicates that the crime-related variables are correlated
with each other—states with high murder rates tend to have high assault
and rape rates—and that the UrbanPop variable is less correlated with the
other three.
We can examine differences between the states via the two principal com-
ponent score vectors shown in Figure 12.1. Our discussion of the loading
vectors suggests that states with large positive scores on the first compo-
nent, such as California, Nevada and Florida, have high crime rates, while
states like North Dakota, with negative scores on the first component, have
low crime rates. California also has a high score on the second component,
indicating a high level of urbanization, while the opposite is true for states
like Mississippi. States close to zero on both components, such as Indiana,
have approximately average levels of both crime and urbanization.
12.2.2 Another Interpretation of Principal Components
The first two principal component loading vectors in a simulated three-
dimensional data set are shown in the left-hand panel of Figure 12.2; these
two loading vectors span a plane along which the observations have the
highest variance.
In the previous section, we describe the principal component loading vec-
tors as the directions in feature space along which the data vary the most,
and the principal component scores as projections along these directions.
However, an alternative interpretation of principal components can also be12.2 Principal Components Analysis 509
First principal componentSecond principal component−1.0 −0.5 0.0 0.5 1.0−1.0 −0.5 0.0 0.5 12.2. Ninety observations simulated in three dimensions. The obser-
vations are displayed in color for ease of visualization. Left:the first two principal
component directions span the plane that best fits the data. The plane is positioned
to minimize the sum of squared distances to each point. Right:the first two prin-
cipal component score vectors give the coordinates of the projection of the 90
observations onto the plane.
useful: principal components provide low-dimensional linear surfaces that
areclosestto the observations. We expand upon that interpretation here.3
The first principal component loading vector has a very special property:
it is the line in p-dimensional space that is closestto thenobservations
(using average squared Euclidean distance as a measure of closeness). This
interpretation can be seen in the left-hand panel of Figure 6.15; the dashed
lines indicate the distance between each observation and the line defined
by the first principal component loading vector. The appeal of this inter-
pretation is clear: we seek a single dimension of the data that lies as close
as possible to all of the data points, since such a line will likely provide a
good summary of the data.
The notion of principal components as the dimensions that are clos-
est to the nobservations extends beyond just the first principal com-
ponent. For instance, the first two principal components of a data set
span the plane that is closest to the nobservations, in terms of average
squared Euclidean distance. An example is shown in the left-hand panel
of Figure 12.2. The first three principal components of a data set span
the three-dimensional hyperplane that is closest to the nobservations, and
so forth.
Using this interpretation, together the first Mprincipal component score
vectors and the first Mprincipal component loading vectors provide the
bestM-dimensional approximation (in terms of Euclidean distance) to
3In this section, we continue to assume that each column of the data matrix Xhas
been centered to have mean zero—that is, the column mean has been subtracted from
each column.510 12. Unsupervised Learning
theith observation xij. This representation can be written as
xij≈M/summationdisplay
m=1zimφjm. (12.5)
We can state this more formally by writing down an optimization prob-
lem. Suppose the data matrix Xis column-centered. Out of all approxima-
tions of the form xij≈/summationtextM
m=1aimbjm, we could ask for the one with the
smallest residual sum of (12.6)
Here,Ais ann×Mmatrix whose (i, m)element is aim, andBis ap×M
element whose (j, m)element is bjm.
It can be shown that for any value of M, the columns of the matrices
ˆAandˆBthat solve ( 12.6) are in fact the first Mprincipal components
score and loading vectors. In other words, if ˆAandˆBsolve (12.6), then
ˆaim=zimandˆbjm=φjm.4This means that the smallest possible value of
the objective in ( 12.6) (12.7)
In summary, together the Mprincipal component score vectors and M
principal component loading vectors can give a good approximation to the
data when Mis sufficiently large. When M= min( n−1,p), then the
representation is exact: xij=/summationtextM
m=1zimφjm.
12.2.3 The Proportion of Variance Explained
In Figure 12.2, we performed PCA on a three-dimensional data set (left-
hand panel) and projected the data onto the first two principal component
loading vectors in order to obtain a two-dimensional view of the data (i.e.
the principal component score vectors; right-hand panel). We see that this
two-dimensional representation of the three-dimensional data does success-
fully capture the major pattern in the data: the orange, green, and cyan
observations that are near each other in three-dimensional space remain
nearby in the two-dimensional representation. Similarly, we have seen on
theUSArrests data set that we can summarize the 50 observations and 4
variables using just the first two principal component score vectors and the
first two principal component loading vectors.
We can now ask a natural question: how much of the information in
a given data set is lost by projecting the observations onto the first few
principal components? That is, how much of the variance in the data is not
contained in the first few principal components? More generally, we are
interested in knowing the proportion of variance explained (PVE) by eachproportion
of variance
explained 4Technically, the solution to ( 12.6) is not unique. Thus, it is more precise to state
that any solution to ( 12.6) can be easily transformed to yield the principal components.12.2 Principal Components Analysis 511
principal component. The total variance present in a data set (assuming
that the variables have been centered to have mean zero) is defined (12.8)
and the variance explained by the mth principal component (12.9)
Therefore, the PVE of the mth principal component is given (12.10)
The PVE of each principal component is a positive quantity. In order to
compute the cumulative PVE of the first Mprincipal components, we can
simply sum ( 12.10) over each of the first MPVEs. In total, there are
min( n−1,p)principal components, and their PVEs sum to one.
In Section 12.2.2, we showed that the first Mprincipal component load-
ing and score vectors can be interpreted as the best M-dimensional approx-
imation to the data, in terms of residual sum of squares. It turns out that
the variance of the data can be decomposed into the variance of the first M
principal components plus the mean squared error of this M-dimensional
approximation, as /bracehtipupright
Var. of /bracehtipupright
Var. of first /bracehtipdownright/bracehtipdownleft /bracehtipupright
MSE of M-dimensional approximation(12.11)
The three terms in this decomposition are discussed in ( 12.8), (12.9), and
(12.7), respectively. Since the first term is fixed, we see that by maximizing
the variance of the first Mprincipal components, we minimize the mean
squarederrorofthe why principal components can be equivalently viewed as minimizing
the approximation error (as in Section 12.2.2) or maximizing the variance
(as in Section 12.2.1).
Moreover, we can use ( 12.11) to see that the PVE defined in ( TSS represents the total sum of squared elements of X, and RSS
represents the residual sum of squares of the M-dimensional approxima-
tion given by the principal components. Recalling the definition of R2from
(3.17), this means that we can interpret the PVE as the R2of the approx-
imation for Xgiven by the first Mprincipal components.512 12. Unsupervised Learning
1.0 1.5 2.0 2.5 3.0 3.5 4.00.0 0.2 0.4 0.6 0.8 1.0Principal ComponentProp. Variance Explained1.0 1.5 2.0 2.5 3.0 3.5 4.00.0 0.2 0.4 0.6 0.8 1.0Principal ComponentCumulative Prop. Variance ExplainedFIGURE 12.3. Left:a scree plot depicting the proportion of variance explained
by each of the four principal components in the USArrests data.Right:the cu-
mulative proportion of variance explained by the four principal components in the
USArrests data.
In theUSArrests data, the first principal component explains 62.0% of
the variance in the data, and the next principal component explains of the variance in the data, and the last two principal components
explain only 13% of the variance. This means that Figure 12.1provides a
pretty accurate summary of the data using just two dimensions. The PVE
of each principal component, as well as the cumulative PVE, is shown
in Figure 12.3. The left-hand panel is known as a scree plot , and will bescree plotdiscussed later in this chapter.
12.2.4 More on PCA
Scaling the Variables
We have already mentioned that before PCA is performed, the variables
should be centered to have mean zero. Furthermore, the results obtained
when we perform PCA will also depend on whether the variables have
been individually scaled (each multiplied by a different constant). This is in
contrast to some other supervised and unsupervised learning techniques,
such as linear regression, in which scaling the variables has no effect. (In
linear regression, multiplying a variable by a factor of cwill simply lead to
multiplication of the corresponding coefficient estimate by a factor of 1/c,
and thus will have no substantive effect on the model obtained.)
For instance, Figure 12.1was obtained after scaling each of the variables
to have standard deviation one. This is reproduced in the left-hand plot in
Figure12.4. Why does it matter that we scaled the variables? In these data,
the variables are measured in different units; Murder,Rape, andAssaultare
reported as the number of occurrences per 100,000people, and UrbanPop is
the percentage of the state’s population that lives in an urban area. These
four variables have variances of 18.97,87.73,6945 .16, and209.5, respec-
tively. Consequently, if we perform PCA on the unscaled variables, then12.2 Principal Components Analysis 513
−3 −2 −1 0 1 2 3−3 −2 −1 0 1 2 3First Principal ComponentSecond Principal 0.0 0.5
−0.5 0.0 0.5MurderAssaultUrbanPopRapeScaled
−100 −50 0 50 100 150−100 −50 0 50 100 150First Principal ComponentSecond Principal 0.0 0.5 1.0
−0.5 0.0 0.5 1.0MurderAssaultUrbanPopRapeUnscaled
FIGURE 12.4. Two principal component biplots for the USArrests data.Left:
the same as Figure 12.1, with the variables scaled to have unit standard deviations.
Right:principal components using unscaled data. Assault has by far the largest
loading on the first principal component because it has the highest variance among
the four variables. In general, scaling the variables to have standard deviation one
is recommended.
the first principal component loading vector will have a very large loading
forAssault, since that variable has by far the highest variance. The right-
hand plot in Figure 12.4displays the first two principal components for the
USArrests data set, without scaling the variables to have standard devia-
tion one. As predicted, the first principal component loading vector places
almost all of its weight on Assault, while the second principal component
loading vector places almost all of its weight on UrbanPop . Comparing this
to the left-hand plot, we see that scaling does indeed have a substantial
effect on the results obtained.
However, this result is simply a consequence of the scales on which the
variables were measured. For instance, if Assaultwere measured in units
of the number of occurrences per 100people (rather than number of oc-
currences per 100,000people), then this would amount to dividing all of
the elements of that variable by 1,000. Then the variance of the variable
would be tiny, and so the first principal component loading vector would
have a very small value for that variable. Because it is undesirable for the
principal components obtained to depend on an arbitrary choice of scaling,
we typically scale each variable to have standard deviation one before we
perform PCA.
In certain settings, however, the variables may be measured in the same
units. In this case, we might not wish to scale the variables to have stan-
dard deviation one before performing PCA. For instance, suppose that the
variables in a given data set correspond to expression levels for pgenes.
Then since expression is measured in the same “units” for each gene, we
might choose not to scale the genes to each have standard deviation one.514 12. Unsupervised Learning
Uniqueness of the Principal Components
While in theory the principal components need not be unique, in almost all
practical settings they are (up to sign flips). This means that two different
software packages will yield the same principal component loading vectors,
although the signs of those loading vectors may differ. The signs may differ
because each principal component loading vector specifies a direction in p-
dimensional space: flipping the sign has no effect as the direction does not
change. (Consider Figure 6.14—the principal component loading vector is
a line that extends in either direction, and flipping its sign would have no
effect.) Similarly, the score vectors are unique up to a sign flip, since the
variance of Zis the same as the variance of −Z. It is worth noting that
when we use ( 12.5) to approximate xijwe multiply zimbyφjm. Hence, if
the sign is flipped on both the loading and score vectors, the final product
of the two quantities is unchanged.
Deciding How Many Principal Components to Use
In general, an n×pdata matrix Xhasmin( n−1,p)distinct principal
components. However, we usually are not interested in all of them; rather,
we would like to use just the first few principal components in order to
visualize or interpret the data. In fact, we would like to use the goodunderstandingofthe
data. How many principal components are needed? Unfortunately, there is
no single (or simple!) answer to this question.
We typically decide on the number of principal components required
to visualize the data by examining a scree plot , such as the one shown
in the left-hand panel of Figure 12.3. We choose the smallest number of
principal components that are required in order to explain a sizable amount
of the variation in the data. This is done by eyeballing the scree plot, and
looking for a point at which the proportion of variance explained by each
subsequent principal component drops off. This drop is often referred to
as anelbowin the scree plot. For instance, by inspection of Figure 12.3,
one might conclude that a fair amount of variance is explained by the first
two principal components, and that there is an elbow after the second
component. After all, the third principal component explains less than ten
percent of the variance in the data, and the fourth principal component
explains less than half that and so is essentially worthless.
However, this type of visual analysis is inherently ad hoc. Unfortunately,
there is no well-accepted objective way to decide how many principal com-
ponents are enough. In fact, the question of how many principal compo-
nents are enough is inherently ill-defined, and will depend on the specific
area of application and the specific data set. In practice, we tend to look
at the first few principal components in order to find interesting patterns
in the data. If no interesting patterns are found in the first few principal
components, then further principal components are unlikely to be of inter-
est. Conversely, if the first few principal components are interesting, then
we typically continue to look at subsequent principal components until no
further interesting patterns are found. This is admittedly a subjective ap-12.3 Missing Values and Matrix Completion 515
proach, and is reflective of the fact that PCA is generally used as a tool for
exploratory data analysis.
On the other hand, if we compute principal components for use in a
supervised analysis, such as the principal components regression presented
in Section 6.3.1, then there is a simple and objective way to determine how
many principal components to use: we can treat the number of principal
component score vectors to be used in the regression as a tuning parameter
to be selected via cross-validation or a related approach. The comparative
simplicity of selecting the number of principal components for a supervised
analysis is one manifestation of the fact that supervised analyses tend to
be more clearly defined and more objectively evaluated than unsupervised
analyses.
12.2.5 Other Uses for Principal Components
We saw in Section 6.3.1that we can perform regression using the principal
component score vectors as features. In fact, many statistical techniques,
such as regression, classification, and clustering, can be easily adapted to
use then×Mmatrix whose columns are the first M/lessmuchpprincipal com-
ponent score vectors, rather than using the full n×pdata matrix. This
can lead to less noisy results, since it is often the case that the signal (as
opposed to the noise) in a data set is concentrated in its first few principal
components.
12.3 Missing Values and Matrix Completion
Often datasets have missing values, which can be a nuisance. For example,
suppose that we wish to analyze the USArrests data, and discover that 20
of the 200 values have been randomly corrupted and marked as missing.
Unfortunately, the statistical learning methods that we have seen in this
book cannot handle missing values. How should we proceed?
We could remove the rows that contain missing observations and per-
form our data analysis on the complete rows. But this seems wasteful, and
depending on the fraction missing, unrealistic. Alternatively, if xijis miss-
ing, then we could replace it by the mean of the jth column (using the
non-missing entries to compute the mean). Although this is a common and
convenient strategy, often we can do better by exploiting the correlation
between the variables.
In this section we show how principal components can be used to imputeimpute
imputationthe missing values, through a process known as matrix completion . The
matrix
completioncompleted matrix can then be used in a statistical learning method, such
as linear regression or at
randomthe battery of the electronic scale was flat at the time of his exam. By
contrast, if the weight is missing because the patient was too heavy to
climb on the scale, then this is not missing at random; the missingness is516 12. Unsupervised Learning
informative, and the approach described here for handling missing data is
not suitable.
Sometimes data is missing by necessity. For example, if we form a matrix
of the ratings (on a scale from 1to5) thatncustomers have given to the
entire Netflix catalog of pmovies, then most of the matrix will be missing,
since no customer will have seen and rated more than a tiny fraction of the
catalog. If we can impute the missing values well, then we will have an idea
of what each customer will think of movies they have not yet seen. Hence
matrix completion can be used to power recommender systems .recommender
systems
Principal Components with Missing Values
In Section 12.2.2, we showed that the first Mprincipal component score
and loading vectors provide the “best” approximation to the data matrix
X, in the sense of ( 12.6). Suppose that some of the observations xijare
missing. We now show how one can both impute the missing values and
solve the principal component problem at the same time. We return to a
modified form of the optimization problem ( (12.12)
whereOis the set of all observed pairs of indices (i, j), a subset of the
possible n×ppairs.
Once we solve this problem:
• we can estimate a missing observation the(i, m)and(j, m)elements, respectively,
of the matrices ˆAandˆBthat solve ( 12.12); and
• we can (approximately) recover the Mprincipal component scores
and loadings, as we did when the data were complete.
It turns out that solving ( 12.12) exactly is difficult, unlike in the case of
complete data: the eigen decomposition no longer applies. But the sim-
ple iterative approach in Algorithm 12.1, which is demonstrated in Sec-
tion12.5.2, typically provides a good solution.56
We illustrate Algorithm 12.1on theUSArrests data. There are p=4
variables and n= 50 observations (states). We first standardized the data
so each variable has mean zero and standard deviation one. We then ran-
domly selected 20 of the 50 states, and then for each of these we randomly
set one of the four variables to be missing. Thus, 10% of the elements of the
data matrix were missing. We applied Algorithm 12.1withM=1principal
component. Figure 12.5shows that the recovery of the missing elements
5This algorithm is referred to as “Hard-Impute” in Mazumder, Hastie, and Tibshi-
rani (2010) “Spectral regularization algorithms for learning large incomplete matrices”,
published in Journal of Machine Learning Research , pages 2287–2322.
6Each iteration of Step 2 of this algorithm decreases the objective ( 12.14). However,
the algorithm is not guaranteed to achieve the global optimum of ( 12.12).12.3 Missing Values and Matrix Completion 517
Algorithm 12.1 Iterative Algorithm for Matrix Completion
1. Create a complete data matrix ˜Xof dimension n×pof which the
(i, j)element equals
˜xij=/braceleftbiggxijif(i, j)∈O
¯xjif(i, j)/∈O,
where¯xjis the average of the observed values for the jth variable in
the incomplete data matrix X. Here,Oindexes the observations that
are observed in X.
2. Repeat steps (a)–(c) until the objective ( 12.14) fails to decrease:
(a) computing the principal components of ˜X.
(b) For each element (i, j)/∈O, set˜xij←/summationtextM
m=1ˆaimˆbjm.
(c) Compute the (12.14)
3. Return the estimated missing entries ˜xij,(i, j)/∈O.
is pretty accurate. Over 100 random runs of this experiment, the average
correlation between the true and imputed values of the missing elements
is 0.63, with a standard deviation of 0.11. Is this good performance? To
answer this question, we can compare this correlation to what we would
have gotten if we had estimated these 20 values using the complete data
— that is, if we had simply computed ˆxij=zi1φj1, wherezi1andφj1are
elements of the first principal component score and loading vectors of the
complete data.7Using the complete data in this way results in an average
correlation of 0.79 between the true and estimated values for these 20 el-
ements, with a standard deviation of 0.08. Thus, our imputation method
does worse than the method that uses all of the data ( 0.63±0.11versus
0.79±0.08), but its performance is still pretty good. (And of course, the
method that uses all of the data cannot be applied in a real-world setting
with missing data.)
Figure12.6further indicates that Algorithm 12.1performs fairly well on
this dataset.
7This is an unattainable gold standard, in the sense that with missing data, we of
course cannot compute the principal components of the complete data.518 12. Unsupervised Learning
FIGURE 12.5. Missing value imputation on the USArrests data. Twenty values
(10% of the total number of matrix elements) were artificially set to be missing,
and then imputed via Algorithm 12.1withM=1. The figure displays the true
valuexijand the imputed value ˆxijfor all twenty missing values. For each of the
twenty missing values, the color indicates the variable, and the label indicates the
state. The correlation between the true and imputed values is around 0.63.
We close with a few observations:
• TheUSArrests data has only four variables, which is on the low end
for methods like Algorithm 12.1to work well. For this reason, for this
demonstration we randomly set at most one variable per state to be
missing, and only used M=1principal component.
• In general, in order to apply Algorithm 12.1, we must select M, the
number of principal components to use for the imputation. One ap-
proach is to randomly leave out a few additional elements from the
matrix, and select Mbased on how well those known values are re-
covered. This is closely related to the validation-set approach seen in
Chapter 5.
Recommender Systems
Digital streaming services like Netflix and Amazon use data about the con-
tent that a customer has viewed in the past, as well as data from other
customers, to suggest other content for the customer. As a concrete ex-
ample, some years back, Netflix had customers rate each movie that they
had seen with a score from 1–5. This resulted in a very big n×pmatrix
for which the (i, j)element is the rating given by the ith customer to the−1.5 −1.0 −0.5 0.0 0.5 1.0 1.5−1.5 −1.0 −0.5 0.0 0.5 1.0 1.5
Original ValueImputed Missing Values and Matrix Completion 519
FIGURE 12.6. As described in the text, in each of 100 trials, we left out 20
elements of the USArrests dataset. In each trial, we applied Algorithm 12.1with
M=1 to impute the missing elements and compute the principal com ponents.
Left:For each of the 50 states, the imputed first principal component scores
(averaged over 100 trials, and displayed with a standard deviation bar) are plotted
against the first principal component scores computed using all the data. Right:
The imputed principal component loadings (averaged over 100 trials, and displayed
with a standard deviation bar) are plotted against the true principal component
loadings.
jth movie. One specific early example of this matrix had n= 480 ,189cus-
tomersand p= 17 200 movies, so 99% of the matrix had missing elements. Table 12.2
illustrates the setup.
In order to suggest a movie that a particular customer might like, as follows: the set of movies that the ith customer has seen will overlap
with those that other customers have seen. Furthermore, some of those
other customers will have similar movie preferences to the ith customer.
Thus, it should be possible to use similar customers’ ratings of movies that
theith customer has not seen to predict whether the ith customer will like
those movies.
More concretely, by applying Algorithm 12.1, we can predict the ith cus-
tomer’s rating for the jth movie using ˆxij=/summationtextM
m=1ˆaimˆbjm. Furthermore,
we can interpret the Mcomponents in terms of “cliques” and “genres”:
•ˆaimrepresents the strength with which the ith user belongs to the
mth clique, where a cliqueis a group of customers that enjoys movies
of themth genre;
•ˆbjmrepresents the strength with which the jth movie belongs to the
mthgenre.
Examples of genres include Romance, Western, and Action.
Principal component models similar to Algorithm 12.1are at the heart
of many recommender systems. Although the data m atrices involved are−3−2−10 1 2 3−3−2−10 1 2 3
True First Principal ComponentImputed First Principal 1 0 1 22468 1 0 1 2True PC VariancesImputed PC Variances/uni25CF
/uni25CF/uni25CF/uni25CF520 12. Unsupervised LearningJerry MaguireOceansRoad to PerditionA Fortunate ManCatch Me If You CanDriving Miss DaisyThe Two PopesThe LaundromatCode 8The Social Network···Customer 1••••4••••• · · ·Customer 2••3•••3••3···Customer 3•2•4••••2•· · ·Customer 43••••••••• · · ·Customer 551••4••••• · · ·Customer 6•••••24••• · · ·Customer 7••5••••3•• · · ·Customer 8•••••••••• · · ·Customer 93•••5••1•• · · ·....................................TABLE 12.2.Excerpt of the Netflix movie rating data. The movies are ratedfrom 1 (worst) to 5 (best). The symbol•represents a missing value: a movie thatwas not rated by the corresponding customer.typically massive, algorithms have been developed that can exploit the highlevel of missingness in order to perform efficient computations.12.4 Clustering MethodsClusteringrefers to a very broad set of techniques for findingsubgroups, orclusteringclusters, in a data set. When we cluster the observations of a data set, weseek to partition them into distinct groups so that the observations withineach group are quite similar to each other, while observations in differentgroups are quite different from each other. Of course, to make this concrete,we must define what it means for two or more observations to besimilarordifferent. Indeed, this is often a domain-specific consideration that mustbe made based on knowledge of the data being studied.For instance, suppose that we have a set ofnobservations, each breast cancer, and thepfeatures could correspond to measurementscollected for each tissue sample; these could be clinical measurements, suchas tumor stage or grade, or they could be gene expression measurements.We may have a reason to believe that there is some heterogeneity amongthentissue samples; for instance, perhaps there are a few differentun-knownsubtypes of breast cancer. Clustering could be used to find thesesubgroups. This is an unsupervised problem because we are trying to dis-cover structure—in this case, distinct clusters—on the basis of a data set.The goal in supervised problems, on the other hand, is to try to predictsome outcome vector such as survival time or response to drug treatment.Both clustering and PCA seek to simplify the data via a small numberof summaries, but their mechanisms are different:12.4 Clustering Methods 521
• PCA looks to find a low-dimensional representation of the observa-
tions that explain a good fraction of the variance;
• Clustering looks to find homogeneous subgroups among the observa-
tions.
Another application of clustering arises in marketing. We may have ac-
cess to a large number of measurements (e.g. median household income,
occupation, distance from nearest urban area, and so forth) for a large
number of people. Our goal is to perform market segmentation by identify-
ing subgroups of people who might be more receptive to a particular form
of advertising, or more likely to purchase a particular product. The task of
performing market segmentation amounts to clustering the people in the
data set.
Since clustering is popular in many fields, there exist a great num-
ber of clustering methods. In this section we focus on perhaps the two
best-known clustering approaches: K-means clustering andhierarchicalK-means
clusteringclustering . InK-means clustering, we seek to partition the observations
hierarchical
clusteringinto a pre-specified number of clusters. On the other hand, in hierarchical
clustering, we do not know in advance how many clusters we want; in fact,
we end up with a tree-like visual representation of the observations, called
adendrogram , that allows us to view at once the clusterings obtained fordendrogrameach possible number of clusters, from 1ton. There are advantages and
disadvantages to each of these clustering approaches, which we highlight in
this chapter.
In general, we can cluster observations on the basis of the features in
order to identify subgroups among the observations, or we can cluster fea-
tures on the basis of the observations in order to discover subgroups among
the features. In what follows, for simplicity we will discuss clustering obser-
vations on the basis of the features, though the converse can be performed
by simply transposing the data matrix.
12.4.1K-Means Clustering
K-means clustering is a simple and elegant approach for partitioning a
data set into Kdistinct, non-overlapping clusters. To perform K-means
clustering, we must first specify the desired number of clusters K; then the
K-means algorithm will assign each observation to exactly one of the K
clusters. Figure 12.7shows the results obtained from performing K-means
clustering on a simulated example consisting of 150observations in two
dimensions, using three different values of K.
TheK-means clustering procedure results from a simple and C1,...,C K
denote sets containing the indices of the observations in each cluster. These
sets satisfy two properties:
1.C1∪C2∪···∪CK={1,...,n }. In other words, each observation
belongs to at least one of the Kclusters.
2.Ck∩Ck/prime=∅for allk/negationslash=k/prime. In other words, the clusters are non-
overlapping: no observation belongs to more than one cluster.522 12. Unsupervised LearningK=2K=3K=4
FIGURE 12.7. A simulated data set with 150 observations in two-dimensional
space. Panels show the results of applying K-means clustering with different values
ofK, the number of clusters. The color of each observation indicates the cluster
to which it was assigned using the K-means clustering algorithm. Note that there
is no ordering of the clusters, so the cluster coloring is arbitrary. These cluster
labels were not used in clustering; instead, they are the outputs of the clustering
procedure.
For instance, if the ith observation is in the kth cluster, then i∈Ck. The
ideabehind K-meansclusteringisthata goodclusteringisoneforwhichthe
within-cluster variation is as small as possible. The within-cluster variation
for cluster Ckis a measure W(Ck)of the amount by which the observations
within a cluster differ from each other. Hence we want to solve the problem
minimize
C1,...,C (12.15)
In words, this formula says that we want to partition the observations into
Kclusters such that the total within-cluster variation, summed over all K
clusters, is as small as possible.
Solving ( 12.15) seems like a reasonable idea, but in order to make it
actionable we need to define the within-cluster variation. There are many
possible ways to define this concept, but by far the most common choice
involves squared Euclidean distance . That is, we (12.16)
where|Ck|denotes the number of observations in the kth cluster. In other
words, the within-cluster variation for the kth cluster is the sum of all of
the pairwise squared Euclidean distances between the observations in the
kth cluster, divided by the total number of observations in the kth cluster.
Combining ( 12.15) and (12.16) gives the optimization problem that defines12.4 Clustering Methods 523
K-means clustering,
minimize
C1,...,C (12.17)
Now, we would like to find an algorithm to solve ( 12.17)—that is, a
methodtopartitiontheobservationsinto Kclusterssuchthattheobjective
of (12.17) is minimized. This is in fact a very difficult problem to solve
precisely,since there are almost Knwaysto partition nobservations into K
clusters. This is a huge number unless Kandnare tiny! Fortunately, a very
simple algorithm can be shown to provide a local optimum—a pretty good
solution—to the K-means optimization problem ( 12.17). This approach is
laid out in Algorithm 12.2.
Algorithm 12.2 K-Means Clustering
1. Randomly assign a number, from 1toK, to each of the observations.
These serve as initial cluster assignments for the observations.
2. Iterate until the cluster assignments stop changing:
(a) For each of the Kclusters, compute the cluster centroid. The
kth cluster centroid is the vector of the pfeature means for the
observations in the kth cluster.
(b) Assign each observation to the cluster whose centroid is closest
(whereclosestis defined using Euclidean distance).
Algorithm 12.17)
at each step. To understand why, the following identity is the mean for feature jin cluster Ck.
In Step 2(a) the cluster means for each feature are the constants that
minimize the sum-of-squared deviations, and in Step 2(b), reallocating the
observations can only improve ( 12.18). This means that as the algorithm
is run, the clustering obtained will continually improve until the result no
longer changes; the objective of ( 12.17) will never increase. When the result
no longer changes, a local optimum has been reached. Figure 12.8shows
the progression of the algorithm on the toy example from Figure 12.7.
K-means clustering derives its name from the fact that in Step 2(a), the
cluster centroids are computed as the mean of the observations assigned to
each cluster.
Because the K-means algorithm finds a local rather than a global opti-
mum, the results obtained will depend on the initial (random) cluster as-
signment of each observation in Step 1 of Algorithm 12.2. For this reason,
it is important to run the algorithm multiple times from different random524 12. Unsupervised LearningDataStep 1Iteration 1, Step 2a
Iteration 1, Step 2bIteration 2, Step 2aFinal Results
FIGURE 12.8. The progress of the K-means algorithm on the example of
Figure12.7withK=3.Top left: the observations are shown. Top center: in
Step 1 of the algorithm, each observation is randomly assigned to a cluster. Top
right:in Step 2(a), the cluster centroids are computed. These are shown as large
colored disks. Initially the centroids are almost completely overlapping because
the initial cluster assignments were chosen at random. Bottom left: in Step 2(b),
each observation is assigned to the nearest centroid. Bottom center: Step 2(a) is
once again performed, leading to new cluster centroids. Bottom right: the results
obtained after ten iterations.
initial configurations. Then one selects the bestsolution, i.e. that for which
the objective ( 12.17) is smallest. Figure 12.9shows the local optima ob-
tained by running K-means clustering six times using six different initial
cluster assignments, using the toy data from Figure 12.7. In this case, the
best clustering is the one with an objective value of 235.8.
As we have seen, to perform K-means clustering, we must decide how
many clusters we expect in the data. The problem of selecting Kis far from
simple. This issue, along with other practical considerations that arise in
performing K-means clustering, is addressed in Section 12.4.3.12.4 Clustering Methods 525320.9235.8235.8
235.8235.8310.9
FIGURE 12.9. K-means clustering performed six times on the data from
Figure12.7withK=3, each time with a different random assignment of the
observations in Step 1 of the K-means algorithm. Above each plot is the value
of the objective ( 12.17). Three different local optima were obtained, one of which
resulted in a smaller value of the objective and provides better separation between
the clusters. Those labeled in red all achieved the same best solution, with an
objective value of 235.8.
12.4.2 Hierarchical Clustering
One potential disadvantage of K-means clustering is that it requires us to
pre-specify the number of clusters K.Hierarchical clustering is an alter-
native approach which does not require that we commit to a particular
choice of K. Hierarchical clustering has an added advantage over K-means
clustering in that it results in an attractive tree-based representation of the
observations, called a dendrogram .
In this section, we describe bottom-up oragglomerative clustering.bottom-up
agglomerativeThis is the most common type of hierarchical clustering, and refers to
the fact that a dendrogram (generally depicted as an upside-down tree; see
Figure12.11) is built starting from the leaves and combining clusters up 12. Unsupervised Learning
−6 −4 −202−2024
X1X2
FIGURE 12.10. Forty-five observations generated in two-dimensional space.
In reality there are three distinct classes, shown in separate colors. However, we
will treat these class labels as unknown and will seek to cluster the observations
in order to discover the classes from the data.
and then discuss how hierarchical clustering is actually performed—that is,
how the dendrogram is built.
Interpreting a Dendrogram
We begin with the simulated data set shown in Figure 12.10, consisting of
45observations in two-dimensional space. The data were generated from a
three-class model; the true class labels for each observation are shown in
distinct colors. However, suppose that the data were observed without the
class labels, and that we wanted to perform hierarchical clustering of the
data. Hierarchical clustering (with complete linkage, to be discussed later)
yields the result shown in the left-hand panel of Figure 12.11. How can we
interpret this dendrogram?
In the left-hand panel of Figure 12.11, eachleafof the dendrogram rep-
resents one of the 45observations in Figure 12.10. However, as we move
up the tree, some leaves begin to fuseinto branches. These correspond to
observations that are similar to each other. As we move higher up the tree,
branches themselves fuse, either with leaves or other branches. The earlier
(lower in the tree) fusions occur, the more similar the groups of observa-
tions are to each other. On the other hand, observations that fuse later
(near the top of the tree) can be quite different. In fact, this statement
can be made precise: for any two observations, we can look for the point in
the tree where branches containing those two observations are first fused.
The height of this fusion, as measured on the vertical axis, indicates how
different the two observations are. Thus, observations that fuse at the very
bottom of the tree are quite similar to each other, whereas observations
that fuse close to the top of the tree will tend to be quite different.
This highlights a very important point in interpreting dendrograms that
is often misunderstood. Consider the left-hand panel of Figure 12.12, which
shows a simple dendrogram obtained from hierarchically clustering nine12.4 Clustering Methods 5270246810
0246810
0246810
FIGURE 12.11. Left:dendrogram obtained from hierarchically clustering the
data from Figure 12.10with complete linkage and Euclidean distance. Center:the
dendrogram from the left-hand panel, cut at a height of nine (indicated by the
dashed line). This cut results in two distinct clusters, shown in different colors.
Right:the dendrogram from the left-hand panel, now cut at a height of five. This
cut results in three distinct clusters, shown in different colors. Note that the colors
were not used in clustering, but are simply used for display purposes in this figure.
observations. One can see that observations 5and7are quite similar to
each other, since they fuse at the lowest point on the dendrogram. Obser-
vations1and6are also quite similar to each other. However, it is tempting
but incorrect to conclude from the figure that observations 9and2are
quite similar to each other on the basis that they are located near each
other on the dendrogram. In fact, based on the information contained in
the dendrogram, observation 9is no more similar to observation 2than it
is to observations 8,5,and7. (This can be seen from the right-hand panel
of Figure 12.12, in which the raw data are displayed.) To put it mathe-
matically, there are 2n−1possible reorderings of the dendrogram, where n
is the number of leaves. This is because at each of the n−1points where
fusions occur, the positions of the two fused branches could be swapped
without affecting the meaning of the dendrogram. Therefore, we cannot
draw conclusions about the similarity of two observations based on their
proximity along the horizontal axis . Rather, we draw conclusions about
the similarity of two observations based on the location on the vertical axis
where branches containing those two observations first are fused.
Now that we understand how to interpret the left-hand panel of Fig-
ure12.11, we can move on to the issue of identifying clusters on the basis
of a dendrogram. In order to do this, we make a horizontal cut across the
dendrogram, as shown in the center and right-hand panels of Figure 12.11.
The distinct sets of observations beneath the cut can be interpreted as clus-
ters.InthecenterpanelofFigure 12.11,cuttingthedendrogramataheight
of nine results in two clusters, shown in distinct colors. In the right-hand
panel, cutting the dendrogram at a height of five results in three clusters.
Further cuts can be made as one descends the dendrogram in order to ob-
tain any number of clusters, between 1 (corresponding to no cut) and n528 12. Unsupervised Learning3416928570.0 0.5 1.0 1.5 2.0 2.5 3.0123456789
−1.5 −1.0 −0.5 0.0 0.5 1.0−1.5 −1.0 −0.5 0.0 0.5X1X2
FIGURE 12.12. An illustration of how to properly interpret a dendrogram
with nine observations in two-dimensional space. Left:a dendrogram generated
using Euclidean distance and complete linkage. Observations 5and7are quite
similar to each other, as are observations 1and6. However, observation 9isno
more similar to observation 2than it is to observations 8,5,and7, even though
observations 9and2are close together in terms of horizontal distance. This is
because observations 2,8,5,and7all fuse with observation 9at the same height,
approximately 1.8.Right:the raw data used to generate the dendrogram can be
used to confirm that indeed, observation 9is no more similar to observation 2
than it is to observations 8,5,and7.
(corresponding to a cut at height 0, so that each observation is in its own
cluster). In other words, the height of the cut to the dendrogram serves
the same role as the KinK-means clustering: it controls the number of
clusters obtained.
Figure12.11therefore highlights a very attractive aspect of hierarchical
clustering: one single dendrogram can be used to obtain any number of
clusters. In practice, people often look at the dendrogram and select by eye
a sensible number of clusters, based on the heights of the fusion and the
number of clusters desired. In the case of Figure 12.11, one might choose
to select either two or three clusters. However, often the choice of where to
cut the dendrogram is not so clear.
The term hierarchical refers to the fact that clusters obtained by cutting
the dendrogram at a given height are necessarily nested within the clusters
obtained by cutting the dendrogram at any greater height. However, on
an arbitrary data set, this assumption of hierarchical structure might be
unrealistic. For instance, suppose that our observations correspond to a
group of men and women, evenly split among Americans, Japanese, and
French. We can imagine a scenario in which the best division into two
groups might split these people by gender, and the best division into three
groups might split them by nationality. In this case, the true clusters are
not nested, in the sense that the best division into three groups does not
result from taking the best division into two groups and splitting up one
of those groups. Consequently, this situation could not be well-represented
by hierarchical clustering. Due to situations such as this one, hierarchical
clustering can sometimes yield worse(i.e. less accurate) results than K-
means clustering for a given number of clusters.12.4 Clustering Methods 529
Algorithm 12.3 Hierarchical Clustering
1. Begin with nobservations and a measure (such as Euclidean dis-
tance) of all dissimilarities. Treat each
observation as its own cluster.
2. Fori=n, n−1,...,2:
(a) Examine all pairwise inter-cluster dissimilarities among the i
clusters and identify the pair of clusters that are least dissimilar
(that is, most similar). Fuse these two clusters. The dissimilarity
between these two clusters indicates the height in the dendro-
gram at which the fusion should be placed.
(b) Compute the new pairwise inter-cluster dissimilarities among
thei−1remaining clusters.
The Hierarchical Clustering Algorithm
The hierarchical clustering dendrogram is obtained via an extremely simple
algorithm.Webeginbydefiningsomesortof dissimilarity measurebetween
each pair of observations. Most often, Euclidean distance is used; we will
discuss the choice of dissimilarity measure later in this chapter. The algo-
rithm proceeds iteratively. Starting out at the bottom of the dendrogram,
each of the nobservations is treated as its own cluster. The two clusters
that are most similar to each other are then fusedso that there now are
n−1clusters. Next the two clusters that are most similar to each other are
fused again, so that there now are n−2clusters. The algorithm proceeds
in this fashion until all of the observations belong to one single cluster, and
the dendrogram is complete. Figure 12.13depicts the first few steps of the
algorithm, for the data from Figure 12.12. To summarize, the hierarchical
clustering algorithm is given in Algorithm 12.3.
This algorithm seems simple enough, but one issue has not been ad-
dressed. Consider the bottom right panel in Figure 12.13. How did we
determine that the cluster {5,7}should be fused with the cluster {8}?
We have a concept of the dissimilarity between pairs of observations, but
how do we define the dissimilarity between two clusters if one or both of
the clusters contains multiple observations? The concept of dissimilarity
between a pair of observations needs to be extended to a pair of groups
of observations . This extension is achieved by developing the notion of
linkage, which defines the dissimilarity between two groups of observa-linkagetions. The four most common types of linkage— complete ,average,single,
andcentroid—are briefly described in Table 12.3. Average, complete, and
single linkage are most popular among statisticians. Average and complete
linkage are generally preferred over single linkage, as they tend to yield
more balanced dendrograms. Centroid linkage is often used in genomics,
but suffers from a major drawback in that an inversion can occur, wherebyinversiontwo clusters are fused at a height beloweither of the individual clusters of the dendrogram. The dissimilarities computed in Step 2(b)530 12. Unsupervised Learning
Linkage Description
CompleteMaximal intercluster dissimilarity. Compute all pairwise
dissimilarities between the observations in cluster A and the
observations in cluster B, and record the largestof these dis-
similarities.
SingleMinimal intercluster dissimilarity. Compute all pairwise dis-
similarities between the observations in cluster A and the
observations in cluster B, and record the smallest of these
dissimilarities. Single linkage can result in extended, intercluster dissimilarity. Compute all pairwise dis-
similarities between the observations in cluster A and the
observations in cluster B, and record the averageof these
dissimilarities.
CentroidDissimilarity between the centroid for cluster A (a mean
vector of length p) and the centroid for cluster B. Centroid
linkage can result in undesirable inversions .
TABLE 12.3. A summary of the four most commonly-used types of linkage in
hierarchical clustering.
of the hierarchical clustering algorithm will depend on the type of linkage
used, as well as on the choice of dissimilarity measure. Hence, the resulting
dendrogram typically depends quite strongly on the type of linkage used,
as is shown in Figure 12.14.
Choice of Dissimilarity Measure
Thus far, the examples in this chapter have used Euclidean distance as the
dissimilarity measure. But sometimes other dissimilarity measures might
be preferred. For example, correlation-based distance considers two obser-
vations to be similar if their features are highly correlated, even though the
observed values may be far apart in terms of Euclidean distance. This is
an unusual use of correlation, which is normally computed between vari-
ables; here it is computed between the observation profiles for each pair
of observations. Figure 12.15illustrates the difference between Euclidean
and correlation-based distance. Correlation-based distance focuses on the
shapes of observation profiles rather than their magnitudes.
The choice of dissimilarity measure is very important, as it has a strong
effect on the resulting dendrogram. In general, careful attention should be
paid to the type of data being clustered and the scientific question at hand.
These considerations should determine what type of dissimilarity measure
is used for hierarchical clustering.
For instance, consider an online retailer interested in clustering shoppers
based on their past shopping histories. The goal is to identify subgroups
ofsimilarshoppers, so that shoppers within each subgroup can be shown
items and advertisements that are particularly likely to interest them. Sup-
pose the data takes the form of a matrix where the rows are the shoppers
and the columns are the items available for purchase; the elements of the
data matrix indicate the number of times a given shopper has purchased a12.4 Clustering Methods 531
123456789
−1.5 −1.0 −0.5 0.0 0.5 1.0−1.5 −1.0 −0.5 0.0 0.5123456789
−1.5 −1.0 −0.5 0.0 0.5 1.0−1.5 −1.0 −0.5 0.0 0.5
123456789
−1.5 −1.0 −0.5 0.0 0.5 1.0−1.5 −1.0 −0.5 0.0 0.5123456789
−1.5 −1.0 −0.5 0.0 0.5 1.0−1.5 −1.0 −0.5 0.0 0.5X1X1X1X1X2X2
X2X2
FIGURE 12.13. An illustration of the first few steps of the hierarchical
clustering algorithm, using the data from Figure 12.12, with complete linkage
and Euclidean distance. Top Left: initially, there are nine distinct clusters,
{1},{2},...,{9}.Top Right: the two clusters that are closest together, {5}and
{7}, are fused into a single cluster. Bottom Left: the two clusters that are closest
together, {6}and{1}, are fused into a single cluster. Bottom Right: the two clus-
ters that are closest together using complete linkage ,{8}and the cluster {5,7},
are fused into a single cluster.
given item (i.e. a 0if the shopper has never purchased this item, a 1if the
shopper has purchased it once, etc.) What type of dissimilarity measure
should be used to cluster the shoppers? If Euclidean distance is used, then
shoppers who have bought very few items overall (i.e. infrequent users of
the online shopping site) will be clustered together. This may not be similar preferences (e.g. shoppers who have bought items A and B but
never items C or D) will be clustered together, even if some shoppers with
these preferences are higher-volume shoppers than others. Therefore, for
this application, correlation-based distance may be a better consider whether or not the variables should be scaled to have To illustrate this point, we continue with the online shopping ex-532 12. Unsupervised LearningAverage LinkageComplete LinkageSingle Linkage
FIGURE 12.14. Average, complete, and single linkage applied to an example
data set. Average and complete linkage tend to yield more balanced clusters.
ample just described. Some items may be purchased more frequently than
others; for instance, a shopper might buy ten pairs of socks a year, but a
computer very rarely. High-frequency purchases like socks therefore tend
to have a much larger effect on the inter-shopper dissimilarities, and hence
on the clustering ultimately obtained, than rare purchases like computers.
This may not be desirable. If the variables are scaled to have standard de-
viation one before the inter-observation dissimilarities are computed, then
each variable will in effect be given equal importance in the hierarchical
clustering performed. We might also want to scale the variables to have
standard deviation one if they are measured on different scales; otherwise,
the choice of units (e.g. centimeters versus kilometers) for a particular vari-
able will greatly affect the dissimilarity measure obtained. It should come
as no surprise that whether or not it is a good decision to scale the variables
before computing the dissimilarity measure depends on the application at
hand. An example is shown in Figure 12.16. We note that the issue of
whether or not to scale the variables before performing clustering applies
toK-means clustering as well.
12.4.3 Practical Issues in Clustering
Clustering can be a very useful tool for data analysis in the unsupervised
setting. However, there are a number of issues that arise in performing
clustering. We describe some of these issues here.
Small Decisions with Big Consequences
In order to perform clustering, some decisions must be made.12.4 Clustering Methods 533
510152005 10 15 20
Variable IndexObservation 1Observation 2Observation 3
123FIGURE 12.15.Three observations with measurements on 20 variables areshown. Observations 1 and 3 have similar values for each variable and so thereis a small Euclidean distance between them. But they are very weakly correlated,so they have a large correlation-based distance. On the other hand, observations1 and 2 have quite different values for each variable, and so there is a largeEuclidean distance between them. But they are highly correlated, so there is asmall correlation-based distance between them.• instance, maybe the variables should be scaled to have standarddeviation one.• In the case of hierarchical clustering,–What dissimilarity measure should be used?–What type of linkage should be In the case ofK-means clustering, how many clusters should we lookfor in the data?Each of these decisions can have a strong impact on the results obtained.In practice, we try several different choices, and look for the one withthe most useful or interpretable solution. With these methods, there is nosingle right answer—any solution that exposes some interesting aspects ofthe data should be considered.Validating the Clusters ObtainedAny time clustering is performed on a data set we will find clusters. But wereally want to know whether the clusters that have been found representtrue subgroups in the data, or whether they are simply a result ofclusteringthe noise. For instance, if we were to obtain an independent set of observa-tions, then would those observations also display the same set of clusters?This is a hard question to answer. There exist a number of techniques forassigning a p-value to a cluster in order to assess whether there is more534 12. Unsupervised Learning
Socks Computers0 2 4 6 8 10Socks Computers0.0 0.2 0.4 0.6 0.8 1.0 1.2Socks Computers0500 1000 1500FIGURE 12.16. An eclectic online retailer sells two items: socks and computers.
Left:the number of pairs of socks, and computers, purchased by eight online shop-
pers is displayed. Each shopper is shown in a different color. If inter-observation
dissimilarities are computed using Euclidean distance on the raw variables, then
the number of socks purchased by an individual will drive the dissimilarities ob-
tained, and the number of computers purchased will have little effect. This might
be undesirable, since (1) computers are more expensive than socks and so the
online retailer may be more interested in encouraging shoppers to buy computers
than socks, and (2) a large difference in the number of socks purchased by two
shoppers may be less informative about the shoppers’ overall shopping preferences
than a small difference in the number of computers purchased. Center:the same
data are shown, after scaling each variable by its standard deviation. Now the
two products will have a comparable effect on the inter-observation dissimilarities
obtained. Right:the same data are displayed, but now the y-axis represents the
number of dollars spent by each online shopper on socks and on computers. Since
computers are much more expensive than socks, now computer purchase history
will drive the inter-observation dissimilarities obtained.
evidence for the cluster than one would expect due to chance. However,
there has been no consensus on a single best approach. More details can
be found in ESL.8
Other Considerations in Clustering
BothK-means and hierarchical clustering will assign each observation to
a cluster. However, sometimes this might not be appropriate. For instance,
suppose that most of the observations truly belong to a small number of
(unknown) subgroups, and a small subset of the observations are quite
different from each other and from all other observations. Then since K-
means and hierarchical clustering force everyobservation into a cluster, the
clusters found may be heavily distorted due to the presence of outliers that
do not belong to any cluster. Mixture models are an attractive approach
for accommodating the presence of such outliers. These amount to a soft
version of K-means clustering, and are described in ESL.
8ESL:The Elements of Statistical Learning by Hastie, Tibshirani and Friedman.12.5 Lab: Unsupervised Learning 535In addition, clustering methods generally are not very robust to pertur-bations to the data. For instance, suppose that we clusternobservations,and then cluster the observations again after removing a subset of thenobservations at random. One would hope that the two sets of clusters ob-tained would be quite similar, but often this is not the case!A Tempered Approach to Interpreting the Results of ClusteringWe have described some of the issues associated with clustering. However,clustering can be a very useful and valid statistical tool if used properly. Wementioned that small decisions in how clustering is performed, such as howthe data are standardized and what type of linkage is used, can have a largeeffect on the results. Therefore, we recommend performing clustering withdifferent choices of these parameters, and looking at the full set of resultsin order to see what patterns consistently emerge. Since clustering can benon-robust, we recommend clustering subsets of the data in order to get asense of the robustness of the clusters obtained. Most importantly, we mustbe careful about how the results of a clustering analysis are reported. Theseresults should not be taken as the absolute truth about a data set. Rather,they should constitute a starting point for the development of a scientifichypothesis and further study, preferably on an independent data set.12.5 Lab: Unsupervised LearningIn this lab we demonstrate PCA and clustering on several datasets. As inother labs, we import some of our libraries at this top level. This makesthe code more readable, as scanning the first few lines of the notebook tellus what libraries are used in this notebook.In[1]:import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom statsmodels.datasets import get_rdatasetfrom sklearn.decomposition import PCAfrom sklearn.preprocessing import StandardScalerfrom ISLP import load_dataWe also collect the new imports needed for this lab.In[2]:from sklearn.cluster import \(KMeans,AgglomerativeClustering)from scipy.cluster.hierarchy import \(dendrogram,cut_tree)from ISLP.cluster import compute_linkage12.5.1 Principal Components AnalysisIn this lab, we perform PCA onUSArrests, a data set in theRcomputingenvironment. We retrieve the data usingget_rdataset(), which can fetchget_rdataset()536 12. Unsupervised Learningdata from many standardRpackages.The rows of the data set contain the 50 states, in alphabetical order.In[3]:USArrests = Assault UrbanPop RapeAlabama 13.223658 21.2Alaska 10.026348 44.5Arizona 8.129480 31.0... ............Wisconsin 2.65366 10.8Wyoming 6.816160 15.6The columns of the data set contain the four first briefly examine the data. We notice that the variables havevastly different means.In[5]:USArrests.mean()Out[5]:Murder 7.788Assault 170.760UrbanPop 65.540Rape21.232dtype: We can also examine the variance of the four variables using 18.970465Assault 6945.165714UrbanPop 209.518776Rape87.729159dtype: float64Not surprisingly, the variables also have vastly different variances. TheUrbanPopvariable measures the percentage of the population in each stateliving in an urban area, which is not a comparable number to the number ofrapes in each state per 100,000 individuals. PCA looks for derived variablesthat account for most of the variance in the data set. If we do not scale thevariables before performing PCA, then the principal components wouldmostly be driven by theAssaultvariable, since it has by far the largestvariance. So if the variables are measured in different units or vary widelyin scale, it is recommended to standardize the variables to have standarddeviation one before performing PCA. Typically we set the means to zeroas well.12.5 Lab: Unsupervised Learning 537This scaling can be done via theStandardScaler()transform importedabove. We firstfitthe scaler, which computes the necessary means andstandard deviations and then apply it to our data using thetransformmethod. As before, we combine these steps using thefit_transform()method.In[7]:scaler = = scaler.fit_transform(USArrests)Having scaled the data, we can then perform principal components analysisusing thePCA()transform from = PCA()(By default, thePCA()transform centers the variables to have mean zerothough it does not scale them.) The transformpcaUScan be used to findthe PCAscoresreturned byfit(). Once thefitmethod has been called,thepcaUSobject also contains a number of useful fitting, themean_attribute corresponds to the means of the vari-ables. In this case, since we centered and scaled the data withscaler()themeans will all be 0.In[10]:pcaUS.mean_Out[10]:array([-0., 0., -0., 0.])The scores can be computed using thetransform()method ofpcaUSafterit has been fit.In[11]:scores = pcaUS.transform(USArrests_scaled)We will plot these scores a bit further down. Thecomponents_attributeprovides the principal component loadings: each row ofpcaUS.components_contains the corresponding principal component loading 0.53589947, 0.58318363, 0.27819087, 0.54343209],[0 . 4 1 8 1 8 0 8 7 , 0 . 1 8 7 9 8 5 6,- 0 . 8 7 2 8 0 6 1 9 ,- 0 . 1 6 7 3 1 8 6 4 ] ,[-0.34123273, -0.26814843, -0.37801579, 0.81777791],[0 . 6 4 9 2 2 7 8,- 0 . 7 4 3 4 0 7 4 8 , 0 . 1 3 3 8 7 7 7 3 , 0 . 0 8 9 0 2 4 3 2 ] ] )Thebiplotis a common visualization method used with PCA. It is notbuilt in as a standard part ofsklearn, though there are python packagesthat do produce such plots. Here we make a simple biplot manually.In[13]:i, j = 0, 1#w h i c hc o m p o n e n t sfig, ax = plt.subplots(1, 1, figsize=(8, 8))ax.scatter(scores[:,0], scores[:,1])ax.set_xlabel('PC%d'%( i + 1 ) )ax.set_ylabel('PC%d'%( j + 1 ) )for k in range(pcaUS.components_.shape[1]):538 12. Unsupervised Learning
ax.arrow(0, 0, pcaUS.components_[i,k], that this figure is a reflection of Figure 12.1through the y-axis.
Recall that the principal components are only unique up to a sign change,
so we can reproduce that figure by flipping the signs of the second set of
scores and loadings. We also increase the length of the arrows to emphasize
the loadings.
In[14]: scale_arrow = s_ = 2
scores[:,1] *= -1
pcaUS.components_[1] *= -1 #f l i pt h ey - a x i s
fig, ax = plt.subplots(1, 1, figsize=(8, 8))
ax.scatter(scores[:,0], scores[:,1])
ax.set_xlabel( 'PC%d' %( i + 1 ) )
ax.set_ylabel( 'PC%d' %( j + 1 ) )
for k in 0, s_*pcaUS.components_[i,k], standard deviations of the principal component scores are as follows:
In[15]: scores.std(0, ddof=1)
Out[15]: array([1.5909, 1.0050, 0.6032, pcaUSobject
via theexplained_variance_ attribute.
In[16]: pcaUS.explained_variance_
Out[16]: array([2.5309, 1.01 , 0.3638, 0.177 ])
The proportion of variance explained by each principal component (PVE)
is stored as explained_variance_ratio_ :
In[17]: pcaUS.explained_variance_ratio_
Out[17]: array([0.6201, 0.2474, 0.0891, 0.0434])
We see that the first principal component explains 62.0% of the variance
in the data, the next principal component explains 24.7% of the variance,
and so forth. We can plot the PVE explained by each component, as well
as the cumulative PVE. We first plot the proportion of variance explained.
In[18]: %%capture
fig, axes = plt.subplots(1, 2, figsize=(15, 6))
ticks = np.arange(pcaUS.n_components_)+1
ax = 'o')12.5 Lab: Unsupervised Learning 539
ax.set_xlabel( 'Principal Component' );
ax.set_ylabel( 'Proportion of Variance Explained' useof %%capture ,whichsuppressesthe displayingof thepartially
completed figure.
In[19]: ax = 'o')
ax.set_xlabel( 'Principal Component' )
ax.set_ylabel( 'Cumulative Proportion of Variance Explained' )
ax.set_ylim([0, 1])
ax.set_xticks(ticks)
fig
The result is similar to that shown in Figure 12.3. Note that the method
cumsum() computes the cumulative sum of the elements of a numeric vector.cumsum()For instance:
In[20]: a=n p . a r r a y ( [ 1 , 2 , 8 , - 3 ] )
np.cumsum(a)
Out[20]: array([ 1, 3, 11, 8])
12.5.2 Matrix Completion
We now re-create the analysis carried out on the USArrests data in Sec-
tion12.3.
We saw in Section 12.2.2that solving the optimization problem ( 12.6) on
a centered data matrix Xis equivalent to computing the first Mprincipal
components of the data. We use our scaled and centered USArrests data as
Xbelow. The singular value decomposition (SVD) is a general algorithmsingular
value de-
composition
svd()for solving ( 12.6).
In[21]: X=U S A r r e s t s _ s c a l e d
U, D, V = np.linalg.svd(X, full_matrices=False)
U.shape, D.shape, V.shape
Out[21]: ((50, 4), (4,), (4, 4))
Thenp.linalg.svd() function returns three components, U,DandV. Thenp.linalg.
svd() matrixVis equivalent to the loading matrix from principal components (up
to an unimportant sign flip). Using the full_matrices=False option ensures
that for a tall matrix the shape of Uis the same as the shape of X.
In[22]: V
Out[22]: array([[-0.53589947, -0.58318363, -0.27819087, -0.54343209],
[0 . 4 1 8 1 8 0 8 7 , 0 . 1 8 7 9 8 5 6,- 0 . 8 7 2 8 0 6 1 9 ,- 0 . 1 6 7 3 1 8 6 4 ] ,
[-0.34123273, -0.26814843, -0.37801579, 0.81777791],
[0 . 6 4 9 2 2 7 8,- 0 . 7 4 3 4 0 7 4 8 , 0 . 1 3 3 8 7 7 7 3 , 0 . 0 8 9 0 2 4 3 2 ] ] )540 12. Unsupervised Learning
In[23]: pcaUS.components_
Out[23]: array([[ 0.53589947, 0.58318363, 0.27819087, 0.54343209],
[0 . 4 1 8 1 8 0 8 7 , 0 . 1 8 7 9 8 5 6,- 0 . 8 7 2 8 0 6 1 9 ,- 0 . 1 6 7 3 1 8 6 4 ] ,
[-0.34123273, -0.26814843, -0.37801579, 0.81777791],
[0 . 6 4 9 2 2 7 8,- 0 . 7 4 3 4 0 7 4 8 , 0 . 1 3 3 8 7 7 7 3 , 0 . 0 8 9 0 2 4 3 2 ] ] )
Thematrix Ucorrespondstoa standardized of Uby the corresponding element of D, we recover the PCA scores
exactly (up to a meaningless sign flip).
In[24]: (U * D[None,:])[:3]
Out[24]: array([[-0.9856, 1.1334, -0.4443, 0.1563],
[-1.9501, 1.0732, 2.04 , -0.4386],
[-1.7632, -0.746 , 0.0548, -0.8347]])
In[25]: scores[:3]
Out[25]: array([[ 0.9856, -1.1334, -0.4443, 0.1563],
[1 . 9 5 0 1 ,- 1 . 0 7 3 2 , 2 . 0 4 ,- 0 . 4 3 8 6 ] ,
[1 . 7 6 3 2 , 0 . 7 4 6, 0 . 0 5 4 8 ,- 0 . 8 3 4 7 ] ] )
While it would be possible to carry out this lab using the PCA()estimator,
here we use the np.linalg.svd() function in order to illustrate its use.
We now omit 20 entries in the 50×4data matrix at random. We do
so by first selecting 20 rows (states) at random, and then selecting one of
the four entries in each row at random. This ensures that every row has at
least three observed values.
In[26]: n_omit = 20
np.random.seed(15)
r_idx = = = X.copy()
Xna[r_idx, c_idx] = np.nan
Here the array r_idxcontains 20 integers from 0 to 49; this represents
the states (rows of X) that are selected to contain missing values. And c_idx
contains 20 integers from 0 to 3, representing the features (columns in X)
that contain the missing values for each of the selected states.
We now write some code to implement Algorithm 12.1. We first write the svd()function. This will be needed in Step 2 of Algorithm 12.1.
In[27]: def low_rank(X, M=1):
U, D, V = np.linalg.svd(X)
L=U [ : , : M ]*D [ N o n e , : M ]
return L.dot(V[:M])12.5 Lab: Unsupervised Learning 541
To conduct Step 1 of the algorithm, we initialize Xhat— this is ˜Xin
Algorithm 12.1— by replacing the missing values with the column means
of the non-missing entries. These are stored in Xbarbelow after running
np.nanmean() over the row axis. We make a copy so that when we assignnp.nanmean()values to Xhatbelow we do not also overwrite the values in Xna.
In[28]: Xhat = Xna.copy()
Xbar = np.nanmean(Xhat, axis=0)
Xhat[r_idx, c_idx] = Xbar[c_idx]
Before we begin Step 2, we set ourselves up to measure the progress of
our iterations:
In[29]: thresh = 1e-7
rel_err = 1
count = 0
ismiss = np.isnan(Xna)
mssold = np.mean(Xhat[ ∼ismiss]**2)
mss0 = np.mean(Xna[ ∼ismiss]**2)
Hereismissis a logical matrix with the same dimensions as Xna; a given
elementis this boolean vector. This is useful because it allows us to
access both the missing and non-missing entries. We store the mean of the
squared non-missing elements in mss0. We store the mean squared error
of the non-missing elements of the old version of Xhatinmssold(which
currently agrees with mss0). We plan to store the mean squared error of
the non-missing elements of the current version of Xhatinmss, and will then
iterate Step 2 of Algorithm 12.1until the relative error , defined as (mssold
- mss) / mss0 , falls below thresh = 1e-7 .9
In Step 2(a) of Algorithm 12.1, we approximate Xhatusinglow_rank() ;
we call this Xapp. In Step 2(b), we use Xappto update the estimates for
elements in Xhatthat are missing in Xna. Finally, in Step 2(c), we compute
the relative error. These three steps are contained in the following while
loop:
In[30]: while rel_err > thresh:
count += 1
#S t e p2 ( a )
Xapp = low_rank(Xhat, M=1)
#S t e p2 ( b )
Xhat[ismiss] = Xapp[ismiss]
#S t e p2 ( c )
mss = np.mean(((Xna - Xapp)[ ∼ismiss])**2)
rel_err = (mssold - mss) / mss0
mssold = mss
print("Iteration: {0}, MSS:{1:.3f}, Rel.Err {2:.2e}"
.format(count, mss, rel_err))
9Algorithm 12.1tells us to iterate Step 2 until ( 12.14) is no longer decreasing. Deter-
mining whether ( 12.14) is decreasing requires us only to keep track of mssold - mss .
However, in practice, we keep track of (mssold - mss) / mss0 instead: this makes
it so that the number of iterations required for Algorithm 12.1to converge does not
depend on whether we multiplied the raw data Xby a constant factor.542 12. Unsupervised Learning
Iteration: 1, MSS:0.395, Rel.Err 5.99e-01
Iteration: 2, MSS:0.382, Rel.Err 1.33e-02
Iteration: 3, MSS:0.381, Rel.Err 1.44e-03
Iteration: 4, MSS:0.381, Rel.Err 1.79e-04
Iteration: 5, MSS:0.381, Rel.Err 2.58e-05
Iteration: 6, MSS:0.381, Rel.Err 4.22e-06
Iteration: 7, MSS:0.381, Rel.Err 7.65e-07
Iteration: 8, MSS:0.381, Rel.Err 1.48e-07
Iteration: 9, MSS:0.381, Rel.Err 2.95e-08
We see that after eight iterations, the relative error has fallen below
thresh = 1e-7 , and so the algorithm terminates. When this happens, the
mean squared error of the non-missing elements equals 0.381.
Finally, we compute the correlation between the 20 imputed values and
the actual values:
In[31]: np.corrcoef(Xapp[ismiss], X[ismiss])[0,1]
Out[31]: 0.711
In this lab, we implemented Algorithm 12.1ourselves for didactic pur-
poses. However, a reader who wishes to apply matrix completion to their
data might look to more specialized Pythonimplementations.
12.5.3 Clustering
K-Means Clustering
The estimator sklearn.cluster.KMeans() performs K-means clustering inKmeans()Python. We begin with a simple simulated example in which there truly are
two clusters in the data: the first 25 observations have a mean shift relative
to the next 25 observations.
In[32]: np.random.seed(0);
X=n p . r a n d o m . s t a n d a r d _ n o r m a l ( ( 5 0 , 2 ) ) ;
X[:25,0] += 3;
X[:25,1] -= 4;
We now perform K-means clustering with K=2.
In[33]: kmeans = specify random_state to make the results reproducible. The cluster as-
signments of the 50 observations are contained in kmeans.labels_ .
In[34]: kmeans.labels_
Out[34]: array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
TheK-means clustering perfectly separated the observations into two clus-
ters even though we did not supply any group information to KMeans() .W e
can plot the data, with each observation colored according to its cluster
assignment.12.5 Lab: Unsupervised Learning 543
In[35]: fig, ax = plt.subplots(1, 1, figsize=(8,8))
ax.scatter(X[:,0], X[:,1], c=kmeans.labels_)
ax.set_title( "K-Means Clustering Results with K=2" If there were more than two variables then we could instead perform
PCA and plot the first two principal component score vectors to represent
the clusters.
In this example, we knew that there really were two clusters because
we generated the data. However, for real data, we do not know the true
number of clusters, nor whether they exist in any precise way. We could
instead have performed K-means clustering on this example with K=3.
In[36]: kmeans = ax = X[:,1], c=kmeans.labels_)
ax.set_title( "K-Means Clustering Results with K=3" );
WhenK=3,K-means clustering splits up the two clusters. We have used
then_initargumenttorunthe K-meanswith20initialclusterassignments
(the default is 10). If a value of n_initgreater than one is used, then K-
means clustering will be performed using multiple random assignments in
Step 1 of Algorithm 12.2, and the KMeans() function will report only the
best results. Here we compare using n_init=1 ton_init=20 .
In[37]: kmeans1 = = kmeans20.inertia_
Out[37]: (78.06, 75.04)
Note that kmeans.inertia_ is the total within-cluster sum of squares, which
we seek to minimize by performing K-means clustering ( 12.17).
Westronglyrecommend always running K-means clustering with a large
value of n_init, such as 20 or 50, since otherwise an undesirable local
optimum may be obtained.
When performing K-means clustering, in addition to using multiple ini-
tial cluster assignments, it is also important to set a random seed using the
random_state argument to KMeans() . This way, the initial cluster assign-
ments in Step 1 can be replicated, and the K-means output will be fully
reproducible.
Hierarchical Clustering
TheAgglomerativeClustering() class from the sklearn.clustering pack-Agglomerative
Clustering()age implements hierarchical clustering. As its name is long, we use the
short hand HClustforhierarchical clustering . Note that this will not change544 12. Unsupervised Learningthe return type when using this method, so instances will still be of classAgglomerativeClustering. In the following example we use the data fromthe previous lab to plot the hierarchical clustering dendrogram using com-plete, single, and average linkage clustering with Euclidean distance as thedissimilarity measure. We begin by clustering observations using completelinkage.In[38]:HClust = AgglomerativeClusteringhc_comp = computes the entire dendrogram. We could just as easily performhierarchical clustering with average or single linkage instead:In[39]:hc_avg = = use a precomputed distance matrix, we provide an additional matrix.In[40]:D=n p . z e r o s ( ( X . s h a p e [ 0 ] ,X . s h a p e [ 0 ] ) ) ;for i in range(X.shape[0]):x_ = np.multiply.outer(np.ones(X.shape[0]), X[i])D[i] = np.sqrt(np.sum((X - x_)**2, 1));hc_sing_pre = usedendrogram()fromscipy.cluster.hierarchyto plot the a so-calledlinkage-matrix representa-tionof the clustering, which is not provided byAgglomerativeClustering(),but can be computed. The functioncompute_linkage()in is provided for this purpose.We can now plot the dendrograms. The numbers at the bottom of theplot identify each observation. Thedendrogram()function has a defaultmethod to color different branches of the tree that suggests a pre-definedcut of the tree at a particular depth. We prefer to overwrite this default bysetting this threshold to be infinite. Since we want this behavior for manydendrograms, we store these values in a dictionarycargsand pass this askeyword arguments using the notation**cargs.In[41]:cargs = = compute_linkage(hc_comp)fig, ax = plt.subplots(1, 1, figsize=(8, 8))12.5 Lab: Unsupervised Learning may want to color branches of the tree above and below a color_threshold fig, ax = plt.subplots(1, 1, figsize=(8, 'black' );
To determine the cluster labels for each observation associated with a
given cut of the dendrogram, we can use the cut_tree() function fromcut_tree()scipy.cluster.hierarchy :
In[43]: cut_tree(linkage_comp, n_clusters=4).T
Out[43]: array([[0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 1,
0, 0, 2, 0, 2, 2, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3,
3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, n_clusters toHClust() ;
however each cut would require recomputing the clustering. Similarly, trees
may be cut by distance threshold with an argument of distance_threshold
toHClust() orheighttocut_tree() .
In[44]: cut_tree(linkage_comp, height=5)
Out[44]: array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2,
2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2]])
To scale the variables before performing hierarchical clustering of the
observations, we use StandardScaler() as in our PCA example:
In[45]: scaler = StandardScaler()
X_scale = scaler.fit_transform(X)
hc_comp_scale = 'complete' ).fit(X_scale)
linkage_comp_scale = compute_linkage(hc_comp_scale)
fig, ax = plt.subplots(1, 1, figsize=(8, 8))
dendrogram(linkage_comp_scale, ax=ax, **cargs)
ax.set_title( "Hierarchical Clustering with Scaled Features" );
Correlation-based distances between observations can be used for clus-
tering. The correlation between two observations measures the similarity
of their feature values.10Withnobservations, the n×ncorrelation matrix
10Suppose each observation has pfeatures, each a single numerical value. We measure
the similarity of two such observations by computing the correlation of these ppairs of
numbers.546 12. Unsupervised Learningcan then be used as a similarity (or affinity) matrix, i.e. so that one minusthe correlation matrix is the dissimilarity matrix used for clustering.Note that using correlation only makes sense for data with at least threefeatures since the absolute correlation between any two observations withmeasurements on two features is always one. Hence, we will cluster a three-dimensional data set.In[46]:X=n p . r a n d o m . s t a n d a r d _ n o r m a l ( ( 3 0 ,3 ) )corD = 1 - np.corrcoef(X)hc_cor = = compute_linkage(hc_cor)fig, ax = plt.subplots(1, 1, figsize=(8, 8))dendrogram(linkage_cor, ax=ax, **cargs)ax.set_title("Complete Linkage with Correlation-Based Dissimilarity");12.5.4 NCI60 Data ExampleUnsupervised techniques are often used in the analysis of genomic data.In particular, PCA and hierarchical clustering are popular tools. We illus-trate these techniques on theNCI60cancer cell line microarray data, whichconsists of 6830 gene expression measurements on 64 cancer cell lines.In[47]:NCI60 = load_data('NCI60')nci_labs = NCI60['labels']nci_data = NCI60['data']Each cell line is labeled with a cancer type. We do not make use of thecancer types in performing PCA and clustering, as these are unsupervisedtechniques. But after performing PCA and clustering, we will check tosee the extent to which these cancer types agree with the results of theseunsupervised techniques.The data has 64 rows and 6830 columns.In[48]:nci_data.shapeOut[48]:(64, 6830)We begin by examining the cancer types for the cell 8BREAST7COLON7LEUKEMIA 6OVARIAN 612.5 Lab: Unsupervised Learning 547
CNS 5
PROSTATE 2
K562A-repro 1
K562B-repro 1
MCF7A-repro 1
MCF7D-repro 1
UNKNOWN 1
dtype: int64
PCA on the NCI60 deviation one, although here one could reasonably argue that it
is better not to scale the genes as they are measured in the same units.
In[50]: scaler = StandardScaler()
nci_scaled = scaler.fit_transform(nci_data)
nci_pca = PCA()
nci_scores = nci_pca.fit_transform(nci_scaled)
We now plot the first few principal component score vectors, in order to
visualize the data. The observations (cell lines) corresponding to a given
cancer type will be plotted in the same color, so that we can see to what
extent the observations within a cancer type are similar to each other.
In[51]: cancer_types = list(np.unique(nci_labs))
nci_groups = np.array([cancer_types.index(lab)
for lab in nci_labs.values])
fig, axes = plt.subplots(1, 2, figsize=(15,6))
ax = 'o',
s=50)
ax.set_xlabel( 'PC1'); ax.set_ylabel( 'PC2')
ax = 'o',
s=50)
ax.set_xlabel( 'PC1'); ax.set_ylabel( 'PC3');
The resulting plots are shown in Figure 12.17. On the whole, cell lines
corresponding to a single cancer type do tend to have similar values on the
first few principal component score vectors. This indicates that cell lines
from the same cancer type tend to have pretty similar gene expression
levels.
We can also plot the percent variance explained by the principal compo-
nents as well as the cumulative percent variance explained. This is similar
to the plots we made earlier for the USArrests data.
In[52]: fig, axes = plt.subplots(1, 2, figsize=(15,6))
ax = axes[0]
ticks = np.arange(nci_pca.n_components_)+1548 12. Unsupervised Learning
−40 −20 0 20 40 60−60 −40 −20 0 20−40 −20 0 20 40 60−40 −20 0 20 40Z1Z1Z2
Z3
FIGURE 12.17. Projections of the NCI60cancer cell lines onto the first three
principal components (in other words, the scores for the first three principal com-
ponents). On the whole, observations belonging to a single cancer type tend to
lie near each other in this low-dimensional space. It would not have been possible
to visualize the data without using a dimension reduction method such as PCA,
since based on the full data set there scatterplots, none of
which would have been particularly 'o')
ax.set_xlabel( 'Principal Component' );
ax.set_ylabel( 'PVE')
ax = 'o');
ax.set_xlabel( 'Principal Component' )
ax.set_ylabel( 'Cumulative PVE' );
The resulting plots are shown in Figure of the variance in the data. This is not a huge amount of the variance.
However, looking at the scree plot, we see that while each of the first seven
principal components explain a substantial amount of variance, there is is, there is an elbowin the plot after approximately the seventh princi-
pal component. This suggests that there may be little benefit to examining
more than seven or so principal components (though even examining seven
principal components may be difficult).
Clustering the Observations of the NCI60 Data
We now perform hierarchical clustering of the cell lines in the NCI60data
using complete, single, and average linkage. Once again, the goal is to find
out whether or not the observations cluster into distinct types of cancer.
Euclidean distance is used as the dissimilarity measure. We first write a
short function to produce the three dendrograms.12.5 Lab: Unsupervised Learning 549
0 10 20 30 40 50 600 2 4 6 8 10Principal ComponentPVE
0 10 20 30 40 50 6020 40 60 80 100Principal ComponentCumulative PVEFIGURE 12.18. The PVE of the principal components of the NCI60cancer cell
line microarray data set. Left:the PVE of each principal component is shown.
Right:the cumulative PVE of the principal components is shown. Together, all
principal components explain 100,% of the variance.
In[53]: def plot_nci(linkage, ax, cut=-np.inf):
cargs = { 'above_threshold_color' :'black' ,
'color_threshold' :cut}
hc = = '%s Linkage' %l i n k a g e )
return hc
Let’s plot our results.
In[54]: fig, axes = plt.subplots(3, 1, figsize=(15,30))
ax = axes[0]; hc_comp = plot_nci( 'Complete' ,a x )
ax = axes[1]; hc_avg = plot_nci( 'Average' ,a x )
ax = axes[2]; hc_sing = plot_nci( 'Single' ,a x )
The results are shown in Figure 12.19. We see that the choice of linkage
certainly does affect the results obtained. Typically, single linkage will tend
to yieldtrailingclusters: very large clusters onto which individual observa-
tions attach one-by-one. On the other hand, complete and average linkage
tend to yield more balanced, attractive clusters. For this reason, complete
and average linkage are generally preferred to single linkage. Clearly cell
lines within a single cancer type do tend to cluster together, although the
clustering is not perfect. We will use complete linkage hierarchical cluster-
ing for the analysis that follows.550 12. Unsupervised 80 120 160Complete 60 80 100 120Average 60 80 100Single Linkage
FIGURE 12.19.TheNCI60cancer cell line microarray data, clustered withaverage, complete, and single linkage, and using Euclidean distance as the dissim-ilarity measure. Complete and average linkage tend to yield evenly sized clusterswhereas single linkage tends to yield extended clusters to which single leaves arefused one by one.12.5 Lab: Unsupervised Learning 551
We can cut the dendrogram at the height that will yield a particular
number of clusters, say four:
In[55]: linkage_comp = compute_linkage(hc_comp)
comp_cut = cut_tree(linkage_comp, 'label' ],
pd.Series(comp_cut.reshape(-1), name= 'Complete' ))
There are some clear patterns. All the leukemia cell lines fall in one
cluster, while the breast cancer cell lines are spread out over three different
clusters.
We can plot a cut on the dendrogram that produces these four clusters:
In[56]: fig, ax = plt.subplots(figsize=(10,10))
plot_nci( 'Complete' ,a x ,c u t = 1 4 0 )
ax.axhline(140, c= 'r',l i n e w i d t h = 4 ) ;
Theaxhline() function draws a horizontal line line on top of any existing
set of axes. The argument 140plots a horizontal line at height 140 on the
dendrogram; this is a height that results in four distinct clusters. It is easy
to verify that the resulting clusters are the same as the ones we obtained
incomp_cut .
We claimed earlier in Section 12.4.2thatK-means clustering and hier-
archical clustering with the dendrogram cut to obtain the same number
of clusters can yield very different results. How do these wegetifweperform K-meansclustering
withK=4?
In[57]: nci_kmeans = name= 'HClust' ),
pd.Series(nci_kmeans.labels_, name= 'K-means' ))
Out[57]: K-means 0 1 2 3
HClust
02 8 3 9 0
17 0 0 0
20 0 0 8
30 9 0 0
We see that the four clusters obtained using hierarchical clustering and
K-means clustering are somewhat different. First we note that the labels
in the two clusterings are arbitrary. That is, swapping the identifier of the
cluster does not change the clustering. We see here Cluster 3 in K-means
clustering is identical to cluster 2 in hierarchical clustering. However, the
other clusters differ: for instance, cluster 0 in K-means clustering contains
a portion of the observations assigned to cluster 0 by hierarchical cluster-
ing, as well as all of the observations assigned to cluster 1 by hierarchical
clustering.
Rather than performing hierarchical clustering on the entire data ma-
trix, we can also perform hierarchical clustering on the first few principal
component score vectors, regarding these first few components as a less
noisy version of the data.552 12. Unsupervised Learning
In[58]: hc_pca = = compute_linkage(hc_pca)
fig, ax = "Hier. Clust. on First Five Score Vectors" )
pca_labels = )
pd.crosstab(nci_labs[ 'label' ], pca_labels)
12.6 Exercises
Conceptual
1. This problem involves the K-means clustering algorithm.
(a) Prove ( 12.18).
(b) On the basis of this identity, argue that theK-means clusteringalgorithm (Algorithm12.2) decreases the objective (12.17) ateach iteration.2. Suppose that we have four observations, for which we compute adissimilarity matrix, given instance, the dissimilarity between the first and second obser-vations is 0.3, and the dissimilarity between the second and fourthobservations is 0.8.(a) On the basis of this dissimilarity matrix, sketch the dendrogramthat results from hierarchically clustering these four observa-tions using complete linkage. Be sure to indicate on the plot theheight at which each fusion occurs, as well as the observationscorresponding to each leaf in the dendrogram.(b) Repeat (a), this time using single linkage clustering.(c) Suppose that we cut the dendrogram obtained in (a) such thattwo clusters result. Which observations are in each cluster?(d) Suppose that we cut the dendrogram obtained in (b) such thattwo clusters result. Which observations are in each cluster?12.6 Exercises 553
(e) It is mentioned in this chapter that at each fusion in the den-
drogram, the position of the two clusters being fused can dendrogram that is equivalent to the dendrogram in (a), for
which two or more of the leaves are repositioned, but for which
the meaning of the dendrogram is the same.
3. In this problem, you will perform K-means clustering manually, with
K=2, on a small example with n=6 observations and p=2
features. The observations are as follows.
Obs.X1X2
114
213
304
451
562
640
(a) Plot the observations.
(b) function to do this. Report the cluster
labels for each observation.
(c) Compute the centroid for each cluster.
(d) Assign each observation to the centroid to which it is closest, in
terms of Euclidean distance. Report the cluster labels for each
observation.
(e) Repeat (c) and (d) until the answers obtained stop changing.
(f) In your plot from (a), color the observations according to the
cluster labels obtained.
4. Suppose that for a particular data set, we perform hierarchical clus-
tering using single linkage and using complete linkage. We obtain two
dendrograms.
(a) At a certain point on the single linkage dendrogram, the clus-
ters{1,2,3}and{4,5}fuse. On the complete linkage dendro-
gram, the clusters {1,2,3}and{4,5}also fuse at a certain point.
Which fusion will occur higher on the tree, or will they fuse at
the same height, or is there not enough information to tell?
(b) At a certain point on the single linkage dendrogram, the clusters
{5}and{6}fuse. On the complete linkage dendrogram, the clus-
ters{5}and{6}also fuse at a certain point. Which fusion will
occur higher on the tree, or will they fuse at the same height, or
is there not enough information to tell?
5. In words, describe the results that you would expect if you performed
K-means clustering of the eight shoppers in Figure 12.16, on the
basis of their sock and computer purchases, with K=2. Give three
answers, one for each of the variable scalings displayed. Explain.554 12. Unsupervised Learning
6. We saw in Section 12.2.2that the principal component loading and
score vectors provide an approximation to a matrix, in the sense the optimization problem given in ( 12.6).
Now,supposethatthe Mprincipalcomponentscorevectors zim,m=
1,...,M , are known. Using ( 12.6), explain that each of the first M
principal component loading vectors φjm,m=1,...,M , can be ob-
tained by performing pseparate least squares linear regressions. In
each regression, the principal component score vectors are the pre-
dictors, and one of the features of the data matrix is the response.
Applied
7. In this chapter, we mentioned the use of correlation-based distance
andEuclidean distance as dissimilaritymeasures for hierarchicalclus-
tering. It turns out that these two measures are almost equivalent: if
each observation has been centered to have mean zero and standard
deviation one, and if we let rijdenote the correlation between the ith
andjth observations, then the quantity 1−rijis proportional to the
squared Euclidean distance between the ith andjth observations.
On the USArrests data, show that this proportionality holds.
Hint: The Euclidean distance can be calculated using the
pairwise_distances() function from the sklearn.metrics module, andpairwise_
distances() correlations can be calculated using the np.corrcoef() function.
8. In Section 12.2.3, a formula for calculating PVE was given in Equa-
tion12.10. We also saw that the PVE can be obtained using the
explained_variance_ratio_ attribute of a fitted PCA()estimator.
On the USArrests data, calculate PVE in two ways:
(a) Using the explained_variance_ratio_ output of the fitted PCA()
estimator, as was done in Section 12.2.3.
(b) By applying Equation 12.10directly. The loadings are stored
as thecomponents_ attribute of the fitted PCA()estimator. Use
those loadings in Equation 12.10to obtain the PVE.
These two approaches should give the same results.
Hint: You will only obtain the same results in (a) and (b) if the same
data is used in both cases. For instance, if in (a) you performed PCA()
using centered and scaled variables, then you must center and scale
the variables before applying Equation 12.10in (b).
9. Consider the USArrests data. We will now perform hierarchical clus-
tering on the states.
(a) Using hierarchical clustering with complete linkage and
Euclidean distance, cluster the states.
(b) Cut the dendrogram at a height that results in three distinct
clusters. Which states belong to which clusters?12.6 Exercises 555(c) Hierarchically cluster the states using complete linkage and Eu-clidean distance,after scaling the variables to have standard de-viation one.(d) What effect does scaling the variables have on the hierarchicalclustering obtained? In your opinion, should the variables bescaled before the inter-observation dissimilarities are computed?Provide a justification for your answer.10. In this problem, you will generate simulated data, and then performPCA andK-means clustering on the data.(a) Generate a simulated data set with 20 observations in each ofthree classes (i.e. 60 observations total), and 50 variables.Hint: There are a number of functions inPythonthat you canuse to generate data. One example is thenormal()method oftherandom()function innumpy; theuniform()method is anotheroption. Be sure to add a mean shift to the observations in eachclass so that there are three distinct classes.(b) Perform PCA on the 60 observations and plot the first two prin-cipal component score vectors. Use a different color to indicatethe observations in each of the three classes. If the three classesappear separated in this plot, then continue on to part (c). Ifnot, then return to part (a) and modify the simulation so thatthere is greater separation between the three classes. Do notcontinue to part (c) until the three classes show at least someseparation in the first two principal component score vectors.(c) PerformK-means clustering of the observations withK=3.How well do the clusters that you obtained inK-means cluster-ing compare to the true class labels?Hint: You can use thepd.crosstab()function inPythonto com-pare the true class labels to the class labels obtained by cluster-ing. Be careful how you interpret the results:K-means clusteringwill arbitrarily number the clusters, so you cannot simply checkwhether the true class labels and clustering labels are the same.(d) PerformK-means clustering withK=2. Describe your results.(e) Now performK-means clustering withK=4, and describe yourresults.(f) Now performK-means clustering withK=3on the first twoprincipal component score vectors, rather than on the raw data.That is, performK-means clustering on the60×2matrix ofwhich the first column is the first principal component vector. Comment on the results.(g) Using theStandardScaler()estimator, performK-means clus-tering withK=3on the dataafter scaling each variable to havestandard deviation one. How do these results compare to thoseobtained in (b)? Explain.556 12. Unsupervised Learning
11. Write a Pythonfunction to perform matrix completion as in Algo-
rithm12.1, and as outlined in Section 12.5.2. In each iteration, the
function should keep track of the relative error, as well as the itera-
tion count. Iterations should continue until the relative error is small
enough or until some maximum number of iterations is reached (set a
default value for this maximum number). Furthermore, there should
be an option to print out the progress in each iteration.
Test your function on the Bostondata. First, standardize the features
to have mean zero and standard deviation one using the
StandardScaler() function. Run an experiment where you randomly
leave out an increasing (and nested) number of observations from 5%
to 30%, in steps of 5%. Apply Algorithm 12.1withM=1,2,...,8.
Display the approximation error as a function of the fraction of ob-
servations that are missing, and the value of M, averaged over 10
repetitions of the experiment.
12. In Section 12.5.2, Algorithm 12.1was implemented using the
svd()function from the np.linalg module. However, given the con-
nection between the svd()function and the PCA()estimator high-
lighted in the lab, we could have instead implemented the 12.1thatmakesuseof PCA()
rather than svd().
13. On the book website, www.statlearning.com , there is a gene expres-
sion data set ( Ch12Ex13.csv ) that consists of 40 tissue samples with
measurements on 1,000 genes. The first 20 samples are from healthy
patients, while the second 20 are from a diseased group.
(a) Load in the data using pd.read_csv() . You will need to select
header = None .
(b) Apply hierarchical clustering to the samples using correlation-
based distance, and plot the dendrogram. Do the genes separate
the samples into the two groups? Do your results depend on the
type of linkage used?
(c) Your collaborator wants to know which genes differ the most
across the two groups. Suggest a way to answer this question,
and apply it here.13
Multiple Testing
Thus far, this textbook has mostly focused on estimation and its close
cousin,prediction . In this chapter, we instead focus on hypothesis testing,
which is key to conducting inference . We remind the reader that inference
was briefly discussed in Chapter 2.
While Section 13.1provides a brief review of null hypotheses, p-values,
test statistics, and other key ideas in hypothesis testing, this chapter as-
sumes that the reader has had previous exposure to these topics. In par-
ticular, we will not focus on whyorhowto conduct a hypothesis test — a
topic on which entire books can be (and have been) written! Instead, we
will assume that the reader is interested in testing some particular set of
null hypotheses, and has a specific plan in mind for how to conduct the
tests and obtain such as H0: the expected blood pressure of mice in the control
group equals the expected blood pressure of mice in the treatment group . we construct a null hypothesis corresponding to no difference.
In contemporary settings, we are often faced with huge amounts of
data, and consequently may wish to test a great many null hypotheses.
For instance, rather than simply testing H0, we might want to test m
null hypotheses, H01,...,H 0m, whereH0j: the expected value of the jth
biomarker among mice in the control group equals the expected value of the
jthbiomarker among mice in the treatment group . When conducting mul-
tiple testing , we need to be very careful about how we interpret the results,
in order to avoid erroneously rejecting far too many null hypotheses.
This chapter discusses classical as well as more contemporary ways to
conduct multiple testing in a big-data setting. In Section 13.2, we highlight
the challenges associated with multiple testing. Classical solutions to these
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0_13 557558 13. Multiple Testing
challenges are presented in Section 13.3, and more contemporary solutions
in Sections 13.4and13.5.
In particular, Section 13.4focuses on the false discovery rate. The no-
tion of the false discovery rate dates back to the 1990s. It quickly rose in
popularity in the early 2000s, when large-scale data sets began to come out
of genomics. These datasets were unique not only because of their large
size,1but also because they were typically collected for exploratory pur-
poses: researchers collected these datasets in order to test a huge number
of null hypotheses, rather than just a very small number of pre-specified
null hypotheses. Today, of course, huge datasets are collected without a
pre-specified null hypothesis across virtually all fields. As we will see, the
false discovery rate is perfectly-suited for this modern-day reality.
This chapter naturally centers upon the classical statistical technique of
p-values, used to quantify the results of hypothesis tests. At the time of
writing of this book (2020), p-values have recently been the topic of exten-
sive commentary in the social science research community, to the extent
that some social science journals have gone so far as to ban the use of
p-values altogether! We will simply comment that when properly under-
stood and applied, p-values provide a powerful tool for drawing inferential
conclusions from our data.
13.1 A Quick Review of Hypothesis Testing
Hypothesis tests provide a rigorous statistical framework for answering
simple “yes-or-no” questions about data, such as the following:
1. Is the true coefficient βjin a linear regression of YontoX1,...,X p
equal to zero?2
2. Is there a difference in the expected blood pressure of laboratory mice
in the control group and laboratory mice in the treatment group?3
In Section 13.1.1, we briefly review the steps involved in hypothesis test-
ing. Section 13.1.2discusses the different types of mistakes, or errors, that
can occur in hypothesis testing.
13.1.1 Testing a Hypothesis
Conducting a hypothesis test typically proceeds in four steps. First, we de-
fine the null and alternative hypotheses. Next, we construct a test statistic
that summarizes the strength of evidence against the null hypothesis. We
then compute a p-value that quantifies the probability of having label seems quaint: a microarray dataset can be (and typically was) stored in a
Microsoft Excel spreadsheet!
2This hypothesis test was discussed on page 76of Chapter 3.
3The “treatment group” refers to the set of mice that receive an experimental treat-
ment, and the “control group” refers to those that do not.13.1 A Quick Review of Hypothesis Testing 559
a comparable or more extreme value of the test statistic under the null
hypothesis. Finally, based on the p-value, we decide whether to reject the
null hypothesis. We now briefly discuss each of these steps in turn.
Step 1: Define the Null and Alternative Hypotheses
In hypothesis testing, we divide the world into two possibilities: the null
hypothesis and thealternative hypothesis . The null hypothesis, denoted H0,null
hypothesis
alternative
hypothesisis the default state of belief about the world.4For instance, null The true coefficient βjin a linear regression of YontoX1,...,X p
equals zero.
2. There is no difference between the expected blood pressure of mice
in the control and treatment groups.
The null hypothesis is boring by construction: it may well be true, but we
might hope that our data will tell us otherwise.
The alternative hypothesis, denoted Ha, represents something different
and unexpected: for instance, that there isa difference between the ex-
pected blood pressure of the mice in the two groups. Typically, the alter-
native hypothesis simply posits that the null hypothesis does not hold: if
the null hypothesis states that there is no difference between A and B , then
the alternative hypothesis states that there is a difference between A and
B.
It is important to note that the treatment of H0andHais asymmetric.
H0is treated as the default state of the world, and we focus on using data
to reject H0. If we reject H0, then this provides evidence in favor of Ha.W e
can think of rejecting H0as making a discovery about our data: namely, we
are discovering that H0does not hold! By contrast, if we fail to reject H0,
then our findings are more nebulous: we will not know whether we failed
to reject H0because our sample size was too small (in which case testing
H0again on a larger or higher-quality dataset might lead to rejection), or
whether we failed to reject H0becauseH0really holds.
Step 2: Construct the Test Statistic
Next, we wish to use our data in order to find evidence for or against
the null hypothesis. In order to do this, we must compute a test statistic ,test statisticdenoted T, which summarizes the extent to which our data are consistent
withH0. The way in which we construct Tdepends on the nature of the
null hypothesis that we are testing.
To make things concrete, let xt
1,...,xt
ntdenote the blood pressure mea-
surementsforthe ntmiceinthetreatmentgroup,andlet xc
1,...,xc
ncdenote
the blood pressure measurements for the ncmice in the control group, and
µt= E( Xt),µc= E( Xc).TotestH0:µt=µc,wemakeuseofa two-sample
t-statistic ,5defined astwo-sample
t-statistic
4H0is pronounced “H naught” or “H zero”.560 13. Multiple Testing
−4−20240.0 0.1 0.2 0.3 0.4Value of Test StatisticProbability Density FunctionT=2.33
FIGURE 13.1. The density function for the N(0,1)distribution, with the ver-
tical line indicating a value of 2.33. 1% of the area under the curve falls to the
right of the vertical line, so there is only a 2% chance of observing a N(0,1)value
that is greater than 2.33or less than −2.33. Therefore, if a test statistic has a
N(0,1)null distribution, then an observed test statistic of T=2.33leads to a
p-value of an estimator of the pooled standard deviation of the two samples.6Here,
s2
tands2
care unbiased estimators of the variance of the blood pressure in
the treatment and control groups, respectively. A large (absolute) value of
Tprovides evidence against H0:µt=µc, and hence evidence in support
ofHa:µt/negationslash=µc.
Step 3: Compute the p-Value
In the previous section, we noted that a large (absolute) value of a two-
samplet-statisticprovidesevidenceagainst H0.Thisbegsthequestion: how
large is large? In other words, how much evidence against H0is provided
by a given value of the test statistic?
The notion of a p-valueprovides us with a way to formalize as well asp-valueanswer this question. The p-value is defined as the probability of observing
a test statistic equal to or more extreme than the observed statistic, under
the assumption that H0is in fact true . Therefore, a small p-value provides
evidence againstH0.
5Thet-statistic derives its name from the fact that, under H0, it follows a t-
distribution.
6Note that ( 13.2) assumes that the control and treatment groups have equal variance.
Without this assumption, ( 13.2) would take a slightly different form.13.1 A Quick Review of Hypothesis Testing 561
To make this concrete, suppose that T=2.33for the test statistic in
(13.1). Then, we can ask: what is the probability of having observed such
a large value of T, if indeed H0holds? It turns out that under H0, the
distribution of Tin (13.1) follows approximately a N(0,1)distribution7—
that is, a normal distribution with mean 0and variance 1. This distribution
is displayed in Figure 13.1. We see that the vast majority — 98% — of the
N(0,1)distribution falls between −2.33and2.33. This means that under
H0, we would expect to see such a large value of |T|only 2% of the time.
Therefore, the p-value corresponding to T=2.33is0.02.
The distribution of the test statistic under H0(also known as the test
statistic’s null distribution ) will depend on the details of what type ofnull
distributionnull hypothesis is being tested, and what type of test statistic is used. In
general, most commonly-used test statistics follow a well-known statistical
distribution under the null hypothesis — such as a normal distribution,
at-distribution, a χ2-distribution, or an F-distribution — provided that
the sample size is sufficiently large and that some other assumptions hold.
Typically, the Rfunction that is used to compute a test statistic will make
use of this null distribution in order to output a p-value. In Section 13.5,
we will see an approach to estimate the null distribution of a test statistic
using re-sampling; in many contemporary settings, this is a very attractive
option, as it exploits the availability of fast computers in order to avoid
having to make potentially problematic assumptions about the data.
Thep-value is perhaps one of the most used and abused notions in all p-valueistheprobabil-
ity thatH0holds, i.e., that the null hypothesis is true. This is not correct!
The one and only correct interpretation of the p-value is as the fraction
of the time that we would expect to see such an extreme value of the test
statistic8if we repeated the experiment many many times, provided H0
holds.
In Step 2 we computed a test statistic, and noted that a large (absolute)
value of the test statistic provides evidence against H0. In Step 3 the test
statistic was converted to a p-value, with small p-values providing evidence
againstH0. What, then, did we accomplish by converting the test statistic
from Step 2 into a p-value in Step 3? To answer this question, suppose
a data analyst conducts a statistical test, and reports a test statistic of
T= 17 .3. Does this provide strong evidence against H0? It’s impossible
to know, without more information: in particular, we would need to know
7More precisely, assuming that the observations are drawn from a normal distribution,
thenTfollows a t-distribution with nt+nc−2degrees of freedom. Provided that nt+
nc−2is larger than around 40, this is very well-approximated by a N(0,1)distribution.
In Section 13.5, we will see an alternative and often more attractive way to approximate
the null distribution of T, which avoids making stringent assumptions about the data.
8Aone-sided p-value is the probability of seeing such an extreme value of the test
statistic; e.g. the probability of seeing a test statistic greater than or equal to T=2.33.
Atwo-sided p-value is the probability of seeing such an extreme value of the absolute
test statistic; e.g. the probability of seeing a test statistic greater than or equal to 2.33
or less than or equal to −2.33. The default recommendation is to report a two-sided
p-value rather than a one-sided p-value, unless there is a clear and compelling reason
that only one direction of the test statistic is of scientific interest.562 13. Multiple Testing
Truth
H0 Ha
DecisionRejectH0 Type I Error Correct
Do Not Reject H0 Correct Type II Error
TABLE 13.1. A summary of the possible scenarios associated with testing the
null hypothesis H0. Type I errors are also known as false positives, and Type II
errors as false H0.Thisisexactly
what ap-value gives us. In other words, a p-value allows us to transform
our test statistic, which is measured on some arbitrary and uninterpretable
scale, into a number between 0and1that can be more easily interpreted.
Step 4: Decide Whether to Reject the Null Hypothesis
Once we have computed a p-value corresponding to H0, it remains for
us to decide whether or not to reject H0. (We do not usually talk about
“accepting” H0: instead, we talk about “failing to reject” H0.) A small p-
value indicates that such a large value of the test statistic is unlikely to
occur under H0, and thereby provides evidence against H0. If thep-value
is sufficiently small, then we will want to reject H0(and, therefore, make
a “discovery”). But how small is small enough to reject H0?
It turns out that the answer to this question is very much in the eyes
of the beholder, or more specifically, the data analyst. The smaller the p-
value, the stronger the evidence against H0. In some fields, it is typical to
rejectH0if thep-value is below 0.05; this means that, if H0holds, we would
expect to see such a small p-value no more than 5% of the time.9However,
in other fields, a much higher burden of proof is required: for example, in
some areas of physics, it is typical to reject H0only if the p-value is below
10−9!
In the example displayed in Figure 13.1, if we use a threshold of 0.05as
our cut-off for rejecting the null hypothesis, then we will reject the null. By
contrast, if we use a threshold of 0.01, then we will fail to reject the null.
These ideas are formalized in the next section.
13.1.2 Type I and Type II Errors
If the null hypothesis holds, then we say that it is a true null hypothesis ;true null
hypothesisotherwise, it is a false null hypothesis . For instance, if we test H0:µt=µc
false null
hypothesisas in Section 13.1.1, and there is indeed no difference in the population
mean blood pressure for mice in the treatment group and mice in the
control group, then H0is true; otherwise, it is false. Of course, we do not
knowa prioriwhether H0is true or whether it is false: this is why we need
to conduct a hypothesis test!
9Though a threshold of 0.05to reject H0is ubiquitous in some areas of science, we
advise against blind adherence to this arbitrary choice. Furthermore, a data analyst
should typically report the p-value itself, rather than just whether or not it exceeds a
specified threshold value.13.2 The Challenge of Multiple Testing 563
Table13.1summarizes the possible scenarios associated with testing the
null hypothesis H0.10Once the hypothesis test is performed, the rowof the
table is known (based on whether or not we have rejected H0); however, it
is impossible for us to know which columnwe are in. If we reject H0when
H0is false (i.e., when Hais true), or if we do not reject H0when it is true,
then we arrived at the correct result. However, if we erroneously reject H0
whenH0is in fact true, then we have committed a Type I error . TheType IType I errorerror rate is defined as the probability of making a Type I error given thatType I error
rateH0holds, i.e., the probability of incorrectly rejecting H0. Alternatively, if
we do not reject H0whenH0is in fact false, then we have committed a
Type II error . Thepowerof the hypothesis test is defined as the probabilityType II
error
powerof not making a Type II error given that Haholds, i.e., the probability of
correctly rejecting H0.
Ideally we would like both the Type I and Type II error rates to be small.
But in practice, this is hard to achieve! There typically is a trade-off: we
can make the Type I error small by only rejecting H0if we are quite sure
that it doesn’t hold; however, this will result in an increase in the Type II
error. Alternatively, we can make the Type II error small by rejecting H0
in the presence of even modest evidence that it does not hold, but this will
cause the Type I error to be large. In practice, we typically view Type I
errors as more “serious” than Type II errors, because the former involves
declaring a scientific finding that is not correct. Hence, when we perform
hypothesis testing, we typically require a low Type I error rate — e.g.,
at most α=0.05— while trying to make the Type II error small (or,
equivalently, the power large).
It turns out that there is a direct correspondence between the p-value
threshold that causes us to reject H0, and the Type I error rate. By only
rejecting H0when the p-value is below α, we ensure that the Type I error
rate will be less than or equal to α.
13.2 The Challenge of Multiple Testing
In the previous section, we saw that rejecting H0if thep-value is below
(say)0.01provides us with a simple way to control the Type I error for H0
at level0.01: ifH0is true, then there is no more than a 1% probability that
we will reject it. But now suppose that we wish to test mnull hypotheses,
H01,...,H 0m. Will it do to simply reject all null hypotheses for which the
corresponding p-value falls below (say) 0.01? Stated another way, if we
reject all null hypotheses for which the p-value falls below 0.01, then how
many Type I errors should we expect to make?
As a first step towards answering this question, consider a stockbroker
who wishes to drum up new clients by convincing them of her trading
10There are parallels between Table 13.1and Table 4.6, which has to do with the
output of a binary classifier. In particular, recall from Table 4.6that a false positive
results from predicting a positive (non-null) label when the true label is in fact negative
(null). This is closely related to a Type I error, which results from rejecting the null
hypothesis when in fact the null hypothesis holds.564 13. Multiple Testing
acumen. She tells 1,024 ( 1,024 = 210) potential new clients that she running. There are 210possibilities for how Apple’s stock price might
change over the course of these 10 days. Therefore, she emails each client
one of these 210possibilities. The vast majority of her potential clients
will find that the stockbroker’s predictions are no better than chance (and
many will find them to be even worse than chance). But a broken clock is
right twice a day, and one of her potential clients will be really impressed
to find that her predictions were correct for all 10 of the days! And so the
stockbroker gains a new client.
What happened here? Does the stockbroker have any actual insight into
whether Apple’s stock price will increase or decrease? No. How, then, did
she manage to predict Apple’s stock price perfectly for 10 days running?
The answer is that she made a lot of guesses, and one of them happened
to be exactly right.
How does this relate to multiple testing? Suppose that we flip 1,024 fair
coins11ten times each. Then we would expect (on average) one coin to
come up all tails. (There’s a 1/210=1/1,024chance that any single coin
will come up all tails. So if we flip 1,024coins, then we expect one coin to
come up all tails, on average.) If one of our coins comes up all tails, then
we might therefore conclude that this particular coin is not fair. In fact, a
standard hypothesis test for the null hypothesis that this particular coin
is fair would lead to a p-value below 0.002!12But it would be incorrect to
conclude that the coin is not fair: in fact, the null hypothesis holds, and we
just happen to have gotten ten tails in a row by chance.
These examples illustrate the main challenge of multiple testing : whenmultiple
testingtesting a huge number of null hypotheses, we are bound to get some hypothesis without accounting for the fact that we have performed a
very large number of tests, then we may end up rejecting a great number
of true null hypotheses — that is, making a large number of Type I errors.
How severe is the problem? Recall from the previous section that if we
reject a single null hypothesis, H0, if itsp-value is less than, say, α=0.01,
then there is a 1% chance of making a false rejection if H0is in fact true.
Nowwhat if wetest mnullhypotheses, H01,...,H 0m,all of whicharetrue?
There’s a 1% chance of rejecting any individual null hypothesis; therefore,
we expect to falsely reject approximately 0.01×mnull hypotheses. If m=
10,000, then that means that we expect to falsely reject 100null hypotheses
by chance! That is a lotof Type I p-value
is below αcontrols the probability of falsely rejecting that null hypothesis
at levelα. However, if we do this for mnull hypotheses, then the chance of
falsely rejecting at least one of the mnull hypotheses is quite a bit higher!
11Afair coin is one that has an equal chance of landing heads or tails.
12Recall that the p-value is the probability of observing data at least this extreme,
under the null hypothesis. If the coin is fair, then the probability of observing at least
ten tails is (1/2)10=1/1,024<0.001. Thep-value is therefore 2/1,024<0.002, since
this is the probability of observing ten heads or ten tails.13.3 The Family-Wise Error Rate 565
H0is True H0is False Total
RejectH0 V S R
Do Not Reject H0 U W m−R
Total m0 m−m0 m
TABLE 13.2. A summary of the results of testing mnull hypotheses. A given
null hypothesis is either true or false, and a test of that null hypothesis can either
reject or fail to reject it. In practice, the individual values of V,S,U, andWare
unknown. However, we do have access to V+S=RandU+W=m−R, which
are the numbers of null hypotheses rejected and not rejected, respectively.
We will investigate this issue in greater detail, and pose a solution to it, in
Section13.3.
13.3 The Family-Wise Error Rate
In the following sections, we will discuss testing multiple hypotheses while
controlling the probability of making at least one Type I error.
13.3.1 What is the Family-Wise Error Rate?
Recall that the Type I error rate is the probability of rejecting H0ifH0is
true. The family-wise error rate (FWER) generalizes this notion to the set-family-wise
error rateting ofmnull hypotheses, H01,...,H 0m, and is defined as the probability
of making at least one Type I error. To state this idea more formally, con-
sider Table 13.2, which summarizes the possible outcomes when performing
mhypothesis tests. Here, Vrepresents the number of Type I errors (also
known as false positives or false discoveries), Sthe number of true posi-
tives,Uthe number of true negatives, and Wthe number of Type II errors
(also known as false negatives). Then the family-wise error rate is given by
FWER= Pr( V≥1). (13.3)
A strategy of rejecting any null hypothesis for which the p-value is below
α(i.e. controlling the Type I error for each null hypothesis at level α) leads
to a FWER of
FWER(α)=1 −Pr(V= 0)
=1 −Pr(do not falsely reject any null hypotheses )
=1 −Pr/parenleftBig/intersectiontextm
j=1{do not falsely reject H0j}/parenrightBig
. (13.4)
Recall from basic probability that if two events AandBare independent,
thenPr(A∩B) = Pr( A) Pr( B). Therefore, if we make the additional rather
strong assumptions that the mtests are independent and that all mnull
hypotheses are true, then
FWER(α)=1 −m/productdisplay
j=1(1−α)=1 −(1−α)m. (13.5)566 13. Multiple Testing
FIGURE 13.2. The family-wise error rate, as a function of the number of
hypotheses tested (displayed on the log scale), for three values of α:α=0.05
(orange), α=0.01(blue), and α=0.001(purple). The dashed line indicates
0.05. For example, in order to control the FWER at 0.05when testing m= 50
null hypotheses, we must control the Type I error for each null hypothesis at level
α=0.001.
Hence, if we test only one null hypothesis, then FWER (α)=1 100 independent tests, then FWER (α)=1 −(1−α)100. For instance,
takingα=0.05leads to a FWER of 1−(1−0.05)100=0.994. In other
words, we are virtually guaranteed to make at least one Type I error!
Figure13.2displays ( 13.5) for various values of m, the number of hy-
potheses, and α, the Type I error. We see that setting α=0.05results in
a high FWER even for moderate m. Withα=0.01, we can test no more
than five null hypotheses before the FWER exceeds 0.05. Only for very
small values, such as α=0.001, do we manage to ensure a small FWER,
at least for moderately-sized m.
We now briefly return to the example in Section 13.1.1, in which we
consider testing a single null hypothesis of the form H0:µt=µcusing a
two-sample t-statistic. Recall from Figure 13.1that in order to guarantee
that the Type I error does not exceed 0.02, we decide whether or not to
rejectH0using a cutpoint of 2.33(i.e. we reject H0if|T|≥2.33). Now,
what if we wish to test 10 null hypotheses using two-sample t-statistics,
instead of just one? We will see in Section 13.3.2that we can guarantee
that the FWER does not exceed 0.02by rejecting only null hypotheses
for which the p-value falls below 0.002. This corresponds to a much more
stringent cutpoint of 3.09(i.e. we should reject H0jonly if its test statistic
|Tj|≥3.09, forj=1,...,10). In other words, controlling the FWER at
levelαamounts to a much higher bar, in terms of evidence required to
reject any given null hypothesis, than simply controlling the Type I error
for each null hypothesis at level α.1 2 5 10 20 50 100 200 5000.0 0.2 0.4 0.6 0.8 1.0Number of HypothesesFamily−Wise Error Rateα=0.05α=0.01α=0.00113.3 The Family-Wise Error Rate 567
Manager Mean,¯xStandard Deviation, st-statistic p-value
One 3.0 7.4 2.86 0.006
Two -0.1 6.9 -0.10 0.918
Three 2.8 7.5 2.62 0.012
Four 0.5 6.7 0.53 0.601
Five 0.3 6.8 0.31 0.756
TABLE 13.3. The first two columns correspond to the sample mean and sample
standard deviation of the percentage excess return, over n= 50 months, for the
first five managers in the Funddataset. The last two columns provide the t-statistic
(√n·¯X/S) and associated p-value for testing H0j:µj=0, the null hypothesis
that the (population) mean return for the jth hedge fund manager equals zero.
13.3.2 Approaches to Control the Family-Wise Error Rate
In this section, we briefly survey some approaches to control the FWER.
We will illustrate these approaches on the Funddataset, which records the
monthly percentage excess returns for 2,000 fund managers over n= 50
months.13Table13.3provides relevant summary statistics for the first five
managers.
We first present the Bonferroni method and Holm’s step-down proce-
dure, which are very general-purpose approaches for controlling the FWER
that can be applied whenever mp-values have been computed, regardless
of the form of the null hypotheses, the choice of test statistics, or the
(in)dependence of the p-values. We then briefly discuss Tukey’s method
and Scheffé’s method in order to illustrate the fact that, in certain sit-
uations, more specialized approaches for controlling the FWER may be
preferable.
The Bonferroni Method
As in the previous section, suppose we wish to test H01,...,H 0m. LetAj
denote the event that we make a Type I error for the jth null hypothesis,
forj=1,...,m . Then
FWER= Pr( falsely reject at least one null hypothesis )
= Pr( ∪m
j=1Aj)
≤m/summationdisplay
j=1Pr(Aj). (13.6)
In (13.6), the inequality results from the fact that for any two events A
andB,Pr(A∪B)≤Pr(A) + Pr( B), regardless of whether AandBare
independent. The Bonferroni method , orBonferroni correction , sets the
threshold for rejecting each hypothesis test to α/m, so that Pr(Aj)≤α/m.
Equation 13.6implies market’s overall return. So if the market increases by 5%during a given period and
the fund manager achieves a 7%return, their excess return would be 7%−5% = 2% .568 13. Multiple Testing
so this procedure controls the FWER at level α. For instance, in order to
control the FWER at level 0.1while testing m= 100 null hypotheses, the
Bonferroni procedure requires us to control the Type I error for each null
hypothesis at level 0.1/100 = 0 .001, i.e. to reject all null hypotheses for
which the p-value is below 0.001.
We now consider the Funddataset in Table 13.3. If we control the Type
I error at level α=0.05for each fund manager separately, then we will
conclude that the first and third managers have significantly non-zero ex-
cess returns; in other words, we will reject H01:µ1=0andH03:µ3=0.
However, as discussed in previous sections, this procedure does not account
for the fact that we have tested multiple hypotheses, and therefore it will
lead to a FWER greater than 0.05. If we instead wish to control the FWER
at level0.05, then, using a Bonferroni correction, we must control the Type
I error for each individual manager at level α/m=0.05/5=0 .01. Conse-
quently, we will reject the null hypothesis only for the first manager, since
thep-values for all other managers exceed 0.01. The Bonferroni correction
gives us peace of mind that we have not falsely rejected too many null
hypotheses, but for a price: we reject few null hypotheses, and thus will
typically make quite a few Type II errors.
The Bonferroni correction is by far the best-known and most commonly-
used multiplicity correction in all of statistics. Its ubiquity is due in large
part to the fact that it is very easy to understand and simple to implement,
and also from the fact that it successfully controls Type I error regardless
of whether the mhypothesis tests are independent. However, as we will see,
it is typically neither the most powerful nor the best approach for multiple
testing correction. In particular, the Bonferroni correction can be quite
conservative, in the sense that the true FWER is often quite a bit lower
than the nominal (or target) FWER; this results from the inequality in
(13.6). By contrast, a less conservative procedure might allow us to control
the FWER while rejecting more null hypotheses, and therefore making
fewer Type II errors.
Holm’s Step-Down Procedure
Holm’s method , also known as Holm’s step-down procedure or the Holm–Holm’s
methodBonferroni method, is an alternative to the Bonferroni procedure. Holm’s
method controls the FWER, but it is less conservative than Bonferroni, II errors and hence greater power. The procedure is summarized in
Algorithm 13.1. The proof that this method controls the FWER is similar
to, but slightly more complicated than, the argument in ( 13.6) that the
Bonferroni method controls the FWER. It is worth noting that in Holm’s
procedure, the threshold that we use to reject each null hypothesis — p(L)
in Step 5 — actually depends on the values of allmof thep-values. (See the
definition of Lin (13.7).) This is in contrast to the Bonferroni procedure,
in which to control the FWER at level α, we reject any null hypotheses for
which the p-value is below α/m, regardless of the other p-values. Holm’s
method makes no independence assumptions about the mhypothesis tests,
and is uniformly more powerful than the Bonferroni method — it will13.3 The Family-Wise Error Rate 569
Algorithm 13.1 Holm’s Step-Down Procedure to Control the FWER
1. Specify α, the level at which to control the FWER.
2. Compute p-values,p1,...,p m, for the mnull hypotheses
H01,...,H 0m.
3. Order the mp-values so that p(1)≤p(2)≤···≤p(m).
4. Define
L= (13.7)
5. Reject all null hypotheses H0jfor which pj<p(L).
always reject at least as many null hypotheses as Bonferroni — and so it
should always be preferred.
We now consider applying Holm’s method to the first five fund managers
in theFunddataset in Table 13.3, while controlling the FWER at level 0.05.
The ordered p-values are p(1)=0.006,p(2)=0.012,p(3)=0.601,p(4)=
0.756 andp(5)=0.918. The Holm procedure rejects the first two null
hypotheses, because p(1)=0.006<0.05/(5 + 1 −1) = 0 .01andp(2)=
0.012<0.05/(5 + 1 −2) = 0 .0125 , butp(3)=0.601>0.05/(5 + 1 −3) =
0.0167 , which implies that L=3. We note that, in this setting, Holm is
more powerful than Bonferroni: the former rejects the null hypotheses for
the first and third managers, whereas the latter rejects the null hypothesis
only for the first manager.
Figure13.3provides an illustration of the Bonferroni and Holm methods
on three simulated data sets in a setting involving m= 10 hypothesis tests,
of which m0=2 of the null hypotheses are true. Each panel displays the
ten corresponding p-values, ordered from smallest to largest, and plotted
on a log scale. The eight red points represent the false null hypotheses, and
the two black points represent the true null hypotheses. We wish to control
the FWER at level 0.05. The Bonferroni procedure requires us to reject all
null hypotheses for which the p-value is below 0.005; this is represented by
the black horizontal line. The Holm procedure requires us to reject all null
hypotheses that fall below the blue line. The blue line always lies above the
black line, so Holm will always reject more tests than Bonferroni; the region
between the two lines corresponds to the hypotheses that are only rejected
by Holm. In the left-hand panel, both Bonferroni and Holm successfully
reject seven of the eight false null hypotheses. In the center panel, Holm
successfully rejects all eight of the false null hypotheses, while Bonferroni
fails to reject one. In the right-hand panel, Bonferroni only rejects three of
the false null hypotheses, while Holm rejects all eight. Neither Bonferroni
nor Holm makes any Type I errors in these examples.
Two Special Cases: Tukey’s Method and Scheffé’s Method
Bonferroni’s method and Holm’s method can be used in virtually any set-
ting in which we wish to control the FWER for mnull hypotheses: they570 13. Multiple Testing
2 4 6 8 101e−05 1e−04 1e−03 1e−02 1e−01Ordering of p−valuesp−values (log scale)2 4 6 8 101e−07 1e−05 1e−03 1e−01Ordering of p−valuesp−values (log scale)2 4 6 8 101e−05 1e−04 1e−03 1e−02 1e−01Ordering of p−valuesp−values (log scale)FIGURE 13.3. Each panel displays, for a separate simulation, the sorted
p-values for tests of m= 10 null hypotheses. The p-values corresponding to
them0=2 true null hypotheses are displayed in black, and the rest are in red.
When controlling the FWER at level 0.05, the Bonferroni procedure rejects all
null hypotheses that fall below the black line, and the Holm procedure rejects all
null hypotheses that fall below the blue line. The region between the blue and black
lines indicates null hypotheses that are rejected using the Holm procedure but not
using the Bonferroni procedure. In the center panel, the Holm procedure rejects
one more null hypothesis than the Bonferroni procedure. In the right-hand panel,
it rejects five more null hypotheses.
make no assumptions about the nature of the null hypotheses, the type
of test statistic used, or the (in)dependence of the p-values. However, in
certain very specific settings, we can achieve higher power by controlling
the FWER using approaches that are more tailored to the task at hand.
Tukey’s method and Scheffé’s method provide two such examples.
Table13.3indicates that for the Funddataset, Managers One and Two
have the greatest difference in their sample mean returns. This finding
might motivate us to test the null hypothesis H0:µ1=µ2, whereµjis the
(population) mean return for the jth fund manager. A two-sample t-test
(13.1) forH0yields ap-value of 0.0349 , suggesting modest evidence against
H0. However, this p-value is misleading, since we decided to compare the
average returns of Managers One and Two only after having examined the
returns for all five managers; this essentially amounts to having performed
m=5×(5−1)/2 = 10 hypothesis tests, and selecting the one with the
smallest p-value. This suggests that in order to control the FWER at level
0.05, we should make a Bonferroni correction for m= 10 hypothesis tests,
and therefore should only reject a null hypothesis for which the p-value
is below 0.005. If we do this, then we will be unable to reject the null
hypothesis that Managers One and Two have identical performance.
However, in this setting, a Bonferroni correction is actually a bit too
stringent, since it fails to consider the fact that the m= 10 hypothesis
tests are all somewhat related: for instance, Managers Two and Five have
similar mean returns, as do Managers Two and Four; this guarantees that
the mean returns of Managers Four and Five are similar. Stated another
way, the mp-values for the mpairwise comparisons are notindependent.
Therefore, it should be possible to control the FWER in a way that is13.3 The Family-Wise Error Rate 571
2 4 6 8 10 12 141e−04 1e−03 1e−02 1e−01 1e+00Ordering of p−valuesp−values (log scale)2 4 6 8 10 12 141e−06 1e−04 1e−02 1e+00Ordering of p−valuesp−values (log scale)2 4 6 8 10 12 141e−04 1e−03 1e−02 1e−01 1e+00Ordering of p−valuesp−values (log scale)FIGURE 13.4. Each panel displays, for a separate simulation, the sorted
p-values for tests of m= 15 hypotheses, corresponding to pairwise tests for the
equality of G=6means. The m0= 10 true null hypotheses are displayed in black,
and the rest are in red. When controlling the FWER at level 0.05, the Bonferroni
procedure rejects all null hypotheses that fall below the black line, whereas Tukey
rejects all those that fall below the blue line. Thus, Tukey’s method has slightly
higher power than Bonferroni’s method. Controlling the Type I error without
adjusting for multiple testing involves rejecting all those that fall below the green
line.
less conservative. This is exactly the idea behind Tukey’s method : whenTukey’s
methodperforming m=G(G−1)/2pairwise comparisons of Gmeans, it allows
us to control the FWER at level αwhile rejecting all null hypotheses for
which the p-value falls below αT, for some αT>α/m.
Figure13.4illustrates Tukey’s method on three simulated data sets in a
setting with G=6means, with µ1=µ2=µ3=µ4=µ5/negationslash=µ6. Therefore,
of them=G(G−1)/2 = 15 null hypotheses of the form H0:µj=µk,
ten are true and five are false. In each panel, the true null hypotheses
are displayed in black, and the false ones are in red. The horizontal lines
indicate that Tukey’s method always results in at least as many rejections
as Bonferroni’s method. In the left-hand panel, Tukey correctly rejects two
more null hypotheses than Bonferroni.
Now, suppose that we once again examine the data in Table 13.3, and Four, and Five. This might motivate us to test the null hypothesis
H0:1
2(µ1+µ3)=1
3(µ2+µ4+µ5). (13.8)
(Recall that µjis the population mean return for the jth hedge fund man-
ager.) It turns out that we could test ( 13.8) using a variant of the two-
samplet-test presented in ( 13.1), leading to a p-value of 0.004. This sug-
gests strong evidence of a difference between Managers One and Three
compared to Managers Two, Four, and Five. However, there is a problem:
we decided to test the null hypothesis in ( 13.8) only after peeking at the
data in Table 13.3. In a sense, this means that we have conducted multiple
testing. In this setting, using Bonferroni to control the FWER at level α572 13. Multiple Testing
would require a p-value threshold of α/m, for an extremely large value of
m14.
Scheffé’s method is designed for exactly this setting. It allows us to com-Scheffé’s
methodpute a value αSsuch that rejecting the null hypothesis H0in (13.8) if the
p-value is below αSwill control the Type I error at level α. It turns out that
for theFundexample, in order to control the Type I error at level α=0.05,
we must set αS=0.002. Therefore, we are unable to reject H0in (13.8), de-
spite the apparently very small p-value of 0.004. An important advantage of
Scheffé’s method is that we can use this same threshold of αS=0.002in or-
der to perform a pairwise comparison of any split of the managers into two
groups: for instance, we could also test µ5using the same threshold of 0.002,
without needing to further adjust for multiple testing.
To summarize, Holm’s procedure and Bonferroni’s procedure are very
general approaches for multiple testing correction that can be applied un-
der all circumstances. However, in certain special cases, more powerful pro-
cedures for multiple testing correction may be available, in order to control
the FWER while achieving higher power (i.e. committing fewer Type II
errors) than would be possible using Holm or Bonferroni. In this section,
we have illustrated two such examples.
13.3.3 Trade-Off Between the FWER and our powerto reject the null hypotheses. Recall that power is defined
as the number of false null hypotheses that we reject divided by the total
number of false null hypotheses, i.e. S/(m−m0)using the notation of Ta-
ble13.2. Figure13.5illustrates the results of a simulation setting involving
mnull hypotheses, of which 90% are true and the remaining 10% are false;
power is displayed as a function of the FWER. In this particular simulation
setting, when m= 10 , a FWER of 0.05corresponds to power of approxi-
mately 60%. However, as mincreases, the power decreases. With m= 500 ,
the power is below 0.2at a FWER of 0.05, so that we successfully reject
only 20% of the false null hypotheses.
Figure13.5indicates that it is reasonable to control the FWER when m
takes on a small value, like 5or10. However, for m= 100 orm=1,000,
attempting to control the FWER will make it almost impossible to is this the case? Recall that, using the notation in Table 13.2, the
FWER is defined as Pr(V≥1)(13.3). In other other words, controlling the
FWER at level αguarantees that the data analyst is very unlikely (with
probability no more than α) to reject anytrue null hypotheses, i.e. to have
any false positives. In order to make good on this guarantee when mis
large, the data analyst may be forced to reject very few null hypotheses, or
perhaps even none at all (since if R=0then also V=0; see Table 13.2).
14In fact, calculating the “correct” value of mis quite technical, and outside the scope
of this book.13.4 The False Discovery Rate 573
0.00.20.40.60.81.00.0 0.2 0.4 0.6 0.8 1.0Family−Wise Error RatePowerm = 10m = 100m = 500FIGURE 13.5. In a simulation setting in which 90% of the mnull hypotheses are
true, we display the power (the fraction of false null hypotheses that we successfully
reject) as a function of the family-wise error rate. The curves correspond to
m= 10 (orange) ,m= 100 (blue), andm= 500 (purple). As the value of m
increases, the power decreases. The vertical dashed line indicates a FWER of
0.05.
This is scientifically uninteresting, and typically results in very low power,
as in Figure 13.5.
In practice, when mis large, we may be willing to tolerate a few false
positives, in the interest of making more discoveries, i.e. more rejections of
the null hypothesis. This is the motivation behind the false discovery rate,
which we present next.
13.4 The False Discovery Rate
13.4.1 Intuition for the False Discovery Rate
As we just discussed, when mis large, then trying to prevent anyfalse
positives (as in FWER control) is simply too stringent. Instead, we might
try to make sure that the ratio of false positives ( V) to total positives ( V+
S=R) is sufficiently low, so that most of the rejected null hypotheses are
not false positives. The ratio V/Ris known as the false discovery proportionfalse
discovery
proportion(FDP).
It might be tempting to ask the data analyst to control the FDP: to
make sure that no more than, say, 20% of the rejected null hypotheses are
false positives. However, in practice, controlling the FDP is an impossible
task for the data analyst, since she has no way to be certain, on any par-
ticular dataset, which hypotheses are true and which are false. This is very
similar to the fact that the data analyst can control the FWER, i.e. she
can guarantee that Pr(V≥1)≤αfor any pre-specified α, but she cannot
guarantee that V=0 on any particular dataset (short of failing to reject
any null hypotheses, i.e. setting R=0).574 13. Multiple Testing
Therefore, we instead control the false discovery rate (FDR)15, definedfalse
discovery
rateas
FDR= E( FDP) = E( V/R). (13.9)
When we control the FDR at (say) level q= 20% , we are rejecting as many
null hypotheses as possible while guaranteeing that no more than 20% of
those rejected null hypotheses are false positives, on average .
In the definition of the FDR in ( 13.9), the expectation is taken over the
population from which the data are generated. For instance, suppose we
control the FDR for mnull hypotheses at q=0.2. This means that if we
repeat this experiment a huge number of times, and each time control hypotheses will be false positives. On a given dataset, the fraction of
false positives among the rejected hypotheses may be greater than or less
than 20%.
Thus far, we have motivated the use of the FDR from a pragmatic per-
spective, by arguing that when mis large, controlling the FWER is simply
too stringent, and will not lead to “enough” discoveries. An additional mo-
tivation for the use of the FDR is that it aligns well with the way that data
are often collected in contemporary applications. As datasets continue to
grow in size across a variety of fields, it is increasingly common to conduct a
huge number of hypothesis tests for exploratory, rather than confirmatory,
purposes. For instance, a genomic researcher might sequence the genomes
of individuals with and without some particular medical condition, and
then, for each of 20,000 genes, test whether sequence variants in that gene
are associated with the medical condition of interest. This amounts to per-
formingm= 20 ,000hypothesis tests. The analysis is exploratory in nature,
in the sense that the researcher does not have any particular hypothesis
in mind; instead she wishes to see whether there is modest evidence for
the association between each gene and the disease, with a plan to further
investigate any genes for which there is such evidence. She is likely willing
to tolerate some number of false positives in the set of genes that she will
investigate further; thus, the FWER is not an appropriate choice. How-
ever, some correction for multiple testing is required: it would not be a
good idea for her to simply investigate allgenes with p-values less than
(say) 0.05, since we would expect 1,000 genes to have such small p-values
simply by chance, even if no genes are associated with the disease (since
0.05×20,000 = 1 ,000). Controlling the FDR for her exploratory analysis
at 20% guarantees that — on average — no more than 20% of the genes
that she investigates further are false positives.
It is worth noting that unlike p-values, for which a threshold of 0.05
is typically viewed as the minimum standard of evidence for a “positive”
result, and a threshold of 0.01 or even 0.001 is viewed as much more com-
pelling, there is no standard accepted threshold for FDR control. For instance, the genomic researcher in the previous example
might seek to control the FDR at a threshold of 10% if the planned follow-
15IfR=0, then we replace the ratio V/R with0, to avoid computing 0/0. Formally,
FDR= E( V/R|R>0) Pr( R>0).13.4 The False Discovery Rate 575
up analysis is time-consuming or expensive. Alternatively, a much larger
threshold of 30% might be suitable if she plans an inexpensive follow-up
analysis.
13.4.2 The Benjamini–Hochberg Procedure
We now focus on the task of controlling the FDR: that is, deciding which
null hypotheses to reject while guaranteeing that the FDR, E(V/R), is less
than or equal to some pre-specified value q. In order to do this, we need
some way to connect the p-values,p1,...,p m, from the mnull hypotheses
to the desired FDR value, q. It turns out that a very simple procedure,
outlined in Algorithm 13.2, can be used to control the FDR.
Algorithm 13.2 Benjamini–Hochberg Procedure to Control the FDR
1. Specify q, the level at which to control the FDR.
2. Compute p-values,p1,...,p m, for the mnull hypotheses
H01,...,H 0m.
3. Order the mp-values so that p(1)≤p(2)≤···≤p(m).
4. Define
L= max {j:p(j)< qj/m }. (13.10)
5. Reject all null hypotheses H0jfor which pj≤p(L).
Algorithm 13.2is known as the Benjamini–Hochberg procedure . The cruxBenjamini–
Hochberg
procedureof this procedure lies in ( 13.10). For example, consider again the first five
managers in the Funddataset, presented in Table 13.3. (In this example,
m=5, although typically we control the FDR in settings involving a much
greater number of null hypotheses.) We see that p(1)=0.006<0.05×1/5,
p(2)=0.012 <0.05×2/5,p(3)=0.601 >0.05×3/5,p(4)=0.756 >
0.05×4/5, andp(5)=0.918>0.05×5/5. Therefore, to control the FDR
at5%, we reject the null hypotheses that the first and third fund managers
perform no better than chance.
As long as the mp-values are independent or only mildly dependent,
then the Benjamini–Hochberg procedure guarantees16that
FDR≤q.
In other words, this procedure ensures that, on average, no more than a
fractionqof the rejected null hypotheses are false positives. Remarkably,
this holds regardless of how many null hypotheses are true, and regardless
of the distribution of the p-values for the null hypotheses that are false.
Therefore, the Benjamini–Hochberg procedure gives us a very easy way to
determine, given a set of mp-values, which null hypotheses to reject in
order to control the FDR at any pre-specified level q.
16However, the proof is well beyond the scope of this book.576 13. Multiple Testing
α=0.05 α=0.1 α=0.3
1 5 50 5001e−051e−031e−01
IndexP−Value
1 5 50 5001e−051e−031e−01
IndexP−Value
1 5 50 5001e−051e−031e−01
IndexP−Value
FIGURE 13.6. Each panel displays the same set of m=2,000orderedp-values
for theFunddata. The green lines indicate the p-value thresholds corresponding
to FWER control, via the Bonferroni procedure, at levels α=0.05(left),α=0.1
(center), andα=0.3(right). The orange lines indicate the p-value thresholds
corresponding to FDR control, via Benjamini–Hochberg, at levels q=0.05(left),
q=0.1(center), andq=0.3(right). When the FDR is controlled at level q=0.1,
146 null hypotheses are rejected (center); the corresponding p-values are shown
in blue. When the FDR is controlled at level q=0.3, 279 null hypotheses are
rejected (right); the corresponding p-values are shown in blue.
There is a fundamental difference between the Bonferroni procedure of
Section13.3.2and the Benjamini–Hochberg procedure. In the Bonferroni
procedure, in order to control the FWER for mnull hypotheses at level
α, we must simply reject null hypotheses for which the p-value is below
α/m. This threshold of α/mdoes not depend on anything about the data
(beyond the value of m), and certainly does not depend on the p-values
themselves. By contrast, the rejection threshold used in the Benjamini–
Hochberg procedure is more complicated: we reject all null hypotheses for
which the p-value is less than or equal to the Lth smallest p-value, where
Lis itself a function of all mp-values, as in ( 13.10). Therefore, when con-
ducting the Benjamini–Hochberg procedure, we cannot plan out in advance
what threshold we will use to reject p-values; we need to first see our data.
For instance, in the abstract, there is no way to know whether we will reject
a null hypothesis corresponding to a p-value of 0.01 when using an FDR
threshold of 0.1withm= 100 ; the answer depends on the values of the
otherm−1p-values. This property of the Benjamini–Hochberg procedure
is shared by the Holm procedure, which also involves a data-dependent
p-value procedures on the Funddata set, using the full set of m=2,000
fund managers, of which the first five were displayed in Table 13.3. When
the FWER is controlled at level 0.3using Bonferroni, only one null hypoth-
esis is rejected; that is, we can conclude only that a single fund manager is
beating the market. This is despite the fact that a substantial portion of13.5 A Re-Sampling Approach top-Values and False Discovery Rates 577them=2,000fund managers appear to have beaten the market withoutperforming correction for multiple testing — for instance, 13 of them havep-values below0.001. By contrast, when the FDR is controlled at level0.3,we can conclude that 279 fund managers are beating the market: we expectthatnomorethanaround279×0.3 = 83.7ofthesefundmanagershadgoodperformance only due to chance. Thus, we see that FDR control is muchmilder — and more powerful — than FWER control, in the sense that itallows us to reject many more null hypotheses, with a cost of substantiallymore false positives.The Benjamini–Hochberg procedure has been around since the approaches for FDR control that can perform better in partic-ular scenarios, the Benjamini–Hochberg procedure remains a very usefuland widely-applicable approach.13.5 A Re-Sampling Approach top-Values andFalse Discovery RatesThus far, the discussion in this chapter has assumed that we are interestedin testing a particular null hypothesisH0using a test statisticT, whichhas some known (or assumed) distribution underH0, such as a normaldistribution, at-distribution, aχ2-distribution, or anF-distribution. Thisis referred to as thetheoretical null distribution. We typically rely upontheoreticalnulldistributionthe availability of a theoretical null distribution in order to obtain ap-value associated with our test statistic. Indeed, for most of the types ofnull hypotheses that we might be interested in testing, a theoretical nulldistribution is available, provided that we are willing to make stringentassumptions about our data.However, if our null hypothesisH0or test statisticTis somewhat un-usual, then it may be the case that no theoretical null distribution is avail-able. Alternatively, even if a theoretical null distribution exists, then wemay be wary of relying upon it, perhaps because some assumption that isrequired for it to hold is violated. For instance, maybe the sample size istoo small.In this section, we present a framework for performing inference in thissetting, which exploits the availability of fast computers in order to approx-imate the null distribution ofT, and thereby to obtain ap-value. While thisframework is very general, it must be carefully instantiated for a specificproblem of interest. Therefore, in what follows, we consider a specific ex-ample in which we wish to test whether the means of two random variablesare equal, using a two-samplet-test.The discussion in this section is more challenging than the precedingsections in this chapter, and can be safely skipped by a reader who iscontent to use the theoretical null distribution to computep-values for hisor her test statistics.578 13. Multiple Testing
13.5.1 A Re-Sampling Approach to the p-Value
WereturntotheexampleofSection 13.1.1,inwhichwewishtotestwhether
the mean of a random variable Xequals the mean of a random variable Y,
i.e.H0: E(X) = E( Y), against the alternative Ha: E(X)/negationslash= E( Y). Given
nXindependent observations from XandnYindependent observations
fromY, the two-sample t-statistic takes the unbiased estimators of the variances in the two groups.
A large (absolute) value of Tprovides evidence against H0.
IfnXandnYare large, then Tin (13.11) approximately follows a N(0,1)
distribution. But if nXandnYare small, then in the absence of a strong
assumption about the distribution of XandY, we do not know the the-
oretical null distribution of T.17In this case, it turns out that we can
approximate the null distribution of Tusing are-sampling approach, orre-samplingmore specifically, a permutation H0holds,sothat E(X)=
E(Y), and we make the stronger assumption that the distributions of X
andYare the same, then the distribution of Tis invariant under swapping
observations of Xwith observations of Y. That is, if we randomly swap
some of the observations in Xwith the observations in Y, thenthe test
statistic Tin(13.11)computed based on this swapped data has the same
distribution as Tbased on the original data. This is true only if H0holds,
and the distributions of XandYare the same.
This suggests that in order to approximate the null distribution of T,
we can take the following approach. We randomly permute the nX+nY
observations Btimes, for some large value of B, and each time we compute
(13.11). We let T∗1,...,T∗Bdenote the values of ( 13.11) on the permuted
data. These can be viewed as an approximation of the null distribution
ofTunderH0. Recall that by definition, a p-value is the probability of
observing a test statistic at least this extreme under H0. Therefore, to
compute a p-value for T, we can simply (13.12)
the fraction of permuted datasets for which the value of the test statistic
is at least as extreme as the value observed on the original data. This
procedure is summarized in Algorithm 13.3.
17If we assume that XandYare normally distributed, then Tin (13.11) follows a
t-distribution with nX+nY−2degrees of freedom under H0. However, in practice, the
distribution of random variables is rarely known, and so it can be preferable to perform
a re-sampling approach instead of making strong and unjustified assumptions. If the
results of the re-sampling approach disagree with the results of assuming a theoretical
null distribution, then the results of the re-sampling approach are more trustworthy.13.5 A Re-Sampling Approach to p-Values and False Discovery Rates 579
Algorithm 13.3 Re-Sampling p-Value for a Two-Sample t-Test
1. Compute T, defined in ( 13.11), on the original data x1,...,x nXand
y1,...,y nY.
2. Forb=1,...,B , whereBis a large number (e.g. B= 10 ,000):
(a) Permute the nX+nYobservations at random. Call the first nX
permuted observations x∗
1,...,x∗
nX, and call the remaining nY
observations y∗
1,...,y∗
nY.
(b) Compute ( 13.11) on the permuted data x∗
1,...,x∗
nXand
y∗
1,...,y∗
nY, and call the result T∗b.
3. Thep-value is given by/summationtextB
b=11(|T∗b|≥|T|)
B.
We try out this procedure on the Khandataset, which consists of expres-
sion measurements for 2,308genes in four sub-types of small round blood
cell tumors, a type of cancer typically seen in children. This dataset is part
of theISLR2package. We restrict our attention to the two sub-types for
which the most observations are available: rhabdomyosarcoma ( nX= 29 )
and Burkitt’s lymphoma ( nY= 25 ).
A two-sample t-test for the null hypothesis that the 11th gene’s mean
expression values are equal in the two groups yields T=−2.09. Using
the theoretical null distribution, which is a t52distribution (since nX+
nY−2 = 52 ), we obtain a p-value of 0.041. (Note that a t52distribution
is virtually indistinguishable from a N(0,1)distribution.) If we instead
apply Algorithm 13.3withB= 10 ,000, then we obtain a p-value of 0.042.
Figure13.7displays the theoretical null distribution, the re-sampling null
distribution, and the actual value of the test statistic ( T=−2.09) for this
gene. In this example, we see very little difference between the p-values
obtained using the theoretical null distribution and the re-sampling null
distribution.
By contrast, Figure 13.8shows an analogous set of results for the 877th
gene. In this case, there is a substantial difference between the theoretical
and re-sampling null distributions, which results in a difference between
theirp-values.
In general, in settings with a smaller sample size or a more skewed data
distribution (so that the theoretical null distribution is less accurate), the
difference between the re-sampling and theoretical p-values will tend to
be more pronounced. In fact, the substantial difference between the re-
sampling and theoretical null distributions in Figure 13.8is due to the
fact that a single observation in the 877th gene is very far from the other
observations, leading to a very skewed distribution.
13.5.2 A Re-Sampling Approach to the False Discovery Rate
Now, suppose that we wish to control the FDR for mnull hypotheses,
H01,...,H 0m, in a setting in which either no theoretical null distribution
is available, or else we simply prefer to avoid the use of a theoretical null580 13. Multiple Testing
Null Distribution of Test Statistic for 11th Gene−4−20240 100 200 300 400T=−2.0936
FIGURE 13.7. The11th gene in the Khandataset has a test statistic of
T=−2.09. Its theoretical and re-sampling null distributions are almost identical.
The theoretical p-value equals 0.041and the re-sampling p-value equals 0.042.
FIGURE 13.8. The877th gene in the Khandataset has a test statistic of
T=−0.57. Its theoretical and re-sampling null distributions are quite different.
The theoretical p-value equals 0.571, and the re-sampling p-value equals 0.673.
distribution.AsinSection 13.5.1,wemakeuseofatwo-sample t-statisticfor
each hypothesis, leading to the test statistics T1,...,T m. We could simply
compute a p-value for each of the mnull hypotheses, as in Section 13.5.1,
and then apply the Benjamini–Hochberg procedure of Section 13.4.2to
thesep-values. However, it turns out that we can do this in a more direct
way, without even needing to compute p-values.
Recall from Section 13.4that the FDR is defined as E(V/R), using the
notation in Table 13.2. In order to estimate the FDR via re-sampling, we
first make the following (13.13)
Now suppose we reject any null hypothesis for which the test statistic
exceedscin absolute value. Then computing Rin the denominator on the
right-hand side of ( 13.13) is straightforward: R=/summationtextm
j=11(|Tj|≥c).Null Distribution of Test Statistic for 877th Gene−4−20240 100 200 300 400T=−0.569613.5 A Re-Sampling Approach to p-Values and False Discovery Rates 581
However, the numerator E(V)on the right-hand side of ( 13.13) is more
challenging. This is the expected number of false positives associated with
rejecting any null hypothesis for which the test statistic exceeds cin abso-
lute value. At the risk of stating the obvious, estimating Vis challenging
because we do not know which of H01,...,H 0mare really true, and so we
do not know which rejected hypotheses are false positives. To overcome this
problem, we take a re-sampling approach, in which we simulate data under
H01,...,H 0m, and then compute the resulting test statistics. The number
of re-sampled test statistics that exceed cprovides an estimate of V.
In greater detail, in the case of a two-sample t-statistic ( 13.11) for each
of the null hypotheses H01,...,H 0m, we can estimate E(V)as follows. the data associated with the jth
null hypothesis, j=1,...,m . We permute these nX+nYobservations at
random, and then compute the t-statistic on the permuted data. For this
permuted data, we know that all of the null hypotheses H01,...,H 0mhold;
therefore,thenumberofpermuted t-statisticsthatexceedthethreshold cin
absolute value provides an estimate for E(V). This estimate can be further
improved by repeating the permutation process Btimes, for a large value
ofB, and averaging the results.
Algorithm 13.4details this procedure.18It provides what is known as a
plug-inestimate oftheFDR,becausetheapproximationin( 13.13)allowsus
to estimate the FDR by plugging Rinto the denominator and an estimate
forE(V)into the numerator.
We apply the re-sampling approach to the FDR from Algorithm 13.4,
as well as the Benjamini–Hochberg approach from Algorithm 13.2using
theoretical p-values, to the m=2,308genes in the Khandataset. Results are
showninFigure estimated FDRs are almost identical for the two methods.
We began this section by noting that in order to control the FDR for m
hypothesis tests using a re-sampling approach, we could simply compute m
re-sampling p-values as in Section 13.5.1, and then apply the Benjamini–
Hochberg procedure of Section 13.4.2to thesep-values. It turns out that if
we define the jth re-sampling p-value , instead of as in ( 13.12), then applying the Benjamini–
Hochberg procedure to these re-sampled p-values is exactlyequivalent to
Algorithm 13.4. Note that ( 13.14) is an alternative to ( 13.12) that pools
the information across all mhypothesis tests in approximating the null
distribution.
13.5.3 When Are Re-Sampling Approaches Useful?
In Sections 13.5.1and13.5.2, we considered testing null hypotheses of the
formH0: E(X) = E( Y)using a two-sample t-statistic ( 13.11), for which we
18To implement Algorithm 13.4efficiently, the same set of permutations in Step 2(b)i.
should be used for all mnull hypotheses.582 13. Multiple Testing
Algorithm 13.4 Plug-In FDR for a Two-Sample T-Test
1. Select a threshold c, wherec>0.
2. Forj=1,...,m :
(a) Compute T(j), the two-sample t-statistic ( 13.11) for the null
hypothesis H0jon the basis of the original data, x(j)
1,...,x(j)
nX
andy(j)
1,...,y(j)
nY.
(b) Forb=1,...,B , whereBis a large number (e.g. B= 10 ,000):
i. Permute the nX+nYobservations at random. Call the first
nXobservations x∗(j)
1,...,x∗(j)
nX, and call the remaining ob-
servations y∗(j)
1,...,y∗(j)
nY.
ii. Compute ( 13.11) on the permuted data x∗(j)
1,...,x∗(j)
nXand
y∗(j)
1,...,y∗(j)
nY, and call the result T(j),∗b.
3. Compute R=/summationtextm
j=11(|T(j)|≥c).
4. Compute The estimated FDR associated with the threshold cis/hatwideV the re-sampling approach gave us substantially different results from
usingthetheoretical p-valueapproachinFigure 13.8,butnotinFigure 13.7.
In general, there are two settings in which a re-sampling approach is
particularly useful:
1. Perhaps no theoretical null distribution is available. This may be the
case if you are testing an unusual null hypothesis H0, or using an
unsual test statistic T.
2. Perhaps a theoretical null distribution isavailable, but the assump-
tions required for its validity do not hold. For instance, the two-
samplet-statistic in ( 13.11) follows a tnX+nY−2distribution only if
the observations are normally distributed. Furthermore, it follows a
N(0,1)distribution only if nXandnYare quite large. If the data are
non-normal and nXandnYare small, then p-values that make use
of the theoretical null distribution will not be valid (i.e. they will not
properly control the Type I error).
In general, if you can come up with a way to re-sample or permute
your observations in order to generate data that follow the null distribu-
tion, then you can compute p-values or estimate the FDR using variants
of Algorithms 13.3and13.4. In many real-world settings, this provides or when the key assumptions underlying those out-of-box tests
are violated.13.6 Lab: Multiple Testing 583
0500 1000 1500 20000.0 0.2 0.4 0.6 0.8 1.0Number of RejectionsFalse Discovery RateFIGURE 13.9. Forj=1,...,m =2,308, we tested the null hypothesis that for
thejth gene in the Khandataset, the meanexpression in Burkitt’s lymphoma kfrom1to2,308,the
y-axis displays the estimated FDR associated with rejecting the null hypotheses
corresponding to the ksmallest p-values. The orange dashed curve shows the
FDR obtained using the Benjamini–Hochberg procedure, whereas the blue solid
curve shows the FDR obtained using the re-sampling approach of Algorithm 13.4,
withB= 10 ,000. There is very little difference between the two FDR estimates.
According to either estimate, rejecting the null hypothesis for the 500 genes with
the smallest p-values corresponds to an FDR of around 17.7%.
13.6 Lab: Multiple Testing
We include our usual imports seen in earlier labs.
In[1]: import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from ISLP import load_data
We also collect the new imports needed for this lab.
In[2]: from scipy.stats import \
(ttest_1samp,
ttest_rel,
ttest_ind,
ta st _ d b n )
from statsmodels.stats.multicomp import \
pairwise_tukeyhsd
from statsmodels.stats.multitest import \
multipletests as mult_test
13.6.1 Review of Hypothesis Tests
We begin by performing some one-sample t-tests. First we create 100 vari-
ables, each consisting of 10 observations. The first 50 variables have mean
0.5and variance 1, while the others have mean 0and variance 1.
In[3]: rng = np.random.default_rng(12)
X=r n g . s t a n d a r d _ n o r m a l ( ( 1 0 ,1 0 0 ) )
true_mean = np.array([0.5]*50 + [0]*50)
X+ =t r u e _ m e a n [ N o n e , : ]584 13. Multiple Testing
To begin, we use ttest_1samp() from the scipy.stats module to test H0:ttest_1samp()µ1=0, the null hypothesis that the first variable has mean zero.
In[4]: result = ttest_1samp(X[:,0], 0)
result.pvalue
Out[4]: 0.931
Thep-value comes out to 0.931, which is not low enough to reject the null
hypothesis at level α=0.05. In this case, µ1=0.5, so the null hypothesis
is false. Therefore, we have made a Type II error by failing to reject the
null hypothesis when the null hypothesis is false.
We now test H0,j:µj=0forj=1,...,100. We compute the 100 p-
values, and then construct a vector recording whether the jthp-value is
less than or equal to 0.05, in which case we reject H0j, or greater than 0.05,
in which case we do not reject H0j, forj=1,...,100.
In[5]: p_values = np.empty(100)
for i in range(100):
p_values[i] = ttest_1samp(X[:,i], 0).pvalue
decision = pd.cut(p_values,
[0, 0.05, 1],
labels=[ 'Reject H0' ,
'Do not reject H0' ])
truth = pd.Categorical(true_mean == 0,
categories=[True, False],
ordered=True)
Since this is a simulated data set, we can create a 2×2table similar to
Table13.2.
In[6]: pd.crosstab(decision,
truth,
rownames=[ 'Decision' ],
colnames=[ 'H0'])
Out[6]: H0 True False
Decision
Reject H0 5 15
Do not reject H0 45 35
Therefore, at level α=0.05, we reject 15 of the 50 false null hypotheses,
and we incorrectly reject 5 of the true null hypotheses. Using the notation
from Section 13.3, we have V=5,S= 15,U= 45andW= 35. We have
setα=0.05, which means that we expect to reject around 5% of the true
null hypotheses. This is in line with the 2×2table above, which indicates
that we rejected V=5of the50true null hypotheses.
In the simulation above, for the false null hypotheses, the ratio of the
mean to the standard deviation was only 0.5/1=0.5. This amounts to
quite a weak signal, and it resulted in a high number of Type II errors.
Let’s instead simulate data with a stronger signal, so that the ratio of the
mean to the standard deviation for the false null hypotheses equals 1.W e
make only 10 Type II errors.13.6 Lab: Multiple Testing 585
In[7]: true_mean = np.array([1]*50 + [0]*50)
X=r n g . s t a n d a r d _ n o r m a l ( ( 1 0 ,1 0 0 ) )
X+ =t r u e _ m e a n [ N o n e , : ]
for i in range(100):
p_values[i] = ttest_1samp(X[:,i], 0).pvalue
decision = pd.cut(p_values,
[0, 0.05, 1],
labels=[ 'Reject H0' ,
'Do not reject H0' ])
truth = pd.Categorical(true_mean == 0,
categories=[True, 'Decision' ],
colnames=[ 'H0'])
Out[7]: H0 True False
Decision
Reject H0 2 40
Do not reject H0 48 10
13.6.2 Family-Wise Error Rate
Recall from ( 13.5) that if the null hypothesis is true for each of minde-
pendent hypothesis tests, then the FWER is equal to 1−(1−α)m.W e
can use this expression to compute the FWER for m=1,...,500and
α=0.05,0.01, and0.001. We plot the FWER for these values of αin order
to reproduce Figure 13.2.
In[8]: m=n p . l i n s p a c e ( 1 ,5 0 1 )
fig, ax = plt.subplots()
[ax.plot(m,
1-( 1-a l p h a ) * * m ,
label=r'$\alpha=%s$' %s t r ( a l p h a ) )
for alpha in [0.05, 0.01, 0.001]]
ax.set_xscale( 'log')
ax.set_xlabel( 'Number of Hypotheses' )
ax.set_ylabel( 'Family-Wise Error Rate' )
ax.legend()
ax.axhline(0.05, c= 'k',l s ='--');
As discussed previously, even for moderate values of msuch as50, the
FWER exceeds 0.05unlessαis set to a very low value, such as 0.001. Of
course, the problem with setting αto such a low value is that we are likely
to make a number of Type II errors: in other words, our power is very low.
We now conduct a one-sample t-test for each of the first five managers
in theFunddataset, in order to test the null hypothesis that the jth fund
manager’s mean return equals zero, H0,j:µj=0.
In[9]: Fund = load_data( 'Fund')
fund_mini = Fund.iloc[:,:5]
fund_mini_pvals = np.empty(5)
for i in range(5):586 13. Multiple Testingfund_mini_pvals[i] = ttest_1samp(fund_mini.iloc[:,i], 0).pvaluefund_mini_pvalsOut[9]:array([0.006, 0.918, 0.012, 0.601, 0.756])Thep-values are low for Managers One and Three, and high for the otherthree managers. However, we cannot simply rejectH0,1andH0,3, sincethis would fail to account for the multiple testing that we have FWER.To do this, we use themultipletests()function from thestatsmodelsmultiple-tests()module (abbreviated tomult_test()). Given thep-values, for methods likeHolm and Bonferroni the function outputsadjustedp-values, which can beadjustedp-valuesthought of as a new set ofp-values that have been corrected for multipletesting. If the adjustedp-value for a given hypothesis is less than or equaltoα, then that hypothesis can be rejected while maintaining a FWER ofno more thanα. In other words, for such methods, the adjustedp-valuesresulting from themultipletests()function can simply be compared tothe desired FWER in order to determine whether or not to reject eachhypothesis. We will later see that we can use the same function to controlFDR as well.Themult_test()function takesp-values and amethodargument, as wellas an optionalalphaargument. It returns the decisions (rejectbelow) aswell as the adjustedp-values (bonf).In[10]:reject, bonf = mult_test(fund_mini_pvals, method ="bonferroni")[:2]rejectOut[10]:array([ True, False, False, False, False])Thep-valuesbonfare simply thefund_mini_pvaluesmultiplied by 5 andtruncated to be less than or equal to 1.In[11]:bonf, np.minimum(fund_mini_pvals * 5, 1)Out[11]:(array([0.03, 1. , 0.06, 1. , 1. ]),array([0.03, 1. , 0.06, 1. , 1. ]))Therefore, using Bonferroni’s method, we are able to reject the null hy-pothesis only for Manager One while controlling FWER at0.05.By contrast, using Holm’s method, the adjustedp-values indicate thatwe can reject the null hypotheses for Managers One and Three at a FWERof0.05.In[12]:mult_test(fund_mini_pvals, method ="holm",a l p h a = 0 . 0 5 ) [ : 2 ]Out[12]:(array([ True, False, True, False, False]),array([0.03, 1. , 0.05, 1. , 1. Manager Two has poor performance.13.6 Lab: Multiple Testing 587
In[13]: fund_mini.mean()
Out[13]: Manager1 3.0
Manager2 -0.1
Manager3 2.8
Manager4 0.5
Manager5 0.3
dtype: managers? We can check this by performing a pairedt-testusing thepairedt-testttest_rel() function from scipy.stats :ttest_rel()
In[14]: ttest_rel(fund_mini[ 'Manager1' ],
fund_mini[ 'Manager2' ]).pvalue
Out[14]: 0.038
The test results in a p-value of 0.038, suggesting a statistically significant
difference.
However, we decided to perform this test only after examining the data
and noting that Managers One and Two had the highest and lowest mean
performances. In a sense, this means that we have implicitly performed/parenleftbig5
2/parenrightbig
= 5(5−1)/2 = 10hypothesis tests, rather than just one, as discussed
in Section 13.3.2. Hence, we use the pairwise_tukeyhsd() function to apply Tukey’s method in order to adjust
for multiple testing. This function takes as input a fitted ANOVA regres-ANOVAsion model, which is essentially just a linear regression in which all of the
predictors are qualitative. In this case, the response consists of the monthly
excess returns achieved by each manager, and the predictor indicates the
manager to which each return corresponds.
In[15]: returns = np.hstack([fund_mini.iloc[:,i] for i in range(5)])
managers = np.hstack([[i+1]*50 for i in range(5)])
tukey = pairwise_tukeyhsd(returns, managers)
print(tukey.summary())
Multiple Comparison of Means - Tukey HSD, group2 meandiff p-adj lower upper - 3 . 1 0 . 1 8 6 2 - 6 . 9 8 6 5 0 . 7 8 6 5 F a l s e
13 - 0 . 2 0 . 9 9 9 9 - 4 . 0 8 6 5 3 . 6 8 6 5 F a l s e
14 - 2 . 5 0 . 3 9 4 8 - 6 . 3 8 6 5 1 . 3 8 6 5 F a l s e
15 - 2 . 7 0 . 3 1 5 2 - 6 . 5 8 6 5 1 . 1 8 6 5 F a l s e
2 3 2.9 0.2453 -0.9865 6.7865 False
240 . 6 0 . 9 9 3 2 - 3 . 2 8 6 5 4 . 4 8 6 5 F a l s e
250 . 4 0 . 9 9 8 6 - 3 . 4 8 6 5 4 . 2 8 6 5 F a l s e
34 - 2 . 3 0 . 4 8 2 - 6 . 1 8 6 5 1 . 5 8 6 5 F a l s e
35 - 2 . 5 0 . 3 9 4 8 - 6 . 3 8 6 5 1 . 3 8 6 5 F a l s e
45 - 0 . 2 0 . 9 9 9 9 - 4 . 0 8 6 5 3 . 6 8 6 5 F a l s function provides confidence intervals for the
difference between each pair of managers ( lowerandupper), as well as a588 13. Multiple Testing
FIGURE 13.10. 95% confidence intervals for each manager on the Funddata,
using Tukey’s method to adjust for multiple testing. All of the confidence intervals
overlap, so none of the differences among managers are statistically significant
when controlling FWER at level 0.05.
p-value. All of these quantities have been adjusted for multiple testing.
Notice that the p-value for the difference between Managers One and Two
has increased from 0.038to0.186, so there is no longer clear evidence of
a difference between the managers’ performances. We can plot the confi-
dence intervals for the pairwise comparisons using the plot_simultaneous()
method of tukey. Any pair of intervals that don’t overlap indicates a sig-
nificant difference at the nominal level of 0.05. In this case, no differences
are considered significant as reported in the table above.
In[16]: fig, ax = result can be seen19in Figure 13.10.
13.6.3 False Discovery Rate
Now we perform hypothesis tests for all 2,000 fund managers in the Fund
dataset. We perform a one-sample t-test ofH0,j:µj=0, which states that
thejth fund manager’s mean return is zero.
In[17]: fund_pvalues = np.empty(2000)
for i, manager in enumerate(Fund.columns):
fund_pvalues[i] = ttest_1samp(Fund[manager], 0).pvalue
There are far too many managers to consider trying to control the
FWER. Instead, we focus on controlling the FDR: that is, the expected
fraction of rejected null hypotheses that are actually false positives. The
19Traditionally this plot shows intervals for each paired difference. With many groups
it is more convenient and equivalent to display one interval per group, as is done here.
By “differencing” all pairs of intervals displayed here you recover the traditional plot.13.6 Lab: Multiple Testing 589
multipletests() function (abbreviated mult_test() ) can be used to carry
out the Benjamini–Hochberg procedure.
In[18]: fund_qvalues = mult_test(fund_pvalues, method = "fdr_bh" )[1]
fund_qvalues[:10]
Out[18]: array([0.09, 0.99, 0.12, 0.92, 0.96, 0.08, 0.08, 0.08, 0.08,
0.08])
Theq-values output by the Benjamini–Hochberg procedure can be inter-q-valuespreted as the smallest FDR threshold at which we would reject a particular
null hypothesis. For instance, a q-value of 0.1indicates that we can reject
the corresponding null hypothesis at an FDR of 10% or greater, but that
we cannot reject the null hypothesis at an FDR below 10%.
If we control the FDR at 10%, then for how many of the fund managers
can we reject H0,j:µj=0?
In[19]: (fund_qvalues <= 0.1).sum()
Out[19]: 146
We find that 146 of the 2,000 fund managers have a q-value below 0.1;
therefore, we are able to conclude that 146 of the fund managers beat the
market at an FDR of 10%. Only about 15 (10% of 146) of these fund
managers are likely to be false discoveries.
By contrast, if we had instead used Bonferroni’s method to control the
FWER at level α=0.1, then we would have failed to reject any null
hypotheses!
In[20]: (fund_pvalues <= 0.1 / 2000).sum()
Out[20]: 0
Figure13.6displays the ordered p-values,p(1)≤p(2)≤···≤p(2000), for
theFunddataset, as well as the threshold for rejection by the Benjamini–
Hochberg procedure. Recall that the Benjamini–Hochberg procedure iden-
tifies the largest p-value such that p(j)< qj/m, and rejects all hypotheses
for which the p-value is less than or equal to p(j). In the code below, we im-
plement the Benjamini–Hochberg procedure ourselves, in order to illustrate
how it works. We first order the p-values. We then identify all p-values that
satisfyp(j)< qj/m (sorted_set_ ). Finally, selected_ is a boolean array
indicating which p-values are less than or equal to the largest p-value in
sorted_[sorted_set_] . Therefore, selected_ indexes the p-values rejected
by the Benjamini–Hochberg procedure.
In[21]: sorted_ = np.sort(fund_pvalues)
m=f u n d _ p v a l u e s . s h a p e [ 0 ]
q=0 . 1
sorted_set_ = np.where(sorted_ < q * np.linspace(1, m, m) / m)[0]
if sorted_set_.shape[0] > 0:
selected_ = fund_pvalues < sorted_[sorted_set_].max()
sorted_set_ = np.arange(sorted_set_.max())
else:
selected_ = []
sorted_set_ = []590 13. Multiple Testing
We now reproduce the middle panel of Figure 13.6.
In[22]: fig, ax = plt.subplots()
ax.scatter(np.arange(0, sorted_.shape[0]) + 1,
sorted_, s=10)
ax.set_yscale( 'log')
ax.set_xscale( 'log')
ax.set_ylabel( 'P-Value' )
ax.set_xlabel( 'Index' )
ax.scatter(sorted_set_+1, sorted_[sorted_set_], c= 'r',s = 2 0 )
ax.axline((0, 0), (1,q/m), c= 'k',l s ='--',l i n e w i d t h = 3 ) ;
13.6.4 A Re-Sampling Approach
Here, we implement the re-sampling approach to hypothesis testing using
theKhandataset, which we investigated in Section 13.5. First, we merge
the training and testing data, which results in observations on 83 patients
for 2,308 genes.
In[23]: Khan = load_data( 'Khan')
D=p d . c o n c a t ( [ K h a n [ 'xtrain' ], Khan[ 'xtest' ]])
D['Y']=p d . c o n c a t ( [ K h a n [ 'ytrain' ], Khan[ 'ytest' ]])
D['Y'].value_counts()
Out[23]: 22 9
42 5
31 8
11 1
Name: Y, dtype: int64
There are four classes of cancer. For each gene, we compare the mean ex-
pression in the second class (rhabdomyosarcoma) to the mean expression in
the fourth class (Burkitt’s lymphoma). Performing a standard two-sample
t-test using ttest_ind() fromscipy.stats on the11th gene produces attest_ind()test-statistic of -2.09 and an associated p-value of 0.0412, suggesting D2 = D[lambda df:df[ 'Y']= =2 ]
D4 = D[lambda df:df[ 'Y']= =4 ]
gene_11 = 'G0011'
observedT, pvalue = pvalue
Out[24]: (-2.094, 0.041)
However, this p-value relies on the assumption that under the null hy-
pothesis of no difference between the two groups, the test statistic follows
at-distribution with 29 + 25−2 = 52degrees of freedom. Instead of us-
ing this theoretical null distribution, we can randomly split the 54 patients
into two groups of 29 and 25, and compute a new test statistic. Under the
null hypothesis of no difference between the groups, this new test statis-
tic should have the same distribution as our original one. Repeating this13.6 Lab: Multiple Testing 591
process 10,000 times allows us to approximate the null distribution of the
test statistic. We compute the fraction of the time that our observed test
statistic exceeds the test statistics obtained via re-sampling.
In[25]: B=1 0 0 0 0
Tnull = np.empty(B)
D_ = np.hstack([D2[gene_11], D4[gene_11]])
n_ = D2[gene_11].shape[0]
D_null = D_.copy()
for b in range(B):
rng.shuffle(D_null)
ttest_ = = ttest_.statistic
(np.abs(Tnull) > np.abs(observedT)).mean()
Out[25]: p-value.Itisalmostidenti-
cal to the p-value of 0.0412 obtained using the theoretical null distribution.
We can plot a histogram of the re-sampling-based test statistics in order
to reproduce Figure 13.7.
In[26]: fig, ax = 'y',
label='Null')
xval = np.linspace(-4.2, 4.2, 1001)
ax.plot(xval,
t_dbn.pdf(xval, )
ax.legend()
ax.set_xlabel( "Null Distribution of Test Statistic" );
The re-sampling-based null distribution is almost identical to the theoret-
ical null distribution, which is displayed in red.
Finally, we implement the plug-in re-sampling FDR approach outlined
in Algorithm 13.4. Depending on the speed of your computer, calculating
the FDR for all 2,308 genes in the Khandataset may take a while. Hence,
we will illustrate the approach on a random subset of 100 genes. For each
gene, we first compute the observed test statistic, and then produce 10,000
re-sampled test statistics. This may take a few minutes to run. If you are
in a rush, then you could set Bequal to a smaller value (e.g. B=500).
In[27]: m, B = 100, 10000
idx = rng.choice(Khan[ 'xtest' ].columns, m, replace=False)
T_vals = np.empty(m)
Tnull_vals = np.empty((m, B))
for j in range(m):
col = idx[j]592 13. Multiple Testing
T_vals[j] = = np.hstack([D2[col], D4[col]])
D_null = D_.copy()
for b in range(B):
rng.shuffle(D_null)
ttest_ = = ttest_.statistic
Next, we compute the number of rejected null hypotheses R, the esti-
mated number of false positives /hatwideV, and the estimated FDR, for a range
of threshold values cin Algorithm 13.4. The threshold values are chosen
using the absolute values of the test statistics from the 100 genes.
In[28]: cutoffs = np.sort(np.abs(T_vals))
FDRs, Rs, Vs = np.empty((3, m))
for j in range(m):
R=n p . s u m ( n p . a b s ( T _ v a l s )> =c u t o f f s [ j ] )
V=n p . s u m ( n p . a b s ( T n u l l _ v a l s )> =c u t o f f s [ j ] )/B
Rs[j] = R
Vs[j] = V
FDRs[j] = V / R
Now, for any given FDR, we can find the genes that will be rejected.
For example, with FDR controlled at 0.1, we reject 15 of the 100 null
hypotheses. On average, we would expect about one or two of these genes
(i.e. 10% of 15) to be false discoveries. At an FDR of 0.2, we can reject
the null hypothesis for 28 genes, of which we expect around six to be false
discoveries.
The variable idxstores which genes were included in our 100 randomly-
selected genes. Let’s look at the genes whose estimated FDR is less than
0.1.
In[29]: sorted(idx[np.abs(T_vals) >= cutoffs[FDRs < higher expected proportion of false discoveries.
In[30]: sorted(idx[np.abs(T_vals) >= cutoffs[FDRs < 0.2].min()])
The next line generates Figure 13.11, which is similar to Figure 13.9,
except that it is based on only a subset of the genes.
In[31]: fig, ax = plt.subplots()
ax.plot(Rs, FDRs, 'b',l i n e w i d t h = 3 )
ax.set_xlabel( "Number of Rejections" )
ax.set_ylabel( "False Discovery Rate" );13.7 Exercises 593
FIGURE 13.11.The estimated false discovery rate versus the number of rejectednull hypotheses, for 100 genes randomly selected from theKhandataset.13.7 ExercisesConceptual1. Suppose we testmnull hypotheses, all of which are true. We controlthe Type I error for each null hypothesis at levelα. For each sub-problem, justify your answer.(a) In total, how many Type I errors do we expect to make?(b) Suppose that themtests that we perform are If two eventsAandBare independent, thenPr(A∩B)=Pr(A) Pr(B).(c) Suppose thatm=2, and that thep-values for the two tests arepositively correlated, so that if one is small then the other willtend to be small as well, and if one is large then the other willtend to be large. How does the family-wise error rate associatedwith thesem=2tests qualitatively compare to the answer in(b) withm=2?Hint: First, suppose that the twop-values are perfectly correlated.(d) Suppose again thatm=2, but that now thep-values for thetwo tests are negatively correlated, so that if one is large thenthe other will tend to be small. How does the family-wise errorrate associated with thesem=2tests qualitatively compare tothe answer in (b) withm=2?Hint: First, suppose that whenever onep-value is less thanα,then the other will be greater thanα. In other words, we cannever reject both null hypotheses.594 13. Multiple Testing
2. Suppose that we test mhypotheses, and control the Type I error for
each hypothesis at level α. Assume that all mp-values are indepen-
dent, and that all null hypotheses are true.
(a) Let the random variable Ajequal1if thejth null hypothesis is
rejected, and 0otherwise. What is the distribution of Aj?
(b) What is the distribution of/summationtextm
j=1Aj?
(c) What is the standard deviation of the number of Type I errors
that we will make?
3. Suppose we test mnull hypotheses, and control the Type I error for
thejth null hypothesis at level αj, forj=1,...,m . Argue that the
family-wise error rate is no greater than/summationtextm
j=1αj.
Null Hypothesis p-value
H01 0.0011
H02 0.031
H03 0.017
H04 0.32
H05 0.11
H06 0.90
H07 0.07
H08 0.006
H09 0.004
H10 0.0009
TABLE 13.4. p-values for Exercise 4.
4. Suppose we test m= 10 hypotheses, and obtain the p-values shown
in Table 13.4.
(a) Suppose that we wish to control the Type I error for each null
hypothesis at level α=0.05. Which null hypotheses will we
reject?
(b) Now suppose that we wish to control the FWER at level α=
0.05. Which null hypotheses will we reject? Justify your answer.
(c) Now suppose that we wish to control the FDR at level q=0.05.
Which null hypotheses will we reject? Justify your answer.
(d) Now suppose that we wish to control the FDR at level q=0.2.
Which null hypotheses will we reject? Justify your answer.
(e) Of the null hypotheses rejected at FDR level q=0.2, approxi-
mately how many are false positives? Justify your answer.
5. For this problem, you will make up p-values that lead to a certain
number of rejections using the Bonferroni and Holm procedures.
(a) Give an example of five p-values(i.e. five numbers between 0and
1which, for the purpose of this problem, we will interpret as p-
values) for which both Bonferroni’s method and Holm’s method13.7 Exercises 595
reject exactly one null hypothesis when controlling the FWER
at level0.1.
(b) Now give an example of five p-values for which Bonferroni re-
jects one null hypothesis and Holm rejects more than one null
hypothesis at level 0.1.
6. For each of the three panels in Figure 13.3, answer the following
questions:
(a) How many false positives, false negatives, true positives, true
negatives, Type I errors, and Type II errors result from applying
the Bonferroni procedure to control the FWER at level α=
0.05?
(b) How many false positives, false negatives, true positives, true
negatives, Type I errors, and Type II errors result from applying
the Holm procedure to control the FWER at level α=0.05?
(c) What is the false discovery proportion associated with using the
Bonferroni procedure to control the FWER at level α=0.05?
(d) What is the false discovery proportion associated with using the
Holm procedure to control the FWER at level α=0.05?
(e) How would the answers to (a) and (c) change if we instead used
the Bonferroni procedure to control the FWER at level α=
0.001?
Applied
7. This problem makes use of the Carseats dataset in the ISLPpackage.
(a) For each quantitative variable in the dataset besides Sales, fit
a linear model to predict Salesusing that quantitative variable.
Report the p-values associated with the coefficients for the vari-
ables. That is, for each model of the form Y=β0+β1X+/epsilon1,
report the p-value associated with the coefficient β1. Here,Y
represents SalesandXrepresents one of the other quantitative
variables.
(b) Suppose we control the Type I error at level α=0.05for the
p-values obtained in (a). Which null hypotheses do we reject?
(c) NowsupposewecontroltheFWERatlevel 0.05forthep-values.
Which null hypotheses do we reject?
(d) Finally, suppose we control the FDR at level 0.2for thep-values.
Which null hypotheses do we reject?
8. In this problem, we will simulate data from m= 100 fund managers.
rng = np.random.default_rng(1)
n, m = 20, 100
X=r n g . n o r m a l ( s i z e = ( n ,m ) )596 13. Multiple 20months. We wish to test the null hypothesis that eachfund manager’s percentage returns have population mean equal tozero. Notice that we simulated the data in such a way that each fundmanager’s percentage returns do have population mean zero; in otherwords, allmnull hypotheses are true.(a) Conduct a one-samplet-test for each fund manager, and plot ahistogram of thep-values obtained.(b) If we control Type I error for each null hypothesis at levelα=0.05, then how many null hypotheses do we reject?(c) If we control the FWER at level0.05, then how many null hy-potheses do we reject?(d) If we control the FDR at level0.05, then how many null hy-potheses do we reject?(e) Now suppose we “cherry-pick” the10fund managers who per-form the best in our data. If we control the FWER for just these10 fund managers at level0.05, then how many null hypothe-ses do we reject? If we control the FDR for just these 10 fundmanagers at level0.05, then how many null hypotheses do wereject?(f) Explain why the analysis in (e) is misleading.Hint: The standard approaches for controlling the FWER andFDR assume thatalltested null hypotheses are adjusted for mul-tiplicity, and that no “cherry-picking” of the smallestp-valueshas occurred. What goes wrong if we cherry-pick?Index
accuracy, 415
activation, 400
activation function, 401
additive, 11,94–98,110–111
additivity, 305,306
adjusted R2,87,231,232,236–
238
Advertising data set, clustering, 525
Akaike information criterion, 87,
231,232,236–238
alternative hypothesis, 76,559
analysis of variance, 312
ANOVA, 587
area under the curve, 155,486–
487
argument, 40
array,42
attribute, 42
AUC,155
Autodataset, 421
autoregression, 423
axes,48
backfitting, 307,328backpropagation, 429
backward stepwise selection, 87,
234–235
bag-of-n-grams,415
bag-of-words, 414
bagging, 93,145,161
basis function, 293–294,296
Bayes
classifier, 35–37,147
decision boundary, 148
error,35–37
Bayes’ theorem, 146,250
Bayesian, 575–
577
Bernoulli distribution, 172
best subset selection, 32
© Springer Nature Switzerland AG 2023 
G. James et al., An Introduction to Statistical Learning , Springer Texts in Statistics, 
https://doi.org/10.1007/978-3-031-38747-0 597598 Index
trade-off, 425
Bikeshare data set, method, 575–577,585
Boolean, 53,176
boosting, 11,24,331,343,347–
350,354,361–362
bootstrap, 11,201,212–214,343
Bostondata set, clustering, 525
boxplot, 62
BrainCancer data set, 12,472–
474,476,482
branch,333
burn-in, 352
C-index, 487
Caravan data set, 12,184,366
Carseats data set, 12,126,130,
364
categorical, 2,27
censored data, 469–502
censoring
independent, 471
interval, 471
left,471
mechanism, 471
non-informative, 471
right,471
time,470
chain rule, 429
channel, 407
CIFAR100 data set, 406,409–411,
448,449
classification, 2,11,27,34–39,135–
199,367–382
error rate, 338
tree,337–341,355–358
classifier, 135
cluster analysis, 25–26
clustering, 4,25–26,520–535
agglomerative, 525bottom-up, 525
hierarchical, 475
coefficient, 71
College dataset, 12,65,286,328
collinearity, 106–110
concatenation, 41
conditional probability, 35
confidenceinterval, 75–76,90,110,
292
confounding, 144
confusion matrix, 153,176
continuous, 2
contour, 246
contour plot, 50
contrast, 94
convenience function, 53
convolution filter, 407
convolution layer, 407
convolutionalneuralnetwork, 406–
413
correlation, 79,82–83,530
count data, set, 12,91,92,94,
97,98,106–109
cross-entropy, 405
cross-validation, 204–206
curse of dimensionality, 115,193,
266
data augmentation, 411
data frame, 55
Data sets
Advertising ,12,167–172Index ,12,126,130,364
CIFAR100 ,12
Publication type, 42
decision function, 387
decision tree, 11,331–342
deep learning, 399Default dataset, of freedom, 30,266,295,
296,301
dendrogram, 521,525–530
density function, 146
dependent variable, 15
derivative, 296,300
detector layer, 410
deviance, 232
dictionary, 66
dimensionreduction, 230,253–262
discriminant function, 149
discriminant method, 146–161
dissimilarity, 530–532
distance
correlation-based, 530–532,554
Euclidean, 509,522,523,529–
532
double descent, 431–435
double-exponentialdistribution, 251
dropout, 406,431
dummy variable, 91–94,138,142,
292
early stopping, 430
effective degrees of freedom, 301
eigen decomposition, 506,516
elbow,548
embedding, 418
embedding layer, 419
ensemble, 343–354
entropy, 337–339,363
epochs,430
error
irreducible, 17,30
rate,34
reducible, 17
term,16
Euclideandistance, 509,522,523,
529–532,554
event time, 470
exception, 45
expected value, 18
exploratory data analysis, 504
exponential, 173
exponential family, 173
F-statistic, 84600 Index
factor,92
factorial, 170
failure time, 470
false
discoveryproportion, 155,573
discovery rate, 558,573–577,
579–582
negative, 155,562
positive, 155,562,563
positive rate, 155,156,382
family-wiseerrorrate, 565–573,577
feature,15
feature map, 406
feature selection, 230
featurize, 414
feed-forward neural network, 400
figure,48
fit,21
fitted value, 101
flattening, 424
flexible,21
floating point, 43
forwardstepwiseselection, 86,87,
233–234,268
function, 40
Funddata set, 12,567–570,572,
575,576,585,588,589
Gamma, 173
Gaussian(normal)distribution, 146,
147,150,172,561
generalized additive model, 5,24,
162,289,290,305–309,
319
generalized linear model, 5,135,
167–174,217
generative model, 146–161
Giniindex, 337–339,345,346,363
global minimum, 427
gradient, 428
gradient descent, 427
Harrell’s concordance index, 487
hazard function, 476–478
baseline, 478
hazard rate, 476
Heartdataset, 339,340,344–347,
352,353,382,383
heatmap, 50
helper,311heteroscedasticity, 103,168
hidden layer, 400
hidden units, 400
hierarchical clustering, 525–530
dendrogram, 525–528
inversion, 529
linkage,529–530
hierarchical principle, 96
high-dimensional, 86,234,263
hinge loss, 385
Hitters data set, set, 202
Holm’s method, 568,576,585
hypergeometric distribution, 501
hyperparameter, 187
hyperplane, 367–372
hypothesis test, 76–77,84,103,
558–583
IMDbdata set, 413,415,416,418,
420,437,458,467
imputation, 515
Incomedata set, 16–18,21–23
increment, 60
independent variable, 15
indexable, 186
indicator function, 292
inference, 17,18
inner product, 379,380
input layer, 400
input variable, 15
integral, 301
interaction, 70,89,95–98,110–
111,308
intercept, 71,72
interpolate, 432
interpretability, 229
inversion, 529
irreducible error, 17,36,90,110
iterator, 312
joint distribution, 158
K-means clustering, 11,521–524
K-nearestneighbors, 135,164–167
classifier, 11,36–37
regression, 111–115Index 601
Kaplan–Meiersurvivalcurve, 377–382
polynomial, 380,382
radial,381–383,390
kernel density estimator, 159
keyword, 46
Khandata set, distribution, rate, 429
least squares, 5,21,71–72,140,
141,229
line,73
weighted, 103
level,92
leverage, 104–106
likelihood function, 141
linear,2,69–115
linear combination, 128,230,253,
505
lineardiscriminantanalysis, 5,11,
135,138,147–155,164–
167,377,382
linear kernel, 380
linear model, 20,69–115
linear regression, 5,11,69–115,
172–173
multiple, 80–90
simple,70–80
link function, 172,173
linkage,529–530,548
average, 529–530
centroid, 529–530
complete, 526,529–530
single,529–530
list,41
list comprehension, 123
local minimum, 427local regression, 290
log odds, 145
log-rank test, 474–476,483
logistic function, 139
logistic regression, 145,163
multiple, 142–144
logit,140
loss function, 300,385
low-dimensional, 262
LSTM RNN, 420
main effects, 96
majority vote, 344
Mallow’s Cp,87,231,232,236–
238
Mantel–Haenszel test, 475
margin,370,385
marginal distribution, 158
Markov chain Monte Carlo, 353
matrix completion, 515
matrix multiplication, 10
maximal margin
classifier, 367–372
hyperplane, 370
maximumlikelihood, 139–141,143,
170
mean squared error, 28
mesh,53
method, 43
minibatch, 429
misclassification error, 35
missing at random, 515
missing data, 56,515–520
mixed selection, 87
MNISTdataset, 402–404,406,430,
431,441,444,445,448
model assessment, 201
model selection, 201
module, 42
multicollinearity, 108,266
multinomiallogisticregression, 145,
163
multiple testing, 557–583
multi-task learning, 403
multivariate Gaussian, 150602 Index
multivariate normal, 150
naive Bayes, 135,158–161,164–
167
namespace, 116
natural spline, 297,298,301,317
NCI60data set, 4,5,12,546,548–
550
negative binomial, 173
negativepredictivevalue, 155,156
neural network, 5,399
node
internal, 333
purity,337–339
terminal, 333
noise,21,252
non-linear, 2,11,289–329
decision boundary, 377–382
kernel,377–382
non-parametric, 146,
147,150,172,476,561
notebook, 40
null,152
distribution, 561,578
hypothesis, 76,559
model,87,231,245
null rate, 186
NYSEdata set, 12,422–424,466,
467
Occam’s razor, 426
odds,140,145,195
OJdata set, 12,365,398
one-hot encoding, 92,126,403
one-standard-error rule, 240
one-versus-all, 384
one-versus-one, 384
one-versus-rest, 384
optimalseparatinghyperplane, 370
optimism of training error, 30
ordered categorical variable, 315
orthogonal, 257,506
basis,125
out-of-bag, 345
outlier,103–104
output variable, 15
over-parametrized, 465
overdispersion, 172overfitting, 586
package, 42
parameter, 71
parametric, 20–22,111–115
partialleastsquares, 254,260–262,
282
partial likelihood, 480
path algorithm, 249
permutation, 578
permutation approach, 577–582
perpendicular, 257
Poisson distribution, 169,172
Poisson regression, 98–99,289–292,294–
295
pooling, 410
population regression line, 73
Portfolio data set, 12
positivepredictivevalue, 155,156
posterior
distribution, 251
mode,251
probability, 147
power,108,155,563
precision, 155
prediction, 17
interval, 90,110
predictor, 15
principal components, 505
analysis, 11,254–260,504–515
loading vector, 505,506
missing values, 11,254–260,280–
282,504,515
score vector, 506
scree plot, 514–515
prior
distribution, 251
probability, 146
probability density function, 477,
478Index 603
projection, 336
cost complexity, 336
weakest link, 336
Publication data set, 12,482–
487
Python objects and functions
%%capture ,
543
anova(),313
anova_lm() ,125,129,312,
313
axhline() ,122,551
axline() ,121,129,329
BART(),362
biplot,537
boot_SE() ,223
boxplot() ,62,66
bs(),315,327
BSpline() ,315
clone(),222
columns.drop() ,122
compute_linkage() ,544
confusion_table() ,176
contour() ,
357
CoxPHFitter() ,491
cross_val_predict() ,270
cross_validate() ,218,219,
226
cumsum() ,539
cut_tree() ,545
data.frame() ,227
Dataset,440
decision_function() ,392
DecisionTreeClassifier() ,
354,355
DecisionTreeRegressor() ,354
def,121
dendrogram() ,544
describe() ,62,66
dir(),116drop(),179
dropna() ,279
enumerate() ,217
export_text() ,356
export_tree() ,365
fit(),118,181,218
fit_transform() ,119
for,59
GaussianNB() ,461
get_influence() ,121
get_prediction() ,120,314
get_rdataset() ,
361
GradientBoostingRegressor() ,
354,361
GridSearchCV() ,276
groupby() ,50,449
ISLP.bart ,362
ISLP.cluster ,544
json,437
KaplanMeierFitter() ,502
keras,437
KFold(),219
KMeans() ,542,543
Kmeans() ,542
KNeighborsClassifier() ,132
lifelines ,490
LinearDiscriminantAnalysis() ,
174,179
LinearGAM() ,317
LinearRegression() ,280604 Index
load_data() ,117
loc[],58,59,177
log_loss() ,355
LogisticGAM() ,323
logrank_test() ,490
lowess() ,324
matplotlib ,48
max(),66
mean(),48
median() ,197
min(),66
MNIST(),444
ModelSpec() ,seemultipletests()
multipletests() ,586
multipletests() ,583,589
multivariate_logrank_test() ,
496
NaturalSpline() ,317,319
ndim,42
nn.RNN() ,461
normal() ,132,286,555
np,seenumpy
np.all() ,54,180
np.allclose() ,190
np.any() ,54
np.arange() ,51
np.argmax() ,122
np.array() ,42
np.concatenate() ,133
np.corrcoef() ,46,554
np.empty() ,224
np.isnan() ,268
np.ix_() ,53
np.linalg.svd() ,539
np.linspace() ,50
np.logspace() ,318
np.mean() ,47,176
np.nan,60
np.nanmean() ,541
np.percentile() ,228
np.power() ,219
np.random.choice() ,553
np.random.default_rng() ,46,
47
np.random.normal() ,45
np.sqrt() ,45np.squeeze() ,457
np.std() ,47
np.sum() ,43
np.var() ,47
np.where() ,180
ns(),317
numpy,42,555
os.chdir() ,55
outer(),219
pairwise_distances() ,554
pairwise_tukeyhsd() ,587
pandas,55
params,175
partial() ,555
pd.cut() ,315
pd.get_dummies() ,314
pd.plotting.scatter_matrix() ,
62
pd.qcut() ,314,315
pd.read_csv() ,55,556
pd.Series() ,62
Pipeline() ,275
plot(),48,61,356,490
plot.scatter() ,120
plot_gam() ,321
plot_svm() ,398
PLSRegression() ,282
poly(),125,313,327
predict() ,
174,181
random() ,555
RandomForestRegressor() ,354,
360
read_image() ,436
reindex() ,461
reshape() ,43Index ,60
rng.standard_normal() ,60
roc_curve() ,392
RocCurveDisplay.from_estimator() ,
387
savefig() ,50
scatter() ,49,61
scipy.interpolate ,315
score(),218,461
seed_everything() ,436
set_index() ,57
set_title() ,49
set_xlabel() ,49
set_xscale() ,198
set_ylabel() ,49
set_yscale() ,198
shape,43
ShuffleSplit() ,219
sim_time() ,495
SimpleDataModule() ,441
SimpleModule.classification() ,
446
SimpleModule.regression() ,273,277
skl.ElasticNet.path ,274
skl.ElasticNet.path() ,273
sklearn,118,181
sklearn.ensemble ,360
sklearn.linear_model ,267
sklearn.model_selection ,267
sklearn_selected() ,269
sklearn_selection_path() ,
270
sklearn_sm() ,271
skm.KFold() ,271
skm.ShuffleSplit() ,174,192,226
sm.Logit() ,174
sm.OLS() ,118,129,174,319StandardScaler() ,185,438,
537,555
statsmodels ,116,173
std(),186
Stepwise() ,269
str.contains() ,59
subplots() ,48
sum(),43,268
summarize() ,118,129,223,
226
summary() ,
387,389–391,393
SupportVectorRegression() ,441
to_numpy() ,437
torch,435
torchinfo ,436
torchmetrics ,436
torchvision ,436
ToTensor() ,444
train_test_split() ,186,216
transform() ,118,119
ttest_1samp() ,584
ttest_ind() ,590
ttest_rel() ,587
tuple,43
uniform() ,555
value_counts() ,66
var(),536
variance_inflation_factor() 589
quadratic, 98
quadraticdiscriminantanalysis, 4,
135,156–157,164–167606 Index
qualitative, 2,27,91,135,167,
202
variable, 91–94
quantitative, 2,27,91,135,167,
202
radial kernel, 381,383,390
random forest, 11,331,343,346–
347,354,360–361
random seed, 46
re-sampling, systems, 516
rectified linear unit, 401
recurrentneuralnetwork, 416–427
recursivebinarysplitting, 334,337,
338
reducible error, 17,90
regression, 294–295
polynomial, 230,240,406,484–
486
ReLU,401
resampling, 201–214
residual, 71,81
plot,100
standarderror, 75,77–78,88–
89,109
studentized, 104
sum of squares, 71,79,81
residuals, 263,348
response, 15
ridgeregression, 11,240–244,385,
484
risk set, 473
robust,374,376,535
ROC curve, 154,382–383,486–
487
R2,77–80,88,109,238
rug plot, 314
scale equivariant, 242
Scheffé’s method, 572
scree plot, 512,514–515elbow,514
semi-supervised learning, 27
sensitivity, 153,155,156
separating hyperplane, 367–372
Seq2Seq, 425
sequence, 41
shrinkage, 230,240,484–486
penalty, 240
sigmoid, 401
signal,252
signature, 45
singularvaluedecomposition, 539
slack variable, 375
slice,51
slope,71,72
Smarket data set, 2,3,12,173,
184,196
smoother, 308
smoothing spline, 290,300–303
soft margin classifier, 372–374
soft-thresholding, 250
softmax, 145,405
sparse,244,252
sparse matrix format, 414
sparsity, 244
specificity, 297,301
regression, 289,294–299
smoothing, 30,290,300–303
thin-plate, 22
standard error, 75,101
standardize, 185
statistical model, 1
step function, 111,289,292–293
stepwise model selection, 11,231,
233
stochastic gradient descent, 429
string,41
string interpolation, 490
stump,349
subset selection, 230–240
subtree, 336
supervised learning, 25–27,261
support vector, 371,376,385
classifier, 367,372–377
machine, 5,11,24,377–386Index 607
regression, 386
survival
analysis, 469–502
curve,472,483
function, 472
time,470
synergy, 70,89,95–98,110–111
systematic, 16
t-distribution, 77,165
t-statistic, 76
t-test
one-sample, 583,584,588
paired,587
two-sample, 28
set,30
statistic, 559
theoretical null distribution, 577
time series, 101
total sum of squares, 79
tracking, 311
tree,331–342
tree-based method, 331
true negative, 155
true positive, 155
true positive rate, 155,156,382
truncated power basis, 296
Tukey’s method, 571,585,587
tuning parameter, 187,240,484
two-sample t-test,474
Type I error, 155,562–565
Type I error rate, 563
Type II error, 155,563,568,584unsupervisedlearning, 25–27,255,
260,503–552
USArrests data set, set, 202
approach, 202–204
variable, 15
dependent, 15
dummy, 91–94,97–98
importance, 346,360
independent, 15
indicator, 35
input,15
output,15
qualitative, 91–94,97–98
selection, 86,230,244
variance, 18,31–34,159
inflation factor, 108–110,123
varying coefficient model, 305
Wagedata set, learner, 343
weakest link pruning, 336
Weeklydata set, 12,196,226
weight freezing, 412,419
weight sharing, 418
weighted least squares, 103,304
weights, 404
with replacement, 214
within class covariance, 150
wrapper, 217